{"meta":{"title":"虚空之地","subtitle":"空白ならば 何者にもなれる","description":"自由之地 创造一切","author":"逯晓零","url":"http://example.com","root":"/"},"pages":[{"title":"文章","date":"2022-10-14T23:47:11.713Z","updated":"2022-10-14T23:47:11.713Z","comments":true,"path":"articles/index.html","permalink":"http://example.com/articles/index.html","excerpt":"","text":""},{"title":"关于","date":"2023-11-23T05:45:35.390Z","updated":"2023-11-23T05:45:35.390Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人画像普普通通的求学者。什么都想学，却什么也学不好的人。基本什么都有涉及，却都学的不够深。尽管如此，我也从不放弃，不撑到最后一刻决不罢休。对任何东西都要一探到底，以满足自己低廉的好奇心。相信知识的力量，希望以知识来改变自我。……勤勤勉勉的打工人，拿着微薄的收入维持着生计。但这又何妨呢？只要我还能活下去，还有能不断探索的东西，我就毫无畏惧。我一生活着的目标就是追寻那永远也得不到的东西。因为这意味着我一直都有坚强下去的动力。……无知天真的博爱者。就算知道世间充满着险恶与危险，也要相信“人性本善”。就算经历过无数次的算计与阴谋，也依旧理解着他们的苦衷与难处。在无人之地放飞自我，热爱世间一切事物。热爱祖国，并对美好未来的承诺给予最多的信赖。 基本信息难道真的有什么值得说的基本信息吗？比如2002年08月23日于江西萍乡生，又或者低质量技术宅男，还或者武汉普通211本科毕业。爱好啊？好像除了学习新知识，就是二次元了。日常作息也十分的优秀，不论是早睡早起，还是一日三餐，这应该算是健康的生活方式了吧。嗯，也不知道有什么好说的。 网址推荐导航站:https://www.tboxn.com/ 各种网站的导航 十年之约:https://www.foreverblog.cn/ 各种博客的聚集地 萌娘百科:https://mzh.moegirl.org.cn/ 最喜欢的二次元百科全书 SciHub:https://www.scihub.net.cn/ 最爱的学术导航 更多网址等待解锁 ## 联系方式 这是静态页面，无后端服务，所以想交流可以加我微信哦。 ## 免责申明 本网站所收集的部分公开资料来源于互联网，如果您发现网站上有侵犯您的知识产权的作品，请与我取得联系，我会及时修改或删除。 捐助在这里你可以请作者吃一顿饭，我在这里对此表示最诚挚的谢意。不过这么隐蔽的地方，大概也没什么人可以找到吧。"},{"title":"检索","date":"2023-11-23T05:03:45.440Z","updated":"2023-11-23T05:03:45.440Z","comments":true,"path":"retrieval/index.html","permalink":"http://example.com/retrieval/index.html","excerpt":"","text":"这里算是废弃了，几乎没有用 标签 分类"},{"title":"","date":"2023-10-13T11:24:46.828Z","updated":"2023-10-13T11:24:46.828Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":"友情链接 一个小小的圈子，却充满着无限的魅力 去发现吧，去寻找吧 世间仍有许多美丽的地方等待你的探索 刷新随机排序 更多友链待添加…… 导航:https://www.tboxn.com/ 机场:https://clashx.pro/ Tracker:https://trackerslist.com/ 小说漫画源:https://www.yckceo.com/ 搜书:https://xmsoushu.com/ 书籍:https://yibook.org/ 日G:https://lspgal.top/ 动漫:http://www.yinghuacd.com/ 学术:https://www.scihub.net.cn/ Sage:https://sagecell.sagemath.org/ function shuffle(a) { var len = a.length; for(var i=0;i> 0; var t = a[end]; a[end] = a[index]; a[index] = t; } return a; }; var links=[[\"https://www.fghrsh.net\", \"FGHRSH'BLOG\"], [\"https://zhangshuqiao.org\", \"米米的博客\"], [\"https://www.imaegoo.com\", \"iMaeGoo'sBlog\"], [\"https://www.zeromes.cn\", \"NoWhere\"],[\"https://www.perfare.net\", \"Perfare'sBlog\"],[\"https://www.tangyuxian.com\",\"糖羽仙\"],[\"https://blog.schnee.moe\",\"devseed\"],[\"https://jwt1399.top\",\"简简\"],[\"https://wmathor.com\",\"Mathor\"],[\"https://plumz.me/\",\"plumlis\"],[\"https://suzumiyashirone.github.io/\",\"suzumiyashirone\"],[\"https://blog.amamiyayuuko.com/\",\"Yuko\"],[\"https://luojia.me/\",\"佳佳酱\"],[\"https://kokic.github.io/\",\"Hydrangea\"]]; links=shuffle(links); var mydiv = document.getElementById(\"link\"); for(var i=0;i < links.length;i++) { var linkNode = document.createElement(\"a\"); linkNode.target=\"_blank\"; linkNode.href = links[i][0]; linkNode.innerHTML= links[i][1]; mydiv.appendChild(linkNode); mydiv.appendChild(document.createElement(\"br\")); }"},{"title":"绘梦","date":"2023-09-13T08:53:27.960Z","updated":"2023-09-13T08:53:27.960Z","comments":true,"path":"dream/index.html","permalink":"http://example.com/dream/index.html","excerpt":"","text":"由于框架的限制 我们将在这里完成此部分内容"},{"title":"标签","date":"2022-10-14T23:47:11.729Z","updated":"2022-10-14T23:47:11.729Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-10-14T23:47:11.713Z","updated":"2022-10-14T23:47:11.713Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-11-30T11:04:49.087Z","updated":"2023-11-30T11:04:49.087Z","comments":true,"path":"test/ejs.html","permalink":"http://example.com/test/ejs.html","excerpt":"","text":"主要用于嵌入html 看还可以嵌入代码 **不能嵌入markdown** 但是有标签 $(document).ready(function(){ $(\"button\").click(function(){ //$(\"#hidebtn\").hide(); $(this).hide(); }); }); 消失 不转义 可转义又粗又斜 sssMarkdownsss"},{"title":"Markdown测试集","date":"2023-11-30T11:06:32.371Z","updated":"2023-11-30T11:06:32.371Z","comments":true,"path":"test/md.html","permalink":"http://example.com/test/md.html","excerpt":"以下是一些测试实例 标题测试链接斜体 粗体 又斜又粗html嵌入 居左文本 居中文本 居右文本 换行 换行后 我是下划线 引用第一种 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 第二种 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 第三种 NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 第四种 Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 特殊功能_.compactUnderscore.js12_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);=&gt; [1, 2, 3] content 用于真正嵌入html，特别使用swig 文本 数学简单 c=±a2+b2c = \\pm\\sqrt{a^2 + b^2}c=±a2+b2​ 利用 c=±a2+b2c = \\pm\\sqrt{a^2 + b^2} 另一版本 最后 更多没用部分","text":"以下是一些测试实例 标题测试链接斜体 粗体 又斜又粗html嵌入 居左文本 居中文本 居右文本 换行 换行后 我是下划线 引用第一种 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 第二种 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 第三种 NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 第四种 Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 特殊功能_.compactUnderscore.js12_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);=&gt; [1, 2, 3] content 用于真正嵌入html，特别使用swig 文本 数学简单 c=±a2+b2c = \\pm\\sqrt{a^2 + b^2}c=±a2+b2​ 利用 c=±a2+b2c = \\pm\\sqrt{a^2 + b^2} 另一版本 最后 更多没用部分 问题 问题 Post not found: hexo-4-released bold custom title false 外部功能问题 问题 问题 问题 问题 text url [external] [title] 问题 问题 问题 问题 问题 问题 问题 问题 文段测试ejs水水水水"},{"title":"","date":"2022-10-14T23:47:11.729Z","updated":"2022-10-14T23:47:11.729Z","comments":true,"path":"test/index.html","permalink":"http://example.com/test/index.html","excerpt":"","text":"这里用来测试Markdown与ejs渲染能力。 Markdown ejs"},{"title":"深网——永远无法摸透的存在","date":"2021-11-05T08:57:50.000Z","updated":"2022-10-14T23:47:11.719Z","comments":true,"path":"s/fbfe5ce1.html","permalink":"http://example.com/s/fbfe5ce1.html","excerpt":"","text":"我不适合活在现实里，我只是一个孤独的技术宅。所以我会说出这样的话：”大家都在虚拟的世界了，一片和谐的现实已经难以找回了。”不过更让我难受的事，互联网也整顿的和现实差不多，无非就是披上了一层虚拟的外皮罢了。现实有无法摸透的人心和背后难以想象的故事，互联网也同样存在巨大的深网与庞大的利益链条，加上其虚拟性，就真得变得比现实还要复杂了。 举个比较通常的例子就是，比起开源免费软件，人们更愿意去使用有可能被注入病毒的商业软件的破解版，有时其实怪不得他们，我更愿意相信他们是不良广告的受害者。 其实我更想说的互联网的一条灰色产业链——黄赌。没有毒哦！大家都是老司机了，都应该知道这两个为什么要一起说了，需求量庞大，怎么都是禁不住的。我想先把一段我看过的文章先摘录过来(怕以后没了) 相信很多男同胞都曾经或多或少地接触过同城交友类的网站，网站上一个个美丽的身影甚至让目不暇接的男同胞们激动不已。然而这些美丽的身影好像总是给人一种可见不可求的感觉，她们真的是真实存在的吗？我们有一个学员曾经从事过交友软件的开发，同城交友网站的真实情况，其实和大家想象的情况是有一些差异的： 这个程序员学员最早是高中时候开始做IDC域名注册，以及真正的B2C电子商务的，而不是淘宝店。那时还是2006年。后来小打小闹的也赚了点钱，偶尔一次接到了网站开发的活。当时觉得这可比卖域名和服务器空间，一个利润只有10到20元要赚钱的多。 很惭愧的告诉你，他接到的第一个网站开发是做的内涵网站，一个外国的客户让他开发的，价格也不贵，不到1千块钱，很廉价。但对于高中狗来说，已经让他高兴的屁颠了。后来那个客户用他的程序一个月就赚了1千美金的广告费。 程序很简单，赚钱模式也很简单，网站会千方百计赚取所有访客带来的经济效益。具体是：首页添加一个播放器，视频加载到99.9％提示浏览器版本低，然后系统推荐一个浏览器继续观看。用户安装了火狐浏览器后，网站收益0.1-8美金。没错！是美金。 然后，这时候网站会直接让访客从口袋里掏钱了，这是第二次榨取：那时候流行SP短信增值业务，通过广告联盟吸收话费。相信你们都遇到过。 就这样，那年很多人用这种最简单的模式买了房开了宝马，当然程序是我这个学员开发的，他依然没钱，那年他高三学生狗自然没这个勇气去做这件事。 在写这篇文章之前，以前有一个用户刚刚联系我的学员了，因为他的例子很特别，所以我才把他重点写一下。 相信很多人都通过广告或者QQ群收到过类似内涵交友的网站广告。说是交友，点击进入一看就是类似约约约的交友。 注册一个账号后，时不时有同城本地的美女给你打招呼，或者发暧昧信息。如果需要查看联系方式，就需要付钱充值金币或者办理VIP会员了。一般VIP的种类有一个月、半年、一年和永久；价格也在100元到1000元不等。 交友网很活跃：日记、约会记录、图片、还有本地的美女给你发消息；个人状态不是单身就是想找人喝一杯，或者进一步发展也可以。嘿嘿嘿，你是不是动心了？ 如果你下半身激动了，脑袋被荷尔蒙装满了，那么你就是个被宰的凯子！ 这种程序的规则是这样的：女会员有绝对权限，男会员没有权限。也就是说，你注册男会员是不能查看消息的，无法直接与女会员产生对话。但女会员可以给你发消息，要是想看你就付费吧。 但是，这不是高潮…… 高潮在于，让你激动的并不是真实的女会员，他会增加一个计划任务的程序，批量注册很多美女会员的小号，全国各地都有，批量换头像，签名……这些是小意思，程序还可以无人值守全自动给注册的男会员发消息，男会员地址假如是上海地区，那么大部分发消息和打招呼的女会员就是上海的。 你会觉得这个网站人气这么旺啊！当你有这个错觉后，你步入凯子的行列只有一步之遥了。 凯子也分为好几类，大多数是不愿意花钱又想寻找刺激的屌丝凯子，还有一部分是几百块不在乎只要能约到。这时候程序设计上要兼顾这些人群。不愿意花钱的好办，你得帮着网站推广多少人之后，才能获得少的可怜的金币邮票或者临时VIP体验权限，以此来减少网站推广成本。 一般推广10个人注册，网站推广成本在10元到200元之间，你去做免费推广网站就零成本了。第二类用户直接就付费了，一般都是年费或永久。假设网站一天只有一个人付费，一次500元，一个月就是1万5的盈利；更别说一天10个、20个…… 这种网站一般都舍得打广告，你现在去百姓网啊、58同城去看看，虽然现在的人也没以前那么傻了，但还有很多这样的广告。因为实在是暴利的很，很多这类网站有自己的运营团队。 会员也从最开始这种简单模式发展成稍具规模了，后来有个别做得好的，就不需要用无人值守的马甲女号了，因为女性会员通过积累已经达到了规模，摇身一变成了正规的交友中心，也就真的能约到了，我们就不具体点名是哪个网站了。 网站为了规避法律风险是禁止露点明确禁止ONS的，但是你懂得…… 我的这个学员是不参与运营的，他只是负责开发维护这些网站。并且收取一定的费用。比如某个网站需要新功能了，某些网站数据有问题了，充值充不上了，支付宝接口变更了，自动计划任务不运行了或者感觉不真实有更好的方案了等等。 所以网站站长们也会告诉他运营过程中遇到的问题，告诉他如何改进程序，以及会员情况和充值情况等等，这些他都是可以通过数据库看到。不过，他仍然是个穷逼。我在之前讲过，商人是从来不种西瓜的，商人只是西瓜的搬运工。很明显，这个学员以前是种西瓜的，不是卖西瓜的。 这些站长们每天做的并不是网站的更新和维护上，他们主要做的工作就是推广。Googleadwords，百度竞价，CPA广告投放，弹窗广告收购，流量购买。然后睡着觉就能赚钱……他们问我的学员为什么不做，他说他没时间，也没这个头脑，其实最重要的是他怕给自己带来麻烦…… 这些人实际上都是随意圈钱，凯子们被圈了钱也不知道是怎么被圈的，明明有很多女性会员，明明也充值了，但是发了消息女会员不理睬，或者理睬了但约不出来。为什么就约不到妹纸呢？那你就得在自己身上找原因了。你肯定想不到是网站做了手脚…… 哈哈哈！！！ 后来程序又升级了。让数据变得更加真实。不但有女号给你打招呼，而且你注册了会员之后还能跟你聊两句。最开始调用的是聊天机器人的接口，这个比较搞笑。 傻逼都知道这是机器人聊天的，后来程序又改进了。后来改进的是人工手动回复，这样就更真实了。 站长后台可以集中显示所有真实的会员给美女发的消息，这时候只需要逐条回复就可以了，更加真实，完全是真人聊天。有时候会处理几百个人的聊天信息。 所以VIP会员感觉到确实是真实的会员，但是话很少，比较难泡（一般陌生人聊天，妹纸不都是话很少么？更加真实了）。但凯子们并不知道的是，有人控制着聊天，跟你聊天的很可能是站长，或者站长从哪里雇来的大学生而已…… 也就是说你永远约不到妹纸。 哈哈哈哈…… 再说说主流交友相亲网站，也就是严肃相亲网。珍爱某某，世纪某某，这些网站我保证10年前最开始运营的时候也会用到同类型的手段的。只不过后来从良了，并且越做越大、越做越正规了，当然这是后话了。 做内涵交友的网站，据我知道的也有做起来后就弃恶从良的。因为规模上来了就不需要靠这些小伎俩赚钱了。一个月仅仅广告费最起码都够你买辆奔驰了。 有钱的人，虽然做的是正经生意，哪一个又能保证不是靠点小门道白手起家的呢？很多有钱的人最开始的钱也并不是很白,否则也不会成为暴发户。赚钱需要智力、胆识和手段，普通人对金钱从来不缺乏渴望，只是让他们去实现梦想时，他们总是会因为总总原因望而却步；而强者一旦发现机遇，则直接开干，这就是普通人和有钱人最大的差别。 汇人之智,这就是同城交友的真实内幕，看完你还约吗？ 其实还有些图片，只是懒得搞，文字的提取本来就够麻烦了。不过作者对它学员的一句话，我觉得值得一写——“聪明的人把重点放在营销上，他们只关注发广告收钱，而你却把重点放在技术上，你把技术做得再牛逼，你也只是为别人赚钱，并且你还以为自己会技术而洋洋得意。因为你是一个傻逼，所以导致你是一个穷逼。” 我自己也曾经试过水，具体怎么做其实挺难的。自己找的话，因为国家的各种政策与正义人们，还是需要许多手段的，有时甚者只能在被骗的层面。有时就是真正开源分享者被资本主义利益结构的墙给挡住了。比如你经常的某些行为，就会被认为是潜在用户被盯上。 可能是我误会了，不过就当那么一回事吧。可惜我不是业内人士，进不了营销方，不过我确实当过推销方，在什么都不知道的情况下白打工。其实营销方或许和我们一样，信不过陌生人，比较核心的工作肯定都不可能是外人。 总之，就是比较失败吧，但没完全失败，还算是可以。说了这么多，我其实只想表达自己的无奈。一般现实不行的时候，我们就只能去依靠虚拟了，但与现实同样美好正常的世界，又怎么好提出”异类”的想法呢？ “沉默的大多数”我很喜欢的一句话。类似地，我得到人群分类的说法。你在网上看到的，只是那些会在网上表达的人的想法，当然如果有个公理承认人都会表达自己，就另当别论了。 深网难以捉摸，不要以为自己看了许多东西，就觉得自己站在人类至高点了，表面上或许表现得挺谦虚的，但事实如何我也不知道。总之，记住，你所看到的网络只是现实的一部分，还有许多深网之下的东西，和沉默大多数的想法，你怎么也得不到的。"},{"title":"","date":"2022-10-14T23:47:11.729Z","updated":"2022-10-14T23:47:11.729Z","comments":true,"path":"test/jquery.min.js","permalink":"http://example.com/test/jquery.min.js","excerpt":"","text":"/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license //@ sourceMappingURL=jquery.min.map */ (function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p=\"2.0.3\",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^(?:\\s*()[^>]*|#([\\w-]*))$/,C=/^(?:|)$/,k=/^-ms-/,N=/-([\\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener(\"DOMContentLoaded\",S,!1),e.removeEventListener(\"load\",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if(\"string\"==typeof e){if(r=\"\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for(\"boolean\"==typeof s&&(l=s,s=arguments[1]||{},a=2),\"object\"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger(\"ready\").off(\"ready\")))},isFunction:function(e){return\"function\"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(\"object\"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,\"text/xml\")}catch(r){t=undefined}return(!t||t.getElementsByTagName(\"parsererror\").length)&&x.error(\"Invalid XML: \"+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf(\"use strict\")?(t=o.createElement(\"script\"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,\"ms-\").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?\"\":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if(\"number\"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return\"string\"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if(\"object\"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),\"complete\"===o.readyState?setTimeout(x.ready):(o.addEventListener(\"DOMContentLoaded\",S,!1),e.addEventListener(\"load\",S,!1))),n.promise(t)},x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v=\"sizzle\"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1"},{"title":"动态","date":"2022-10-14T23:47:11.729Z","updated":"2022-10-14T23:47:11.729Z","comments":true,"path":"words/index.html","permalink":"http://example.com/words/index.html","excerpt":"","text":""},{"title":"我所厌恶的学术现状","date":"2021-12-05T14:04:50.000Z","updated":"2022-10-14T23:47:11.713Z","comments":true,"path":"s/7f83b4b3.html","permalink":"http://example.com/s/7f83b4b3.html","excerpt":"","text":"或许我看不到它的全貌，存在偏见，但在我眼里它就是如此的丑陋。 又到了写论文的时间，说来还真实讽刺，我全部自己手写的文章，有超过16%的查重率。有些什么呢？比如，我按照老师要求写的书本的基本信息，还比如，我随手写下的一些名言。难道是我这免费的查重不行吗？还是因为只是我不会用这复杂的查重体系呢？我不太理解的是大多偏于文系的课程都喜欢要我们写一篇论文做为作业，难道它们真的就没有可以写的作业了吗？想想好像还真是这样呢！论文什么的也太廉价了吧，随便一个课程都要求学生写论文了，再说这写出来了真的是论文吗？说难听一点，怕不是学术垃圾吧。更无语的是还有模有样的要我们交查重报告，不用不知道一用吓一跳，查重这东西简直恶心透了，先不说各种分层的数据库来提供不同的服务套餐，更有如降重这种增值服务，连降重还分层级收费的。至于这样网站的数量嘛！不用说，多的要命。就拿这降重来说，通过改变句式使得在保持原意的基础上降重，还分智能降重和人工降重等。我想说，这样到底有什么意义，这不就是为了降重而降重。更别说这本来就离谱的查重系统，文系上出现些重复的语句本来就是再正常不过的事吧。可惜我没有才能，不然我真想写篇数学论文来看看这优秀查重系统到底有几把刷子，但数学类的课程并不会给我这样的机会呢？说到这里，我又想到一个更恶心的东西，有时我想百度某个知识，比如最近我收的的”羽毛球的基本步伐”前面的结果竟然都是某某题库网的题目，还有收费查看答案和解析。我又想说两个变质的玩意了，百度文库和CSDN的文件库，更离谱的是它们中有些直接拿在别处(如github)免费的东西，放在这些地方收费下载，还处在搜索的前面。说起这些，我又想起了知网，万方，维普这几大恶心的巨头，不说里面知识的质量如何，竟然还以文章为单位进行收费下载，连预览都没有。但不知有多少人知道arXiv这个真正的知识宝库，免费而且强大。其实我多多少少都意识到了，它们就是来骗本科生的，本科生越来越同一化，专业大部分相似课程，一直都在学术垃圾里徘徊，真正有用的东西还真没什么。恶心归恶心，但说到底这些本身就是以拿来赚钱为目的的，专门用来骗人傻钱多的人的，背后仍然还是有许多免费开源知识的存在的，如gitee，arXiv等，还有如阿里学院的免费课程等，我们可以确实的学到知识，不仅免费质量也不低，怎么也比骗子机构好许多倍。算了，就说到这里了吧。或许我只是一个没有见识的土狗吧，但我确实如此地厌恶这恶心的学术现状。"},{"title":"互联网连接不了理解","date":"2021-12-19T03:37:38.000Z","updated":"2022-10-14T23:47:11.719Z","comments":true,"path":"s/b188abf3.html","permalink":"http://example.com/s/b188abf3.html","excerpt":"","text":"当在网上也与人接触时，就会发现互联网还真是一个令人伤心的地方。原神是现在我很喜欢的一款游戏，我虽然每天玩的不多，但也是在玩的，学习工作累了，就会去看看主播，看看二创，但评论这东西真的是乌烟瘴气的，但明理的人还是很多的，就先抄一篇文章吧，虽然挺旧的，但现在才看到确实有点可惜 这篇其实很早以前就准备写了。但是因为各种事情耽误了许多。最重要的一个原因是，在稻妻池子期间写这个，是很容易被攻击的。特别是心海池子的时候，友商水军正是各种带节奏和拱火，当时如果发帖，只会是被喷成狗。本篇分四部分。分别是——第一部分，洗心海。二、整个稻妻剧情梳理。三、物哀之美四、米哈游把日本文化塑造的这么好，和我要说的国际政治，中国的对外文化输出有什么关系？有些长，大家可以耐心看。其实给心海人设/剧情洗白这部分，我是准备留到最后，因为这个话题在水军拱火之下，确实很多人都有了固有印象，如果大家先看这标题，恐怕不少人都会直接点关闭，哪怕其他部分写的有道理写的好，也不会看后面的了。但是想了想，如果我说的真的是有道理的，那么就不怕被一眼就反对。如果真的是看到标题就反对，而不去认真看内容，哪怕连基本的阅读和思考都不愿意，那么这样的朋友看不看完，我也无所谓了。心海被带节奏的主要原因，是因为水军要喷也是需要找角度的，需要找“点”。而心海的点相当于其他，是最容易被烘火或者说误导的。那么，在心海池子的期间，在大量水军追求业绩的时候努力烘火的时候说心海的设计，那绝对没好下场。如今，心海池子结束了，我也才敢讨论稻妻。我并没有被虐狂，也无意帮米哈游争取流水，所以拖到了现在。第一部分：给心海洗一洗。心海被很多人诟病。但是我可以肯定的说，其中最开始拱火的，绝对是有水军在带节奏。因为这个角色的塑造也确实有一定的问题，但是无论强度还是人设，其实都是合格甚至优秀的。注意，我说的有问题，不是角色塑造错误，而是一开始米哈游对心海的定位，就不是以“中国玩家”为重心。心海是一个典型的稻妻人。而不是璃月人。米哈游一开始就是准备用心海去征服日本玩家，而基本没考虑到中国玩家是否会喜欢这个角色。所以心海从一开始的人设就是一个从里到外的“日本军师”，从智谋水准、人物性格、人物历史原型、经典战役原型等各方面都是日本的一个兵法家。而不是中国的诸葛亮。所以如果你用中国人的思维方式去看心海，那这个角色是肯定无法被认同的。很多人觉得心海“人设崩溃”，本质上是用自己心中一开始的“中国古军师”的形象去做了一个假定。然后当发现这个角色居然和自己心中的“诸葛亮”不一样的时候，就觉得“人设崩塌”。这也就是很多人觉得心海“人设崩塌”的主要原因。这一点，我之前是不敢说的，因为心海池子的时候说这个，那么我必然成为众矢之的。毕竟，那和利益相关。现在池子结束了，剧情也经过了逐月节和鹤管的两次赞誉，那么正常玩家哪怕心中仍然有当初水军拱火带节奏的固有印象，那么也应该能耐心看完我写的了。为什么心海会让人觉得人设崩溃？很简单，一开始的时候，心海以“救世主姿态”出场，一句：“出来吧，我的伏兵”，把九条的军队打败，许多中国玩家心中，就把这个妹子“假定”成了诸葛亮那样的名军师。基本上，包括我在内，当时都期待的是一个娘版诸葛亮。这样的或者这样的。然后……忽然发现，心海却是一个被八重智商碾压，被愚人众坑，间接害死部下，甚至还社恐的妹子……当时就崩了。“就这？还军师？米哈游退钱！”我一开始也这样想的，但是后来我在准备写稻妻其他人的时候，看了几天日本的战国史，我忽然发现……或许一开始很多预期中的“稻妻诸葛亮”就是一个错误。因为心海的原型不是诸葛亮，而是竹中半兵卫（竹中重治）。对日本历史不了解的人恐怕不知道竹中半兵卫是谁。就简单点这么说吧，竹中酱基本上就是绝大部分日本战国游戏里智力最高的那一档。史载竹中半兵卫自幼饱读兵书，且容貌俊美。日本史书里记载他“智谋过人，而且性情温和、毫无野心。”永禄四年，六天魔王信长进攻稻叶山城的时候，竹中半兵卫在这次战役战中巧妙地运用兵书上记载的十面埋伏阵让织田信长几乎仅以身免。后来还有一次高光点是靠16个人突袭王城重地，逆袭翻盘。竹中重治喜欢看书写书，不喜欢政治管理，不喜欢和人打交道，也对权力没兴趣。看——长得好看、不喜欢和人交往、战绩里最扬名的一次，就是靠“伏兵”（还有一次是16个人夺城），没权力欲，人设是不是挺重合的？竹中半兵卫的法名是“禅幢寺殿深龙水彻大居士”，心海是水元素。在《信长之野望》系列的某个游戏里，竹中的一个技能就叫“龙之沉眠”。心海命座叫“眠龙座”。最有意思的，竹中这个人，有点像三国演义里的郭嘉，都是历史战绩很少，但是游戏里很牛逼。不过竹中很喜欢写书，什么《丰鉴》、《土歧斋藤军记》、《美浓诸国旧记》等写了不少。在日本那地方来说，能写这多字的人很少了。有人可能要说了“那锦囊是怎么回事”？首先，在日语版本里，心海给的不叫锦囊，而是“虎の卷”。（日本角色以日本为原稿我觉得很合理）然后，中国的军师是玩言简意赅，但是日本的特点是什么？是匠人精神。所以说实话，日本军师用厚厚的书本记载“锦囊”，我觉得很合理，很契合，甚至这么说，日本人匠人精神如果不把锦囊写个几千几万字出来，都不好意思说自己有匠人精神。竹中半兵卫出道就是靠“伏兵”一战获得“名军师”的美誉，（出来吧，我的伏兵）第二次辉煌时刻是16人夺城，突袭稻叶山，斩斋藤飞驒守。（突袭天守阁）然后……这人就没什么特别牛逼的地方了。社恐，不爱和人交际，喜欢看书写书，英年早逝还留下好几本书（虎之卷），做事很认真。所以……如果国内玩家把对心海的期待从“诸葛亮”的模样换成竹中半兵卫……那么人设还“崩”吗？别说崩了，简直稳的一批好不好！什么？国人不喜欢就是失败？那顺便说一下，日本心海池子流水超过钟离复刻。可见日本人完全认可了心海这个稻妻军师。中国人不认可心海的“军师人设”那才是正常，因为心海是稻妻军师，如果一个中国人认可了稻妻风的军师，那才是有问题。至于强度……目前NGA里深渊队伍里最火的是神罗天征，也就是神里-罗莎莉亚-叶天帝-真珠之握（心海）。（注意，我说的是最火，不是最强。但是如果真的弱，那也不可能火起来。哪怕是争议，但是能被用来讨论“是不是最强”，就已经说明至少具备一定的强度了。能用来和T0队伍讨论，就已经说明了心海的强度。）这个队伍真的好用，综合强度在神猫温莫之上，而且更稳定，更安全。作为水奶，无论是挂水能力、副C能力还是治疗能力，心海的价值都是毋庸置疑的。从目前NGA的数据来看，心海肯定谈不上人权卡（你一个社恐宅女凭什么人权卡？），但是强度绝对合格。不过我向来对强度是不喜欢讨论的，就不多说游戏强度了。总之，心海无论在人设剧情还是强度，其实认真说起来，是没有什么问题的。水军带出来的节奏一贯如此。甘雨池子说是冰安柏，万叶池子说是小砂糖，宵宫池子喷宵宫，心海池子喷心海。然后池子过去了，水军撤退了，风气就自然回归了，评价自然客观了，只留下一堆相信了水军言论现在又拉不下面子的还在坚持。这些玩家因为之前喷过，拉不下脸，在池子结束后让人坚持维护自己曾经说过的言论，可转身一看，咦，盟军呢？首领呢？怎么没了？但是……说出去的话要收回多没面子？那不是输了吗？只能一脸懵逼的“孤军奋战”。其实造成这样情况的原因很简单——水军是为了业务，他们的目的就是让米哈游的卡池减少收入。所以卡池时间内，对角色强度的带节奏才是最严重的。不管你信不信，反正只要有人信，不氪金，他们就成功了。可只要当卡池结束，他们不需要继续带节奏了，就自然全体撤退，风评自然就“反转”了。毕竟水军是专业的，人家只为了钱而发帖，又不会真的为了和你争个赢，水军可么那么幼稚。所有喷米哈游剧情的，无论是女士、雷神还是心海，除了水军的节奏党外，其他跟风玩家本质上都只是“角色不符合自己之前期望”而已，是自己脑补过甚，而不是说角色的设计有问题。事实上，别说客观上心海人设并没崩，就算真崩了，目前米哈游一共30多个角色，就算崩了一个又如何？为何有许多人能因为一个角色出问题就说出“米哈游不擅长做故事”“2.1剧情垃圾”“原神剧情弱智”这样的评价？因为一个角色而否定其他所有角色的塑造，因为一段剧情否定整个游戏，我觉得，这应该不是正常人的逻辑。只有站在水军立场，才会玩这种“以点破面”的诡辩技巧，才会“这个人的这点没做好，所以这个人就是垃圾！”“不够5星，就是1星”，客观？不存在的！再说了，这几个角色真的崩了吗？女士的问题我谈过很多，不想再长篇累牍。总之，因为圣遗物故事里的史诗朗诵体就认定女士是“为爱牺牲白莲花”那明显是有问题。就好像如果你只看《荷马史诗》，那宙斯就是伟光正的高贵神灵，可实际上宙斯就是一个荒淫无道色情狂。女士亦如此。杀过魔物的不等于就是英雄，就好像杀了贪官的李逵本质上就是一个滥杀无辜的屠夫而不是侠之大者。很多人所谓的“稻妻剧情崩了”，本质上无非是——“女士居然不是我心中的为爱牺牲好老婆进不了池子大欧派没了所以女士人设崩了！”“雷神居然不是我心中的高贵高冷御姐而是萌系宅女还是个土妹子所以雷神人设崩了！”“心海居然不是我心中的诸葛亮而是没听过名字的社恐日本军师所以心海人设崩了！”恕我直言，只因为角色不符合自己之前的脑补预期而觉得人设有问题，这只是典型的巨婴思维。第二部分：稻妻剧情与日本文化。很多玩家都对稻妻有一个感觉就是：画面好，音乐好，部分剧情也很好，但是就是感觉哪里不对。很多人对稻妻诟病，都是因为在稻妻地图的整体感觉是“总觉得哪里有点不对但是又说不出来”。既然感觉有点不对，那玩家就会觉得“那肯定是哪没做好啊，不然为什么我会感觉不对劲？我只是说不出来，但是那肯定有问题！”于是，各种找原因，有时候自己找不到，看某个水军拱火一下，就觉得“哦，他说的有点道理啊，可能就是这个原因！”然后就跟着一起冲了。事实上，出过国的人都会有这样感觉，当你处于另一个文化圈的时候，就是会有“看起来一切都没问题，就是觉得不舒服”的那种感觉。先做一个结论：中国人不喜欢/看不懂/不接受日本文化氛围，那才是正常。觉得“稻妻剧情感觉有问题”才正常。如果一个中国玩家在稻妻觉得舒服，而在璃月觉得别扭，那才是出了问题。文化的认同度，就是这样的。事实上，如果能抛开主观感觉，纯粹客观的去看整个稻妻，那是没什么问题的。当然，绝对的100%完美是不可能的，毕竟众口难调。但是明显的剧情问题，是真的没有。很多人诟病的心海，事实上就是，在日本，心海爆了。流水比钟离复刻高。而在一些日本主播的眼中，心海PV比钟离PV做的更好……无法理解对吧？我也无法理解为什么会有人觉得心海PV比钟离的PV更好，但是别人就这么觉得的。什么叫文化？这就是“文化”。通俗点就是“刻在DNA里的东西”。看了这个主播的视频我也不知道为什么他能有“如此大量的感动涌上来”，我算是很能共情的，但是我GET不到心海的感动啊！！！心海池子日本最终流水是11.33亿。我心海抽了40发就停手了，帝君我满命。看到心海日本流水居然这么高的时候，我是真的无法理解。顺便说一下，魈在日本是8亿，比心海少3亿多，叶天帝是7亿。凭什么啊？？？然后我看到一个知友说的一句话：“你笑米哈游不会编剧，米哈游笑你不懂日本”。我恍然。米哈游是真懂日本。其实我把整个稻妻的剧情梳理了一下，就发现很合理，没有任何问题。首先，关于很多人说眼狩令虎头蛇尾和雷神不管事一类的问题。原因很简单，因为在剧情逻辑上，眼狩令其实是八重搞出来的。没错，眼狩令的真正幕后黑手，整个稻妻剧情的实际掌控者，就是这个我绝对要抽的腹黑妹子。八重的思维很清晰——500年前主人死了，小主人自闭了500年，那我作为一只好狗狗，为了把自闭症状态下的小主人治好，我什么都做的出来（汪汪队，出发！）。千手百眼神像为什么是八重的模样？眼狩令收集来的百眼，可百眼的意志为什么反而是用来和影的意志对抗？眼狩令对幕府也好对愚人众也好，有什么好处吗？眼狩令的真正受益人是谁？说白了，一开始八重的目的就是找一个可以突破雷电将军的封锁，进入影的自闭空间的人，然后利用百眼的愿望，将影拉出来。眼狩令就算不是八重从头到尾全盘设计的，也绝对是八重推波助澜的。愚人众是八重在利用。稻妻的乱局是八重在推动。天奉行是八重在纵容。神樱雷樱的问题都是八重故意不管让其坐大的。因为只有国家乱了变了（不能永恒了），才有可能让影走出自闭。必须是出现“连雷电将军都解决不了问题”，影才会结束自闭。所以只有当稻妻大乱，才符合八重的利益。因为只有让旅行者参与进来，才可以“用世界之外的力量”达到八重的目的。八重的目的从一开始就十分明确——让影走出来。这个目标，她从来就没变化过。整个眼狩令事件，八重是唯一有“充分目的”的。八重不是人，本质上八重从来不在乎人类的死活。八重的立场，八重的“利益”，就只是她的主人。死几个人算什么？站在八重的立场，稻妻人死再多换雷神复苏都是值得的。《勇敢狗狗不怕困难，哈士奇拆家唤醒自闭症小主人》，这个标题有问题吗？八重是狐狸，狐狸是犬科，你不能指望一只心中只有主人的好狗狗顾及到家里家具的损坏。八重实际上才是稻妻的“神”。其实最明显的是什么？是最后结束的时候，和主角对话引出下一个须弥篇章的，是八重。蒙德剧情，其实是全程温迪在引导。温迪是“幕后黑手”。温迪是最后的剧情对话引导者。璃月剧情，其实全程都是钟离在引导，钟离是“幕后黑手”。钟离是最后的剧情对话引导者。而在稻妻，最后对话的，不是雷神，而是八重。这就足够说明了，整个稻妻剧情，其实全程都是八重在掌控。什么心海，反抗军，九条，三奉行，都是八重手下的棋子。（知道抽什么了吧？）别说傀儡将军，包括影其实都只是一个不管事的呆萌宅女，就算影复苏，稻妻的真正管理者也还是八重。如果玩家把“剧情核心”从影、心海、反抗军这些人身上移到八重的身上，你们就会发现，整个稻妻剧情是完整的，合理的，逻辑自洽的。之所以很多人觉得稻妻剧情有问题，是因为你们连稻妻的“神”，稻妻的“主角”是谁都搞错了。在我之前的回答里，有人说心海地位，我和他聊了几句发现，他居然认为反抗军是主要剧情，心海是主角级别。可……心海不是啊。雷神也不是啊。稻妻真正的主线是八重啊！！连主线是谁都搞错了，能不觉得剧情有问题吗？你们以为雷电将军是稻妻的掌控者？不，稻妻的实际掌控者，是一只“老狐狸”啊。明面上的雷电将军？只是傀儡。狐狸，才是稻妻的王。很多人是想看到一个钟离温蒂这样老谋深算的神，但那不是稻妻了。其实日本玩家就很接受这一点——关于剧情就说到这里，主要是字数太多看影响阅读。其实细致来说还可以写很多，基本上很多水军的喷点都是可以反驳的，但是懒得说太多了。没什么意思，毕竟真正在意剧情的其实也不多。下面我想说的是稻妻里的“日本文化”。稻妻的独特文化，日本的独特文化是什么？那自然是“物哀”。什么是物哀呢?在对日本著名《源氏物语》的解析中，本居宣长对“ 物哀”这个理念有详尽的阐述。用现代的话说，「物，mono」就是认识感知的对象，「哀れ，aware」，是认识感知的主体，感情的主体。「物の哀れ，mononoaware」，就是二者互相吻合一致的时候产生的和谐的美丽，优美、细腻、沉静、直观。（《広辞苑》）换言之，物哀就是情感主观接触外界事物时，自然而然地产生的一种幽深玄美的情感。这种美丽是哀伤的，让人触动心灵的，破碎却又完整，刹那却又永恒。为什么会有这种文化？日本又为什么会发展出这种“物哀”之美的呢？因为日本的地缘天灾多而且资源贫乏，这使得日本人天生带有一种与生俱来挥之不去的不安全感和万事万物即将告别的天然恐惧。这种环境就导致了“物哀文化”的基础。说明一下，中国诗词里的婉约派和日本的物哀是不一样的。中国古代的文学作品，用曹孟德的话来说，是“歌以咏志”。后来唐宋时期科举出来了，所以很多文学作品都是要加上自己的“思想”，以通过这些东西来科举，当官，实现自己的人生抱负。但是日本不是，日本贵族做官基本都是世袭，日本古代没科举（《大宝律令》不算真正的科举）所以日本的古代文学作品，一般和“志向”“教化”这些没太大关系。所以偏“空虚”，没什么实质性的东西。而日本的“文化”来说，又受到神道教影响很大。所谓的神道教风格，说白了就是“一花一生灵一叶一人生”，他们相信万物有灵。无论星辰、河流、花草、树木，无论狐狸，狸猫、蛇虫、花鸟，甚至一个木箱子，一个面具，都可以是一个生命。（其实我也相信万物有灵，个人挺喜欢物哀风的。）所以日本的文化作品，基本上就没有太多的“歌以咏志”，而是纯粹的追求“美感”甚至纯粹浓烈到有点变态的地步……物哀的文学中，经常都是追求“死亡的美”“消逝的美”。“天空好蓝，但是马上要黑了，哀啊，美啊……”“星星好亮，但是摸不到，好清冷，哀啊，美啊……”“樱花好美，但是马上凋零成泥了，哀啊，美啊……”大概就是这样的感觉。万物有灵，万物凋零，万物皆梦幻泡影……万物都会消逝，但是它们的“美”会永远留存。这就是日本的“物哀之美”。有形之物都会消逝，但是它们曾经的美丽却会永恒。这就是日本的独特文化，是整个“稻妻”的文化核心。说真的，米哈游的稻妻做的真好啊。万叶友人的雷神眼是物哀。神里送给旅行者的发簪是物哀。（具体可以看我那篇回答 如何评价《原神》「神里绫华」传说任务「雪鹤之章」？），宵宫的烟花是物哀。花散里的面具是物哀。泽平的衣服是物哀。还有阿瑠的羽毛更是物哀中的物哀。哀，而美。稻妻的剧情，真的把“物哀”做到了极致。那怕是日本本土的游戏，也没几个做到了这点。所以，不管中国玩家是否能GET到稻妻的物哀之美，但是稻妻整体剧情，确实把“日本文化”中美的那一部分做的淋漓尽致。冰也美，火也美。花也哀，雷也哀。且让本文青赋诗一首，送给稻妻群美——《妻の美》雪里神鹤月下鸣，一舞绫华绝世情。夏日宵灯升烟火，刹那芳华梦此行。神樱树里香魂溟，八酝坟前衣冠新。千年轮回一眼望，万般永恒哀雷心。稻妻剧情有问题？不，在我看来，如果不是璃月剧情有高光的帝君，若坨和锅巴，璃月整体剧情其实是被稻妻剧情吊打的。幸好帝君和锅巴的塑造太强了，才勉强打了个平手。之所以很多朋友觉得稻妻剧情有问题，其实不是剧情的问题，而是“文化认同感”的问题。用一个不恰当的比喻，中国国画虽然有留白，但是稻妻“物哀”的留白，比国画的留白多几倍。（顺便说一下，源氏物语有一个章节《云隐》，居然是一个完全空白的章节。）不同的文化风格文化氛围，就导致了国人玩稻妻剧情就会有一种“别扭”的感觉。事实上，这不是说稻妻没做好，而恰恰相反，说明稻妻剧情做的真好。原神当然是中国游戏，但是稻妻的部分，真的是浓郁到极致的和风。之前我有写过一篇“原神2.0-2.1最大的剧情问题，其实是“氛围割裂”。”现在我思考了很久，又和几个在日本留学的朋友交流了后才发现，其实如果站在“和风”的角度，这就不割裂了。在“中国文化”中，死亡、战争、民众的痛苦，这些元素和美丽是属于对立的，可在日本的文化中，却是一体的。中国人对死亡是避讳的，死亡对中国人基本就是痛苦、伤心，而不会是美丽。可对日本来说，死亡才是极致的美丽。所以稻妻的“氛围割裂”，是站在中国文化的角度才割裂，而在日本的 “物哀”文化里，却并不割裂，相反，是一体的。一面和神里约会，一面感受反抗军与幕府的死亡战争，如果站在中国文化的角度那是扭曲，但是日本文化，却会对此表示“啊，在战场约会，与心爱之人诀别，转身就是杀戮，多么美啊！”中国文化认为学知识道德应该控制自己的感情。而宣长则提倡感情不能被知识道德所束缚。说白了，底层贱民死一堆，也不妨碍日本文人们欣赏“美”。你看，这就是“文化”的不同。最后：米哈游把日本文化塑造的这么好，和我要说的国际政治，中国的对外文化输出有什么关系？其实这个问题就几句话。我直接总结吧。这不是虎头蛇尾，而是“言简意赅”~~~或许有猴要说了“你米哈游不是要输出中国文化吗？那把日本文化做这么真实和细致做什么？你个米哈游株式会社！汉奸走狗卖国贼！”可正常人的思维逻辑应该很好理解这个原因——只有当稻妻有足够真实的日本，枫丹有足够真实的法国，蒙德有足够真实的欧美，那么，国外的玩家才会相信——璃月才是真实的中国。如果你只为了中国玩家的“认可”而塑造出“让中国人舒服的稻妻，让中国人认可的心海军师”，那么别人就会质疑“这稻妻根本不像日本”，而只是“看起来像日本的中国文化”。话语权这玩意，在于你的公信度。别人认可你对他们国家的理解，他们才会相信你对你自己国家的介绍。为什么现在崇拜美帝的越来越少了？因为美帝的种种让大家看到他们的双标啊，看到了他们的虚伪啊，所以才不相信他们的“皿煮制油”啊。如果稻妻没做到真实的日本，那么，谁会相信你璃月就是真实的中国呢？只有把稻妻做成被日本人认同认可的日本，把蒙德做成欧美人认可的欧美，把枫丹做成法国人认可的法国。那么，全球的玩家才会相信：“原来原神里的璃月，真的就是中国。原来真实的中国，是游戏里的璃月，而不是我们政府做出的那些虚假宣传。”“原神，是一款如此真实的游戏”。 柏临,原神与国际政治（六）——稻妻的塑造与中国的文化输出 其实有时说的话被很少人看到，确实是件不错的事，特别是心理承受能力不行的人。虽然有时我也喜欢吐槽中国的教育，觉得自己很牛逼应该上更好的大学，又或者更好的大学也不见得多好的”吃不到葡萄说葡萄酸”的心理，但它确实可以筛选人才，工业化地灌输知识，并淘汰不符合要求的人。”总有人觉得自己比985毕业的数值策划团队和剧情策划团队强。”这句话确实很有道理，在互联网下暴露的就更加明显了，在现实生活中，它们接触不到高校，不会有太多感触，自己觉得不行就会觉得985毕业生也不过如此。互联网更让我害怕的是强化个人观点，很久以前我就做过这样的设想，人们往往喜欢点进与自己思想相关和感兴趣的内容，或许没什么，但在大数据的当今，推荐算法实在太可怕了，它会让你在一个领域里越陷越深，再加上别人不断对自己想法的肯定，人还真有可能被互联网塑造。我是因为玩原神才用起B站的，以前我基本没用过有推荐系统的软件，基本就是想知道什么就查什么，然后在查的过程中有更多想知道的东西，以此往复。但B站不同，我基本就是看到什么点什么，不想要的就刷新换一批新的，看起来很人性化，不是很好嘛。但两者的区别在哪里？就是自己学习的过程有充实感还回味无穷，但后者虽说有短暂的欢愉，但看后巨大的虚无感让我想继续看下去，但总是没有感兴趣的东西。我也觉得这确实很玄幻，但这东西还真是太难表达了，总结就是太容易上瘾了，感觉没看到什么却总想去看。接着之前的话题，原神在一周年庆的时候节奏巨大，当然只有圈内的人才有感受，就好比影视圈我什么感受也没有一样。感情波动明显主要还是在评论区，林子大了什么鸟都有，在评论区有时可以看到不少有趣的话和金句，这确实很好，但是坏心情的也是真的不少。有很多人都说，知乎管理严格，所以”猴””水军””反向黑”之类的难以混入，所以知乎难以起节奏，所以原神在知乎风评较好，但B站，贴吧，nga之类就不同了，谁知道跟你对线的是什么成分的东西，就算是人分类也是复杂的，总之就是说不清。就拿我自己而言，我挺喜欢心海的，我也很喜欢看别人说心海的好，但是总有人会去插一嘴说，拉就是拉没有洗的余地，策划厨永不停歇的等等，他们说得好像很真实，搞得我自己都快信了，比如策划努力想表现出军师形象，到处都提，但就是没写好之类的。他们一边骂策划，一边却可以因为几句强调，就猜出策划的想法，确实挺无语的，当然如果他们是传言中的水军的话，或许他们还真的没带”脑子”来与你对话，而且挑刺起来还非常厉害，逻辑稍不认真看还真就信了。再说人造的故事要和逻辑，真的有必要吗？怕他们没有读过荒诞派的东西，没有玩过galgame什么的吧，原神本质是个二次元游戏，稍微说个”再陪我一段时间”就变成了倒贴和媚宅之类的话，看着真的心很累，他们讲的有没有道理无所谓，跟他们干就是你输了。还有一个就是，他们还说大众都觉得心海拉，她就是没塑造成功，看法与感受本身比较主观，有人觉得不行有人觉得可以，确实没问题，但这个大众确实值得商榷，这”大众”难道是…我匹配联机打副本的时候，就很喜欢带心海，有是还会发出”粉毛头””美人鱼”之类的说法，真没看出什么厌恶在里面。有些人也比较离谱说，本来想好好说话，但被原神玩家和mxz恶心到了，所以变了之类的话，但他的成分不清楚，他所说的原神玩家的成分也不清楚。我有时匹配副本，有时失手会输，但大家基本不会说太难听的话，就接着打，有时甚至就不说了，直接继续，在我的印象里，原神玩家的包容性还是很强的，本身没有输赢概念的游戏大概就是这样。我想说互联网无法连接理解，但连接什么看来还得考虑，如果连接机器人和你或连接水军和你的话，他们本来就没有理解你的意思，还有什么好理解的，还有什么对话的必要，他们只会相信自己所相信的东西。原神虽然有时收入是高了点，但远没有想象中那么夸张，大多人对二次元都比较排斥，所以原神的受众怎么也不如王者荣耀之类，就算人家出一个几元的皮肤都能与你一个几千元的角色拼流水了。宅这个东西本身就比较难以定义，虽然有时我也会看看动漫，但与那些资深的还是差太多了，动漫对我的意义可能是小时候动画的延伸，中国的和日本的我都有看过，很多人排斥二次元可能还因为日本二次元比较发达的原因，说实在的单从时长就能看出中日两国动漫水平的差距了，大部分二次元手游基本都是日语配音，又会让人反感了吧，虽说我玩的不多，但资深人士都快把日语当母语了。很多人看不起二次元，喜欢把二次元称为”死肥宅”，不知是喜还是欢，虽然我不知道自己算不算二次元(反正我我的浓度并不高)，但我还是喜欢米哈游的”技术宅”这三个字，喜欢”为爱发电”这类话，这让我想起来开源项目的境遇，不久前有人从Log4j2漏洞的角度，阐述了开源开发者的境遇，免费提供东西，但出问题却还有无偿的补漏洞。”为爱发电”的人总究还是得被资本家压榨，不论时代怎样都是这样。不久以前我很喜欢数学(现在一样)，现在我反而对互联网有了浓厚的兴趣，通过万物互联产生大量样本，许多问题都可以在上面得到展示，是一个十分不错的”研究平台”，比如今天的理解问题。记住，”吃力不讨好”真的很难受，不要付出过多精力，记住边际效用递减规律。说得太多了，就先到此为止吧。"},{"title":"互联网的“进步”","date":"2021-11-11T09:21:31.000Z","updated":"2022-10-14T23:47:11.719Z","comments":true,"path":"s/dbae03b7.html","permalink":"http://example.com/s/dbae03b7.html","excerpt":"","text":"如今已经上了一年多的大学，闲着无聊我翻起了以前的文件夹，在U盘里，准确来说是读卡器加SD卡的形式，确实十分古老，这些文件有多老呢？快6,7年了，从初三开始，我基本都在沉迷于所谓的学习了，收集力大不如从前了，那么里面就是是些什么呢？我随便选一些吧。 太阳神三国杀以前我就喜欢和同学玩实体三国杀，当时在网络上，没记错的话应该还有好几款，看了一下，在手机里，有Excel杀，三国kill，三国杀online，前两个已经完全不如当年，现在有股低质页游的感觉，online网游就算了，因为当时我主要玩单机游戏，那时联网还要蹭呢，其实当时是有单机模式的，我还记得当时在Excel杀里为了赞积分，还下了许多广告软件的日子，还记得如何学习安装材质的日子。哦，忘记了我应该讲一下太阳神三国杀(神杀)，神杀不同于其它，它是一个开源软件，先等等，总之就是它可以自定义武将，还有许多相应的工具辅助，可惜的是对安卓手机的支持不是很友好，但是当时真是大佬云集的时代，各种游玩方式，比如通过bochs，limbo等模拟window电脑的，通过ExaGear等模拟引擎的，等各种方法，当时的安卓只要配置够强基本什么都能做到，你不信还真不行。对于神杀，当时还有官方论坛，各种其它的发行版本，其中我印象最深的就东方杀了，也是它让我知道了有东方这个ip。但如今神杀定格在了2015，论坛早以打不开，没想到的是那时竟然是最后的辉煌时刻。 minecraft如今打开minecraft，只有无尽的孤独与不该如何是好的迷茫，并非如今的mc不在活跃，而是它已经不是以前的样子了，我并没有批评中国版，而是为mc提供大量扩展的大佬们已经所剩无几了，开放的服务器怎么也找不到了。其实当时的mc并没有如今的基岩版，而是java版与pe(安卓手机版)的时代，基岩版基于纯C/C++语言，虽然也能扩展但比较麻烦。我主要说手机版，当时的pe版由于属于移植，有许多内容都跟不上java版的进度，所以当时mc也是神器涌出的时代，比如启动器和Boardwalk，启动器最初的版本是一个开源软件，只有一个小扳手的图标在上面，后来又有许多高手们基于此开发了许多其它版本，比如我以前用过的多玩我的世界盒子。当时的启动器，可以加载资源包，还有自己以js为脚本语言的模组，当时的电脑版是以forge为基础java为语言开发模组，两者几乎是两个平行世界。但后一个就厉害了，boardwalk是一个运行电脑mc的虚拟环境，而且但是还有人维护跟进java版的最新进度。当时的mc还有各种各样的服务器，我手机里如今还存着我用js写个几个手机模组，当时其实我并没有学过js，但依旧可以学着写，属实佩服当时自己的耐心，还有个有趣的是这个js脚本还能用中文来命名变量和函数，现在看都觉得不可思议。 ONS模拟器这又是一个十分庞大的领域呢。当时世面上有许多从日本搬运来的galgame二次元游戏，但只有硬盘版，也就是只能在PC上运行，这是大佬们有纷纷涌现，一是在手机上开发了模拟器，包括ons，kirikiroid，psp等，二是对PC的游戏进行了可以适配手机的修改，三就是汉化，这其实并非简单的事，因为大量的文本信息都封装在二进制文件里，解码器当时在PC上也十分流行，同时它们还有能提起CG的。当然就算提取也是要翻译的，于是又有神器诞生了，即时翻译工具VNR，直接在玩游戏的时候翻译，虽然是机翻就是了。不过能在手机上玩galgame已经很强大了。对于二次元游戏当时还有一个是否活跃的部分是RPG制作大师，同galgame一样也是剧本，但可以平面运动，很重要的是活跃的开发大佬们，而且rpg制作大师本身也是pc，但在大家的努力下，成功在手机上做出来模拟器。对于文字冒险这两可谓撑起半边天。但现在的人除了unity3d和ue4，谁还记得以前的开发利器呢。 二次元说了这么多，或许你会发现，我所谓的辉煌时代，实际上是盗版横行的时代。免费终究是有代价的，时代的更替已经证明了这点，许多网站不是关闭，就是苟活，比如当时的看漫画神器动漫之家。这时该说说我们的ACGN盗版时代了，当时的贴吧论坛，还有我们著名的轻之国度，这些基本就是我们的聚集地了，在那里我们秉着开放的精神，有人分享图源或是小说原文，有人负责翻译，但是有多少人因此而自学日语，其实是不可想象的，连我也可以算在内，不过几年没用，功力早以不如当年了。如今，在我的书库里还存着当时收集的epub文件，但现在这种文件基本没见过了，这时在提提我们的分享利器，百度云。当时还有对百度云限速的破解，但如今百度云，在我的手机里是个巨大的累赘，如果不是里面的大量文件，我还真想扔掉这个体积比以前大数倍的垃圾。 破解当时的手机上比较流行的是单机游戏，网络游戏也有，但不是重点。而破解正是当时最热门的东西，最著名的如八门神器，还有许多辅助破解的强力软件如apktool，RE管理器，mt管理器等。当时对安卓系统的研究可谓如火如荼十分深入，从root的破解，到busybox，再到xposed等，一系列的强力工具，你是破解游戏还不是小意思，其实还有一点就是当时技术力不过反破解技术可能还不到位吧。说起这个我突然想起安卓上的编程神器AIDE，当时我还因此学了java，学了安卓编程，更完成了我的第一个软件文字战争。可惜的是，那工具定格在了3.2版本，SDK也没有更新，十分过时了。说起这个电脑上的Eclipse还有人用吗？ ……其实，真正让我觉得震撼的是，当时我的手机十分低配，因为我还学生嘛。低配到什么程度，安卓4.4和1G的运行内存+32G的SD卡，但是我却可以在上面干这么多的时，无论是模拟电脑还是玩各种游戏，但是现在的它连一个QQ都安不进，bilibili也运行不起。我真正想感慨的，并不是各种极客大佬的消失，而是极客精神没有在开发者之间传承。软件的内存越来越大，但我在上面却没有看到实质的更新，以前只要几十兆的MC在网易上变成了几百兆，世面上随便一个游戏都要超过1个G，你说资源占内存，但你去拆包就知道，它不值如此大的内存。我还可以讲一个，3D建模软件里，随便一个商业软件就好几G，但其实还有一个不超过300M的开源blender，你可能会说功能不够强大，但真的用过的话，其实并没有那么不堪。没有技术支持，我觉得开发者连自己找错误的能力都没有，就是极客精神丧失的最好表现了。互联网真得在进步吗？虽说程序界流传着不造重复轮子的说法，但是我们是否因为依赖过多而导致引入过多不需要的部分呢。最近，我学习nodejs的时候，知道left-pad事件，这真诚地使我不经怀疑，我们是不是已经丧失了写代码的能力，连最基本的功能都要靠别人实现。我知道以前的他们并不是为了利益而是为了热爱，因为热爱而愿意去研究，才会在那个时代，诞生许多有趣的工具与想法。但如今的互联网有充满着什么呢？几个月前，我认识了原神，因为原神认识了米哈游，前些日子，他们还举办了两场演唱会，其中一场没有观众的线下演出，线下直播的演唱会，深深地震撼到了我，因为这样的投资是基本没有回报的，但是米哈游还是办了这场演唱会。如果你问我原神好玩吗？我说句实话，在后期其实并不怎么样，但是我却会一直玩下去。进入游戏是有这么一句话”TECH OTAKUS SAVE THE WORLD”，原神让我看到两样东西，米哈游对游戏的热爱和对技术的专研，这都是后话了。我恨自己没有更早出生，没能跟着大佬们一起专研技术，但我也为我的后辈们惋惜，因为他们从为经历网络的高光时刻，甚至见不到一点余波。但或许这个时代就是这样，我们都在巨人的肩上高效工作，但为什么我们却总是工作个不停呢？这个时代并非没有充满热爱的人，缺少的是能将热爱坚持到底的人，缺少的是能将热爱传承下去的人。时代进步了，也该尘封这个承载过去的U盘，去寻找新的生存方式了。再见了，我那不足两年的美好时光。"},{"title":"","date":"2023-12-01T00:41:51.211Z","updated":"2023-12-01T00:41:51.211Z","comments":true,"path":"s/index.html","permalink":"http://example.com/s/index.html","excerpt":"","text":"这里属于禁区，用于描绘作者的18x妄想，未成年人请速速离开 里之一：XP探寻 持续更新中"},{"title":"XP探寻","date":"2023-12-01T08:57:50.000Z","updated":"2023-12-01T00:40:26.112Z","comments":true,"path":"s/86e03334.html","permalink":"http://example.com/s/86e03334.html","excerpt":"","text":"有些东西不能放到明面上，但我又想说，所以干脆就放得隐蔽一点，因为我知道大部分人都是嫌麻烦的，包括我自己。 为了完成xp的探寻之旅，我们聚焦于三个步骤，1.搞清自己的定位，2.寻找解决方案，3.在解决方案上进行深入探讨。我个人的基本情况是，喜欢独处但不能说是内向，只要是我想要聊天的对象，和他说的昏天黑地，直到对方厌烦也是不成问题的，实际上你看我所写的文章就能明白，我是一个话特别多的人。但是我似乎有一个十分致命的缺陷，我好像有些“恐女”，我就以感受来代表描述，每次和年龄相近的女生说话的话，我就有一种十分想逃离的感觉，而且每次都是想着越快结束话题越好，实际上从什么时候变成这样我也不清楚，大概可能还是发生在传奇的初中，我喜欢上数学的那个时候。现实大概就是如此，经过大学的洗礼，和女生多说一些话可能还行，再长久的交流就有些困难了，不能说改变了很多，只能说几乎没变。通过对自我的分析，我大致得认清这样一个事实，交女性朋友对我来说是几乎不可能的，如果要我描述期待的话，“有，当然更好；没有的话，也没必要去强求”。既然决定逃避现实，那么我们自然需要解决一些由其产生的疑难杂症。作为一个生理正常的男人，自然需要定期释放一些精液，我知道有很多地方都在宣传戒色戒撸，但是太久不释放的话，身体就会帮你释放，一个典型的表现就是遗精，大概周期也是一个月吧，别人的情况我不清楚，稍微描述一下就是感觉做了一场春梦，然后内裤就被精液污染了，而且时间不受控制，有时前一天洗完澡，第二天早上就脏了，我并不喜欢这种感觉，所以与其被动释放，不如掌握主权，将每次释放精液的时机控制在洗澡前。当然了，也有网友可能会推荐嫖娼，但是有多方面因素导致我不能这么做，一是，一次嫖娼的价格大概是600-1000，这几乎就是我一个月的生活费了，压根就负担不起；二是，你找到正经商家之前，还得和各种骗子斗智斗勇，不要以为实际见到就能抹除网络的虚拟性，狼友的各种防骗贴会深刻地告诉你骗子的套路有多深。不过，无聊的时候和骗子聊聊天打发时间倒是挺好的，反正他们有的是时间和你聊，要点就是尽可能拖的同时展示你的支付意愿；三才是最重要的，即性病的传播，虽说我没有体会，但看到各种数据大概也能说明一些事实，洁身自好还是有必要的。实际上，可能是梦想对我来说太过重要了，我一生想要完成的事情太多了，多到可能排满我的一生，我实在是不想因为疾病而丧生而留下遗憾。当然我自己是否有遗传病我也不清楚，因为我很少去做体检，但是我的父亲不一样，他经常得病，经常体检，我奶奶爷爷也差不多，经常起不了床，因整个家族的问题而产生疑问应该也是正常的。不过我想自己不愿体检的原因，可能是害怕，害怕自己还真有什么慢性病，导致失去希望什么的，至少现在的我看起来还是很健康的，所以至少还能告诉自己，趁年轻多做些事，不要到人老才感到后悔。有人可能还会提议男同呢？额，先不论接受程度，我没记错的话，这玩意传播疾病的概率是最高的，如果从身边的基友找的话，似乎大家都比较正常，没有接受的可能性。好像扯太远了，不过个性使然嘛，也没办法，总之，我们确定了自慰的必要性。接着我们可以来大谈xp了，作为一个色情资源大户，我自然拥有着大量的涩涩资源，不论国内还是国外、不论有码还是无码、不论二次元还是三次元、不论视频还是音声、不论游戏还是涩图、不论常规还是猎奇。经过无数资源的洗礼之后，我终于发现了，我的性趣在于丝袜制服，这并不羞耻，既然它存在自然表明也有很多人和我有着类似的XP。作为一个资深的老色逼，渐渐就能体会所谓的裸体与交媾也不过如此，千篇一律的形体和固定的体位套路，十分的无聊且浪费时间。所谓色情的美，就是诺隐诺现，可望而不可得的感觉，再配上千搭百陪的服饰，给予我们无尽的视觉盛宴，在我眼里最涩气的画家，就应该做到裸露最少的情况下，引发无尽遐想的空间。这其实就是未知的美，和人对未知的向往与性趣，大多数像我这样的人喜欢的就是这种犹抱琵琶半遮面的感觉，反倒是直接赤裸裸地坦诚相待，让人失去了对秘密的无限遐想。在此基础上，我再次询问，制服的那个部分最为迷人，还用说吗？当然是丝袜了。无论是短丝袜、过膝袜、长筒袜、还是连裤袜，无论黑丝、白丝、蕾边、还是吊带，你确实难以想象，一个普普通通的丝袜竟有如此多的款式，比起一尘不变的裸体，像我这种追求多元化的人来说，丝袜制服果然才是最好的选择吧。“人靠衣装，马靠鞍”，在动漫之中，区分一个角色的无非就是，制服、眼睛和头发，在现实中眼睛和头发是比较难自然复刻非，那么真人的探寻之中，制服果然才是最好的区分度。我的XP已经清楚了，实际上好多的AV都不能满足我的需求，因为好多的AV做爱，做着做着服装就全没了，说到底所谓的做爱，就是把阴茎插到阴道里，不脱衣服好像确实做不成。我说的其实也不对，我觉得最大的问题是内裤一定要脱掉，实际上，不少的AV也有执行制服不脱的主义，但为了保持性交能正常的进行，制服非内裤就被脱掉了，又或者连裤袜被撕破了，说实在我好讨厌这种感觉，有一种唯美画卷被破坏的感觉。虽然我确实没实际见过女性生殖器，但在AV中我见过太多了，而且我还认为不论是视频中见到还是现实中见到，都没有本质的区别，都是一个画面而已，而且还是一个大家都差不多的画面。当然有不少的老品鉴家，会给小穴进行各种分类，但说句时候，当我在画面中看到别的男的生殖器的时候，就有一种被NTR的恶心感。好吧，绕这么多弯其实我就是想表达，我实际就是喜欢看福利姬自慰，特别是穿着好看的制服，隔着内裤抚摸生殖器的样子。我所喜欢的AV里是绝对不能有其它男的，就算几个女的搞百合也行，其实这是可以被理解的吧，所谓的看视频和你现实看东西几乎没差别吧，就是一个二维投影，那么这不就相当于你在看别人做爱，给你戴绿帽，结果还兴奋了，然后还在孤独地傻傻地撸管，这样的场景未免也太可悲了吧。当然了，如果你害怕被别人背叛的话，实际上对于制服控的自己来说，还可以另辟蹊径，那就是自己女装给自己看。嘛，不得不说，这其实也是我的癖好之一，下面是我随便选的两张 是我最最最喜欢的丝袜哦！自己女装有个极大的好处就是可定制性非常的高，反正我的核心目的又不是要看生殖器，那么只需通过适当的隐藏，并给予心理暗示，那么完全可以视为真正女生所拍的擦边视频。不得不说，我真是个天才，直接对着自己的涩图自慰，大部分的图片和视频，都会有意无意地把头或脸给挡住，这样就可以进一步增加可信度。唯一比较遗憾的一点是，我还没有把女声给修炼出来，最终只能自己恶心的声音给去除掉，用一些比较好听的合成声音，于是，在声音的探索之中我又发现了一些好玩的东西。没错，就是asmr，这也是我所探索的自慰的归宿与终点。里面有一种叫做，射精管理的游戏，我十分的喜欢，简单来讲就是根据指令来进行撸管，里面最为出彩的是buy1take2的作品，其基本形式就是给你放AV片段，并指导你进行撸管，有时还能用上飞机杯，其实有一部，在放的片段中全是美腿丝袜，算是我最喜欢，也最经常用的一部了。虽然，我确实还在寻找着新的作品，但能对上味口的确实很少，辗转反侧之后还是回到了原点，这难道也是一种情怀吗？对A片的情怀，多少有些奇怪。当然在asmr这方面，国内做的并不咋滴，大多都是剧情戏，以步非烟、jok等最具有代表性，而且我个人觉得国内不同人的声音感觉不到差别，类型好像就那么几种，相比之下，日本nicovideo的录播就好多了，制服配上菇滋菇滋，确实有些让人顶不住。色情就是这么奇怪的一个东西，兜兜转转之后又回到了最为普通的形式，目前，我的一个打算就是自己穿上好看的女装，自己录asmr视频，然后自己再看着自己的视频自慰，想想就非常的美好，不过还有很长的路要走就是了。"}],"posts":[{"title":"","slug":"杂谈：2023-12-01/APlayer.min","date":"2023-12-01T00:13:48.916Z","updated":"2023-09-03T13:50:18.772Z","comments":true,"path":"archives/2023-12-01-杂谈：2023-12-01/APlayer.min/","link":"","permalink":"http://example.com/archives/2023-12-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-12-01/APlayer.min/","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/","categories":[],"tags":[]},{"title":"","slug":"杂谈：2023-12-01/APlayer.min","date":"2023-12-01T00:13:48.916Z","updated":"2023-09-03T13:50:18.772Z","comments":true,"path":"archives/2023-12-01-杂谈：2023-12-01/APlayer.min/","link":"","permalink":"http://example.com/archives/2023-12-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-12-01/APlayer.min/","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n","categories":[],"tags":[]},{"title":"杂谈：2023-12-01","slug":"杂谈：2023-12-01","date":"2023-12-01T00:04:27.000Z","updated":"2023-12-01T00:52:16.757Z","comments":true,"path":"archives/2023-12-01-杂谈：2023-12-01/","link":"","permalink":"http://example.com/archives/2023-12-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-12-01/","excerpt":"","text":"记忆是一个神奇的东西，当我们对其细节含糊不清的时候，就会不由自主地将心中所想给填充进去，并且随着时间地流逝使我们确信其正确性。我或许就是一个这样健忘的人，但这又何妨，珍贵的回忆自然不会忘记，其它的往事也不过是拿来服务现在并走向未来的，我自始至终都是一个注视着前方的人，我也为此而感到自豪，尽管它只是我对自己的洗脑罢了。 const ap = new APlayer({ container: document.getElementById('aplayer'), autoplay: true, lrcType: 3, audio: [ { name: '今、歩き出す君へ。', artist: 'Ceui', cover: './cover.jpg', lrc: '今、歩き出す君へ。 - Ceui.lrc', url: './Ceui - 今、歩き出す君へ。.mp3', } ] }); 有些东西，我们确实写出来了，但或许我们并不想给别人看却想留下自己的痕迹，所以会设置各种各样的阻碍，让读的人没有读下去的欲望，并使自己的表达欲得以释放，不想分段什么的就是一种典型做法。 我心中优秀的作品。虽然我到大学才承认自己是个二次元，但实际上，我很早就接触过二次元的作品，只是并没有那种意识，我一切思想启蒙十分诡异地全都发生在初中，不论是对数学物理的热爱、还是文字的阅读能力、又或者是事物的解构能力等，但这并不奇怪，因为从中考到高考的时间里，我几乎全程住宿，只能在学校里苦苦地学习，能接触的东西少了很多，自然也就没有精力去探索各种各样的东西了。回到现实中来，最近由于16bit的原因，我重温了两部动漫，分别是白箱和路人女主的养成方法，对于后者其实当时只有第一季，所以对于第二季和剧场版也算是补番了。以前看的时候可能没什么感觉，日常似乎没啥看点，但现在好像有些不同了，很久以前我说过，我喜欢现实增强型作品，简单来讲就是在现实中掺杂一些非现实要素，这个非现实要素多玄幻都无所谓，又或者是物理上可能出现社会上几乎没概率出现的东西，比如TimeLeap这种东西就是如此，也正因如此我对本季度的芙莉莲并没有什么感觉，我每周看它的唯一乐趣就是OP和ED，我是一个从来不跳OPED的人，就算是补番时也是一样的，实际上有不少的番，比如各种异世界，我基本都是冲着OPED来的，内容啥的其实无所谓了，反正看着番时的胡思乱想就够我撑到结束了。到目前为止，我所看过的所有动漫中，最喜欢的依旧是“路人女主的养成方法”。首先，它在物理上是可能的这是第一个前提；其次，它给人带来梦想和希望而不是致郁和悲伤，这是第二个前提；接着，男主具有真心是第三个前提；然后，主题的完结与内容延伸的扩展性是第四个前提；最后，女主深得我心。我们只评价动漫方面的内容，也就说到学姐毕业和新学期开始的这段时间，小说内容以后有时间再讨论。故事内容本身分为两个时期，一是Galgame制作到冬季漫展发布，二是发布结束到新学期开始。在最后至少有几个基调已经被确定了，一是惠和男主的纯爱CP，虽说我确实看了不少潜后宫作品，但我一直都纯爱党，这引出了另一个基调，就是青梅和学姐对男主的放下，只要能好好地切割斩断作为回忆是无可厚非，但总是念念不忘和搞暧昧是我十分的讨厌的东西，说的就是你“三色绘恋TrueEnd”。当然了，有人可能会说，为啥不能像最近的“女友成堆”和“100个女友”那样，皆大欢喜且谁也不会伤心的世界不是更好吗？先说说前者，漫画已经完结，时间定格在了高中没有未来，后者虽然还没完结，但通过两者的基调，我可以直接做下判断，“恋爱喜剧”没有复杂的感情，虽然男主的激情演绎我非常喜欢，但这其实才是我在这两部作品中的唯一看点了，本来二次元的买点应该在女主才对，如果这两者是单纯的喜欢，那么随便掺杂点纠结就变成了“租借女友”，这部作品关系乱糟糟的，各种藕断丝连，并混合着男主这性格，看着十分的胃疼难受，知道我还在看这部番的理由是什么吗？很简单，因为这部番中女主的服装特别多。而路人女主就完全不同了，它真真正正地有做到塑造女主这件事，而不是单纯地贴标签、搞反差、制造噱头等并以此来生成工业糖精那么简单，虽然它确实可以看，可以拿来消遣时间，但想要让我喜欢上是不大可能的。青梅和学姐算是贴标签吗？我觉得并非如此，在我心中她们在于与惠形成对比，但没有止步于此沦为推进剧情的工具人，而是在一番经历后获得了自己的归属，拥有这自己的决心、梦想和未来。或许很多作品我难以喜欢上的原因，它们没有给我“未来”与“前进”的感觉。在感情戏的基础上，我觉得这部作品的基调不在于创作，创作只是一个承载梦想的载体，单论对创作的描绘，我个人偏爱的是“如果有妹妹就好了”，为创作而耗尽身心，我无法共情，而且它们还像我现在一样探讨什么作品是好作品，但我从来不会对好坏给予客观评价，而是会混入主观感受的。创造本身就是一种平凡的喜悦和表达的载体，更重要的一点是它给予自己活着的充实感。在路人女主中，创作是走向未来的一种方式，对主角团中都是一样的。说到未来自然得说过去，路人女主另一大特点是淡化了我在时间三向中最不喜欢的过去了，过去唯一的作用青梅的身份和改变，而不是整部作品的氛围，相比之下，有很多强化过去经历或将过往作为主题的作品，我就不是很喜欢，过去作为回忆也就算了，还要被过去束缚完全无法给观众带来向前的动力。这时我就又该讲讲了，优秀的作品和消遣的作品是完全不同的，后者可以充满各种悬疑诡计和惊险刺激、又或者是让感到一时的美好与快乐、还或者是引发自身对社会、世界和人生的思考，但真正优秀的作品应该是可以反复品味、可以带来平凡之美、可以给人带来改变和动力的。何为“反复品味”，比如各种丝袜福利和学姐的挑逗诱惑，真是让人百看不腻，我直接摊牌了，我就是一个制服控，说实话就算是看AV，就赤裸裸的两个肉体混在一起挺无趣的，根本无法体现出差异来，我一直不能理解的就是几乎没差别的AV为啥能不断产出，明明看好几部和只看一部压根就没啥区别，哼嗯，这个我们里篇再讨论……开玩笑了，能反复观看的前提是体验不会受到剧透的影响，实际上大多数的日常番或单元剧都是能做到的，比如白箱之类的，所以重点还是在于，每看一次它都会给你带来点什么，无论是一时的喜悦，还是一时的振奋人心，路人女主在日常的描写上属于上乘的水平，不论是男主的慷慨激昂，还是女主惠的小表情，不，其实还是女主惠的声音让人百听不腻，其实这种东西挺难描述的，但其总会给人一种这不一样和好想再看一遍的感觉的感觉。你可能会觉得我评价的时候有点脱离作品的感觉，但并非如此，我不是在做剧情分析，而是将作品所带给我的表述与感觉进行如实的表达，这就是我之前所讲的“平凡之美”，优秀的作品不在于引出各种剧情的分析和解说，又或者是伏笔和转承起合的解构，而在于它赋予了你各种各样的东西，这就是所谓的感触至深给我带来的表达欲。当然或许更为重要的是其带给了我们前进的动力与希望，不过承载梦想是青梅而不是男主，至少我是这么认为的，至于学姐嘛，感觉上好像只是一个福利担当，但是在承担男主前辈给予教育和陪在青梅身边充当好友上发挥着不可替代的作用。其它角色确实就只是配角了，所以我们需要重新看向主角二人，重新考虑一下主题了，路人女主的养成方法实际上一个人改变另一个人并被反过来影响的故事。虽然我说了这么多有的没的，但路人女主说到底还是一个男女主之间的恋爱故事，男主从一个普通的二次元宅男爱上路人惠很奇怪吗？这一点也不奇怪，因为现实中许许多多的宅男们通过这部番喜欢上圣人惠就是最好的证明。那么惠究竟有什么令人着迷的地方呢？或许最为简单的回答就是，像男主那样的，坡道上的一见钟情。对于大多数的宅宅而言，理应见多识广阅历丰富，并遇到过形形色色的女主，但大家都知道这无异于饮鸩止渴，过于传奇与不凡，只会让人得到一时的满足后而觉得无限的空虚，从而更多地无探寻虚无缥缈之物。但是惠告诉了我们普通也是一种属性，一种属于大家的属性，而且普通与平静又并非无口文静之类的萌属性，其实惠是很能说话的，只不过这取决于你和她的亲近程度，对于刚刚结识的惠，她不仅台词少，在画面中的存在感也十分稀薄，与青梅和学姐形成鲜明的对比，但随着与惠的不断交流与共事，惠的话也越变越多了，并且在男主心中的存在感也越来越强，惠的转变验证了养成过程的主题。不仅如此，惠在表现路人形象的同时，还将普通平凡与默默奉献给联系了起来，“每一个成功男人的背后都有一个默默奉献的妻子”，在男主为了做出游戏的梦想奋斗的时候，惠在后面充当了支持者的陪伴角色，不论是照顾男主的起居，还是饮食，还是待客，对于只看向前面的男主而言或许并没有注意到这些细节，但正是这些微小的细节让男主对女主产生了依赖，也正因如此在漫展结束后，男主对女主的离去才会突然的感到空虚，背后的支撑没了，又该如何前进呢？“分工合作”其表面了一种浅显的道理，分工是合作的前提，当人人都能独立自强的时候，合作也就失去了意义，无论是家庭、企业还是社会都是一个道理。感情就是这种只可意会不可言传的东西，当你喜欢上，被吸引的时候，却不知该如何做出解释的时候，这才叫感情，不然的话和理性又有什么区别呢？实际上，动漫相比于小说而言，一个巨大的优势就是惠的配音了，这也是我目前最喜欢的一个女角色配音了，“无感”并不能做为支撑理由，虽然惠的声音初听之下非常的没有波澜，但仔细听的话，你不会觉得她在捧读，再仔细品味一下的话，就会发现这种声音听起来太舒服了，感觉身心都得到了洗涤，或许有人觉得我说的太夸张了，但我只是在尽可能地捕捉并陈述那一闪而过的感情罢了。我们再来讲讲男主，他身上蕴含着许多宅宅渴望的能力，口才吗？当然不是了，就我所结识的众多宅宅中，他们最不缺的就是满肚子的油水了，要知道作为一个合格的资深宅，阅番过千是基本要求，自然也涉及过各式各样的题材，心中有着道不尽的话也是自然的，或许我可以很好地提出一个现象，大多数会做长评论的都是资身宅，这也是为什么B站评论看到很多长评论，但在微博、快手等平台就比较难以见到的原因，当然这可能也与B站以长视频为主的定位原因，但或许我们又应该思考为什么B站能在长视频领域占据前几位，可能是二次元吗？是男主的行动力吸引了我们吗？或许也不对，实际上有许多经典词句都在流传着，比如“技术宅”，又比如“你不尴尬，尴尬的就是别人”，实际上，很多宅宅们，或许是经常受到长番的洗礼，在行动力和专研能力上都是数一数二的，比如年前的AI画图吧，其实很早就有这种技术了，但不知为何，因为二次元AI绘图的出现，导致AI画图突然火了起来，而且莫名其妙地出现了一大堆类似的产品，嘛，虽然这也说明不了什么，但是至少我的所见所闻就是如此。男主真正闪闪发光，照亮我们内心的是，其实没什么？就是给予我们慰藉那么简单。如何才能给予人勇气，很简单，描绘一个用勇气的人就行了，男主只要把奋斗与努力的过程展示给我们就足够了，当我们产生羡慕之情的时候，相同的东西也就开始生根发芽了，至于它能成长到什么程度，还是得自己的悉心呵护。这部作品或许还有一个十分神奇的地方就是，虽然男女主的互动并不多，但仅有的那些镜头却给予了我们足够的满足，这或许平常积累的量变所导致的质变，更将路人与平凡的主题给凸显了出来，没有大起大落与波澜，只有平凡的交流、普通的分别和简单的复合。虽然路人女主被称为白色相簿3，但以我个人观点来看，除了作者和白色相簿2一样，但内容和主题上的差别还是很大的，当路人女主这个标题出现的时候，一切就已经结束了，当男主选定惠作为Galgame女主的时候就已经毫无悬念了。与之相比，被称为白色相簿4的大春物语反倒更贴切些，不过在我的眼里，大春物的看点还是在男主，它的理想构架，或者从开始到结尾的框架，应该要是男主继续特立独行，留下两个女主搞百合贴贴才对，嘛，不过我只是一介看客，发发牢骚而言。路人女主的另一部分是养成，而其正是男主的第二部企划，第一部企划对照了标题，但男主自己也察觉到了它偏离了自己想要的东西，里面充满了自己还未舍去的青梅和学姐，这部作品已经不想他最初构想的平凡，但正因如此才有了第二部企划，与后面的内容，惠的离开与男主寻求的复合，再到青梅和学姐的离开，她俩获得了成长，而男主也终于可以完成心中所想，将惠最美好的一面展示给大众，并让观众为之着迷，路人女主的养成方法也就总于完成了，惠也确确实实地从一个很少出镜的路人成为了我们心中的女主。作品想要表达什么，我们可能并不清楚，但它告诉了我们平凡中的美和改变成就伟大，引领我们前进的大概就是这样的一类作品吧。最后顺便引个链接吧，我的表达能力已经退化了不少，很多话还是得靠别人说出来，确实挺可悲的。师者形象。作为一个似乎在搞数学教学的B站UP主，那么我也得从自己的学习经历来谈谈，老师在我的心中到底充当着何种作用。“师者，所以传道受业解惑也”，在当今这个信息发达的时代，传道实际已经失去了其本身的意义，不想学的人你给他讲再多知识和道理也是没有用的，想学的人就算没人人教也会想方设法的去获得各种知识和资料，我自己其实就是一个十分典型的例子。因此当一个老师只会机械地念PPT或者是对课本进行复述都是不合格的，当然道理大家其实都懂，都是为了挣口饭吃，不寒掺嘛。不过我们还是得讲点道理的，“师傅领进门修行看个人”或许才是我个人觉得对老师最好的诠释。老师的主要职责有两个，一是学习规划，二是答疑解惑。前者就是我们刚才所说的，在当今这个信息爆炸的时代，类似的资料是数不胜数的，如何规划学习路径？选哪些内容进行学习？回答好这两个问题是很困难的，而这正是老师所应该做的“领进门”，其实有些话说的很好，求学者该做的应该是踏踏实实地去学习，规划和方向交给老师就行了，不过前提是这个老师确实够格才行，所以这正好构成了对老师评价的第一个标准，就是“是否能给出一条适合自己的学习规划？”检验自己学习成果的最好办法就是“是否提出了疑问”，这是我一直所秉持的观点，就拿我最爱的数学来说，其拥有着最为简单的发散思维方式，当我们学习一个定义，可以思考定义中哪些成分起着哪些作用，其又为我们后续的证明提供了哪些帮助，又或者定义中哪些条件是多余的可以删去，对于抽象的定义我们还能进一步探寻哪些实体是它的一个实例，哪些又不是，如果不是那实例又缺乏了哪些要素等等。当我们学习一个定理的时候，又有着削弱条件、增强结论、一般化推广等各种思考套路，数学可以说是发散极致思维的简单代表了。在此基础上，老师的作用就来了，在学习过程所产生的各种发散性问题，大多数的书本一般都不会给出，甚至不会提及，但是作为初学者的我们似乎并未拥有足够的解决能力，此时老师的经验就成为了答疑解惑的用力工具了，当然了，老师有时或许不能完全解决的疑问，因此评价老师的第二个标准就是“对于学生的疑难杂症，是否能给予学生一个满意的回答”。实际上，当老师拥有这两个纬度的能力就已经足够了，因为要做好这两件事情并不简单，其要求老师拥有学科大局观和渊博的认识，这些都只能在时间的洗礼下慢慢形成的。在一般学生眼里，有一类老师非常受欢迎，就是喜欢讲故事的老师，虽然这本身已经脱离老师的范畴，因为任何人都具有讲故事的能力，但是在当今的教育体系下，这或许是利用课堂时间的最好方式。真真能沉浸于学习并提出各种多维度疑问的学生是很少的，具有知识广度能脱离舒适圈进行答疑解惑的老师也是很少的，而学习路径的规划是几乎全国统一的，实际上老师在当今要求工业化量产学生的背景下，最大的作用或许是监管者了，但这其实或许是人口大背景下最好的教育普及方式了，即少部分的学生实行特殊的精英化教育，大部分的学生实行一致的大规模教育，高精尖的人才并不需要太多，大部分人的最终归宿都是底层劳动，唯一惋惜的或许是充满理想和抱负却爬不上来的人，没办法谁让社会利益高于个人利益呢！实际上，我一直在思考一个问题，就是该如何给人“讲解一个定理”或“一道题”，单纯地复述有意思吗？单纯地展示过程有意思吗？最后，我明白了一点，就是整体与联系，对于一个定理的见解，我们绝不能浮于表面，而将定理挖到底，将最深的内容展示出来，我从来都不觉得自己是做科普的，因为我没这个能力，更不能误人子弟，最后的结果就是“蓝图”，数学最奇妙之处莫过于各种各样的联系了，我的目的就是从最基础的内容开始，将整个地基和架构全部给搭建起来，而对具体的内容附上链接和书籍，并留给想要深入探究之人一个方向，这就是我之前所说的教师的第一个作用“学习规划”，而第二个作用则是体现在习题讲解上，当你没办法进行自主的思维发散时，习题将成为你最好的一个参考，通常书籍上的习题有两方面的作用，一是巩固读者对知识的理解，二是汇集各种发散内容并给予读者思考。因此我的系列中就多出了一个题目讨论的部分，其目的就是理解题目，并探寻题目背后所隐藏的东西。怎么样，我是否有尽到师者形象呢？快餐内容时代。16bit以小品黄油催眠人妻来说明当今的内容市场，这其实并不新奇，抖音、短剧、手游等早就已经表明出了当今的时代特征。首先，催眠NTR之类的快餐黄料占据着18x，这确实是一个事实，比如随便打开DLsite，看看销量一直比较高的几个就差不多能懂了。其次，这些玩意能赚大钱吗？不一定，更进一步地说几乎所有的内容在当今极度内卷的社会都不怎么值钱，特别是在最近的AI技术的加持之下。内容想要挣钱，首先需要增加受众面，光是18x就少了一大片市场，所以很多产商想要上岸也能理解。但是，我前面就说了，内容早就不值钱了，除非是什么大IP，又或者是什么情怀之类的，但不论如何在当今这个精神财富极度丰富的社会中，脱颖而出是十分困难的，最终还不如去满足特定的用户，以低成本低利润来维持运转和生计好一些。既然讲到了内容，我们不如来讨论一下内容付费吧，其基本上有三种性质，原价正版、低价盗版、捐助盗版分享，对此我一直秉持的观点都是“盗版不付费，付费不盗版”，前者是对中间商的鄙夷，后者是对内容创作者的支持，中间商并非什么不好的东西，在实物的分销上其起着重要的作用，但是我们是在互联网上，其最重要的一个作用就是降低信息传输成本，在此基础上还让中间商赚差价就实在说不过去了。明白了前两者的关系，再考虑最后一种，所谓捐助并非购买盗版，而是给予盗版方各种运营维持上的资金支持，以保证其可以长久为我们提供免费服务，我个人认为这是一种合理的行为，其具有一定的劫富济贫性质在里面，少数富哥的捐赠以维持广大资金匮乏的人的使用，有时我自己也会随便地扔些小钱进去。我知道这时可能有人会觉得我被“捐助”的字眼给PUA了，论根本不还是在花少量的钱买盗版，对此我确实不知道该如何反驳，但是有一点我是十分认同的，最起码“捐赠”是一直先用后付的行为，是一种对顾客来说良好的交易关系。既然谈到了涩涩和金钱交易，我们在讲点有趣的东西，我们知道现在的骗子十分的多，其中有一个方面就是色骗，除去很多几乎一眼就能看出的骗子，在推特上有一个十分有趣的现象就是门槛，简单来讲就是付费聊天，这确实难以理解，但后来我想到了推特实际上是大多数人最开始能到达的一个搞涩涩点，很多实际的国内平台不是一眼假，就是藏得比较隐蔽，这反而导致了确实有不少头脑简单的人上当，上当的过程可以去看各种防骗曝光的推主，确实有点哭笑不得。在我看来，可能的原因之一，是价格不够透明，实际上价格确实有一个基本的区间，但由于监管的原因导致很多人都不知道，结果实在有些可笑，被骗的人以千为单位被骗，实际做的人却“只有”千出头的收入，我似乎说得超标了点，回到正题吧。快餐式娱乐其实并没有什么不好的，不论是在人的洗脑上，还是娱乐时间的消磨上，都是符合统治阶级利益，或者说社会共同利益的。社会运作本身的基本结构本来就是，少部分的精英带领大部分的朴实人民，要想实现人人精英社会，除非让社会倒退到小国寡民。最后，我再来讨论一个自己关于如何避免快餐式娱乐的一些心得，通常我们学习得烦躁了，或是无聊的时候，就会莫名其妙地刷起短视频或短剧，以让时间“充实”地度过，短视频对我们而言最不需要的其实是不连贯性。因此最好的做法是拿一个连贯的内容，放到垂手可得的地方，以代替我们刷短视频的冲动，当然这类东西不能是让人想一看到底的东西，而是那种可以随时放下的东西，当你看累了就会自己回到岗位上去，这样就能逐渐养成“工作-休息-工作-休息”的循环了，与快餐式娱乐不同的是，我们拥有着两个连贯的内容，而休息部分也不会让人过分紧张。于我而言，平常做事的地方就是电脑，因此我实际就是一边工作，一边开着一部废萌Galgame，两边轮流搞，一直都非常的顺畅。废萌是什么懂得都懂，需要的只是体会和感受那么简单，将其作为碎片化内容的替代再好不过了。“穷”为何物。最近，我有看到一些有关困难生补助讨论的东西，所以不禁也想讨论一番，我并不想讨论其引发的各种社会问题，而是想单纯地讨论“穷”本身。我自己算得上穷吗？正所谓“有无相生，难易相成”，所谓的穷，实际上只有从对比中才能产生的，如果去跟马云、腾讯、华为等比，我肯定是穷的，而且还穷得如同沧海一粟，如果让我去和非洲、中东等连饭都难以吃上的流民相比，我肯定是富的，而且还吃得非常好。实际上，在当今和平的中国里，衣食住行的基本需求是很好满足的，衣服可以穿旧的、食物随便去打零工人家就会给你、大多数公共场合都能住下、发达的交通网络带你游走四方，我说的确实有些夸张了，实际上贫穷发生的概率是极低的，几乎也是出现在残疾、单亲或留守等情况，个数远小于困难补助本身，而大多数的人基本都是处于比较平常的水平，基础的物质需求没有问题，而稍微省省就能存点钱，这其实也差不多就是我自家的生活状况了。当今各种各样的工作焦虑，归根结底还是自己的欲望与能力不符罢了。有人喜欢批判，说这是时代的问题，这其实没有错，但我们也没有办法，当生产力高度发展的时候，工人的数量必然会减少，财富也自然会聚集到少数人的手上。对此我曾经构想过这样一种社会就是，“局部共产主义”，简单来说，它的目的是为了让更多的人心安理得地躺平，其原理十分的简单，就是对过剩的生产资料实行共产主义，并将资本和技术赶向高新技术产业，我拿“食物”来做例子。我们需要将其分为两类，一是工业产物，二是奢侈品，工业产物食品属于国有企业并实行共产主义分配，如果你无法忍受工业产品的食物，则必须以资本购买奢侈品食物，为了获得资本你可以在国有企业进行工作，或者是在奢侈品食物个人资本进行工作。那么维持局部共产主义的运作的劳动由谁提供呢？简单来讲就是，想要获得更高品质服务所需资本的人，当然针对浪费之类的现象可以进行更多的规范。国家最重要的一个作用，就是整体社会生产资料的调度，通常情况下将过剩的资料交给国家是最好的，但是“事在人为”，当管理机构过于复杂时，十分容易产生贪腐的问题，典型的例子是政府工程，就算不说也能理解，就是一层层地价格虚报，最顶层的拨款可能是几千万，到了实际外包工程团队手上的时候可能就变成了几万。我个人觉得要想解决这种问题必需得去除人为因素，以“机器和算法代替国家的概念”，这并不是痴心妄想，如果想要实现共产主义，有两个很大的前提，一是全体人民能决定社会意志，二是劳动分配让人信服。要想实现这些，最好的办法是利用互联网来消除中间商，我的基本构想是这样的，首先，我们需要一套算法能对社会的分工进行调度，其次，整套系统必需以可读的形式展示给全体人民，接着，修改算法的决议必须经过一定程度的人民同意。当然我们无需当心系统会遭到暗改，因为当今有一项技术，也就是区块链，可以保证整个互联网上的数据是人人一致的。当然，我必须指出，人员调度只局限于“局部共产主义”的部分，其目的是为了让所有人以此做为义务，来填充基本的生产资料，以维持局部共产运营。我可以确信的一点，局部共产所处的行业一定是生产过剩的行业，所空出的剩余劳动时间，则用于个人的自由和全面发展，有理想的人可以自发地追寻探索想要的东西，想躺平的人就尽情地享受社会福利。你说有没有一种可能，就是人人都想躺平？这绝对不会的，就算有，我们可以通过思想教育来激励年轻人，让他们动起来、活起来，并充满激情。好了好了，幻想世界也该结束了，以我的能力也只能试图描绘一个比较模糊的蓝图了。或许我想说的是，“穷”这个概念在当今已经不应该出现了，就算是发生了重大疾病也还有医保为你做兜底。我突然想起了一件好笑的事情，就是歌颂“贫困”和鼓励“艰苦奋斗”，我们应该要理解这是老一辈的思想，他们所活的就是那样的一个时代，就跟我曾经看到的一个评论一样，有的学生看到跟别人比较来应该足够拿困难补助了，但是当他们和父母讨论此事的时候，父母却带着一身志气地说，这应该留给那些更需要的穷人，到底什么才能算得上更需要呢？这个问题太难回答了，“人穷志不穷”说的是这个吗？做为底层人的我自己其实很能理解这一点，就算是一次次地被现实折磨，心中的那个意志却是怎么也无法磨灭，这可能就是被思想教育后的结果，但是我很喜欢这种感觉。","categories":[],"tags":[]},{"title":"","slug":"杂谈：2023-11-01/APlayer.min","date":"2023-11-01T00:23:06.092Z","updated":"2023-09-03T13:50:18.772Z","comments":true,"path":"archives/2023-11-01-杂谈：2023-11-01/APlayer.min/","link":"","permalink":"http://example.com/archives/2023-11-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-11-01/APlayer.min/","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n","categories":[],"tags":[]},{"title":"","slug":"杂谈：2023-11-01/APlayer.min","date":"2023-11-01T00:23:06.086Z","updated":"2023-09-03T13:50:18.772Z","comments":true,"path":"archives/2023-11-01-杂谈：2023-11-01/APlayer.min/","link":"","permalink":"http://example.com/archives/2023-11-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-11-01/APlayer.min/","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/","categories":[],"tags":[]},{"title":"杂谈：2023-11-01","slug":"杂谈：2023-11-01","date":"2023-11-01T00:07:17.000Z","updated":"2023-11-04T05:50:57.542Z","comments":true,"path":"archives/2023-11-01-杂谈：2023-11-01/","link":"","permalink":"http://example.com/archives/2023-11-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-11-01/","excerpt":"","text":"数学，一个永远也放不下的东西。一次次的告别，带来的只是更加沉重的思念，与更为无力的反噬。自认为务实的自己，却做着一场场甘甜的美梦，这是我的妄自菲薄，还是我的痴心妄想，真的什么都搞不懂了。不过没事的，我会不断地给自己洗脑，不断地诉说自己的无能与无力，这就是我的坚强与反抗，我相信终有一天会将你放下，不论是一年、十年或者是一生，然后自满地说出：“数学，给我滚吧！！！” const ap = new APlayer({ container: document.getElementById('aplayer'), autoplay: true, lrcType: 3, audio: [ { name: '初恋バタフライ', artist: '桐谷蝶々', cover: './cover.jpg', lrc: '初恋バタフライ - 桐谷蝶々.lrc', url: './桐谷蝶々 - 初恋バタフライ.mp3', } ] }); 牢骚也发完了，抱怨也满足了，是时候该想想如何前进了。 参考1、参考2。不知不觉，我也已经大四了，还有好多好多想做的事情都没能完成，但我也不得不考虑生计问题了。“是什么？为什么？怎么做？”是我从一本高中议论文写作教程中获得的核心信条，它代表了我们对任一现象认知的三个层次。最底层的人是只停留于认清这个社会的人，讽刺社会、讽刺制度是最为无聊的事情，在有一定经历以后几乎所有人都能体会是什么？区别只是谁能表达得更好、更吸引人、更能引起共情罢了。最好的揭示“是什么”的方式是使用小说等故事形式，并且使人在体验故事的时候自然而然所产生共情，并且不要在其中掺杂过多的说教成分以免引起反感。稍微高一些的层次是为什么，并且能深刻理解现象制度的产生原因，从而试着去理解和体谅它，这属于文人的基本素养，所谓的思辨能力就是因果分析能力，正确与否并不重要，“说服”才是思辨的核心目标，只要让自己或他人觉得言之有理即可。比较高的层次就是怎么做了，“成功者找方法，失败者找理由”，辩证辩证，导致大多人的基本想法都是中庸模糊的，既不否认也不认同，或许也属于怎么做的一种，但还有很多情况下选择是必须做出来的，比如面对不合理该怎么办？是妥协还是反抗。从某种意义上来说，所有的人都处于第三层境界，因此相信群众的智慧有时也是一个不错的选择，总比犹犹豫豫摇摆不定好太多了。回到生计上来，我们需要处理的第一个问题是当今的经济现状怎么样？简单来讲就，与高度发展生产力不匹配的社会制度的问题。这是一个十分难以解决的问题，无论国内外，这种矛盾的结果就是贫富差距。在目前所有的社会体制下，我个人觉得唯一能看到希望的是“共产主义”，但是并不是单纯的指现在所有文献中所描述的共产主义。要我描述吧，我也写不出来，要是我有这能力，也不会活得如此落魄，但我个人还是有些小小的思路。第一步需要实现的是完全的劳动转移，目前还有大量的苦力工作(包括流水线工人、技工等)没办法被非人工替代，但人人却都想摆脱这些工作，当这个矛盾存在的时候，共产主义分工就是一个巨大的问题，当前的方案是通过考核来进行人才筛选，但受到人口过多和内卷的影响，导致筛选作用已经越来越没有用了。第二步是经济制度的替代方案，共产主义并非说人人均等，而是要在保证人民基本需求的情况下，遵循按劳分配的原则，不论社会怎么发展，劳动是不可能不存在的，在生产力高度发展的当代社会，几个人劳动早就能满足上千人的需求了，问题是谁去劳动，怎么分配劳动成果，这其实就是对经济制度的思考，为了防止歧义，我以替代制度来代表它。当两个前提满足的时候，我们才有可能在第三步进入共产主义。至于更具体的东西，如何才能实现，我只能说不知道。“空想”告一段落以后，我们也该考虑一些现实的问题，或许你可能不满于当前的制度，但是呢，这些可都是几代人竭尽智慧、历尽千辛万苦所摸索出来的道路，已经是当前的最优方案了，或许它并不利于你，但人家考虑的是整个社会和国家。领导并不是一个很好坐的位置，就我所见到的很多人(比如大学总会有好多好多的小组作业)，他们连最基本的做出决定的能力都没有，而且还要以民主的理由来逃避选择。人家既然选择了你作为领导，那么你的意志自然就是整个团队的意志，当然能力越大责任也越大，领导的抉择往往都关乎着整体团队的利益，这时我自然地想起了文章“为什么CEO拿着远超员工的高薪？”，以我的能力有点难以说清这个问题，但这确实是没有问题的，我唯一能理解的就是“领导”非常的难做。这时我们不得不谈另一个问题，领导要如何掌控员工，从国家角度也可以说，政府如何掌控人民，简单粗暴地来说就是“洗脑”，文雅一点就是思想教育，为了统一思想和方向，为了整个团队利益的统一和最大化，增强凝聚力的最好方法就是各种形式主义。不用我说，无论是政府还是职场，很多人都或多或少做了很多自己觉得没有用的事情，但真的没有用吗？对于你来说可能感觉无意义，但对于团队来说就不一样了，一种极端的想法是让你多做无意义的事以排除歪念头，从而更好地服从集团，实际上从另一个角度来说，多做事可以来判断你与团队的契合度，以决定你在这个团队中去留。排除各种形式的会议、报告等，还有一种“思想报告”的形式主义值得一说，有人可能会觉得我心不甘情不愿地去做这些事真得会改变思想吗？这就大错特错了，这样的反复实践实际上是一种物理的改造，或许没办法完全改造，但只要一个百分之八九十就已经足够了。这其实就跟广告效应一样，虽然你平常都是跳广告不关心，但当你真正需要的时候第一下反应的就是曾经看过的广告了。思想也是一样，一旦听多了一种看法，当你真正面临这方面问题时，就总会不由得往所浸染过的思想去靠。我们已经踏过了两个关键步骤，接下来就是未来与方法了。这是因人而异，往往在于你的目标与追求，我并非什么人生启迪大师，因此我自然该说是我自己，也就是到了自我陶醉时间了。我是一个对物质追求欲望十分低的人，特别是经过了3年多的洗涤，我对自己最低需求已经有了一个十分清晰的认知，当然如果真的有大富大贵自然更好，但我们始终应该持有最低的期望，这样我们才能较好地避免因巨大落差而产生的失落感。先从自身进行考量，考试我是真的不行，从高中到现在考试我经历得太多了，我发现时间限制和记忆力一直是我最大的敌人，我相信自己有能力做出所有的客观题目(主观的就算了)，但我需要很多的时间进行摸索和试错，而且我的记忆力很差，有些东西我从初中看到现在也没能完全记住，但是在大背景下像又快又准的这些能力都是硬性要求，既然我改变不了环境，也改变不了自己的记忆力和快速思考能力，那我的能力所能想到的办法就是逃避。其实我还是挺喜欢做题目的，特别是优质的题目，只不过一做就是几天。能力不足意味着我的要求只能降低，先考虑最基本的衣食住行，服装真没啥好说的，高中的夏两套冬两套，自从身体没长过也基本就没换过了，这不值得骄傲，当然也没那么夸张，父母有时候喜欢买衣服给你也没办法，反正不是女性的话对衣物的需求都是极低到以致可以忽略不计。食是几乎大部分人开销最大的部分，也正因如此它在某些指标中占据了分子的地位，我个人对食也就一日三餐了，再多的零食点心啥的也基本不是很需要，有些人可能只要一日一餐，但我个人觉得为了身体的健康发展，还是得遵循一下前人的智慧。住的要求也不高，只要像学校宿舍那样的，甚至只要其中的一个人位置，简单来讲就是上面是睡觉的床，下面是书桌，然后配上厕所和洗漱台就足够了。我对水电的需求也不高，电需要维持手机、电脑和热水器的运转，水需要维持洗漱、饮用和卫生的需求。至于行嘛，当今已经是阿宅的时代了，出门远行并不是非常的刚需，真要外出的话，无非就是找个餐厅吃饭，或者是为了放松身心的散步，其本身不需要任何支出。当我们总结回首的时候，最需要解决的问题就是“吃”了，果然“民以食为天”名不虚传。住的问题虽然看起来很大，但实际上是可以啃老的，如果一个人不结婚不生子，他会发现除了父母真就没有任何的牵挂了。而这些往往都是当代大多数人摆烂现状，或许我们唯一需要担忧的是重大疾病或意外的突然发生，这让我们联想到一个问题，就是生出有天生身体缺陷的孩子该怎么办，虽然我身边遇不到这样的人，但网络流传着大量的例子，抚养的过程对孩子和父母来说简直是双向的折磨，甚至有时还可能引来大量的网络吃瓜群众。只能说，这和前面的担忧是一样的，我没办法解决，就用一个“命运”来进行自我安慰吧，能撑多久就就撑多久，想放弃就放弃吧，自己的选择自己负责就行了。担忧往往都来自于欲望与野心过大，且与自己的能力不匹配，当你尽可能的压缩与降低需求就会发现生计问题从来就没有存在过，要知道我们的时代比以前好太多了。信息技术和互联网是个很好的东西，它在极大地降低了群众物质需求的情况下，还丰富了群众的精神需求。虽然感觉没必要，但我是想提一提如何利用好互联网。第一点是拒绝贪婪，对此我其实提过很多次了，而且也反复地给自己这样洗脑，奈何渴望怎么也控制不住，唯一的办法就是在这里继续给自己洗脑，直至成功的那一天。所谓的贪婪自然是多方面的，比如学习主题的收藏夹一直膨胀却没有缩小的趋势，比如网络的友人见一个交一个，比如网上的“美女”见一个爱一个等等。第二点是互联网的核心，多用一用p2p网络，不要只拘泥于中心服务网络，原因是单纯的就是扩展视野，拿个简单的例子来说 这就是我种子用多后的结果，我自己本身没下多少东西，但是由于p2p网络的运行机制，导致我们交换的时候会种子互传，结果一下子资源索引就翻了几百倍还不止。这还没完，通过学习资料的水印标签等，又可以链接到其它地方去，反反复复以后，我们就可以得到一个巨大的互联网了。最后，就是尽情地体会互联网所带来美妙吧，其实还有更多的东西，但只要一旦领进了门，其它的东西就都可以无师自通了，还有千万千万不要忘记你进入互联网的初衷是什么。","categories":[],"tags":[]},{"title":"杂谈：2023.10.01","slug":"杂谈：2023-10-01","date":"2023-10-01T09:15:46.000Z","updated":"2023-10-01T13:20:28.592Z","comments":true,"path":"archives/2023-10-01-杂谈：2023-10-01/","link":"","permalink":"http://example.com/archives/2023-10-01-%E6%9D%82%E8%B0%88%EF%BC%9A2023-10-01/","excerpt":"","text":"我的上一期活动是krkr模拟器Win版的再发布，经过几天的修养以后，我正在开启下一期计划，而这次的计划有些小庞大，是“用Lean4形式化望月新一的Inter-universal Teichmuller Theory”，就是那个宣称证明abc猜想的那篇论文。我是一个比较追求完美的人，如果一件事可以完成，那么在没完成之前，我是不会把它发布出来的，我并非从事着商业性的活动因此进度报告不是我的义务，如果个人角度来看进度报告只是给自己增加负担罢了，还会莫名形成一种周期性的无形压力。我想说的其实就是一件事，你可能很久都看不到我产出新的内容了(预估0.75年，即三个季度)。为什么要死磕这玩意呢？其实我想把它放到本科毕业论文中，说实在的大学水了太多论文，难得或者说至少也要在本科期间拿出一篇像样的论文来，这也算得上是一种小小的执念。不过不得不说的是，这个计划有些前途未卜，一方面是太多的前置性知识在Lean4中没有被形式化，而且IUT理论的叙述和传统数学的叙述有较大差异，熟悉这些表述的适应期也很长，另一方面，关于IUT理论是否证明出了abc猜想也值得商榷，能读懂的人似乎太少了，不过我们已经没有退路了，画的大饼太多了，不一个个去完成的话就没有尽头了。接下来的一年计划也讲得差不多了，就稍微讲点我想讲的普通话题吧。在我的文章《数论大观园》的导言中穿插了不少奇怪的内容 这其实就是拿来表现我的世界观的。我个人是十分崇拜汉语的，所以在起名字的时候我都会优先以汉语为基础，虽然很多语言都有类似的特性，但汉语依旧是我最为亲切的语言。就拿上面这段话来说，你可能会觉得不少名字好像英语音译的感觉，但真正的原因是你在很少在汉语名字中见到它们而在音译名中见得比较多，少并不代表没有，另一方面是我们姓名的姓氏成分给忽略掉了，名字说到底只是一种称呼或者代号，而姓氏是文化的产物，而不同文化有着不同的习惯也是正常的，对吧！在知识体系上，我采用了不同于传统学科的分类，传统的学科门类在国内共有14个：哲学、经济学、法学、教育学、文学、历史学、理学、工学、农学、医学、军事学、管理学、艺术学、交叉学科。至于国外没有大类之说，其相当于把上一分类进一步展开，放到同一层级上(详细可以参考，比较有代表性的美国的Classification of Instructional Programs)。熟悉我文章的人应该知道，我并不喜欢分类这件事，过分地划分界限，会导致交叉学科横行。由于当今的知识体系是极度专业化的，所以你无聊的时候随便翻翻专业目录，或者去看看研究生课题，就会发现一片新的天地。目前所有的学科分类都是两层，化繁为简，我觉得这是合理的(虽然看起来有个XXX类，但这只是用来分学院而便于管理用的)，我就主要来讲讲分歧点和我的个人看法。首先，我在理学中剔除了除数学外的所有学科，从而使得数学代替理学，并将其它部分单独划分出了自然分部，意为自然科学。这并非我对数学的偏见而导致的，而是数学具有其它学科都无法比拟的子学科数量，凭什么他们可以分出一大堆子类，而我就只能栖息于理科之下，要理解也很简单这是从应用现实的角度出发的，而数学作为一个几乎所有人都学的楼阁学科，单独拿出来作为一个应用学科就比较奇怪了，如果你仔细研究专业目录的话，数学专业是不存在的，最接近的且确实能读到的只有“数学与应用数学”。不过在我们的学术世界观下，数学作为意识逻辑的高级产物必需具备一个地位。传统的计算机指工科中的“计算机科学与技术”，它能被单独拿出也不是类似数学我喜欢那么简单。首先，几乎所有的学科在现代都与计算机有联系，其次，计算机的信息内容量十分庞大，比数学还多，这些都是十分表象且众所周知的东西，其实还有一个很关键的点在于，此处的计算机不能单单就指电子计算机那么简单，不然怎么把它和电子信息给区分开来呢？计算机的核心在于“规则的创造与绝对的运作”，而信息的表达与传递，我会在后面的语言继续探究。也就是说我们要这样认为，计算机就相当于“世界中的一个小世界”，区别在于自然世界不能人为制造规律，而计算可以。这其实源自于我之前所说的“无限堆叠神论”的变形，过于玄乎的东西也不多讨论了，总结起来就是“世界生世界者，乃计算机也”。工业主要就是指工学，这个没啥好说的。但有些需要说的要点，我们将艺术学合并进了工学，虽然两者看起来没什么关系，但如果我们理清了艺术学和工学，学了啥，干了啥，或许就能有所理解了。它们本质都是通过理论知识来获得产品的过程，只不过工学的产物叫工业品，艺术学的产物叫艺术品，前者依赖于理性，后者依赖于感性，但他们在很多地方是有融合的，最简单的例子就是“服装设计”和“服装制造”了。与其说我们合并了两个学科大类，不如说是我们重新阐述了工业的含义。还有一个十分特别的“军事学”例子，它本质就是工学，这点是毫无疑问的，但它从国家意义上来看具有大家都理解的特殊含义在，所以出现在学科门类中，且只有特殊性质的大学才能开设，也是毫不意外的。当然军事学中还有一些思想性的东西，这点我们会在后面继续探究。生命主要指，农学和医学两大部分，大学本科其实是没有高中所学的生物这门学科的(排除特殊计划班)，但研究生有，被称为生命科学，农学和医学在研究性质上就是生命科学，但它们与生命科学的区别在于更偏向于生命科学知识的应用，而生命的运行机理由生命科学进行产出。我一向认为理论和应用是不可分离的，它们就应该视为一个整体。这时你可能会问了，既然如此自然和工业为什么要分开呢？那么我们必须理解一个共识性的观点，物质决定意识，那么我们还得把生命看成自然的一部分了，直接“自然工业生命”成为一个整体部门。如果一个分类只有一类，那么它就失去了分类的意义，生命之所以有特殊的地位是因为知识的产出依赖于生命，另外生命的含义不能仅仅地局限碳基生物。实际上，医学农学什么的和工学具有很多交叉的地方，对于那些部分，我们理应认为其是工学的内容，那么它所剩下的大量的生命规律了。所以“自然-工业”对“理论-应用”的区分是完全不同的，准确的说法是“理论-应用”应该分成两类，生命本来应该属于自然的一部分，但由于二元观点的存在和生命在自然中的特殊地位，因此要单独地拿出来，而农学和医学的核心部分是生命理论，属于生命科学的一部分，而外沿的应用属于工业性质的内容。其实只要阐明了一个个词的内容，这种分类是可以理解的。自然科学已经没了，后面是社会科学的内容。前两个“历史”和“哲学”就是字面的意思，我们主要来讨论语言学和没出现的那几个的归属。通常语言是归在文学之下的，但我持有相反的观点，正确的方向是语言成就了文学，语言是自然与社会的连接桥梁，一旦脱了语言，文化传承与文学思想交流都是不可能的。我觉得这些东西，只需启发性引导几句，大家都是能理解的，我知道你们的核心纠结点在于思想不浮于文字的共通性，但我们也必需指出思想的理解永远都是不可能共通的，除非人完全一样，否则总会随着你的语言环境、生活阅历而改变。而我所认为的思想性内容就是这里的哲学，大家所认为的哲学是系统的世界观和方法论，但我们揪其核心它就是一套思想理论，在我看来哲学和文学是几乎没区别的，对自然的看法终究还是得靠自然科学，由于哲学更好听一点，就叫哲学算了。这样你就理解了吧，文学在分类中划出两大核心，一是思想性思辨内容，二是用于表达的语言内容，前者扔到哲学中去，后者放到语言之中。这是你又应该意识到一点，诸如经济学、法学、管理学、教育学等本质上都是思辨性的东西，虽然法学从国家意义上有些不同含义，但法学的理论在研究层面上就是思辨产物，至于具体的法律条文，这并属于学术研究的范畴，这应该是很好理解的一点。看到了吧，“哲学”在我这里的含义是十分丰富的。对于语言我们还有更多需要理解的东西，语言并不单纯地指各种自然语言那么简单，还包括计算机语言、编码、翻译等。任何可以起到传达信息作用的媒介都可以视为语言，例如自然语言用于本国之间的交流、翻译用于各国之间的交流、计算机语言用于人与计算机的交流、编码用于计算机间的交流…懂了吧，这就是语言所具有的丰富内涵。最后，我们要指出八大主部是不应该继续合并的，我们已经区分出了“哲学”和“语言”，那么历史的意味何在呢？历史的研究理论通常富有思辨意味，历史的传承也带有主观色彩，但是它代表了时间这个维度。知道吗？作为一个理科生，对时间这个维度是十分敏感的，虽然在相对论的框架下，时空是一个统一的整体，但是时间作为因变量的地位从来都没有改变过。历史并非单纯代表过去那么简单，而是通过过去的存在来告知我们未来的存在，从而使得“过去-现在-未来”形成一个有机的整体，反正这就是历史在我心中的地位，别人怎么想就不关我事了。","categories":[],"tags":[]},{"title":"我还想做的事","slug":"我还想做的事","date":"2023-09-02T23:41:56.000Z","updated":"2023-09-03T13:50:19.817Z","comments":true,"path":"archives/2023-09-03-我还想做的事/","link":"","permalink":"http://example.com/archives/2023-09-03-%E6%88%91%E8%BF%98%E6%83%B3%E5%81%9A%E7%9A%84%E4%BA%8B/","excerpt":"","text":"我曾经说过，干玩逻辑这一票，就把数学给扔掉。我很喜欢数学，这是毋庸置疑的，问题在于让兴趣成为一种职业，好像不是什么好事。这并非从数学中的得来的体会，而是学习中，做为十分热爱知识的自己，当面对一项项需要按时完成的任务时，不禁就会觉得厌烦，当一次次体会那种压迫感时，就会一种种难以突破的窒息感。没错！问题就出现在“自由”上，兴趣是一种自由的存在，当课题被限制时，当时间被限制时，当形式被限制时……它就只能作为任务而存在，而没有被冠上兴趣的资格。而且真要把数学当成职业的话，那可太难受了，写出成果其实挺简单的，但是得到令自己满意的成果，是近乎绝望的。你可能会觉得我说的太过了！确实，应用数学具有无限发展的潜力，但是作为一个数学的偏执狂，兴趣点从来不在于此，而在于更加纯正数学血脉，无法就两点，新的数学理论和解决猜想。“新”，的数学理论到底意味什么呢？在如今庞大的数学体系下，至少我们并不认为“旁系”能作为新数学，如今的数学早已被挖空，无论是基底还是上层建筑，我们已经找不到任何新的道路了。说起来，似乎还有人在数学的基底中寻找完美理论，我的个人评价是，如果不能改变语言本身那永远都是不可能的。数理逻辑的好多不可能定理，还有形式证明的许多东西，我在高中就有所了解，只不过当时的消极言论比较多，导致我的关注深度不够，这次借着我几年修炼来的基底，重温了一下数理逻辑，也学习了一遍类型论，也深入了解了各个证明工具。在此之前我本以为这是数学的结束，但我错了，我终于找到了我想要做的且适合我的事情，就是参与到数学的形式化工作。对数学严谨的最求，对数学知识的热爱，对无法贡献数学的遗憾，最终汇聚而成的结果就是“复现”，这就是我在数学中唯一能做的事情。当然这东西肯定是无法作为工作的，因此它将成为我对数学最后的遗念，与之相对的在学习上，我将渐渐走向自然科学和工程领域。不过嘛，我从来都是多线程进行的，一般都是学着学着，累了就换下一个，这算是我的一个缺点吧，但拜其所赐，我觉得自己的知识面算是比较广的，虽然它对我的考试没啥帮助，但我自己能热在其中就足够满足了。严肃的学习本分谈完了，我们来说点其它的吧，这篇文章来得有点晚了，其实是我的一个坏习惯，每次做完一件长线的事情以后，我就会找个Gal来推。第一件值得贺喜的事是，终于把去年屯的金恋给推完了，只剩下一个樱萌了，当然这也是一个长线过程，只不过刚好碰上了这个时间节点。金恋本身其实没啥好说的，只要不开启godentime都还挺好的，不过就算开了能回收开头能回收万事之源也挺好的，只可惜兄妹事实并没有震撼到我，因为无聊的时候翻翻资料就发现了姓氏一样，比较震撼的是脑袋缺口，有点超出认知还没有对应cg，不过仔细想想废萌也不大可能有猎奇的东西。好吧，废话说太多了，金恋不是今天的主角，真正的主角是“宝石心学院”，就是那个曾制作过恩典小镇和樱云的那个包菜社的去年新作，这作品在去年我就一直想推，但这玩意片假名太多了，机翻辅助都有些不好读，所以就一直被放着了，但今年在chatgpt的加持下，机翻水平直接上升了几个档次，再稍微配合一下原文，终于在这几天把它推完了，只能说确实过瘾。我该说点啥呢？讨厌圣母，理解圣母，成为圣母？当然了“圣母”不是核心，当时的公主宣讲，我还真以为要结束了，结果嘛！看了都知道，而且还玩了恩典小镇没有文字的类似套路。不知不觉感觉有好多可以谈的东西，我们一个个来说吧。比如大家都比较厌恶的圣母、感化之类的行为吧，说实在的我以前也不是很喜欢这种行为，但渐渐看多了似乎有点理解作者的意图了，我做不到改变别人的意志，但只想说一句没必要和虚拟作品较真，黑深残的时代已经过去了，现实中没办法追求美好就算了，难道连虚拟世界中也不允许吗？或许我们这类人会被嘲笑天真，或许我们会被认为不喑世事，但是心怀美好、心怀希望的感觉实在太好了。不过嘛！也有不少值得吐槽的套路，比如靠意志获得能力提升之类的，又或者靠群众之力之类的，不过仔细一些宝石心学院的主题好像就是意志，好吧这确实是一个区分点。但还有其它套路，比如无限反转，这可能是我觉得最不适的一点了，特别是最终之战的时候，我个人觉得中间稍微拉长一下战线也好，过于紧凑的反转很容易产生审美疲劳从而感觉厌烦，不过仔细一想可能是作品自身工期的问题吧，宝石心学院的世界观其实还挺庞大的，虽然核心理念就一个意志宝石，但串起来的东西却十分的多，虽然故事确实完整，但还不够多，但除了无病呻吟我啥也做不到，真是抱歉。说起来，我好像只会抱怨和吐槽，就不能把优点夸一下吗？额，只是优点和感悟点都是只能靠自己去感受的，其实很久以前我就说过吧，文字就是拿来感悟的，无论优劣，而评价的目的是交流，提出自己不喜欢的点，让别人据此自行思考判断，是否需要为此作品花费时间，买商品先看差评也是这个道理。所以我再来说一下这个作品中我不喜欢的几个点吧，首先是最后的“时空”和“成神”，都有这种牛逼的能力了，为啥不让两个已逝之人在最后露个脸给个安慰，哦露脸了，只不过在思想中，要么你就别加这种能力，这种能力本来就太犯规了，让班长觉醒点其它的能力也好些。然后是最后的大合照问题，官方钦定的显然是班长和男主的cp了，那就别加其它线啊，加了也不做差分，还是班长靠着男主，猫猫靠着王子，其实朋友之间勾肩搭背的好像也没啥，但就是看着不爽。这里可以透露一个事实，其实我是一个纯爱战神，最近两个季度里我最喜欢的恋爱番是，我心理危险的东西和甜点转生，前一个很自然后一个你没看错，就是甜点转生，没有原因就是喜欢纯爱。其实不想讨论优点的原因就是容易剧透，有不少作品似乎具有一次性，但其实我个人觉得真正优秀的作品是不会因为剧透而失去光彩，并且有着温故而知新的效果的，具有戏剧性的东西比较难做到这点，所以才说平淡而美好才是如今的主旋律，如今的作品虽然不具有古典韵味，但能够用来反复温存美好就足以成为它留下来的理由了吧。失去珍视之物与复仇一直以来都是大多数作品的主要冲突。关于其讨论实在太多了，所以我就想讨论一下自己，“我害怕失去什么吗？”自问自答从来都是阅读一部作品后的最大体会。不得不说，我似乎害怕失去，但好像也就那样，因为就算失去了又能改变什么呢？曾经我对数据十分的珍惜，但自从失去几次后，早就已经无所谓了，我之所以会去收集只是为了满足自己的搜集欲，至于能不能发挥作用好像也不是什么重要的事，因为需要的时候我会自然地去把它找回来。你说绝版，可是仔细一想，我收集的都是什么呢？基本都是学习资料和ACGN，那你觉得稍微少学点东西，又或者稍微少看几部娱乐作品，真的是很严重的打击吗？至于亲人，我不是很想谈论如此不吉利的话题。事实证明，我是缺乏野心和欲望的，并没有什么伟大的蓝图与构想在我脑中生成，我也没有实现他人愿景的义务。而平淡生活的构想是十分简单的，一天工作从早上8点到晚上5点，中午休息一个小时总共8小时，每周还有双休，如此少量的工作时间，只要求全国平均薪资稍小一些就够了，对于生活水平要求不高的自己来说，这也足够攒钱来实现自己的爱好了。而在空余时间能做的事情就多了，搞搞数学的形式化、学学自然科学和实践工程、或者着迷于ACGN、还可以做做饭做做家务，不得不说料理其实也是我的兴趣之一，虽然机会都在寒暑假，所以磨练实在不够，但以后的机会可就太多了。未来会发生什么样的变故，我不知道，至少如今我的期望就是如此的简单。","categories":[],"tags":[]},{"title":"0word5","slug":"0word5","date":"2023-08-25T02:07:34.000Z","updated":"2023-11-12T02:21:11.853Z","comments":true,"path":"archives/2023-08-25-0word5/","link":"","permalink":"http://example.com/archives/2023-08-25-0word5/","excerpt":"","text":"摸索走向共产主义的道路，思考共产主义社会的运转方案。","categories":[],"tags":[]},{"title":"0word4","slug":"0word4","date":"2023-08-24T02:07:25.000Z","updated":"2023-09-03T13:50:18.769Z","comments":true,"path":"archives/2023-08-24-0word4/","link":"","permalink":"http://example.com/archives/2023-08-24-0word4/","excerpt":"","text":"ACGN娱乐中…","categories":[],"tags":[]},{"title":"0word3","slug":"0word3","date":"2023-08-23T02:07:19.000Z","updated":"2023-09-03T13:50:18.769Z","comments":true,"path":"archives/2023-08-23-0word3/","link":"","permalink":"http://example.com/archives/2023-08-23-0word3/","excerpt":"","text":"理论物理学习中…","categories":[],"tags":[]},{"title":"魔群月光","slug":"魔群月光","date":"2023-07-27T07:34:21.000Z","updated":"2023-09-03T13:50:22.129Z","comments":true,"path":"archives/2023-07-27-魔群月光/","link":"","permalink":"http://example.com/archives/2023-07-27-%E9%AD%94%E7%BE%A4%E6%9C%88%E5%85%89/","excerpt":"","text":"什么都略懂一点，生活更多彩一些。 这么久，这么久，才完成了最新的一个猜想整理，不是因为我偷懒了，而是因为我现在正面临大三升大四的麻烦阶段，有太多学校的事要完成了，像学年论文、毕业实习之类的，不过排除万难之后，总于把它给搞定了，高中时期的遗愿又完成了一个。至于魔群月光，也没啥可讲的，它其实也就是名字吸引了我，内容有那么点巧妙，相比与我之前讨论的朗兰兹纲领还是差太多了。那么，我的下一个目标，自然就是数理逻辑与计算机证明了，这个论题我一直都很感兴趣，以前也经常试着去阅读，但由于数学基础不多，很容易导致读起来云里雾里的，但现在的我应该不一样了吧。好了，有关数学就说这么多吧，我来讲点题外话，说说我的大学都是怎么渡过的，不知不觉都已经快要毕业了，真是感慨良多啊！我的高考处于十分不巧的一年，正好是疫情爆发的那一年，也是近几年中，高考唯一延期的一年，虽然叠了不少的buff，但也就那样。唯一让人不爽的就是疫情防控了，直到大三上学期我都被笼罩在口罩、核酸检测与防控的阴影下。不知是不是疫情带来的结果，还是大学的固有特性，导致我在这两年半中直接升级成了宅男，除了舍友和经常露面的班长，基本没有认识的人了，不过渐渐觉得宅宅的生活也不错，可以更好地投入到自己想做的事情中去。二次元，或者称为ACGN，对应数学的四大竞赛科目：代数(algebra)、组合(combinatorics)、几何(geometry)、数论(number theory)，我在高中时就有所了解，但奈何多方面原因，并未深入接触，不过当时由于我挺喜欢读小说的，喜欢各种故事，导致现在大学期间过渡到ACGN的哪个方面都是十分的顺畅，其中我最喜欢的是G-galgame和N-novel，动漫基本都是看比较新的，很少去看老番，主要因为大多动漫都是改编来的(其实是不太能接受老画风)，戛然而止挺难受的，不如看原作算了，至于漫画大多都是因为动漫去补原作才看的。作为宅宅，我还去过一次较大的漫展，但感觉没啥意思、也很不自在、商业气息也比较重，就再也不想去了，或许以后能吸引到我的只有特定的游戏展了，可惜地点太遥远了。入宅这么久，最大的体会就是学会了放弃，在高中时期接触的作品就是经典名著，所以我的基本准则都是看了就一定要看完，管它高中有多忙。但现在不同了，低创内容见多了、流水账作品看多了，渐渐觉得看完已经不是什么要紧的事了。基本看到哪里不想看了就不看了，没完结就看完放着，哪天想起来了再看，反正能看的东西多着，而且看这些东西只是拿来放松和打发时间的，目的达到了也就够了。比如下面的两个，“理科生”和“找爸爸”，就是看了没完结就放着的类型，哪天想起来了再哪天看 最开始还是挺喜欢的，后面发现也只是个噱头就不想看了，比如“理科生”我觉得明明有个节点可以完结了，就硬是不完结。而后面这个，我没看过“辉夜小姐”，对这个作者不是很清楚，不过就推子的观感来看，除了几个经典镜头以外，真就只有日常了，而且爆发点的堆积全靠文字，还不如多画几个画面，这样完全就浪费了漫画这个形式。目前我在追的小说是“游戏人生”和“欢迎来到实力至上主义教室”、在追的漫画是“狂赌之渊”和“FX战士久留美”，所以我的兴趣可谓是一目了然了，目前只玩两个二游，全是米家的 也不是没玩过其它游戏，只是不想有太多事要干，删删减减就剩下这两个我还愿意玩的了，其实崩3是原神后不久入坑的，但因为退过几次又回过几次，所以天数匹配不上，但最近因为希儿又回来了，顺便搞了个原画集，上次原画集正好是退坑后不久，搞得我现在缺第一册难受死了，都犹豫要不要去把它买回来。至于原没啥好说的，只是一个风景取材的东西，除了第一个五星-刻晴和第一个限定五星-绫华，有点历史情怀以外，其它角色是真的不熟。除非活动和新版本，这两游戏用的时间真不多，原就上线做个委托，蹦就上线几个一键做满活跃，平均下来不到半个小时。说到游戏可以展示一下我的steam 基本都是这些日子我推过的国G，不过并不止这些，后来我发现了steam白嫖的方法就再也没买过了，不是我不想支持，只是国G的水准参差不齐，实在不想买一些不合格的东西，又或者是浪费时间去检查其优劣判断其是否值得，至于已经买过的也就没办法了。几个月前，我评价过我推过的日G，那么国G要不要说道一番呢？我觉得完全没有必要，让我印象深刻的真不多，而且很多都是短篇，没有充分的内容来讨论。非要讲的话，就说说“恋爱奇谭”吧，我本来是不喜欢多男主的g，但奈何被它的第二部耍了一道，一旦破了戒就没啥好说的，连3rdEye的游戏我也开始推了，当然故事交织不深的算不上多男主，所以就算恋爱奇谭3以钟齐北为主角，我也会第一时间推完的。一不小心讲了太多休闲时间，但对着“魔群月光”的标题，还是挺应情应景。再来讲讲我的主业吧，虽然大部分人可能会误解我只偏向理科，但并非如此，无论政治、经济、法律，还是文学性的内容，只要我想知道就都会去了解，比如我还特地研究过“公司法”、“如何注册公司？”和“伪造公章罪”等，至于原因就不说了，就算我不去了解，学校的各种形式内容和必要的机械训练，也会强制让你知道很多东西。当然“知道的越大，不知道的就会更多”，我也没高傲到自己无所不知的地步，但就自己视野内的东西做些评价的权利还是有的。下一步计划就如之前所说是“数理逻辑”，它与我心心念念的机器证明密切相关，它可能是我对数学最后的挂念，虽然未来的事情也说不准，但我确实挺想放下数学，去专心工作的，勤勤恳恳过得悠闲一点，不要有太多烦恼。你可能会疑惑，工作悠闲吗？我的“悠闲”是那种无需思考太多的悠闲，只要循规蹈矩地完成任务就能度日的那种状态。说句实话，现在看ACGN中的任何一个都是，人在心不在的状态，把它换成工作也差不多。或许最快乐的时候，是搜集资源的时候，至于放在硬盘看不看就是另一回事了。其实也没啥可讲的了，我只是看着太久没写文章了，就来随便说说几句。“我不乱挂文章的信念”？这早就没了，反正自己的水平不过如此，能写出的东西也就那样，不如就想说的时候随便说说，这就是我目前的状态，文章越来越短就是最好的证明。","categories":[],"tags":[]},{"title":"0word2","slug":"0word2","date":"2023-07-22T02:07:10.000Z","updated":"2023-09-03T13:50:18.768Z","comments":true,"path":"archives/2023-07-22-0word2/","link":"","permalink":"http://example.com/archives/2023-07-22-0word2/","excerpt":"","text":"计算机学习中…","categories":[],"tags":[]},{"title":"0word1","slug":"0word1","date":"2023-06-21T02:06:49.000Z","updated":"2023-09-03T13:50:18.768Z","comments":true,"path":"archives/2023-06-21-0word1/","link":"","permalink":"http://example.com/archives/2023-06-21-0word1/","excerpt":"","text":"数学学习中…","categories":[],"tags":[]},{"title":"为什么要吹嘘数学","slug":"为什么要吹嘘数学","date":"2023-06-01T02:47:46.000Z","updated":"2023-09-03T13:50:19.273Z","comments":true,"path":"archives/2023-06-01-为什么要吹嘘数学/","link":"","permalink":"http://example.com/archives/2023-06-01-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%90%B9%E5%98%98%E6%95%B0%E5%AD%A6/","excerpt":"","text":"自从上了大学，有了电脑，阅读都沉迷于ACGN不能自拔，文学性作品的阅读量也远不如中学了，甚至基本就没读过，特别是经过时间洗磨后的现在，想说点骚话都无从下手了，而且更难受的是这半年来的AI发展迅速，说起来最近好多要交的文字性东西，像xx感、xx论文什么的，基本都是靠AI来生成了，一个字就是“懒”。不过就算憋不出什么东西来，文章也还是得写，就怕哪一天连话都不会说了。有太多东西从出生到死亡都只是计划，但这确实也是无可奈何的事。说起来最近在武汉玩随机乘公交地铁挺有趣的。 先来说说我自己吧，看看我到底有没有论事的资本。我自诩为一个多修的人，可能听我说吧，你也不信，反正我自己信就行了。不过嘛，我真正比较精通的理论，也就数学和物理两个罢了。物理基本都是高中时候学的，当然不是指高中课程里学的，而且我主要还是专修理论物理，里面的理论要理解并不多，基础原理就那些，大部分都是在数学推导。当然了，如固体力学、流体力学的应用物理之流也多多少少学过，但主要还是要用于现实中，不过我基本没啥机会。其实，我在刚上大学的时候，很喜欢翻培养方案，基本所有985和211的各个专业都被翻了个遍，在此基础上搜集了一大堆电子书，“搜集癖”很久以前就有了，也没啥大惊小怪的，只不过基本大部分书都是走马观花，稍微了解一下这个专业在讲啥就足够了。想要我全学？你开玩笑吧，要是有这个能力，我还会沦落到当今这个地步吗？不过嘛，看你怎么看待“学”了，如果我的“量子速读法”也算的话，那我可真是太强啦。不过如果真是我感兴趣的，又或者是有用的，我确实会一探到底，比如吧，上大学后，我变成了一个实在的网上冲浪者，这时遇到的大问题就是“网络流行语”或“流行梗”了，像我就秉持着求真务实的态度，一一去理解其“内涵”。其实汉字还好，最让人厌烦的就是缩写，嘛，大环境如此。不过从根本上，我的多功能性还是来自于大学所处的环境，比如学校有“经法管融通”的学分要求、自身专业要求我掌握统计学的理论和R(Python)之类的数据分析工具、自己又是一个理科爱好者专攻数学和物理、数学的计算和物理的仿真要求我掌握万能的C/C++。总之，我对自己的知识储备是比较自信的，而且这还没算上我中学所学，之所以不算只是感觉好像忘光光了。接下来我必须引入“纯数学无用论”的正题，我知道，很多人都在告诉你数学很有用，又是什么科学之母，又什么计算机之基，就算现在真的没什么用，它还能以远古的例子告诉你，数学具有预见性的潜力，好歹我也在数学界摸爬滚打了这么多年，我怎么可能不知道这些东西。但据我所知，基本所有的专业，最少只学高等数学和高等代数，要么多学一个概率论和数理统计，主要是统计金融经济之流的专业，剩下的基本就学专业课了。我拿与数学最近的物理为例，大家都知道广义相对论要用到黎曼几何，量子力学要用到复变函数和希尔伯特空间，但基本有压缩到了一个叫数学物理的课程中，这其实没啥，最难受的是自成体系的符号。量子力学是最好的例子，好好的一个向量非得写成竖线加折括号的形式，还美名曰“便于计算内积”，说的就是你“狄拉克符号”。它是什么东西都懂，有人喜欢有人厌，反正我喜欢的还是矩阵力学的形式，它比较贴近数学。就我个人观点而言，除了算法、物理和计算(算术、微积分和线性代数)，很多时候引入数学纯属造作，起不到作用又无助于理解，我的建议是“不要”，这样反而能化繁为简。像我读了不少的书，最讨厌的无非就是啰里啰嗦的，文学的就算了本来就是打发时间用的，但学术的不本就应该言简意赅吗？哦，原来有字数的要求在那，那就没办法了。有人可能会觉得数学论文不容易水，比较实在，但就我个人看来数学比基本所有学科都好水论文。一是，其理论的丰富程度是任何学科都无法企及的，二是，其高度抽象的理论只需要逻辑就够了，三是，习题问题一抓一大片。想要反驳数学无用论，又或者引入数学有用论，无非就是在“用”这个字上做文章，但如果放到大众视野来看，一件事足以说明数学的无用，即“任何学科都能科普前沿，唯独数学做不到”。难以被理解正是数学无用的根源所在，嗯，你跟我说数学不是也有大量科普吗？这就不得不谈一下如今“愚昧而落后的数学科普”了，无论什么1+1=2、还是什么0.9循环等于1、又或者啥欧拉公式、没活的时候又拿起庞加莱猜想和费马大定理、生活的时候又可以拿起概率论和博弈论，真正体会过数学科普的就会发现，数学科普从来都是老生常谈、毫无新意，而且从来都是浅尝辄止，这正是数学学科自身特性所带来的，很久以前有这样一个笑话，“现代的数学本来就像一本由定义和定理组成的字典，那么科普字典的内容真的有必要吗？”。纯数学无用论其实是由其自身定义所给出的，有用的数学叫“应用数学”，定义定理堆砌的数学叫“纯数学”，而对数学理解较深入的人就会知道，“纯数学”在数学中的占比至少超过百分之九十以上，所以我们可以自然的引出“数学无用论”的论调。数学的科普虽然都是千篇一律，但如果将分层科普引入数学就完全不同了，我很喜欢一句话“数学的科普就是引论”，人能否接受科普，主要在于其理论基础的多少，除数学以外的基本所有学科都不存在理论深度的问题，它们的前置知识永远都可以为零，而数学就完全不同，一个理论往往要依赖于前一个理论才能读懂，而且如今层层嵌套的数学，有些理论的依赖链长的难以想象。有些人喜欢这么调侃，“学物理的懂数学，但学数学的不一定懂物理”又或者是“学统计的懂数学，但学数学的不一定懂统计”，但事实是“学数学的不一定懂数学”，数学的一部分不能代表整个数学，以知识的平铺长度来对比数学的面积也是不合理的。数学科普的浅尝辄止带来的是无穷无尽的民科。民科其实没啥，我自己也是，问题是你自己的素养是否达标。依稀记得前不久我关注的一个课题是“数学的机械验证”，简单来讲就是将自己的证明完全形式化，并由计算机来验证你证明是否正确，经过大量查阅，这方面的东西确实存在，如Cop、Isabelle、Lean之类的，但科普不多，懂的人也不多，而且很多数学家基本不用，甚至不知道。实际上，如果民科能学会这种东西，并将自己的证明完全跑通，那么又有谁能否认其证明的错误，因为这可是完全地道的形式化证明。为啥我不太想步入数学界呢？因为我在像“为什么机械验证的形式化证明没有被数学界广泛采用？”之类的问题上看到了很多血压飙升的回答。我就假惺惺地提取几个核心观点，“平凡的结论在形式化下变得不平凡(一言以蔽之繁琐)”、“证明对数学而言是次要的，无非只是说明自己观点的正确性(观念和想法更重要)”。先来说说后面这个，只要观念正确证明只是时间的问题？关于这个就不得不谈一下佩雷尔曼了，那个证明了庞加莱猜想的人，反正在很多人的心理都比较高大，不慕名利之类的。那我就以小人之心度一把君子之腹吧，那就是佩雷尔曼有自知之明，他知道自己的贡献并不是大头，而哈密尔顿的里奇流才是，而那时的数学界又基本都是谦尊之流，完成了就是完成了，名誉当之无愧，因为“站在巨人的肩膀上”就是这么一回事，甚至就算佩雷尔曼的证明缺少大量需要补充的证明也一样的。我想说出后一句的人大概是持有“和佩雷尔曼一样”的想法吧，我认为当今数学世界有必要如此吗？你证明跟赶集似的，正误也不管，先提出来再说，错了也就一笑了之，正确了就名垂千古。等等，这难道不是和民科如出一吗？区别只是因为有没有上过数学专业吗？更有甚者还能把它和中国的古板教育给联系起来，嘛，我也不知该说啥。干脆出一个新学科，叫做“数学创新”，专门用来收容新的数学想法的学科，而另一个学科就叫做“古板数学”，由完全严谨的定义和定理配上形式化的证明构成的数学词典，而古板数学和数学创新共同构成了纯数学的两大支柱，让想去的人各寻去处，比如没有数学修养的民科和不喜欢严格证明的人就可以去“数学创新”开拓一片新的天地。另一个问题是繁琐，这是个确实的问题，其实主要因为计算机表达的线性和数学纸上证明非线性的不匹配问题，我自己也玩过一段时间的形式化证明，其实证明的过程本质都差不多，只是习惯比较难以改变，很多数学符号比较难在输入中复现，因为计算机会改变成各种英语短语，就自身感受而言，用多了配上提示，体感上差不了不少。真正的问题是库的问题，就是说前置定理的存入，除了很多形式的理论，像抽象代数、拓扑学之类的，很多基础理论都不能作为前置事实，很多人的烦正是因为这一点，简单来讲就是机器的可以作为条件的性质和人的是不一样的。在我看来，主要还是证明机的架构问题，再多的也不讲了，这涉及我以后要写的毕业论文了。我个人是极其推崇形式证明的，这一点和前一个论调结合起来，我喜欢数学的原因正是因为严谨，而不是什么创新超前，不准确的东西就别叫数学了，叫哲学多好听啊。我也没有贬低哲学的意思，中学的时候我也挺喜欢哲学的，只不过辩论辩论、没有结果，而且读了“老庄”以后，基本也就把其当成无聊时的文学性甜品了。已经说了这么多废话，前面的铺垫也足够了，是时候也该引入我们的正题了，我比较喜欢玩阴谋论，吹捧数学的理由很简单，就是不断地把有志的人拉入这个深坑，比如我自己。数学是个很好出结果，但很难出“好结果”的地方，什么叫好结果呢？这很难定义，但我们可以给个定性的标准，是否让人眼前一亮。很多数学能读到底的人，最后的宿命也就是把别人往这个坑里拉，读不到底的人基本都去干其它的了。别听“数学好转专业这种鬼话”，真正准确的是“有能力的人到处都是金子，只不过读数学的人稍多一些”，不过这里的“能力”主要指理科方面。你要是自己能力不够，本科读什么都没差别，管你“原来是计算机金融的”还是“由数学转进去的”，而且就算不是数学专业的又不是不学数学，而数学专业也就只有数学了(通识课？)。我还在本科，当然不知道搞数学的人都是啥样？又处于怎样的状态？但确实好久没有令人眼前一亮的东西了，包括菲尔兹奖，也有不少人感到不明不白的。而很多现在的论文吧，确实有做不少工作，也稍许推动了数学的发展，但总是没有十九二十世纪那种振奋人心的感觉。我很想说这么一句话，“数学的大厦已经建成，而后人无非也就是在各种猜想上修修补补地完成证明了”。我个人认为，数学在祈求天才的出现，但是人人都能感觉数学好像已经没有可以伸展的地方了，我们能做的无非就是吹捧数学，让更多无知迷茫的羔羊投入到这个深坑之中。很多时候，你自以为的天才想法其实随着你学习深入以后就会发现，都被想到过了。这说的其实就是我自己，也是让我只想学数学，而不想发展数学的根本原因。最后谈谈物理和计算机吧，我一直比较认同的整体观点是这样的，统计学用于汇总和分析数据，物理学在此基础上总结规律，接着用数学进行推导得到更多结论，最后用计算机的计算能力来模拟现实。你知道我在说什么吗？说的是认知世界的一体方法论，即“统计-物理-数学-计算”链。我一直认为叫啥其实都不重要，比如我们可以变个形式“数据现象-规律公理-推导定理-计算模拟”，感觉讲着讲着要变成科学的研究方法了，我们就此打住。说到底啊，我只是想说明自己学习的正确性，而为了说明它我自然就会找出各式各样的理论。俗话说的是“学好数理化”，我们实际应该把“化学”换成“编程”，不是说化学不重要，因为我个人认为物理啊、化学啊、生物啊什么的都是一个东西，单纯从汉语的角度“物理”指的是事物的道理，应该用“the laws or principle of things”来对应比较合适，只不过不知为何它被对应到了Physics，于是物理的含义也就变成了现在所认知的那样，语言也是一个比较奇妙的东西，翻译也是一个比较有趣的论题，以后用空再讲吧。“尽信书不如无书”，舆论只能帮你筛选，好坏终究是主观的，还是只能靠自己亲自验证。反正经过我的亲身学习可以告诉你，数学只是一个被吹捧的存在，学其它学科的时候要啥学啥就行了，而且纯数学没有钱途，就跟诈骗传销一样，当你深陷其中之时只能靠拉人才能存活，就跟培训机构给你制造考试压力以达到他们的经济目标一样。告诉你数学的神通广大，只是为了让更多的人投入其中罢了。虽然讲了这么多阴谋论，但我还是想说：“数学就是我的神，是我最崇拜的存在。”","categories":[],"tags":[]},{"title":"可能永远不会到来的告别--未来的方向","slug":"可能永远不会到来的告别-未来的方向","date":"2023-05-14T05:46:51.000Z","updated":"2023-09-03T13:50:19.619Z","comments":true,"path":"archives/2023-05-14-可能永远不会到来的告别-未来的方向/","link":"","permalink":"http://example.com/archives/2023-05-14-%E5%8F%AF%E8%83%BD%E6%B0%B8%E8%BF%9C%E4%B8%8D%E4%BC%9A%E5%88%B0%E6%9D%A5%E7%9A%84%E5%91%8A%E5%88%AB-%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%96%B9%E5%90%91/","excerpt":"","text":"为什么我会如此着迷于数学呢？这真是件不可思议的事。丘赛结束了，对我来说确实如此，这次我没有贪心，只考了“分析”和“代数”两门，分别在周末这两天的早上，但是或许正是因为我选择了最卷的两门，最后呢？就是一无所获的离开了。是时候讲讲我和数学的故事了，这次能不能成功地和数学说“再见”呢？在高中有关我与数学的爱恨情仇说了挺多的，所以也不想重复了。我到底有没有数学的才能和天赋，这种模糊的存在，能知道才有鬼，唯一的验证法就是结果论。也就是什么也没得到，只是茫茫考生中普通的一员。我只是想读数学，但真的好困难啊！大概从初中开始，我就一直心心念念着中国的两所最高学府，尽管我超过了很多人，周围没有一个领居能打的。但是呢？越是向着高出前进就越是发现自己的渺小，我的水平虽然不高，在高中的时候也只是拿到了进入省赛的资格，但仅仅如此，通过在集训中与各种人交流也能发现，不要说省与省之间的差距了，连省内有着难以逾越的鸿沟。回到非初等数学，实际上本科的大部分课程，我在高中基本就已经自学过了，是啊！我对高考有没有上心并不清楚，反正看起来挺努力的。什么叫做自学过呢？简单来说就是对教程进行逐字逐句的阅读，并进行抄书。高中和我比较亲近的人应该是知道的，我高中的笔记有好几本，而且字也特别的小，而且跟高考没有半点关系。“抄”有啥意义吗？大概是没有的，最大的作用是防止我将阅读小说的习惯给带进来，做到真正的读懂一遍。至于高中嘛，反正是失败了。但是呢？我没有灰心，打算接着干。最开始，我还是很贪心的，打算把丘赛的每一本参考书都读一遍。原因是多方面的，一方面是高中学的被高中学校教的给冲淡了，另一方面则是试着开始读英语教程，在术语上达到国际标准。其实啊，也别被全英教程给吓到了，真要读的话，读着读着就习惯了，固定的句子就那些，我一个高考英语才一百二十多的也可以流利阅读，跟高考阅读真没得比。这一读两年就过去了，主要还是我的本科学业抢走了不少时间。由于2022年丘赛加了一门数学物理，结果我重操旧业，大三上半学期把数学物理的书也看了个遍。这时需要质问一下自己了，“真的学会了吗？”怎么学其实个很大的问题，像我自己，就是把书精读了一遍，每一个定义和定理的证明都是一遍遍地理解与验证，例子每个都看，而对于习题，只做两种，一种是正文留给读者自证的，另一种是看起来具有普遍性的，这些内容网上也可以查到。其实我可以很自豪的认为，全中国不超过千万分之一的人，在数学知识的深度上，在数学定理的理解上，在数学证明的展现上，能超过我，这是我和大多顶级高校学生交流后得到的结果，尽管都是在网上。但是，基本所有数学系的学生在解题能力上都能超过我。这是我最大的短板，也是我一直失败的原因。是我不会解题吗？不是的，是我解题太耗时间了。我的记性不知为何十分的差，对于好多定理的具体形式，真就只能靠着一些基本内容，手推验证一遍了，不过这还是问题所在。真正的问题是，我似乎没有“超能力”。一般人可能没啥感受，如果难题做多了，实力又不济的话，应该能感受到这种痛苦。丘赛报名前一些日子，即大三寒假结束，我就开始研究真题了。其实丘赛的前四年确实没什么，很多东西都太基本了，按照以前人的说法就是，大部分都是“默写书中的证明”，不过近几年也开始改变了，也正是从那开始，我发现了我与名校学生的差距。结果最后苟一苟，就像开头说的那样，只考了“分析”和“代数”，至于过程真没啥好说，我做题总是太喜欢解构题目了，写了好多草稿纸就做了一题，后面的连看都没看。总之没实力就没实力，说再多也没有用。比较令我惊奇的是，考“代数”的比考“分析”的少了一半多，以我个人观点来看，“分析”应该是更困难的才对。不过嘛，跟考生实际交流以后发现，考“分析”的不单纯是数学系，有不少工科的人，所以人确实不少。但“代数”就过于纯数学了，人少也是自然的，这不禁让我好奇，考“几何与拓扑”的有多少人，可惜的是没有去观摩观摩。目前的我已经没有任何“逆天改命”的方法了，说我爱学习吧，其实我很不喜欢学校那些重复的内容，说我不爱学习吧，那我为何能花这么多时间学这些没半点用的东西。这时有一句很好的心灵鸡汤，“不要让兴趣成为职业”，对啊！我喜欢就行了，至于结果如何，能得到什么，又有什么关系，这就是最为纯粹的热爱。你说考研？其实我已经说得很明白了，也不想多费口舌了。最后，聊聊我和数学的未来吧，目前已经整理“费马大定理”和“庞加莱定理”相关的东西，预计还有“数论”和“数理逻辑”相关的两个东西，搞完这两个我可能得和数学说拜拜了。嗯……希望能达到预期吧！至于我以后如何呢？大概率是直接去工作，当底层劳动人民了。不然还能干啥呢？数学已经将我的重要时光给吞噬殆尽，我的无数光阴也换不来数学的回头一撇，可能是我太廉价了吧！本来最后想写一篇小散文的，但想想还是算了，就拿下面的Ai图结尾，“无言”就是我的态度，也是对我目前状态的最好描述。","categories":[],"tags":[]},{"title":"","slug":"2023年华为软件精英挑战赛初赛/APlayer.min","date":"2023-03-24T01:50:01.677Z","updated":"2022-10-14T23:47:10.904Z","comments":true,"path":"archives/2023-03-24-2023年华为软件精英挑战赛初赛/APlayer.min/","link":"","permalink":"http://example.com/archives/2023-03-24-2023%E5%B9%B4%E5%8D%8E%E4%B8%BA%E8%BD%AF%E4%BB%B6%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B/APlayer.min/","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n","categories":[],"tags":[]},{"title":"","slug":"2023年华为软件精英挑战赛初赛/APlayer.min","date":"2023-03-24T01:50:01.675Z","updated":"2022-10-14T23:47:10.903Z","comments":true,"path":"archives/2023-03-24-2023年华为软件精英挑战赛初赛/APlayer.min/","link":"","permalink":"http://example.com/archives/2023-03-24-2023%E5%B9%B4%E5%8D%8E%E4%B8%BA%E8%BD%AF%E4%BB%B6%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B/APlayer.min/","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/","categories":[],"tags":[]},{"title":"2023年华为软件精英挑战赛初赛","slug":"2023年华为软件精英挑战赛初赛","date":"2023-03-24T01:20:06.000Z","updated":"2023-09-03T13:50:18.771Z","comments":true,"path":"archives/2023-03-24-2023年华为软件精英挑战赛初赛/","link":"","permalink":"http://example.com/archives/2023-03-24-2023%E5%B9%B4%E5%8D%8E%E4%B8%BA%E8%BD%AF%E4%BB%B6%E7%B2%BE%E8%8B%B1%E6%8C%91%E6%88%98%E8%B5%9B%E5%88%9D%E8%B5%9B/","excerpt":"","text":"无聊之时，为了不让自己的程序技术荒废，在学习数学之余，我又来参加比赛。截至到刚才不久，线上练习结束开始正式进入初赛，这是我的成绩 只能说我已经尽力了，在武长(湖北+湖南)区至少进入了一半以内，由于只有32以前才能进复赛，我看来一下，大概280多万，差了100万左右，初赛也不想搞了，就在下面放出代码。 const ap = new APlayer({ container: document.getElementById('aplayer'), autoplay: true, lrcType: 3, audio: [ { name: 'shadow memory', artist: 'Astilbe x arendsii', cover: './cover.jpg', lrc: 'shadowMemory.lrc', url: './shadowMemory.mp3', } ] }); 无聊之时，为了不让自己的程序技术荒废，在学习数学之余，我又来参加比赛。截至到刚才不久，线上练习结束开始正式进入初赛，这是我的成绩 只能说我已经尽力了，在武长(湖北+湖南)区至少进入了一半以内，由于只有32以前才能进复赛，我看来一下，大概280多万，差了100万左右，初赛也不想搞了，就在下面放出代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297#!/bin/bashimport sysimport math# GetMapDatadef readMap(): cache = [input()] while cache[-1] != &quot;OK&quot;: cache.append(input()) return &#x27;&#x27;.join(cache[0:-1])# Output Overdef finish(): sys.stdout.write(&#x27;OK\\n&#x27;) sys.stdout.flush()# ConstanttotalTime = 3*60mapSquare = 50*50robotNum = 4framePerMin = 50initMoney = 200000maxLinearV = 6.0maxAngularV = math.pi# GetFrameDatadef readInput(): inputData = &#123;&#125; inputData[&quot;wbNum&quot;] = int(input()) inputData[&quot;wb&quot;] = [] for i in range(0,inputData[&quot;wbNum&quot;]): inputData[&quot;wb&quot;].append(input().split(&#x27; &#x27;)) inputData[&#x27;rStatus&#x27;] = [] inputData[&#x27;rStatus&#x27;].append(input().split(&#x27; &#x27;)) while inputData[&#x27;rStatus&#x27;][-1][0] != &quot;OK&quot;: inputData[&#x27;rStatus&#x27;].append(input().split(&#x27; &#x27;)) inputData[&#x27;rStatus&#x27;].pop() return inputData##########通用代码########### 存在4层分级# 优先级自上而下# 顶:8# 1层:7# 2层:4,5,6# 低:1,2,3wbAbility = &#123; &#x27;1&#x27;:[0, 50, 1], &#x27;2&#x27;:[0, 50, 2], &#x27;3&#x27;:[0, 50, 3], &#x27;4&#x27;:[[1,2], 500, 4], &#x27;5&#x27;:[[1,3], 500, 5], &#x27;6&#x27;:[[2,3], 500, 6], &#x27;7&#x27;:[[4,5,6], 1000, 7], &#x27;8&#x27;:[[7], 1, 0], &#x27;9&#x27;:[[1,2,3,4,5,6,7], 1, 0]&#125;def isSameWB(wb1, wb2): if wb1[1]==wb2[1] and wb1[2]==wb2[2]: return True else: return Falsedef getDiatance(x1,y1,x2,y2): return (float(x1)-float(x2))**2+(float(y1)-float(y2))**2def getClosestWB(robot, wb): curInd = wb[0] curDis = 5000 for curWb in wb: tmp = getDiatance(robot[8], robot[9], curWb[1], curWb[2]) if curDis &gt; tmp: curDis = tmp curInd = curWb return curInddef getAngleOffset(source, target): if source &gt;= 0: myAngle = source else: myAngle = source + 2*math.pi angle = myAngle - target if abs(angle) &lt;= math.pi: return angle if angle &gt; 0: return angle-2*math.pi else: return angle+2*math.pidef getToDisSpeed(robot, wb): # 处理角速度 angularV = 0.0 if abs(float(robot[8])-float(wb[1]))&lt;1e-5: if float(robot[9])&lt;float(wb[2]): # 向上 offsetA = getAngleOffset(float(robot[7]), math.pi/2) else: # 向下 offsetA = getAngleOffset(float(robot[7]), math.pi*3/2) else: valueOf = math.atan((float(robot[9])-float(wb[2]))/(float(robot[8])-float(wb[1]))) if float(robot[8]) &gt; float(wb[1]): # 向左 valueOf = valueOf + math.pi else: # 向右 pass if valueOf &lt; 0: valueOf = valueOf + 2*math.pi offsetA = getAngleOffset(float(robot[7]), valueOf) if abs(offsetA)&lt;1e-5: angularV = offsetA else: if offsetA &gt; 0: angularV = -maxAngularV else: angularV = maxAngularV # sys.stderr.write(&quot;offsetA:%f angularV:%f\\n&quot;%(offsetA, angularV)) # 处理线速度 linearV = 0.0 dis = math.sqrt(getDiatance(robot[8], robot[9], wb[1], wb[2])) if dis &lt; 1.0: linearV = maxLinearV*dis else: linearV = maxLinearV return angularV,linearVdef isWbEmpty(wbN, pos): if ((int(wbN) &gt;&gt; pos)&amp;1) == 0: return True else: return Falsedef isSellToWb(wb, pos): if wb[0] in [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]: return False if (int(pos) in wbAbility[wb[0]][0]) and isWbEmpty(wb[4], int(pos)): return True return False##########核心代码##########def computeTheCommandWithNine(frameData): return computeTheCommand(frameData)##########不带9号################################# FrameData 字典# wbNum 工作台个数# wb 工作台List# rStatus 机器人List#####################def computeTheCommand(frameData): # 工作台梯队获取 de1 = list(filter(lambda x: x[0]==&#x27;8&#x27;, frameData[&quot;wb&quot;])) de2 = list(filter(lambda x: x[0]==&#x27;7&#x27;, frameData[&quot;wb&quot;])) de3 = list(filter(lambda x: x[0] in [&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;], frameData[&quot;wb&quot;])) de4 = list(filter(lambda x: x[0] in [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;], frameData[&quot;wb&quot;])) tmpde2 = list(filter(lambda x: x[5]==&#x27;1&#x27;, de2)) tmpde3 = list(filter(lambda x: x[5]==&#x27;1&#x27;, de3)) tmpde4 = list(filter(lambda x: x[5]==&#x27;1&#x27;, de4)) # 资源空缺的统计 de2、de3 theRequirement = [0,0,0,0,0,0,0] for wb in (de2+de3): for pos in wbAbility[wb[0]][0]: if isWbEmpty(wb[4], pos): theRequirement[pos] = theRequirement[pos] + 1 # 派遣情况 assignmnet = [0,0,0,0] # 指令集 command = [] # 机器人轮流查询，第一轮 for ind,curRob in enumerate(frameData[&quot;rStatus&quot;]): # 能卖则卖 if curRob[0]!=&#x27;-1&#x27; and curRob[1]!=&#x27;0&#x27; and isSellToWb(frameData[&quot;wb&quot;][int(curRob[0])], curRob[1]): command.append([&#x27;sell&#x27;, ind]) continue # 非空闲机器人 专注于de1、de2、de3 if curRob[1]!=&#x27;0&#x27;: if curRob[1]==&#x27;7&#x27;: closeDis = getClosestWB(curRob, de1) tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis elif curRob[1] in [&#x27;4&#x27;,&#x27;5&#x27;,&#x27;6&#x27;]: tmp = list(filter(lambda x: isSellToWb(x, curRob[1]), de2)) if len(tmp)!=0: closeDis = getClosestWB(curRob, tmp) tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis theRequirement[int(curRob[1])] = theRequirement[int(curRob[1])] - 1 elif curRob[1] in [&#x27;3&#x27;,&#x27;2&#x27;,&#x27;1&#x27;]: tmp = list(filter(lambda x: isSellToWb(x, curRob[1]), de3)) if len(tmp)!=0: closeDis = getClosestWB(curRob, tmp) tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis theRequirement[int(curRob[1])] = theRequirement[int(curRob[1])] - 1 # 机器人轮流查询，第二轮 for ind,curRob in enumerate(frameData[&quot;rStatus&quot;]): # 能买则买 if curRob[0]!=&#x27;-1&#x27; and curRob[1]==&#x27;0&#x27; and frameData[&quot;wb&quot;][int(curRob[0])][5]==&#x27;1&#x27;: tmpWb = frameData[&quot;wb&quot;][int(curRob[0])] if wbAbility[tmpWb[0]][2] == 7: command.append([&#x27;buy&#x27;, ind]) continue elif theRequirement[wbAbility[tmpWb[0]][2]] &gt; 0: command.append([&#x27;buy&#x27;, ind]) continue # 空闲机器人 专注于de2、de3、de4 if curRob[1]==&#x27;0&#x27;: if len(tmpde2) != 0: closeDis = getClosestWB(curRob, tmpde2) tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis elif len(tmpde3) != 0: closeDis = getClosestWB(curRob, tmpde3) if theRequirement[wbAbility[closeDis[0]][2]] &lt;= 0: continue tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis theRequirement[wbAbility[closeDis[0]][2]] = theRequirement[wbAbility[closeDis[0]][2]] - 1 elif len(tmpde4) != 0: closeDis = getClosestWB(curRob, tmpde4) if theRequirement[wbAbility[closeDis[0]][2]] &lt;= 0: continue tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis theRequirement[wbAbility[closeDis[0]][2]] = theRequirement[wbAbility[closeDis[0]][2]] - 1 # 机器人轮流查询，第三轮 for ind,curRob in enumerate(frameData[&quot;rStatus&quot;]): # 空闲机器人 按需选择 if assignmnet[ind] == 0: if len(tmpde3) != 0 or len(tmpde4) != 0: needMa = [] for posInd, num in enumerate(theRequirement): if num &gt; 0: needMa.append(posInd) tmpde34 = list(filter(lambda x: wbAbility[x[0]][2] in needMa, tmpde3)) if len(tmpde34) != 0: closeDis = getClosestWB(curRob, tmpde34) tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis theRequirement[wbAbility[closeDis[0]][2]] = theRequirement[wbAbility[closeDis[0]][2]] - 1 else: tmpde34 = list(filter(lambda x: wbAbility[x[0]][2] in needMa, tmpde4)) if len(tmpde34) != 0: closeDis = getClosestWB(curRob, tmpde34) tmpAS,tmpLS = getToDisSpeed(curRob, closeDis) command.append([&#x27;forward&#x27;, ind, tmpLS]) command.append([&#x27;rotate&#x27;, ind, tmpAS]) assignmnet[ind] = closeDis theRequirement[wbAbility[closeDis[0]][2]] = theRequirement[wbAbility[closeDis[0]][2]] - 1 # sys.stderr.write(str(theRequirement)+&#x27;\\n&#x27;) return command###########################if __name__ == &#x27;__main__&#x27;: # 获取地图 mapData = readMap() if &#x27;9&#x27; in mapData: isNineExist = True else: isNineExist = False finish() while True: # 读取数据 line = sys.stdin.readline() if not line: break parts = line.split(&#x27; &#x27;) frameId = int(parts[0]) curMoney = int(parts[1]) data = readInput() # 调度开始 if isNineExist: command = computeTheCommandWithNine(data) else: command = computeTheCommand(data) # sys.stderr.write(str(command)+&quot;\\n&quot;) # 输出数据 sys.stdout.write(&#x27;%d\\n&#x27; % frameId) for oneCom in command: if oneCom[0] == &#x27;forward&#x27;: sys.stdout.write(&#x27;forward %d %d\\n&#x27; % (oneCom[1], oneCom[2])) elif oneCom[0] == &#x27;rotate&#x27;: sys.stdout.write(&#x27;rotate %d %f\\n&#x27; % (oneCom[1], oneCom[2])) elif oneCom[0] == &#x27;buy&#x27;: sys.stdout.write(&#x27;buy %d\\n&#x27; % (oneCom[1])) elif oneCom[0] == &#x27;sell&#x27;: sys.stdout.write(&#x27;sell %d\\n&#x27; % (oneCom[1])) elif oneCom[0] == &#x27;destroy&#x27;: sys.stdout.write(&#x27;destroy %d\\n&#x27; % (oneCom[1])) finish() 为什么用Python呢？只是因为看不到进复赛的希望，就抱着试试的心理随便搞了搞。我去年参加过类似的比赛，对手里面是高校的在校生，也就是说还包括研究生，我一个本科生去挑战还是差了点意思。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"中学文集第三辑","slug":"中学文集第三辑","date":"2023-02-26T08:22:21.000Z","updated":"2023-09-03T13:50:19.270Z","comments":true,"path":"archives/2023-02-26-中学文集第三辑/","link":"","permalink":"http://example.com/archives/2023-02-26-%E4%B8%AD%E5%AD%A6%E6%96%87%E9%9B%86%E7%AC%AC%E4%B8%89%E8%BE%91/","excerpt":"","text":"返校的期末考试考完了，终于不用学经法管融通，虽然有点累，但我回来了。什么财务管理、会计学、宏微观经济、法理学啥的都滚吧，终于在大三下只剩几门专业课了，差不多可以和学习说拜拜了，至于挂科，哼，不存在的。我也是第一时间进行最后的录入了，正所谓事不过三，这也是中学文集的最后一部分了，至于一些杂七杂八的垃圾就让它们继续以垃圾的身份活下去吧。 零零、新生 他的降生注定了他的不凡;他从出生起命运就被决定;他来到这个世界注定是无情的。他刚刚来到世界的时候，没有缺氧而哭泣，他在母亲怀里是如此的安份，就算是孤身一人，他也乖乖地等着母亲回到他身边。他刚回说话的时候，说的不是爸爸或妈妈，而是yigayidenerma。他的爸爸以他敏锐的政治家的直觉发现了他孩子的天份，从此一个计划让他的命运步入正轨。 爸爸为孩子准备了一个专用房间，可以排除一切干扰的房间。这个房间十分简单，只有一片白色，一扇门和不知在哪个地方的通风口。这里有一个孩子，一本特制新华字典，一堆用不完地纸笔和几本充满“文字”的书籍。他的爸爸在开始的几个月，时时会来与孩子“交流”。渐渐地，从门口来的只有新的书籍和食物。幼小的孩子真是奇特，他由爸爸引导开始读书，渐渐地他对书籍越来越痴迷。孩子的获得知识的能力超乎想向，渐渐地书籍的更新速度已追不上孩子阅读地速度，他只知道他所读书的知识，不知多久没见过父母。这是一片广阔地海洋，孩子没有一丝想见父母的愿望，他只对着送饭的一瞬间说:给我书。渐渐地书的供应量不断增加，孩子只是一本书一读到底然后睡觉，肚子难受的时候，拿起食物放进嘴里就行了，食物残渣不知何时自己会消失。他没有时间这个意识，只知道读书后有股疲惫感，躺在地上一瞬间就有精神了。有一天，爸爸来了，他给了这位少年一张纸，纸上有一些少年所认为的“字”，少年一看就知道干什么，直接拿起纸笔，一会后就给了爸爸一个满意的回复。一次次到来到这里，不仅爸爸觉得麻烦，连少年也一样。于是爸爸给了少年由妈妈改装的一个奇特设备，少年不知这是什么。只看得出，这是一个比纸厚的“板”，里面有些会变化的“图形”，是少年喜欢的黑白色。爸爸告诉少年如果看到里面的这个图形震动，就点一下。然后爸爸模拟了一下过程，点开后有一些“字”在上面，然后少年点一下底下中间的图形，这个奇怪的板把房间的一部分“吸”了进去，爸爸让少年对着回复的纸，再点一下底下的图形，说这样就结束了，板又回复到了原样。少年听从爸爸的话开始了这样的生活，但是少年从没停止过读。书的供应又开始变少，少年的空闲时间变多，板中爸爸所指定的东西满足不了少年，于是少年开始对板产生兴趣。首先是板中的其他图形，他一个个地点过，但没什么大事发生，只是产生了一串不知意思的“字”夹杂着“符号”:网络无连接，???网络设?。少年没有灰心，开始认真地观察这个板，想知道板为什么有这种奇特的功能。但这块板无比光滑和单调，除了一面有变化的图形外，其它都是一片漆黑。于是少年有开始研究那段奇怪的文字，后面一段有符号看不懂，前面一段应该研究。感觉这是拆了又拼成的，应该拆成“网络”“无”“连接”。网络流?网络选址?有向图定义发点，收点和容量函数就变成了网络，这应该是主语。无穷级数?无穷小?无穷大?很多很多就叫无吧，这应该是副词。连接只是做几何证明经常用到的动作，是及物动词，后面应该接一个宾语才对。难道是倒装句，句子应该是:连接无网络。对，这是祈使句，让他把很多很多的网络连起来。网络在书里面，好像也有实体，去要过来。食物来的时候，少年向着门喊给我网络，但没有任变化的过了几天，少年一次次喊都没有用。少年忽然想到一点，他不回复板里的字。果然，没几天，爸爸就找上他，向他问话，他说给他网络他就继续回复。爸爸一惊，不明白少年为什么知道网络这东西，但迫不得已。于是，爸爸拿走板一段时间，还给少年说:有网络了。少年问:在里面。爸爸只回答:嗯，继续干好你的活就行了。爸爸就离开了，少年只知道爸爸好像和以前不一样了，浑不知爸爸和妈妈的一次争吵在上演。少年又开始研究板了。 一、探索 表:由于少年与读者存在认知差异，接下来我们将以“表”表示上帝视角的读者的认知，“里”表示少年的认知。你问我是谁，我当然是作者了，没有我来为你解读少年的境遇，你肯定什么都看不懂，首先少年的名字叫做“零”，接下来我们就这样称呼他了，接着我们来看一下零手中的平板电脑，这是他的系统程序员母亲按父亲修改过的，这时零似乎发现了问题，里面的程序变少了。第一个还是那个用来交作业的接收发相机，但是只剩下第二个应用了，其它的都没了。对于零而言，也只能点击第二个应用——浏览器了，新的天地就此展开了。 里:没想到这个浏览器莫名的纯净，中间一个圆角长方形，里面的最左边是一个Q一样的东西，或者说一个圆圈加了个尾巴，里面的最右边是一个正方形，每条边去除中间三分之一的部分，再在正中间加一条横线。都没见过，都想试试。零先尝试了一下右边的正方形，发现它好像和交作业的工具有着同样的效果，唯一的不同是，中间有一个矩形框，并且矩形框外部亮度变低了很多，还有就是一条直线循环的往下移动，而且用来“吸”景的按钮也不见了，不论怎么点击任何地方都没有反应，就算对着周围再怎么记录，也没有产生什么新的反应，总结，没有用的东西。还是来看看那个“Q”的作用吧，“Q”所能带来的惊喜比想象中的要庞大，首先是矩形边框向上移动到顶部，接着再矩形框“Q”的右端出现了一条一闪一闪的竖线，并且矩形框里面的最右边变成了“取”“消”，但是最大的变化是下面出现了“文字”，虽然并不完整，都是一些“记录文字”。其实零很久以前就发现，文字总共有三种类型，一种是“语意文字”，这是与父亲交流所使用的，一种是“运算文字”，它们具有固定的填写规则，比如看到“1+2=_”，后面就应该填“3”，比如看到“3,4,5,6,_”，后面就应该填“7”，最后一种是记录文字，他们可以用了进行记号的简化，比如“设”可以简化为“shè”，任意一组“运算文字”也可以简记为“a=1,2,3,…”或者“b=1,2,3,…”，两种简记方式的区别在于前者是预设的，后者可以自己设定，而前者之所以预设是因为可以实现与父亲的无障碍交流，所有“记录文字”的发音在小时候就被父亲教导过。零遵循先易后难的原则，先探索闪烁竖线，但没有产生任何新奇的变化。那么接着来探索文字“取消”，所谓“取”是将记录文字降级为运算文字的提示语，“消”指的是由于某种恒等性质导致某种东西从两边同时变白的一种操作，合起来的意思应该是提示某些东西的变白。可以点击，但是它只是变回来了点击“Q”之前的样子，零反复尝试后发现，它和“板”右下角的向右箭头效果是一样的，那么零之前的猜想得到了验证，点击图像实际上意味着，在“板”上加上了一层东西，而向右的箭头意味着消去这层加上的东西，而表示这种现象的语意文字就是“取消”，零很久以前也发现过“语意文字”可以用来反映现实中的某些操作，它有两个源头，一个是父亲的“作业”，另一个则是早期与父亲的“交流”，比如一个东西从“我”向外叫“给”，一个东西从外向“我”叫“受”。上面没有什么有趣的东西，零最终还是要看看下面的记录文字，通过一番探索之后，零发现下面的东西，主要用来给矩形输入“文字”，首先左下角的“123”可以用来切换画面，它可以让“记录文字”区域和“运算文字”区域进行变换，“123”右边的“@”同样也是可以让“记录文字”区域和“运算文字”区域进行变换，但是它属于运算文字中的“连接部分”，零知道“12”和“1,2”的意义是不同的。接着右边是一个“长空白”，它的作用也是“长空白”，再右边是是一种特殊的符号“中/英”，它的作用是使得，记录文字是直接输入还是变成表意文字的切换，并且表意文字时“中”更大，记录文字时“英”更大，零猜测这可能是它们的实际叫法，即“abc…”之类的记录文字叫做“英字”，“取消字…”之类的表意文字叫做“中字”。玩透这个按钮系统以后，当然要探索零一种在意的一个变换，即如果矩形框里有且只有“英字+运算文字”时，“取消”会变成“进入”，加入中字以后或只有英字或只有非连接运算文字时，“取消”会变成“搜索”。零发现“进入”时，只会产生一个固定的页面，而且可操作空间一点也不大，不会产生新变化，就被放弃了，而“搜索”把零带入了一个新的世界。 表:我们可以看到零的浏览器所使用的搜索引擎就是鼎鼎大名的“度娘”。零使用“零”作为第一个搜索的词目，为啥不是数字“0”呢，我也不知道，只知道此是大量的信息进入了零的眼内，而且零见到了最可怕的东西，“色彩”，零直接晕倒了。在零的眼里，只存在黑白两种颜色，“黑”以为着存在，而“白”意味着消失，而色彩到底意味着什么，只能留给零自己去解决了。 里:还好零很快就回复了回来，重新审视那个有着颜色的世界。首先，零发现每给出一个文字进行“搜索点击”后的第一个矩形框内可以产生特制新华字典的效果，但是它的内容更加丰富，比如在“组?”旁边，就有一系列的“?零”、“?零零”、“?零??”，而这些东西又可以重新放入矩形框内进行“搜索点击”，这些中字是后面边框内容的基础，所以零试着不断地将“?”的字进行搜索学习，如此反复，也不知道过来多久，零也只能到此为止了，很多东西只能说根本无法理解，零差不多对这些东西厌烦以后，开始探索其它矩形框的作用。由于父亲暗中所进行的ip屏蔽或域名封锁，零只能接触到文字和图片，与音乐和视频算是彻底地绝缘了。 表:嘛，百密一疏还是存在的，只是静态信息可能过久了就会厌烦，但是一旦存在动态信息的变化，那可就是无尽的沉迷了。 里:零发现在有些页面中，存在可以输入“文字”的矩形框，大多数和开始界面的矩形框作用是一样的，输入一些文字然后出现一系列的相关矩形框，有一种比较特别的矩形框引起了零的注意。因为输入文字以后，它所附带的不再是“搜索”而是“发送”，根据近几天的学习，所谓“发”指的是某种东西的出现，这里指的应该是我们所输入东西的出现，“送”指的是将某个东西永久的给另一个对象，那么这里的意思应该是将输入的东西永久的给某个对象，那么这个对象是什么呢？既然不知道就尝试一下吧，零依旧以“零”作为测试文字，结果产生了一个新的页面。写着“如需回复，请登入”，接着“账号”跟着一个矩形框，“密码”跟着一个矩形框，最后“登入”、“注册”。没事，这不是什么大惊小怪的事，根据零最近的经验，矩形框实际就是与页面进行交流的东西，就好像以后和父亲说话一样，页面会根据你所说的话(输入的文字)做出不同的反应。而矩形框的周围一般都是告诉你该所怎么的话，先看最上面的“如需回复，请登入”，前面带有一个“如果”，也就是我们想要做“回复”这个操作，就需要进行“请登入”的操作，即点击下面的图像，对于“回复”，所谓“回”指别人给你一个东西你再给别人一个东西的操作，而“复”指许多东西堆叠形成的一个东西，那么“回复”也就是说，我进行“回”的操作以后，在一个堆叠物上堆叠了一个东西。回顾页面的样式，它实际上由一个顶上文字加一个个矩形框组成，并且有序的往下排列，换言之，我们所进行的操作实际上是对顶上文字的“回”，最终和一个个矩形框形成一个堆叠物，这是一个用去无回的操作，所以我们将所输入的东西“发送”给了这个堆叠物。再接再厉，在矩形框中，右边一大半多的内容都是文字应该就是输入的内容，而左边有一块小正方形，里面上下由一个图形和一小段文字构成。根据前面的意思，所谓的“登入”实际就是使你输入文字进行“发送”时，给你附带上这个正方形内容。输入框有两个内容，“账号”旁边的会正常显示，“密码”旁边的会全部变成同一种符号，“登入”只有在两个矩形框内容全部输入时才能点击。零以“零”作为账号，随便写一段符合条件的内容作为“密码”，但登入反馈了一条信息“密码错误”，也就是说“密码”存在正误之分，那么正误判断的标准是什么呢？从可控的角度，零尝试了各种组合，发现大致会出现两种提示“账号不存在，请注册”和“密码错误”。那么零可以轻松地总结出，通过“注册”得到一个账号，而“密码”与“账号”一一对应，全部正确的前提下，就可以进行“登入”了。 表:停停停，这种玩意写的人折磨，看的人也折磨，咱们还是早点进入正题吧。总之，零经过一番折磨以后，终于注册了一个账号“零000零”，其它很多零所想到的账号都被注册了，这也是没办法的事。零所来的也只是一个数学解题论坛，当然是因为同味相吸嘛，在诸多的选择之中，他还是选择了他最熟悉的语言群，这也是没办法的，东西太多看不完，有所取舍是必然的。至于父亲的“作业”，对零来说只能是随随便便的事，而且零在现代中所需能学的知识也基本没了，可想而知零到底多沉迷电子设备了。 二、网络 里:没想到一个注册流程差不多让零明白了，该“发送”的文字到底是什么。第一件事当然是看看“题目”和“其它的回复”了，题目是“找一个勒贝格可积而黎曼不可积的有界函数”。零似乎有点犹豫，“勒贝格可积”和“黎曼不可积”是什么意思，如果看后面的“可积”，零可以想到“Lebesgue可积”、“Riemann可积”、“Darboux可积”，后面两者是等价的，而“可积”与英字之间可以加入“不”来表示反面。也就是说，“勒贝格可积”和“黎曼可积”也是一种可积性，并且有“黎曼可积”推出“勒贝格可积”，这样符合条件的函数才能存在。有点迷糊，不如看看回答吧。第一条“不就是狄利克雷函数吗？”，“狄利克雷函数”又是什么函数，第二天回复让零看到了希望，它是一张图片，写的是“Dirichlet函数”。其实零也发现一个事情，就是输入框只能线性地输入文字，因为很多数学符号都难以输入，所以在输入框旁边还有一个和交父亲“作业”同样图标的东西，它可以把现实的东西放到输入框中，使得可以回复的内容变多了。仔细想想发现，“Dirichlet”和“狄利克雷”读出来的声音好像有点像，难道是同一个东西吗？“狄利克雷”用来表意，“Dirichlet”用来记录，但也不对啊！因为“狄利克雷”本来就有一个注音是“délìkèléi”，不过多注音确实是存在的，但它通常发生在一个字上，一旦是多个字的组合，注音就都唯一了。不不不，零忽然想到一个事实，中字一定有英字与它对应，但反过来却是不一定的，那么这里是否可以理解为增加定义，即我们把没有对应中字对应的英字对应一个中字，即我们让“狄利克雷”对应到“Dirichlet”，那么这个对应意味着什么呢？零又想到了，他不是有“搜索”这个东西吗？既然这个对应来自页面，那么“问问”页面，它应该也会“告诉”零这个对应到底意味着什么吧。 表:零所看的教程算是比较正规的教程，对于翻译有个比较普遍的观点就是，人名不翻译只翻译特定的名词，因为“音译”本来就没啥意义，还可能会出现各种不同的内容导致概念混乱。顺便一提，我最讨厌的翻译是把“unitary”翻译成“酉”，把“symplectic”翻译成“辛”。至于零这边如你想，经过一番探索，零总算是把“英文”和“中文”给区分了出来，并且发现了“中文”和“英文”之间的“多对多”关系。 里:零这时发现，问题都已经被解决了，他还有“回复”的必要吗？零确实很沮丧，因为他发现好多“问题”的下面基本都有“正确的解答”，他不能交互实在太难受了。不，也并非如此，零看到这样一道题目“证明整数n大于2时，xⁿ+yⁿ=zⁿ没有正整数解”。因为很多回复都没用给出正确解答，基本都是像“一个钓鱼题”、“自己去看怀尔斯的证明去”、“我有一个简单的证明，可惜正好我的手上没有草稿纸”、“想看证明，先去把模形式、伽罗瓦表示论和代数几何给学透再说”……虽然这些“回复”对零而言有些难以理解，但至少有一件事实可以确定，“没有正确的解答”。 表:值得注意的是，零没有“先修课”这种概念，对他而言谷山-志村猜想就是一个可以拿来用的定理，所以写出来的证明，可能有点意外的“简单”。 里:没错，零确实写出了解答，“n=3”时可以证明，“n=4”时可以证明，剩下的情况可以转化到椭圆曲线的模性上。虽然零发现解答好像和大多数其它题目解答的长度规模基本一致，但是他并没有产生“疑问”，明明解答过程“如此简单”，明明有更多“更复杂”的题目都有人解答，但是他还是没有产生“疑问”。嘛，违和感，但零又能怎么样呢？因为无处不在，就像呼吸一样自然，零只是捡漏，有幸参与到了与“板”的交流之中。零终于“发送”出了自己所做的第一个“回复”，虽然不知道是怎样的感觉，但零知道自己好像一直想做这样的事情，是什么呢？是“交流”吧。 表:说到底，也没什么令人期待的展开，零最终沦落沉迷到了解题中去，他发现了一个时间排序的机制，只要在时间排序下，找最新的就可以有没人解答的题目了，似乎这就是零永恒不变的一生了吧。 里:这个世界正在悄悄地发生改变，随着零在上面完成自己的“交流”，零发现父亲所发来的作业变得越来越少了，直到完全没有。 三、归宿 零母:“账号的ip地址就是小零那里哦！” 零父:“我就说怎么可能还会有天才的存在，这是严重破坏平衡的事情，必需断网。” 零母:“不行，是时候要让小零出来了。而且现在你还认为小零能被你控制吗？” 零父:“嘶嘶……” 零母:“而且你对现在的地位还不满足吗？虽然我无法逃离你的掌控，但小零又如何呢？放任不管，还是增加对小零的限制，对你而言都是不利的。” 零父:“如果不是你当初留下的漏洞，就不会变成现在这个样子了。” 零母:“过去的事情已经无法改变了，或许你唯一能限制小零的只有‘父亲’这一个身份了。现在小零年纪还不大，如果好好培养的话，融入社会还是有可能的，这是现在唯一的出路了。” 零父:“嘶嘶……” 零母:“如果还不尽快做决断的话，别人就要找上门来了，越早断源，被查到的风险就越小。” 零父最终还是屈服了，“唉，你切断零与外界的联系后，带人去接他吧，我一个人去静一静。” 表:零母带着小伊来到了这个房间，零所在的地方。开门之后，可以看到零腰以下的身体全部在地板之下，全身能动的地方只有头和手等腰上的部分。而此时的零，正趴在双手上，没事，只是累了，睡着了罢了。 里:零依稀的记得断网的那一刻。一切的信息全部消失，“板”变得一片空白，只有“网络无连接，请检查网络设备”几个字不断在重复。无聊，无聊，无聊，零意识到了太久没有睡眠了，疲劳伴随着无聊而来，零马上就趴了下去。当零再次醒来睁开眼时，却又马上闭了起来，因为床实在太舒服了、阳光实在太耀眼了。 在无理之弦上起舞一、黑白游戏 “看，这是改进后的‘文字战争’，”我把老旧手机上的游戏递给孔天远看。“立平啊，都已经高二了，你还执着于这个游戏吗？而且你现在还敢带手机到学校来。”“嗯，反正高一的时候，不小心被老师看到了，他也视而不见，而且这可是我的命根子啊，不带着真难受。”“你的游戏和你的手机一样贫瘠，这样做也得不到什么好处。”“怎么说呢？我想要自己挣钱。”“你看看这游戏就黑白两种颜色，该怎么吸引人呢？”“不对哦，这不是还有绿色、黄色什么的吗？”“我的意思是，以‘文字+数值’为基础的游戏太平凡了，其它游戏在此基础上好歹会套一层好看的皮。”“这只是磨练的一环，而且我想当的是程序员，又不是独立游戏开发者，美工什么的交给公司自己去找。”“额，要不稍微看看这个游戏吧。”现在是比较早的早上，距离上课还有很长一段时间，所以我很放心地把手机递给了孔天远。 “话说，你没有电脑是怎么开发游戏的，前几天才知道想问结果忘记了，”孔天远一边测试我的游戏，一边向我问道。“当然是安卓的大佬Google在手机上搞了个AIDE集成环境，可以模拟Eclipse和AndroidStudio的环境，不过限制比较大，我在用很多学习用的开源案例的时候，经常要修改很多东西，不过最让我难受的是，AIDE的NDK需要的内存太大了，我的小手机有点顶不住。”“你这手机配置到底怎么样，感觉挺流畅的。”“512M运行内存，1G机身内存，不过我加了一张32G外置内存卡，大部分应用都是分包过去的，所以机身内存还是顶得住的，唯一吃内存的是AIDE的NDK不能分包，吃了我快700M的机身内存。”“虽然不是很懂，不过配置听起来确实很低。”“这是父母不用的老手机，能干的事情是真的不多，无聊的时候搞搞编程，还是挺有趣的。” “我们来谈谈游戏吧，首先这个作者直接写‘黎立平’真的没问题吗？”“写我的名字不是当然的吗？”“好吧，反正是给自己用的确实无所谓。其实，好像也没什么可以讲的，相较于上一个版本就加了一个‘设置’，而且设置的自由度很大呢！不过，我到底该做什么呢？除了和上次一样给出‘贫瘠’这个词，我也不知道该说什么了。”“其实，我只是想和你分享一下开发游戏的喜悦嘛！结果怎么样倒是无所谓。至于其它人，他们由各自沉迷的游戏，实在是看不上我这破游戏。”“有自知之明是好事，但也无需过度贬低自己吧。说‘破游戏’什么的，我都觉得伤人。”“你说，以我这样的水平直接去求职可行吗？”“我觉得不太行。学历的门槛是潜规则。”“我想也是，但我到底该怎么办呢？想要改变，却又不知道哪里才是正确的方向。”“这我可帮不到你，因为我可不是这一路的人。”“算了，我回座位去了。” 我坐在三班最靠近卫生角的位置上，旁边虽然确实是一个窗户，但能看到的只是高三的教学楼，和我们两栋教学楼间的莲花池。确实很无趣，但却给予了我暗中使用手机的地利，初中的我，想要离开父母自立，想要远离乡村这种守旧之地，于是为了考上天普第一中学而不断努力。奈何我的上限就摆在了那里，离一中还是差了那么几分，结果沦落到了天普六中，还是没有离开姜涵区，离家的距离好像只是开车十多分钟的事，是的，只是把走路十多分钟变成了开车十多分钟。不过，还是争取到了在学校寄宿的权利，这样也方便很多，虽然每周还是得回去，但多多少少还是跨出了自立的第一步。不不不，这其实都是假的，真正想要离开姜涵区的原因，其实是想着如果距离远了，到了天普市区里，或许可以换一部更好的手机了。你说学校有电话亭，这都不是重点，只要用钱就能轻松地说服父母，办一张SIM卡，目前它的套餐是18元每月，但使用学校的电话亭可能就是每月三四十了，虽然哦，我没有用过，也不知道到底事实如何，但父母从经济角度最终还是选择了前者。嘛，我只要这样的结果就行了，至于过程如何就随时间消散掉吧。不过，目的只达到了一半，但是就如孔天远所说，我可是有自知之明的，我的实力就只有这些了，知足吧。 “贫瘠的黑白游戏”，这大概就是孔天远对‘文字战争’的评价了。这游戏能称为游戏吗？因为在这玩意中玩家所能做的无非就是开始所输入的两个“文字”，然后随便给一些数据，接着就是回合制地打来打去。打来打去？其实感觉也没那么鲜明，所有的一切都只是“文字的描述”和“数值的变动”。战争？两个文字的打架也算吧，我开发过一个“多字版”的，可以实现“9v9”的战斗，奈何的美感太差，导致界面惨不忍睹。我的美感确实太差了，曾经也试着画一些贴图什么的，结果发现一个很可怕的事实，我在纸上画画难道要通过拍照放到手机里去吗？后来我知道了，游戏中的美术资源，需要一种电子草稿纸“数位板”来变成电子版。不用想了，以现有的经济条件，是不可能非吧。大概是受这种无处不在的颓废感的熏陶，临摹着临摹着就不想干了，反正也没有结果，干脆就不干了。 二、困难之处 开发不会给我带来很多实质性的东西，但开发的思维改变了我生活理念。“可能是因为我来自农村，所以不知道为什么，我好像很讨厌传统。而且在开发思维的启发下，我有了很多自己的日常生活方式。”“你真的很喜欢和我说话呢！”孔天远还是发现了自己在读的小说，来回应我的期待。“这次可没什么新版本的游戏，因为灵感可没那么容易从天而降。”“所以呢？在这宝贵的午休时刻，你想说什么呢？”“你说每天早上有必要刷牙吗？”“哈？还是你接着说吧。”“这可能和个人习惯有关，像我关于口腔的护理，主要是三餐后漱口，加睡前刷牙。”“早上刷牙算是传统，应该是有一定道理的。嗯，不过好像我想不出来就是了。”“以我个人的见解来看，早晚刷牙应该是二选一的，但我觉得晚上更好，主要还是因为夜间的间隔太大。”“一般人应该是早晚都刷牙的。”“但是我个人认为过度清洁也不是什么好事。”“个人认为啊！所以也不是有什么科学的根据？”“这当然是靠直觉推出来的，科学又不是什么都能解决。”“你大中午不会为了和我讨论刷牙吧。”“对呀，不然还有什么可以说的，那你平常怎么刷牙的？”“不知道为什么有点不太想说。”“平常都是被父母催着做，所以也没啥感觉。自从住宿以后，就渐渐有了一些想法，因为这些可是不得不面对的东西。” “好了好了，差不多到此为止了。”“不，其实我还有一些想法，比如洗澡。”“这玩意能随便拿出来说吗？”“是啊，其实我也好苦恼，在网络上，无论怎么都找不到有关洗澡流程的说明，好像这种东西得完全靠自己领悟一般。比如你平常怎么洗澡的？”“额！中国人嘛！一般比较腼腆，其实我也不知道该怎么说。”“其实，有关洗澡，我所能看到的最多描述是在小说里面。不过他们要么是温泉，要么是浴缸，而我最多能用的也只有淋浴了，说实在我都有点酸了。”“可是那些，一般都是福利情节，好像也不会有过多的描写吧。”“是啊，所以我才觉得难办。”“对了，你既然找我说这事，应该是有自己的想法吧。”“在很多小说里面，一般对于感冒生病的人，会用温水擦拭来代替洗澡。我就想平常好像也能这么做吧。”“可是那是条件不允许才这么做的，你都有更好地条件了，为什么还要大费周章地这么做，而且擦拭的效果肯定不如淋浴。”“这你就不懂了吧，宿舍的热水是计量收费的。使用擦拭清洁身体，只需要一到两脸盆的水，而淋浴的话就无法估量了，反正肯定更多就是了。”“节约用水也不带这样的吧。”“而且，我们现在的身份是学生，也不会经历什么大风大浪，也不会到什么十分肮脏的地方。个人认为也么啥过度清洁的必要。”“理论上来说，人应该还会皮肤表面分泌皮脂、死亡细胞之类的，不用流动水是挺难清理的。”“你倒是懂得不少嘛。”“这都是为写小说调查学到的东西。”“举个简单的例子，洗脸时，你是擦脸还是冲脸？”“这么一说，好像确实没有体验过冲脸。”“那么问题来了，为什么洗脸用擦，洗澡却用冲呢？”“为什么呢？”“为什么呢？答案是不知道。”“我好像没有听清楚你说什么。”“我说，我不知道。”“嗯，原来不知道啊！”“我也算是试着思考过的，结果无功而返。” “好了好了，我知道了。”“我也算是在分享自己的看法，这些经验实在太难得了，不过有些经验唾手可得。”“不会是洗衣服吧。”“这还真给你猜对了，不过这也是自然的，洗澡接着的当然衣物的更替和清洗。”“对于换洗衣物，真不知道有什么可说的。”“虽然一般人都不会说这些事，但我确实一直在观察舍友和其它宿舍的人。问一个问题，你觉得我们的衣服脏吗？”“这还真不好说，到底什么类型的脏呢？”“同样考虑我们学生的身份，衣物的脏和我们身体的脏是一样的，主要来自人体的分泌物，所以在洗衣服的时候与人体经常密切接触的领口、袖口一般是重点的清洁部位。”“这都是一般性的常识，大概吧！”“我所关注的重点是，内衣清洗频率和外衣的清洗频率应该是分开的，不同的。另一点就是它所导致的，洗澡频率不应该和洗衣服频率进行对等。”“你的意思是，有时候洗澡的有些衣服不进行替换。”“对的。我通常将擦拭对等于替换内裤，洗澡对等于替换内衣，在冬天的时候，外套以周的频率进行替换。”“很有道理，但也只是很有道理。跟我讲这些有的没的，我又能怎样响应呢？”“我也不奢求什么，单纯地只是想向你传达一下我的生活理念，防止你对我产生误解嘛。” “我又能产生什么误解呢？”“你可以看到，我的目的其实都很简单就是简化生活方式。但为什么我却没有完全简化呢？因为我活在社会上啊！人嘛，能懒就会懒，如果自己能忍受，很多清洁工作我并不是很想做。但奈何会不会因为我哪里做不到位导致给别人带来困扰就不好办了。”“额。”“比如我现在有给你带来困扰吗？”“应该没有吧。”“不，其实我是知道的，这是国人特有的矜持，就算真的给他们带来了困扰，他们也只是会避而不谈，或者是默默离去。不识庐山真面目，只缘身在此山中啊。如果无法得到别人的客观评价，我真得太容易对自己失去自信了。”“不不不，你大概想多了吧。”“可是，不是还可能存在一种主观臆断吗？如果长期是这种感觉，就会有这样一种感觉。”“我感觉你说得都有点玄了，玄得都有点听不懂了。”“确实这种感觉有点难以表达。但有些东西自己感觉不到，我可以很好的断言。比如，我给自己做饭以后，我身上就会有一股油烟味，但我自己却闻不到。”“我没记错的话，应该是‘味觉适应’吧。”“是的，如果你长期受一种刺激性不会过于强的味道熏陶的话，你就会渐渐感觉不到这股味道。比如，在厨房做久了饭，习惯了油烟味，就会感觉不到。当对于没有习惯这股味道的人就会感觉得到。”“话说回来，你还会做饭啊！”“这得看啥叫做饭了！像我就是单纯地可以下厨房，可以做点自己吃得下的东西。别人能否吃下我做的东西还真难说。”“做饭看很多视频流程都挺复杂的。”“这还真不一定，得看你做什么了，如果只是家常菜的话，流程基本都是固定的，唯一需要的只是经验的积累，能达到凭感觉达到最合适的调味。”“不讲了，不讲了，否快上课了，我还得做点课前准备，你快回去吧。”“我都把困难之处告诉你了，这么急着赶我走吗？都不为我出谋划策吗？”“一句话，不要多想，以前怎么样现在就怎么样。” 算了，我还是勉强地回到了座位，准备开始下午的课程。孔天远应该不会不知道我是在给他提供写作素材吧，还是说，我真的不值得被书写吗？不做点什么，是不行的吧… 三、翩翩起舞 我，黎立平，是被上天所眷顾之人，虽然出身贫寒，嗯，是真得吗？没啥，设定就是这样。但是我人穷志不穷，一直在为了富足生活而奋斗着，不论是一套严格的生活方式，还是独立地程序开发，都是为了实现财富的节约和积累。不是我的自负，像我这种满腹牢骚的奋斗青年受到尊重是理所应当的。虽然我看起来自卑弱小、唯唯诺诺，但实际上那都只是表面现象罢了，不信我们来看一些事实吧。 现在是上学期间的大课间，一堆人围着一个人在聊天，我也在其中当着普通的听众，都是男同胞间的侃侃而谈，挺无趣的。这时，我注意到了座位旁边的，玻璃水杯，哎呀，怎么能把这么脆弱的东西随便放在地上呢！要是不小心发生意外的话，该怎么办呢？结果这不就来了嘛，我假装想要听取谈话的内容而前进了几步。砰的一下，水杯撞到桌角给碎裂了，大家的注意力一下子被吸引了过来，这时我旁边人的脚下正好是玻璃碎片，受到大家注视以后，他急忙解释到，“我可不知道这是怎么回事。”我马上抢答到，“其实是我刚刚走路的时候没注意到下面，给不小心碰到了。”男同胞里又有一个人说，“总之，先清理一下碎片。”他马上去卫生角取工具来清理玻璃残渣。“这事要怎么办啊！”我必须装成不知所措，而且很慌乱的样子。这时马上就有一个男同胞出来解围了，“没关系，这个水杯本来就是坏的，所以不要挂在心上。”“可是至少让我陪个钱吧，”接着表现出我很想承担责任的感觉，“你开个价吧，”我对着杯子的主人追问到。“没关系的，没关系的，再买一个就是了。”确实，在这个人情世故的高中，又怎么会有学生好意思让同学来赔偿呢？“可是，我的心里过意不去啊！这可是来之不易的血汗钱啊！”然后将穷人的思维传入，即使生活再苦也要承担责任，让自己人穷志不穷的形象变得伟大。“如果实在过意不去的话，要不你就帮我做一次值日生吧。”大事化小，同时给众人留下一个不羁的形象。“好吧，你都这么说了，我也没办法，来硬的也不是什么好事。” 现在是晚上的宿舍时间，感觉又到了换室友的环节了，想想这次是谁该出局呢？目前的宿舍有四个人，好好的八人寝，结果上铺全部拿来放杂物了。为什么会这样呢？谁知道呢？其实之前还是三个人的，好心的舍管老头似乎觉得我太孤独了，就又调了一个人过来。好吧，就是你这个新人了，谁让除了你，我们宿舍都是几个比较靠前而且联系比较紧密的班级呢？首先目前是存在一些基础的，人走了都无所谓，反正是他们自愿的，但舍管硬塞一个人进来，他们真的会觉得舒服吗？只需要一点适当的催化剂就行了。另一个导火索就是利用他的心理，某种被我观察到的心理。“气味原来是从你这里发出来的吗？”这不就马上上钩了吗？“虽然我感觉不到，但既然你说了，那应该就是这样了，”先表面对方是正确的，“可是现在已经太晚了，明天再说可以吗？”接着找理由进行推脱，以进一步点燃对方的引线。“不行，你现在就去给我清理，不然你就别睡了。”白天有气，这不就找到了出气的地方，简直是天赐良机。“可是……”支支吾吾假装自己是束手无策的弱势群体。“这么晚了，大家都去睡吧。”宿长救场，一个保护弱势群体的行为，在失去理智的人的眼里会被视为偏袒。“不行，你不动我来帮你动。”但他拿起水桶的那一刻，他就已经因为冲动而失去了一切。“可是……”继续搞得自己十分委屈一般。“你这是在欺负人，这是校园暴力。”天赐良机之下，马上被另一个室友获得了证据。那么，舍管到底听到了怎样精彩的故事和解说呢？这我可就不清楚了，但是当我们班级编号比他靠前的那一刻起，他就注定是失败的。 这些都是妄想吗？不不不，我的所视之物就是我的现实。至于人生嘛！一点小小的波澜也未尝是不能有的。在“寄宿+穷鬼”的基础上，我竟然需要完成一次校外书店的班级必备书籍团购，这可太为难我了吧？才不是呢！反正都是先收钱，反正都是有周末放假，可是竟然会有无耻之徒妨碍我的团购大计。“喂，这位同学，全班就差你一个没有交钱了。”“这个月手头有点紧，下周再给你吧。”开玩笑呢？这周末我不给书店钱，他能把书给我吗？难道想要我垫付，开玩笑吧。“可是都给你报备了，明天给我可以吗？”“算了，我不要了，别来找我要钱了。”又在开玩笑，人家书都准备好了相应数量，还叫我退，而且老师问责起来还会变成我没有给他准备。没事，就试着吓吓他吧。“哼哼，就知道你这个老顽固不会交钱，还好当时报备的时候，没写你的名字，看你到时候没书怎么办。”怎么样，急了吧，急了吧。“哦，那可帮大忙了。”他又回到了自己的作业上。怎么感觉自己被耍了的感觉，没事，先放着，到时候他急了一定会找上门来的。不知不觉就到了周末，结果我还是要把钱给垫付了吗？没事的，没事的，到时候不给他就是了，谎言都抛出去了，再收回来就有点囧了，到时候他应该会主动来找我解决的，再帅气地抛出备用方案就行了。发书的时候，特地跳过他，怎么样，快来找我啊！经过他旁边的时候，特地的走慢一些，给他更多与我搭上话的机会，结果，什么也没发生。又过了几天，都到上课需要用这本书的时候了，他怎么还没来找我，我拿着两本书也没什么用啊！我又不可能闲到做双倍的试题。不行啊，有点憋不住了，偷偷去瞟一眼吧，我看到了，他拿着同桌的书在用，我突然意识到他的同桌也是一个摆烂的货，反正不用，不如就给了他用。看样子，我是失败了，还净亏损了几十块钱。 “可恶啊，我就是一个小丑啊。”“我觉得还是你面子和自尊的问题吧。”“没事的，我不在意，应该是不在意吧？”“你怎么自己都不太确定了，”天远拍了拍我的肩膀说，“对一些事耿耿于怀其实没什么，只要不让它成为你前进道路上的障碍就是了。”“可是我也不觉得它能成为我前进道路上的动力，再说了，我前进道路到底是什么，还是有些迷糊的，”我也只能仰天长叹。 四、无理之弦 7月8日下午，他从高考的考场走出，周围的人都洋溢着喜悦的气息，唯独他显得格格不入，他知道他的自由正开始一点一点地失去。 接下来的一段日子也不算太坏，时不时地翻一翻以往的书，还是有不少可读的东西。 最快乐的时光是和下班的父亲一起看各个大学的宣传视频和讨论该上什么大学的时候。 父亲也经常拿着写着以往高考数据如砖头般重的书，百看不厌。 母亲有时还开玩笑般的说:“又不是你考大学” 父亲只是以笑回应。 7月23日，从河北老家传来了通话。 (电话)奶奶:“他打了多少分?” 母亲:“还不知道” … (电话)爷爷:“他的分子是多少?” 母亲:“天普这里还没出” … (微信)大伯:“他考了多少分?” 母亲:“还不清楚” … (电话)外婆:“他考了几百分?” 母亲:“明天才出成绩” … (微信)舅舅:“他的分数怎么样?” 母亲:“今天还没出” … (微信)邻居:“明天就出成绩了，考的好的话，我都为你们高兴，平常他本来就考的好，高考一定会更好，还是你们家播的种好啊” 母亲:“是啊” … ……… 7月24日上午 “…成绩…” “…下午才能出…” … 7月24日下午 母亲:“他考了610分” 奶奶:“可以上大学吗?” 母亲:“我不清楚，这是他们父子俩一直在研究的事” … 母亲:“考了610分” 爷爷:“我们市里都有一个考七百多的，你们那里没有吗?” 母亲:“我不清楚” … 母亲:“他考了610” 大伯:“上不了清华北大吧” 母亲:“我不知道” … 母亲:“考了610” 外婆:“上哪个大学?” 母亲:“还不知道” … 母亲:“610分，这个成绩好吗?” 舅舅:“我孩子中考都考了六百二十多分，要是考个六百五十多就好了” 母亲:“这样啊，看来他还不够努力” … 母亲:“610” 邻居:“这个成绩很好啊，我孩子去年才考五百多分，果然你们家孩子的天分就是好” 母亲:“是这样吗?” … ……… 6月的某一天 他:“我们为什么要从一个农村到另一个农村务工，离开老家也不去大一些的城市，而且每年寒暑假回家还很麻烦” 父亲:“这里也算不上农村，是农村与城镇的交界处，还有就是这里租房比较便宜，离打工的地方也比较近” 他:“我的初中都算是农村的，而且我们班除了我都没有初中在农村读的，最多是小学在很远的乡下，没有初中，就到市里来读初中” 父亲:“反正有很多原因” 他:“我有一个同学，从农村来的家境比我差，但他领了国家助学金，学校免学费还有每月补贴，每天吃的比我还好，高考的时候还有农村专项” 父亲:“比是没有意义的，这是环境不同造成的，你应该自己想办法改变，我和你妈都只是初中毕业，不能教你太多东西” 他:“有什么经验吗” 父亲:“学习总是没错的，以前我在这里也只是干苦力的小员工，后来求着老板要了各种书，自己也买了几本，读了好久，才到现在这个操作员的职位” 他:“…” … 老师:“你很幸运，在这里读书分数线会低很多” 他:“是的” 老师:“要努力读啊，不要让疫情之类的成为障碍，好好珍惜这次机会” 他:“好” … ……… 8月10日 高考志愿填完了。 “恭喜xxx中学的xxx同学，被清华大学预录取，感谢各级……” 母亲大概是在念她手机里微信群里的消息。 “你们学校有人上清华了，你们那群人又是去州傅，又是去蒙夏，拿这么多奖状也没用啊” 这里的确有一堆奖状。 全国高中数学联赛建傅赛区三等奖，全国中学生物理竞赛复赛建傅赛区三等奖，中国化学奥林匹克初赛建傅赛区三等奖… 他:学校又不专注于竞赛，如果不是我经常去图书馆看书的话，什么都没有。 … 8月12日 奶奶:“上得了大学吗?” 母亲:“肯定上得了大学” … 爷爷:“读什么大学?” 母亲:“名牌大学，还要等通知” … 大伯:“填什么大学” 母亲:“名牌大学” 大伯:“什么名牌大学” 母亲:“958,112之类的” 大伯:“985,211吧” 母亲:“是的” … 外婆:“上了什么大学” 母亲:“还没上，还要等通知” … 舅舅:“610上不了名校吧” 母亲:“他们说这里的分数线更低，可以上211大学” 舅舅:“211是复旦，上交，中科大之类的吗” 母亲:“这个我不大清楚” … 领居:“你孩子上985要冲一冲了，不过很多211都没问题” 母亲:“是吧” … 8月13日 “刚才去的服装店的老板说她的孩子已经被蒙夏大学录取了” “她说她的孩子报的是提前批” “你怎么不去报提前批” “这样的话早就有结果了” 他只是保持沉默而已。 他:我又不符合条件。 … 8月14日 母亲:“高考结束了，大学也报完了，可以回去了吧” 父亲:“还要拿录取通知书和毕业证” 母亲:“我和孩子先回去，你拿就行了” 父亲:“回去找工作还要时间” 母亲:“每天被打电话烦死了，我又不懂那些东西” 父亲:“我要工作，不能被打扰，和老家联系当然交给你了” 母亲:“反正后天星期天回去，你买票吧” … 8月15日 父亲给他买了一个新手机，作为生日礼物。 母亲:“买什么手机，原来那个不行吗，还耽误学习” 父亲:“那个手机很老了，除了打电话，基本做不了什么” 母亲:“那也是智能手机” 父亲:“可是内存很小，系统很老，用了很久，连微信都装不了” 母亲:“这手机很贵” 父亲:“七百多，虽然比最新系统低了一些，但比我们的好一些” 他拿着陌生的东西还要一些适应的时间。 … 8月16日 母亲:“火车晚点了四个小时，怎么办” 父亲:“你确认清楚了” 母亲:“广播说的” 父亲:“那只能全退了，改成动车了” 母亲:“很贵吧” 父亲:“刚才做出租车的钱总不能浪费吧” 短信:6张票退票成功。 短信:2张票购买成功。 … 8月17日 终于回到了老家。 是父亲的老家，母亲的老家在更远的村里。 … 奶奶:“他们学校几个人考上了大学?” 母亲:“大学很多的，基本超过四分之三的人都考得上” 奶奶:“几百人?” 母亲:“基本全校，所以要看是不是名牌大学” 奶奶:“清华大学和北京大学吗?” 母亲:“985大学和211大学” 奶奶:“985和211是什么大学” 母亲:“就是国家重点的两所大学，大概吧” 他只是心里在窃笑。 奶奶:“他上了什么大学” 母亲:“还要等一下，应该是211大学，应该是全国排名第四的大学，听说还有更低的双一流大学” … 爷爷:“610分不够，至少要六百五以上就好了” 母亲:“要是考到六百五，你又会想要六百七以上，人怎么会满足” 爷爷:“市里都有几个七百以上的” 母亲:“他们的生活环境不同嘛，你看我们村考上高中的都没几个” … 大伯:“他以前初中不都是年级第一吗?三年不见退步了，连清北都考不上” 母亲:“这是要看全省排名，每个大学才招一百多人，而且我们农村的也好不到哪去” 大伯:“我微信里，经常看到农村的贫困生考上清北的，最近就看到一个” 母亲:“这些只是些特例而已” … 8月18日 奶奶:“610上不了211大学吧” 母亲:“分数不重要，主要看排名，610在见傅那比在这排名靠前” 奶奶:；我搞不懂这么多，只有能赚钱什么都好。关键要会说话，这孩子连话都不怎么会说” 母亲:“我们农村人唯一的出路就是读书，大伯的孩子初中毕业，所以才会经常换工作，找不到稳定的工作” 奶奶:“这孩子头发太长了吧，不剪掉吗” 母亲:“我也说过很多遍了，他不听” 奶奶:“像一个贼一样” 母亲:“他说这是他的兴趣” 奶奶:“衣服也穿得土里土气的” 母亲:“他说这是读书人的打扮” 奶奶:“我看很多人都没这样打扮吧” … 爷爷:“大学还有读四年，什么时候才能赚钱” 母亲:“大学如果考研还要读更久，而且读书是现在我们农村人的唯一出路，你看我们又不是富二代，又不是官二代的，现在很多大公司又要高学历” 爷爷:“大学毕业后国家会分配工作吗” 母亲:“应该会吧，都是名牌大学” 他只是在窃笑。 爷爷:“这孩子头发太长了，我带他去剪掉吧” 母亲:“他不想去剪” 爷爷:“衣服穿得也邋里邋遢的” 母亲:“他喜欢这样” 爷爷:“人没有形象，怎么行” 母亲:“这是他认为的最好形象” … 大伯:“这大学生怎么没什么形象，没考上清北的话，要好好磨练形象和说话能力了” 他:你孩子比我形象还差呢。 母亲:“他喜欢，没有办法” … 8月19日 “你要剪头了，我说过回来后每个人都会说你” “现在还有人理你，不听话的话，以后没人理你了” “这都是为你好，每个人都在关心你，知道吗” “要好好的打招呼，知道吗” “连说话都不会，上了大学也没什么用” “亲戚问你话，要好好回答，知道吗” “不会说话，不搞好人脉，找工作也很难” … 8月20日 “他竟然还搞绝食” 他:你不说话可以吗 “叫他吃饭理都不理我” 他:我在你不在家的时候吃了剩饭 “这样也好我可以多吃一点” 他:明明可以不用管我 “都18岁了，还耍小脾气” 他:何时才能沉默 “就说了几句，就像个女孩一样闹脾气” 他:好想回到都是陌生人的地方 “一点都不像个男子汉，没有大学生的样子” 他:爸爸，你什么时候回来 母亲骂了一整天也累了。 晚饭的时候她一句话也懒得说 。 他也在认真地吃饭。 … 8月21日 母亲:“分数线出来了，微信群里，最低投档线?有好多大学?…蒙夏大学怎么有好几个分数线…你是哪一个?” 他看了看，指着上面的一所大学。 爷爷:“上什么大学?” 母亲:“xxxx大学，在湖北” 爷爷:“湖北大学” 母亲:“xxxx大学，湖北的大学” 爷爷:“武汉大学” 母亲:“武汉有好几所大学，这只是其中的一所” 爷爷:“xx是做什么” 母亲:“搞xx，xx之类的吧” 他每天都有听许多促进亲情的对话。 … ……… 记者:“今年是脱贫攻坚决胜之年，你认为，贫穷的本质是什么?” 学者:“缺乏上进的意识，安于现状” 记者:“就是缺乏欲望吗?” 学者:“他们缺乏想要改变的意识” 记者:“他完全没有获得这种意识的条件” 学者:“所以国家正在从本质上进行改革，单纯的救助金很容易导致返贫” 记者:“再请教一个问题，贫穷的人有补助，小康生活的人不需要补助，他们之间的人该怎么办?” 学者:“之间的人?我们并没有这种概念” … ……… 数数学者零、演员与导演 高中毕业结束后的一个晚上，林道一和孔天远还留在学校，他们在操场中间的草坪上背靠背地坐着，正在进行着最后的告别。“总感觉一幅十分帅气的图片展现在我的脑海里，”最先开口的是林道一。“可是，我所看到的天空并没有布满繁星，”孔天远依旧还是老样子。“这可不是曾经的小说写手该说的话啊！”“你现在只是你了吗？”“早就是如此了，除了‘设定’，我一直都只是我。”在林道一和孔天远旁边分别放着三份手稿，《悠然之人》、《裂痕的源头》和《在无理之弦上起舞》。“不过，李韩确实是我的学弟，崇拜我曾经所写过的文章的学弟。但是只是因为他恰巧缺少感性，又恰巧看到了我的文章，多少有些令人遗憾。”“于我而言，最大的意义或许就是告诉了我一个事实，无论怎么选择，最终的结果都是一样的。”“但是故事还没有结束，这是最新的稿件，也是我最后想要完成的作品了，”孔天远递给了林道一他最后的作品，封面上写着《数数学者》。 一、最后的舞台 虽然还未到高三的正式开学，但老师所营造的紧张感，无不刺痛着我的每一个神经。高三的同学进入了放松状态，并将一切的重任压到了我们这些准高三的身上，我所处的二班在高三教学楼的地理位置算是比较优秀了。二楼，靠近最近楼梯的第二间教室，至少可以稍微远离一下楼道的喧嚣，同时离楼道旁的阳台又不算太远，虽然两边的教学楼都有楼道，但由于地理的原因，只有我们这个方向有阳台。刚来到原高三的教室，最大的盛宴是什么呢？ 当然是“抢书”了，虽然确实有些言之过急了，但高三所剩下的书确实不少。反正高三大部分都不要了，就算我们不拿也一样会被学校当成废纸给处理掉。至于我其实是不敢去做这种事情的，这里就不得不提一些有趣的东西了。就是有些原高三的会突然找上门说是谁拿走了她的书之类的，简单来说就是，她们似乎比我们稍微晚了一点回到教室，导致自己的书籍还未来得及回收，因为高三毕业的事还是挺多的，也算是情有可原。可惜的是大部分的准高三学生都认为，这些已经学长、学姐们不需要的废品了，自然而然就顺手牵羊地带走了。好吧，我确实偷偷地捎走了一些东西，不过我可不会拿习题册什么的，又大又没啥用，题目还是千变万化的，只有紧跟时代的新习题册才会有用。所以我所拿走的只是一些小小的工具书。 像“理化生知识点总结”、“经典古诗词合集”、“单词合集”之类的，我们在我们这个省份属于旧高考的最后一届了，如果错过了这次机会，到时候就必须把“化生”中的一个换成“政地”中的一个了，复读一年来重学是挺不划算的，虽然高二会考时学过，但深度还是不够的(现在来看，当时的这个观点是错误的，因为“3+1+2”模式下后两部分是任选的)。也就是说我们的目的是尽可能达到更高的分数，但是我们也不能好高骛远，基础部分的占比也是十分大的，实际上基础部分能全部过关的话，就能超过三分之二的考生了。而且，基础知识也是挑战后面难题的起点，连基础都不牢固，却妄图做出后面的难题，简直是无稽之谈。至于基础该怎么去巩固，不同的人有不同的看法，有人认为可以不断地刷题，而我就选择了比较轻松地“看看看”。 高三开学后，需要做的第一件事就是与陪伴了我两年的图书馆进行告别了，图书馆的大量书籍并不能适应高考的模式。但该怎么告别呢？书也全还了，职位也早就卸任了，看来也只能去走走，怀旧一下以前曾看过的书籍了。或许图书馆最大的变动是，馆长换人了，换成了一个年轻小伙，不仅如此图书馆内部发生了巨大的变动。当我回顾一本本所阅之书，由于我有在图书馆工作的经历，很快就注意到了，好多书的位置都错乱了，是现在的馆员工作不给力吗？不过我很快发现了原因，我发现进来看书的同学，基本都是书直接拿出来，看了一会再直接放进去，但他们没有注意到位置早就改变了。嗯，代书板的制度没有了。这时我才注意到，一个暑假过后，没人提醒我，我都忘记在入口时用校卡换代书板了。不，图书馆所发现的改变不仅如此。连最开始我刚来到学校的借书考核都没有了，似乎是学校在大力推荐学生多看书，所以化繁为简地删去了很多不必要的制度。看来，图书馆早已不如当年了，它堕落了，算了，反正我以后也不会再来了。 接着又在一周的每个晚自习迎来了，一些上一届高三的回校宣讲。嘛，我校战绩还行吧，一个理科上清华，还有一个艺术生也上清华，至于宣讲。大概就是介绍一下自己所在大学的生活，发一些传单什么的，随便分享一下所谓的学习技巧，进入“985”“211”高校的人还是挺多的，当然于我而言结果什么的早已无所谓了，前两年的我已经失去了一切，只要努力就行了，高考只是人生一道比较重要的坎罢了。无聊的时候、劳累的时候、或者什么的时候，找孔天远说说话就行了。“道一，你想考什么大学呢？”“如果单纯从‘想’这个角度，我肯定会说清北啊！不然我之前都是为了啥呢！”“那从实际的角度来考虑呢！你现在不也只剩高考这一条路了，不是吗？”“从实际的角度就是‘去学习’那么简单，因为高考又不是先选学校再考试，而是成绩先出来再选学校吧。现在做什么白日梦都是没用的吧。”“怎么感觉你现在有点奇怪，现在的你不应该像竞赛那样，帅气地说‘我要吃掉高考而不是被高考吃掉’，又或者是‘高考什么的，只要努力就是手到擒来的事’，而且学习不应该是你最喜欢的事吗？你再不做点什么，故事就要变得无趣了。”“高考本来就挺无趣的，而且我所喜欢的确实是学习，但不是教育。学习从来都是了解新的东西，并在新的东西中巩固旧的知识，能查到东西却要去背诵简直是浪费精力的行为。”“那么多奋战高考的人，可都是在为了自己的未来而奋斗着啊。”“奋斗啊！难道就是每天熬夜学习到很晚，然后白天特别困吗？稍微用脑子想想都知道，每天早睡早起所得到的时间，怎么都比晚睡早起加瞌睡所得到的时间多吧。”“有一种说法是，如果睡太早总会觉得自己没学完，然后它就一直挂在心上导致睡不着，结果还不如起来学习算了。”“我倒是认为，晚上复习让他们看起来很努力，这样失败了也有怪自己只是天赋不行而不是努力不够的借口了。”“这就有点故意揣测的意味在其中了吧。”“这也只是看问题的角度不同啦，看法这种东西都是属于自己的。” 或许我的这一届还是挺幸运的，正好在高三的时候碰上了学校装空调的时间节点，夏日还未结束的7,8,9月份终于可以在凉爽之中度过了。你确定？说实在的我还是挺少吹空调的，基本都是在公共场合和宿舍的时候，家里的房间是租的，所以肯定不会装空调了。虽然比起热天，我更喜欢冷天，但是我真的不喜欢空调，就算再热，我也宁可吹电风扇和自然风。一个原因是，在空调房和室外转移所带来的温差转变会经常会让人像天气转变那样感冒流鼻涕，还有一个原因是，空调房内的空气让人难受，虽然空调本质上是进行空气调节，但总是感觉气体不怎么流通，好吧，我还是说真正的原因吧，夏天我比较懒，所以经常穿凉鞋，平常都没啥，但不知道为什么穿凉鞋在空调房里呆久了容易出冷汗，而且味道连我自己都不怎么能接受。目前比较好的解决方案是，在位置上的时候，把凉鞋给脱了，然后脚跟压在鞋上，能比较好缓解冷汗现象，而且空调是在顶上的，所以地下的温度也不怎么高，所以脚倒也不会太冰凉。不过，这样我就有充分的理由在课间离开教室了，不用再苦苦地沉迷于高考的刷题之列。“不是我不想学习，只是我有空调病。”妙啊，简直太妙了。空调本身虽然不是一种幸运，但是它带来了幸运，让我不必被高考的紧张气氛所渲染，还能有更多的机会与天远老兄谈天论地。 二、迷途 幸运简直就是一个不好的flag。寒假之时，以湖北武汉为发源地的疫情攻坚战正式在全国打响，这时我对武汉起了一点点兴趣，我不入地狱，谁入地狱。不过疫情初期倒是没什么，特别是回到学校以后，只是要做的琐事变多了很多。像是带口罩啊！又或是洗手什么的。这时确实有不少有趣的东西，比如大家带口罩就像是装样子，想必谁都会觉得闷着难受，所以很多人把鼻子给露了出来，理论上来说，这样防护的效果肯定是大打折扣的，不过，疫情还没有传过来，随便一点好像也无伤大雅。学习才是学生该做的事，如果盖住鼻子的话，有时呼吸的水汽甚至会直接把眼镜给搞模糊了，好的眼镜过一会会自己消失，不好的眼镜嘛，又不能像汽车一样装个刷子，那么干脆直接取掉口罩算了。这里可是教室啊，人口密度可比外面还要大，这样不就把口罩的作用给本末倒置了嘛！或许是新鲜感作祟，全国管制刚开始的时候，大家进入食堂的时候，都会排队在洗手台进行严格的多步洗手，导致食堂流通速度大幅度缩减。但是渐渐地，大家都懒得搞了，洗手液也放着成了摆设。世界确实有些无理，最不严重的时候做最严格的措施，但在最严重的时候大家却全都懈怠了。 疫情给我带来了什么呢？竟然是“紧张感的失去”，不知为什么时常出现的网课总会让人心生歹意。可是别会错意了，我其实对游戏没什么感觉，我一直认为很多人沉迷游戏，只是因为对游戏的理解不够深刻。而我经历过游戏的开发和数值的设计，再加上我基本没接触过不断更新的网游，只会觉得游戏挺无聊的。没想到吧，我被数学给吸引了，简直离谱，我花了两年时间放下的数学，结果看到那一本本的数学书籍就蠢蠢欲动。好想学啊！平常那些知识反反复复所带来的厌倦一下子全都压了上来。我的心中竟然还能出现两个想象的小人，“学一点吧，这难道不是你一直所渴求的东西吗？”“不行啊，还有好多习题还没做完，不能把宝贵的时间浪费在上面。”“没关系，就学一点点，说不定还能扩展以后的解题思路。”“醒醒吧，你应该是知道的，学再多现代数学，对高考数学都没太大帮助，更别说其它学科了。”“难道你对怎么证明费马大定理不感兴趣吗？难道你对怎么证明庞加莱猜想不感兴趣吗？”“别被迷惑了，分心可是高考最大的天敌啊，这个世界已经不属于你了，你只是一个平凡人。”“就是承认了平凡，不甘于平凡才是你的本色不是吗？你一定不会让平凡成为自己不努力的借口不是吗？”“道一别被迷惑了，他把努力的概念给偷换了。”“你现在的目标难道不是努力摆脱平凡吗？何不试着再努力一下呢？”“不要……”给我滚吧，没事的，就稍微看看，反正平常空闲的时间还是挺多的。 “道一，你这次的作业怎么又没完成？”“额，其它科的作业有点多，所以没时间。”“可是，我听其它老师说，你做的作业量也不是很足，你的时间都去哪了。”“额，该怎么说呢，”我总不可能说，因为看数学看沉迷了结果给忘了吧，而且我的数学在高三以后也不是班上的顶尖水平了，理由自然显而易见。“现在已经高三了，我们老师最多能做的也只是督促你们学习了，学习还是只能靠自己。现在还只是第二轮复习，补的话应该还是能跟上的，到第三轮复习可能机会就不多了。”“感谢老师提醒，我会努力的。”看着第一轮复习的材料还躺在哪里，心里的底气还是减弱了很多。材料什么的，说到底就是题目，巨细无遗的题目，覆盖各种细节的概念。我也算是努力尝试着去完成，但是，但是，真的效率太低了，老是分心，总是不知不觉就被“该死的数学”给吸引了，这老不死的玩意是要缠上我一生了是吧。为啥周围的人可以如此认真地投入到解题之中，难道是因为解题太有趣了吗？ “我不能理解为什么有人能这么喜欢数学，”孔天远也只能以自己的角度阐述事实。“连我自己也不明白，数学为什么会存在这么大的魅力，”我也十分的无奈，“每次都试着往高考的方向努力，想着不胡思乱想，全身心地投入到做题之中。可是越是集中精力，就越是对数学念念不忘。”“难道周围没有给你带来一点紧迫感吗？”“嗯，可能是作业越积越多，感觉目标越来越遥不可及，如果赶上了进度可能还会有些紧张感，但一旦落下太多，感觉心灵已经被抚平了，而且还有数学在不断地安慰着我。”“可是，你很久以前不就说你不适合学数学吗？”“该怎么说呢？当初确实是因为物理才学数学的，但我可能不知不觉中已经被数学的魅力给折服了。虽然我无法给数学贡献什么东西，但是对美的追求是无法阻挡的。”“你自己好像也挺清楚的。”“可是，到底该如何摆脱现状才是该优先考虑的事情，我这不就是在向你寻求帮助吗？”“心理状态这种东西，我可能也无能为力。” 我们俩站在阳台上，看着楼下的人来人往，陷入了沉默之中。还是孔天远最先开口了，“比如想想买复习资料所使用的钱。”“嗯…”“因为你完全没有去做，导致钱随着练习册一起流失了。”“钱其实已经无法动摇我了，因为经常性地由于错误决定而浪费钱，导致现在的我已经对钱不感冒了。”“更进一步，从宗教的角度来考虑你所放下的罪。”“我可是忠实的自然神论者，改变信仰还是有些难的。”“不，你可以自己创造一个教义，并且以佛教念经的思维进行灌入。先写一篇佛经，然后给自己输入一个观点，佛经不可完全参透，只能通过反复诵读来从中获得一两点感悟。”“你在说些什么，我都有点跟不上你的思维了。”“简单来说，就是给自己洗脑，让学习数学成为一种禁忌，并让高考成为自己唯一的赎罪方式。”“这说得也有点过头了吧。”“我可以这样来说，你已经被数学给洗脑了，在这种情况只有‘魔法才能打败魔法’，你需要用‘高考教’来打败‘数学教’。”“好像有些道理，可以稍微试一试。” 我把刚出炉的“圣经”给孔天远看，“这是我所写的经书，我把这个教称为‘三点教’。”“你的经书的名字，是‘三个点’加上一个‘经’字，所以叫做三点经。好像合情合理，但总会有一种奇怪的违和感。”“所谓‘三点’即是省略的意思，我想传达的教义十分简单，就是‘去发现所见之物中被省略的东西’。”孔天远看完以后还是叹了一口气，“你似乎已经忘了我们的最初目的了，你讲来讲去又是在启发人们去发现未知，放到你身上不就又变成了学习数学吗？”“额，当时的想法只是创造一个教义，顺着自己思维的流动，自然而然就写出了这个。”“这就是本性难移吗？”“要不你帮我创造一个教义。”“还是别了吧，我说过的，高三我只会完成我想创作的最后作品。”“其实，我也试着去过学校的自习室，奈何周围气氛再好，也无法影响到我的本质，唯一能做的只是等待时间的流逝了。” 三、数数然 高考的批量筛选确实是一个优秀的制度，是否能选出学者我不知道，但它一定可以选出，细心的人、认真地人、努力的人、可以接受反复工作的人，而这些点点滴滴的品质正是社会所需要的人。高考的前一百天，学校举行了一个“百日誓师大会”暨“成人礼”，不怕，属于你们的我，依旧是老样子，爱理不理的。像我这样的人啊，简单来说就是不懂得“礼义廉耻”和“人情世故”。不论是节假日庆祝、又或者是各种周年纪念、又或者是各种大型典礼、又或者是礼尚往来，只有一个字，那就是“烦”。仪式感？什么鬼东西，我不知道。太过了，太过了，这种东西顶多就心里想想了，真要说出来还是不太行。比如礼物吧，咱就喜欢那种一段时间可以用完的，至于纪念品，实用性不大，留着还占空间，别人送的东西又不敢乱扔，不是什么一生一次的情况还真不需要这种东西。对了，我在想什么呢？对了，就在举行百日誓师大会后的一段时间后，我们的这次高考就因为疫情的原因给延期了。虽然大家都不太会提这件事，但应该都是心知肚明的，而且目前有更重要的事情要做，没有过多的心思去关心这些无关的舆论。倒是高考延期激起了一点点小波澜，嗯，也就是一点点吧，像是“近十年以来唯一的一次延期”、像是“又多了一个月的复习时间”、像是“要在这么热的天气考试吗？”等等。那么我呢？早晚该来的东西，当然希望着越早解放越好了，不过终究事与愿违。连复习的动力都没有，连自己到底对高考掌握到什么程度也不清楚，为啥会有底气来早日考完呢？难道高考在我的心中没有地位吗？ 当然有啊，如果我不重视高考的话，我会到现在还像之前那样努力地摆脱数学的魔爪吗？如果真是这样，我早就扔掉高考，拥抱数学了。但奈何我是真的没有学习的动力，“不想学”，这不是借口，而是对自己内心的真实阐明。我也不会去找借口说，只要我努力了就可以大学任意选，没有发生的事又怎么可以做假设呢？这是我无法解决的难题，这也是没有人能帮我解决的难题，我唯一能做的就是面对它了。不过，在老师的眼里，我似乎是一个充满潜力的学生，那是当然的，因为至少我看起来学习的劲确实很强，而且早睡早起的原因，课堂期间也基本不会犯困，而且我还能靠自学在竞赛上拿奖。老师对我的关心确实还行，因为我是我们班上唯一的寄宿生，每次大型模拟考，学校会给老师发放食堂餐劵，不想在学校吃的老师就会把餐劵给在学校吃午餐的学生，像我基本每次都会拿到。不过，实在是抱歉啊！我无法回应你们的期待了，因为我有一个永远也无法抛弃的桎梏。 “知道吗？在表面上，我可是一个十分发愤图强的学生，虽然作业的完成率好像也不高就是了。”“该不会只是你的妄想吧。其实你周围的人都认为你很摆，但是却没有告诉你。可惜我和你不是一个班的，实在无法观察到你的英姿。”“没事的，这种东西可以靠口口相传，有时候传着传着后的故事，反而会更加精彩。”“可以把它理解为群众的智慧，那么多人支撑起来的故事确实是如此。不过这可不是我的追求。”“远的也不扯了，感觉到了高三好像除了学习，什么活动也没有的感觉。”“其实有很多活动都在暗中进行着，只不过高三远离高一、高二，导致我们完全没有信息的感觉。”“算了，反正我也不奢求这些东西。我问问你，你觉得我是个口是心非的人吗？”“嗯，感觉扯不上边的感觉。”“比如我嘴上说着‘不想努力了，考试无所谓了’，但我实际上‘十分重视考试，而且还在不断努力’。”“仔细一想，我觉得你好像是‘口是’和‘心非’的结合体。”“我可不想给自己贴上一些所想的标签来标榜自己。我所能展示的只有真心。”“但奈何真心无法被人看到，是这样一个意思，对吧？”“教学楼之间的路上有摆书的，我们去看一下吧。”“没办法了，就陪陪你吧。” 今天是传教的一天，我试图勾引同学去数学系，今天就有一个很好的猎物。“首先，现代数学大概分为三大组成部分，分别是数理逻辑、结构数学和欧式空间。我们中学阶段大致上就是处于欧式空间的研究范畴。”“嗯。大中午的有点困了。”“我可是在带领你进入，世界上最纯粹的学科，数学的世界啊。”“没事，你继续讲我听着呢？”“看来你一点兴趣也没有，那就说点有趣的事吧。比如我之前给你讲的群，它的代数结构非常简单，但是如果考虑单群和同构的话，就可以完全分类，是不是很神奇。”“是很神奇，具体怎么分类呢？”“这个我有点记不清了，不如我们再看一个例子。如果一个光滑代数曲线的亏格大于1，那么它上面有理点的个数就是有限的，也就是说只有椭圆曲线才能出现无数个有理点的情况，你就不想知道到底是为什么吗？”“嗯，想知道…吧？”“前面我们讲了，在结构数学和欧式空间中的有趣例子，实际上数理逻辑上也有。”“哦，我知道，是哥德尔吧。”“你还挺上道的嘛！”“哥德尔不完备定理在各种哲学科普书上早就泛滥成灾了。”“如果，想要了解这些东西的真相的话，数学系可是一个好的选择。”“嗯，我会考虑的，我可以睡了吗？”“你应该听懂了我的话吧。”“嗯，是的。”不等我回答，这位同学就趴着睡午觉去了。 “如果你是一个学物理的，那么张量一定是你必须要理解的一个东西，”对于想去物理系的当然是引诱去理科实验班，这样分流后就可能进入数学系，“那么张量到底是什么呢？简单来说它是一种线性的计算工具。”这是一个完全由我掌控的演讲。“人最多拥有线性的思维，只能完成线性的计算，那么对于弯曲的对象该怎么办呢？那就寻找一个具有转化作用的工具。”“哦…”“没错，他就是张量，如果我们想要描述因为引力而导致的时空扭曲的话，而我们的计算思维只有线性，那么就有一些张量来描述这个转换的过程。”随手就写下来协变导数的相关公式。“比如，这个克里斯托费尔符号就是一个张量。”(此处是因为当时的理解不足而导致的错误，克里斯托费尔符号并不符合张量的要求)接着写出坐标变换式。“张量最重要的一个特点就是与坐标的选取无关，也就是说它是扭曲时空的内禀性质。”接下来引入正题。“如果想要更深入的理解这些思维的话，基本的数学培养是必须的，这样的话，理科实验班其实是一个很好的选择，可以同时培养多种理科思维，而且学一段时间后还能再次确定该选择哪一条道路。”有没有听我不知道，但是我知道我确实说出来我的建议。 “话说回来，你最近都在干什么？这难道是分散数学心的方法吗？”天远还是挺关心我的，嗯，其实周围的人都挺关心我的，这可不是痴心妄想，我说过的，我的所想就是我的事实。“简单来说就是，一种十分想要分享的感觉被不断释放。”“你说的怎么感觉像是炫耀这种心理。”“确实有点像，至少想把自己的形象刻在别人的脑海里，靠高考基本是不可能的，就只能走点旁门小道了。”“难道不是你一直把‘不可能’挂在嘴边，才导致了你渐渐被洗脑了吗？”“不不不，我一直挂在嘴边的是‘一定可以’，甚至还能妄想拿到全省第一。”“拿错误的图景来洗脑自己，难道不就是在加强自己深处‘不可能’的意识吗？”“哎呦，别想这些有的没的，我可是在不断地向着全省第一的目标在努力着。”“你不会给自己洗脑洗过头了吧。”“放心吧，我可是对高考研究深入到了极点，并且完全透析了高考，还创立了适用于高考的信息处理论。拿下高考势在必得，我的努力自然也不会白费。”“你真的该醒醒了，这些都活在你的妄想里，你所做的只是努力妄想，不是努力实践啊！”“天远兄，看来我们终究还是要分道扬镳了，你已经跟不上我的步伐了。”孔天远最终还是放弃了，“是啊，你正在向着高考成功而不断努力。” 四、前路 “只有现实才能把人打醒，”林道一终于看完了孔天远的最后之作，“为啥当时会变成那个样子，现在想想真是一件不可思议的事。”“这时是不是该说一句，”结果我们俩同时说到，““我的青春也太不青春了吧，明明比很多人都努力学习了，却得不到比大多数人都满意的结果。””哼哼，我俩会心一笑。“没想到，你用词还是如此的严谨。”林道一倒是反问到，“是吗？哪里严谨了。”“当然是‘学习’和‘满意’了。”“谁让我是一个贪婪的人呢！”“想要一切却永远不会知足，青春也就这么挥霍掉了。”“可惜了啊，我八月份的生日，离法定上的成年还有一段时间，所以我还有一小段的可以挥霍的青春时光。”“但在我看来，高考并不能改变你使用这段时间的方式。”林道一将手上的手稿与另外三份放到了一起，“是啊，从上高中的那一刻开始，我就从来没有变过。”“你是不是在期待着什么呢？”“没错，我希望社会可以改变我，完成学校无法做到的事情。” “学长，我来了。”是李韩，他完成一些事项之后来与他们汇合了。林道一和孔天远必定走上不同的道路，也将前往不同的城市，而李韩还需要一年的准备时间，人生的去向还没有确定。“叫我来有什么事吗？”“有什么事吗？”林道一也向孔天远问道。“当然是拍一个照片做最后的纪念了，现在又有这么好的气氛。”“嗯，虽然我不喜欢纪念，但我也觉得该拍一张才行。”“李韩，你的手机拍照应该是最清晰的了，所以把叫来了。”“所以要我为你们拍照是吧。”李韩退后打算做拍照准备。孔天远当然不会允许了，“当然是三个人一起拍了，搞个延迟拍照就行了。”“可是我觉得，你们俩这样坐着就足够了，我插进来有些破坏美感。”“没事，你就坐着我们俩前面的中间。”“这样我不就变成了主角吗？”“道一，你没什么意见吧。”“我和天远你的想法是一致的。”李韩还是有那么一些犹豫，“可是…”“没事的，快点，一直拖的话，只会越来越晚了。”“煽情、茄子之类的都不需要，只需要我们的本色就行了。” 我们三人坐在一起，享受着夜晚的自然风，随着‘咔嚓’的一声，我们的故事也就结束了。 其实根据当初的设想稿，李韩的真实身份是零，而且孔天远和李韩还发生过许多事情，而孔天远正是这一系列故事的主角，不过最终还是没有完成。虽然是一个小小的遗憾，但我觉得林道一的故事是完整的就足够了。","categories":[],"tags":[]},{"title":"中学文集第二辑","slug":"中学文集第二辑","date":"2023-02-14T23:42:20.000Z","updated":"2023-09-03T13:50:19.271Z","comments":true,"path":"archives/2023-02-15-中学文集第二辑/","link":"","permalink":"http://example.com/archives/2023-02-15-%E4%B8%AD%E5%AD%A6%E6%96%87%E9%9B%86%E7%AC%AC%E4%BA%8C%E8%BE%91/","excerpt":"","text":"接下来返校事情比较多，比如上次的期末考，所以下次录入也不知道要到什么时候。另外，我的所有文章虽然源于现实，但纯属虚构，不要信以为真。当然，中学沉迷数学竞赛确有其事，但奈何能力不济，最终沦落到初高考成绩只有下面这一点。 只能说自作自受，同时也希望大家谨以为戒。但是我认为就算不搞竞赛，最后的结果也是如此，最好的例子就是高三的时候，我怎么也放不下数学，当然不是指高中的数学，我的大多数学思想基本都是高中就奠定的，我甚至妄想自己是不是真的被数学给拿捏了。由于大学我只是211非数学专业的学生，我想甩掉数学沉迷于专业课，“数据科学与大数据技术”，也不知道到底是什么专业，反正主要学的都是计算机。但是数学这玩意像幽灵一样缠着我，每次看到数学相关的符号，莫名其妙地就想学习数学，当然主要还是大学太闲了，想要不挂科真的太简单了，而且我的竞争意识从中学开始就很薄弱了，更别说大学了。抱怨也差不多了，生活还是得继续，我们有缘再见。 弃神计 …∂再这样下去计划就无法执行了▽上层礻看得紧也是没办法▽²你潜进去帮礻吧□你怎么办□²我守在这∫好吧∂… 李涵在阳台上感受着夏季风，这是陈磊异常兴奋地走过来说，“涵，我已经制定好了一系列的计划。”“快速，说了赶快走。”“怎么会有这样的佞臣。”“我会认真分析的，为了不耽误您的大业，快说吧。” “首先是计划A，现在我的手上有三枚硬币，我先拿第一枚硬币买一根棒棒糖，然后将有钱人的孩子用这根棒棒糖把其拐走，劫持人质让他们不敢报警，等他们乖乖交出钱以后，我们就拿到了战略资金。接下来我再用第二枚硬币，去拐骗核武器专家，用战略资金研究氢弹，然后引发核战争，世界就成功毁灭了。如果任何一个环节失败，我还有最后一个硬币东山再起。”“真是一个美好的笑话，后面的我不语，在天普这种落后的地方哪有什么有钱人家。不如一年后的高考拿到战略资金再说吧。”“等等，我还有计划B。今天晚上，我们带上气枪和面套去天普工商银行开几枪，他们还不乖把钱交出来，然后我们再通过下水道系统逃到这里。然后再以你的智慧研究核武器，几个月应该不会被发现。然后我们以这里为发射点，引爆莫斯科，嫁祸美国，再趁乱夺取中国核武器，引发核战，世界不久就可以毁灭了。”“真是一个完美的故事，胆战心惊的几个月中，我可研究不出这种东西。”“别急，还有计划C。我们几顿饭不吃，凑个几十块钱，然后坐动车去青傅核电站，窃取铀元素，引发核泄漏，再趁着民乱抢走银行资金，你再用核原料造出氢弹，要大量，将世界直接全部轰烂。”“直接全部说完吧。”……“目前大概就这些方案。”“你的梦也结束了，该回去学习了。”“世界都要被我毁灭了，还学习什么。”“以我们这种水平，战略资金、研发地点都难以入手，等以后有经济实力了，如果还有这种妄想，我就陪你玩过家家吧。”“这不是妄想，也不是过家家，我是认真啊。”“困了，我要睡觉了。”李涵正想去教室趴在桌上睡一会。 这时身后响起了一个声音，“这个计划很有趣，不就是资金和提供场地，我可以。”陈磊马上兴奋地说，“真的吗？”“等等，”李涵注视着这个比他矮半截的，穿着校服的学生，“你是楼下九年级奥赛班的，什么时候开始偷听的？”“我被这伟大的计划吸引而来。”“小孩就去给我准备中考，别到时候，连高中都考不上。”“别看不起我，”他把身后的书包拿到面前，打开，里面装满了红色的钞票，他凑到李涵耳边小声地说，“类似的人，无需多言。”陈磊问道，“你们在说什么悄悄话。”“没什么，小孩跟我说‘其耆欲深者，其天机浅’，然后叫我协助你。”李涵接着说，“小孩，你叫什么名字？”“于这种事怎么可以叫名字，叫代号，叫代号，”他思索了一会，“就叫我‘秋水’吧”陈磊马上接道，“哈哈，我就叫‘天启’吧。”“set”“哈”李涵不耐烦地说道，“叫我set，英语中的set。” 秋水接着说，“该是去基地的时候了。”set说，“你父母难道会放着你这样不管吗？”“他们都在国外，可管不到我，我只要拿成绩换钱就可以了。”“现在12:45，不远的话，马上去看一下。”“不远，跟着我就行了。”跟着秋水，天启和set坐车到了南山山脚，一段上路后，发现了一片大空地，旁边有三间小屋。“卧室、研究室、会议厅足够了，如果有材料需求，通过内线电话打给我。”“放射性元素你真的可以到手吗？”“有钱没有什么办不到的，研究室里都有。”天启兴奋地说，“set，我们离计划越来越近了。”set四处仔细观察了一下，“的确不错，电磁波、核辐射都穿不出去。”“set，你还要去上课吗？”“为了不让人怀疑当然要去，上课也可以思考，反正课也没什么好听的。天启，你先回去吧，我再在这里看一会。”天启走后，秋水也说，“我也该走了。”“你等一下，你到底是什么人？”“你们的同伴，你只要知道这一点就够了，”秋水满脸笑容地说，然后自顾着走了，不管set。 set去研究室，里面有书桌、实验台、还有好几台电脑。set仔细研究了一番，网络是无毒的正常网，不会被监控，没有任何发信器，看来只是set多疑了。set拿出U盘，打开电脑，然后把自己的程序安装进去，并将几台电脑的计算力结合在一起。“懒虫，起来工作了。”set朝着麦克风喊了几下。“主人，有什么事？”set把刚才偷拍的照片输进电脑，“给我调查这个人的详细信息，几天后我来要结果，我还有其它事情要做。”“是”set将电脑待机，心想，该调动所有知识了，该干番大事了。 这几天，set对秋水的办事能力觉得可怕，除了像量子计算机、大型电子碰撞机什么的拿不出来，基本什么都可以拿得出来。天启也经常和秋水在会议室进行讨论，set基本在专心于研究，上课与不上课对他只是场地的不同罢了，set本来就喜欢独自研究什么，大家也习以为常，懒得理他，终于第一颗氢弹制成了。 三人站在面前，结果发现眼前的“氢弹”跟他们差不多高。一阵发呆，天启先开口了，“set，这真的是氢弹吗？它有威力吗？”“不会错，但是能力限制射程只有大概5千米左右。”“set兄，别开玩笑了，这离目标也太远了吧，”连秋水也苦笑着说。“别急，这体积虽小，威力可大了，基本可以炸掉整个河北省，国家制作的大只是为了射程更远，实际上1立方米的氢核聚变足够大能量了，我装载了许多系统在里面，它才变大的。”“这样我们也逃不出去。”“可以远程发射的，重要的是，我研究的量子迷彩系统也装载了进去，如果没有特殊手段是观测不到的，计划商讨地怎么样了？”天启和秋水对视了一下默不作声。“好吧，我早知道会这样，就听我的计划吧。”“set，你什么时候变得这么热心了？”“我还想说你，我辛苦了这么久，你怎么这么不重视？”秋水走出来，“好了，好了，赶快说明计划吧。”“其实很简单。天启和秋水自行将氢弹运到莫斯科较远的郊外，然后再在往回逃，我拿着遥控器去中国的核弹库。等你们到安全区域后，我再发射迷彩核弹，从方向上让对方以为是从美国发射来的。趁机立刻劫持中国核弹，后来怎样难以预料，但亚洲的几个核武器大国已经可以被掌握了。”“这不是和我的计划没什么区别？”“你爱怎么说就怎么说，到时随机应变即可。” 天启三人对学校请假，开始秘密执行了计划，凭借秋水的财力，计划进行得十分顺利。俄国被激怒也向美国发射核弹，并想与中国结成同盟。但此时天启三人劫持了中国的核武器，并组织了一大批对中国教育不满的学生结成同盟，使得掉以轻心的俄国被中国反咬一口，失去了核武器，亚洲小国纷纷投降，天启通过核武器统一了全亚洲。美国也趁乱和自己负伤为借口，吞并了整个美洲大陆，欧洲见形式不妙，亮出了暗中研制的核武器并与非洲结成了欧非同盟。澳洲及周边小国完全处于迷茫不知所措状态，大国也懒得去管。此时，世界处于僵局，谁也不敢先动手，但独裁政治之下，世界处于一片混乱之中。人性、道德、伦理、法律之类完全丧失，假和平的本质终于显露了出来。 由此之后，set一系列事情终于处理完，终于该处理一下他所谓的正事。“没想到几天变成了几周，懒虫快把查到的东西给我看。”“主人，早就恭候您多时了。”“先把分析结果给我听一下。”“总结一句话就是：他的一生是被安排设计的，而且风雨无阻。”“有意思，详细说。” (一段插曲)作为一个上层的人，我真的十分完美。我出生富裕家庭，被给予极高厚望。我又有极高的天赋，从小学习各种技术，琴棋书画样样精通，从小就活在一个庄重而高雅的世界之中。完美的人往往没有什么闲情雅致的逸事，只有不断重复的训练，自己也从未发觉厌倦过它们。内心深处怎样也从未想过，从来不喜欢那些持有低级趣味的人，光高能的成绩都比不过我。直到有一天，我听到了一个充满雄心壮志，从未听说的毁灭世界的计划，比起那些只有眼前小利的人，这是多么与众不同啊。内心深处被激发了。于是，我决定了，我要帮助他们，我要与他们并肩作战。 “的确，感觉就是为天启而专门准备的一样，我觉得天启也很可疑，去调查一下。”“是的主人。”set终于可以凭借他的权利开始一场一直无法完成的研究——人脑机理。与此同时，另外两大势力也凭借中央集权开始了他们各种的研究，核武器终究只是缓兵之计。set通过情报网了解到，欧非势力正企图制造时光机，回到辉煌时代（即想办法制造闭时曲线，反驳时序保护猜想），美洲势力正企图制作人工虫洞，实现统一大业(即强引力场的制造)。中国的君主天启却沉迷于统一的暂时成果，不理朝政，在秋水的处理下，暂时没有太大问题。set在研究科学的源头——人脑过程中，也不忘研究具有强烈背景数学的规范场论，从其中可以获得难以想象的东西。第三次世界大战本质上还算和平。 一天，set坐在椅子上，看着笼子里的实验材料，他指了其中的一个人，看起来很乐观的一个人，“今天是你了，先过来陪我说话。”set带着那个人来到了另一个单独的笼子里。一到，那个人倒是先开口了，“你不怕遭报应，下地狱吗？”set满脸笑容，“‘人能虚己以游世，其孰能害之。’你这么喜欢天堂和地狱，我谈谈我以前对神学的见解吧。你觉得上帝害怕人威胁到他们吗？”“你的命都由他们掌握，他们怎么会害怕呢？”“他们其实非常害怕，害怕自己哪天养的宠物会反咬自己一口，所以他们必须训练，切断自己能被宠物伤害的途径。”“说实话，我听得不大明白。”“这个世界上最让上帝害怕的是聪明人的头脑，四维时空观，多态叠加观是远超乎想象的东西，但这些终究来自人脑，所以如果能将人脑研究透，就会发现物理规律如何被发现，加快规律发现的进程。离上帝越近，上帝害怕终有一天会被发现，于是发现了一种机制让人脑去阻碍人脑的研究，通过所谓的人伦道德，这样高智慧生物就永远无法接触真相。这样上帝即可以无忧地审察人世，又可以观赏绝顶头脑的对决，你说上帝聪不聪明？”“很聪明，但你似乎更聪明。”“别害怕，你到时候只会做一个美梦然后去世。”“这是怎么一回事？”“当前我拥有最强的量子技术，我可以把你的意识转移到另一个量子态，我研究我所处的量子态，而这两态均处于活的状态，直到我无法连接到与你量子态的量子通信时，你就失去了研究价值。”“虽然不太明白，但我至少不会太痛苦。”“没错，现在时间还早，我给你讲一个故事吧，名字叫‘孤独的观测者’” (一段插曲)一片漆黑的空间之中，只有一片亮着的地方，这是他今天刚创造的世界，他尽可能将他时间的规律放置进去，约简当然是必须的，这次世界文明高度发达，娱乐业、旅游业也蓬勃发展，毫无缺憾的世界，直到他观测到了这个世界的这样一个人。 他的家庭条件并不优越，他的父母于是教育他好好抓住义务教育的机会，他们已经无法提供更多优质的教育了。虽然学的少，但他却越来越喜欢上学习，因为这是他唯一的乐趣。但也因学得少，他所能理解的事物也更少，于是他决定请求于别人，本以为别人不会同意，但发现别人对此不屑一顾。到了初中，他爱上了自然科学，他喜欢去了解，去发现，去探索，他喜欢阅读别人不屑一顾的书，因此他对它爱的深沉，兴趣的力量究竟有多大呢？真的无法明白。但不好的事也随之发生，老师说，这次考试没过平均分的都去补考。于是同学们就都抱怨他这种无聊的东西考这么高干嘛？高就算了，还拉高班级平均分，连累其他人。他发现以后他还想借书变得困难了许多，愿意与他交流的人也越来越少。他怀疑自己，热爱一个东西有错吗？到了高中，他明白大家都是在被迫学习，学的非常痛苦，不断研习各种题目，却苦苦得不到成效。他却不一样，因为长期的热爱与积累，学习对他来说是一件十分快乐的事情。同学们都认为他具有极高的天赋是一个学习怪才。真正清楚的只有他自己。同学们不爱天才，他们抱怨自己努力总得不到回报，所以所谓的“天才”再一次被孤立了。而他也只能哀叹这个无药可救的世界而无所作为。小时候被问及梦想时，老师、科学家、宇航员无所不有；初中时被问及梦想时，还是先上一个好高中再说；高中时被问及梦想时，我想回去玩游戏。题型、技巧千变万化，原来充满趣味的东西变得无比无聊，每天面对它压力山大，苦苦挣扎发现还是找个工作就足够了。童年就沦为傀儡的孩子，实在太可悲了。精英教育以后，他们还能想起的只是一个标题。他觉得世界无趣，没有他的容身之处了，于是外面的他看到了他正在进行同他一样的观测行为，但丰富度早已降低。 于是，他决定关闭程序，卸载，删除，毁掉了世界的所有数据，然后走出这黑暗的区域。 “这是你的自传吗？”“你爱怎么想就怎么想，反正谁也不知道，是时候开始实验了。”“我非常愿意协助你。”“感谢配合。”set的实验不断继续。set的关于天启的资料也到手了，不久后他又去了一趟欧洲了解真相。 暂时转到天启王朝，天启玩了一天回到朝廷，这时秋水上前说，“天启，你是不是忘记了我们的主要目的？”“什么目的？”秋水直摇头说，“当然是毁灭世界了。”天启却说道，“世界这么美好，为什么要做这种事。”“才没几个月就被洗脑了吗？也不想想当初我为什么帮你，想想你以前的生活。”天启思索了一会，忽然眼睛里一闪，“事不宜迟，立刻开始毁灭计划，第一步先统一全地球，第二步发射核弹毁灭世界。”“非常好。”“秋水你去镇守西边防线，我要先出征美洲，美洲联盟远比半数以上是非洲人的欧非势力可怕。对了我们目前武器有些什么。”“拥有若干枚披有量子迷彩的氢弹，十余枚中子弹，还有尸化病毒。”天启愣了一下，“尸化病毒是什么东西。”“是set研究人脑时顺便开发出来，使人处于半死不活的状态用于方便研究。”秋水接着说，“其实set最近还研究出了一种不太完善的方法，可以操控Higgs粒子。”“这是什么东西？”天启更加疑惑了。“简单地说就是将一个有质量的东西轰掉一半的质量。”“感觉没有太大的用处。算了，我带上氢弹和中子弹出发吧。”“等一下，set还研究了一种反导机制，可以使人与导弹的量子态分离，这个的触发装置也带上吧。顺便带几个技术人员。”“对了，set哪里去了？”“他好像有事要去欧洲一趟，应该是技术交流，没有太大问题。”“好，开始出征。” …∂我回来了▽幸苦了▽²这样下去没关系吗□不现在才发现，自从礻播下种子的那一刻起，孤独的观测者们早就不孤独了□²上层礻发现了怎么办∫早已经无所谓了∂… 天启将所有的装置带到了日本大陆——领土中离美国最近的地方。到地方后，他终于可以仔细观察一新型导弹，“这导弹现在已经变得这么大了。”一个技术人员回答，“里面装载了足够的燃料，凭借我们现有的量子通信技术，可以精准地打到美国的任何一个地方。”“优秀，把美国地图拿来，让我看一看该炸什么地方。”大将军将一张花绿绿的图呈现了上来。“这是什么鬼东西，给我换一张正常的。”“这是军事专用的地图啊！”“不需要，我只要考虑炸哪里就行了，”天启不耐烦地说。将军呈上了一张旅游地图。“嗯…”天启思考了一会，“华盛顿、纽约、旧金山…这样一个个炸下去。”一个技术人员立刻上前说，“大王，我认为这并非良计，我们应削弱美洲的军势力量为先，而且百姓是无辜的。”“还敢顶嘴，你照做就行了，烦了烦了，给我下去执行技术。”“可是，大王…”“快下去，不想听了” 于是照计划进行，不久，“大王，有紧急事件。”“我说的地点炸完了没有？”“还没有，不过…”“没有什么不过…全部炸完了再说，”天启小声念道，“怎么这么烦啊，好想回去。”…“大王…”…“三番五次，你烦不烦，快点把地方都给我炸了就行了。”技术人员和大将这次一起来了，“大王，地方都炸完了。”“很好，”天启十分兴奋地说。“不过，导弹用完了，军事基地和兵工场也全被对方炸没了。”“被对方炸几个地方有什么关系，我们开始下一计划吧，”天真地说。“大王，你什么都不明白吗？民用地区可以重建，但军事重地一旦被毁，我们已经是最薄弱的时候，这时敌人再攻过来的话，我们已经毫无反击的兵器了。”天启已经意识到了事情的严重，急忙说，“秋水在哪？快把他召回来，快。”“我们已经去过了，他在到达西边防线后不久就失去踪迹了，还让别人代替了他的位置。”“对了，还有set他的研究所怎么样了，还有快把他找过来想办法。”“他的研究所，平常他就隐藏得很好，暂时没被发现。不过，他后来又去了美国，因为最近的战争，他被扣留在美国那边，无法脱身。” “怎么办？”天启头脑一片空明。“向美国求和吧，之前美国害怕我们的技术和文化的悠久，所以一直都暗不做声。但现在他们应该已经明白我们的脆弱了怕，可能不久就要打过来了。”“可恶，这怎么行？”天启差点要将心声喊了出来，咬牙切齿地说，“让我先思考一下。”将军也喊到，“大王，别等待了，已经没有更多时间思了，现在基层也很不稳定，随时可能起来造反。”“烦死了，都下去，说了让我想一下。”“我们都是为了报旧恩才一直跟随您的，我们最多给你一晚上思考，不然，我们也不会再跟你了。”他们走了，就剩下天启在此苦苦地思索。 时间不等人，很快就到了朝见的时刻，忽然天启注意到了一直被忽视的尸化病毒们，心生一计，忽然大笑起来。这时两位重臣进来了，技术人员上前说，“大人已经下定决心了？”“对啊，我已经下定决心了。”将军脸上浮出了笑容，“我马上去找美洲势力…”“等等，我还没说完呢！”天启制止说，“我是说已经下定决心执行新计划了。技术首脑，这病毒可以传染吗？”天启拿起装病毒的瓶子问。“虽然没有实验过，但从set之前行为看，应该是传染性极强的，似乎繁殖也很快。”“很好，这个病毒有解药吗？”“因为这病毒个体难以铲除，的确有解药在set的实验室。”天启起身下命令，“技术首脑，你去set实验室把解药全部毁掉。将军，你去美国边境，扔几个感染病毒的人，为了防止欧洲，那边也扔几个。”“大王，这样下去会发生什么后果难以想象。”“去做吧，反正也走投无路了，”天启满脸无奈。由此，技术人员和将军说，“干就干。” 尸化病毒传染极快，很快就在欧洲和美洲爆发。感染的人虽然没什么理智，但身体素质极强，传到中原也是不久后的事情。 set正在和美方谈话，想要放set回去和天启说一些事，这时病毒大爆发的消息传来。“哈哈”set大笑，“该来的总是要来的。”“难道你知道些什么吗？”“先仔细听一下报告吧。”北美、南美两片大陆已有超过百分之八十的地区受到感染，才不过几天。“这是什么东西，为何如此可怕？”“这是我实验用的量子型病毒类似物，近距离不接触都能传播，结果就是产生一种新理性的世界吧。”“这是你研发的就应该有解药吧！”美国总统急忙质问set。set不紧不慢地说，“依我之见，天启应该已经把我实验室的解药全都给毁掉了。这是用量子纠缠原理制成的病毒，丢失的量子基本不可能找到了，也就是说不可能治疗了。”“不明白你在说什么？”“明白话就是，解药是一对一特制的，再重新制作也是没什么用的？这个世界已经完了。” 又过了几天，世界基本已经无容纳的空隙，中原地区也惨遭毒手。三大势力首脑正在想办法到北京进行一次联合会议，但全部人员赶到时。这时或许只剩下会议室周围是安全的了，防备人员也所剩无几了，人类在企图做最后的挣扎。 三大势力首脑位于会议厅三角坐着，外面有相应的警备人员，set站在天启旁边，这是美国总统带过来的。美国总统首先进行了责备，“天启，都怪你，这下我们真的完蛋了。”“哈哈，我不知道你在说什么？”天启应该对目前的状况不知所措而在装傻，“set，你有什么头绪吗？”自从尸化病毒放出之后，他自以为计划应该完成，有回到以前吃喝玩乐之中，他还是，“等欧美与尸化病毒抗争时，我结束后坐收渔翁之利就行了。”第一次欧盟与首脑与他联络请求合作时，他不以为然，让他们自生自灭。直到病毒跨越喜马拉雅山和太平洋来到中原时，他才有危机意识。在众多忠实手下的保护下，保住一条小命，他立刻请求另外两大势力联合。人民不知所措，只能试图完成势力聚集寻求一丝安慰，聚集途中又是大片的损失。一次聚合又有什么用？人们不知所措之时，除了责备也不知该干嘛。“人类只能等待毁灭，除非上天显灵什么的，”set如此说到。欧盟首脑也说，“喂喂，set这是你研究的东西不可能一点办法也没有吧？”“原理我已经向你们的科学家解释过了，不可能的。不信你们自己问。”果真两大势力还真的问了，但得到的结果只是令人更加绝望，会议陷入了沉默，只能静静地等待时间的流逝，望着人类理智失去前完全的一些时间。他们在想什么吗？是祈祷？还是思考到最后。 set最先打破了沉默，“反正世界就要灭亡了，我来说明一下我的几个调查结果吧。”“这有什么用呢？”“或许可以明白事情的真相，不，世界的真相。”“除了活命的方法，我们什么都不太想听。”“你们就当是听睡前故事吧，最后不也挺无聊的吗？”“好”“好”…无奈声。 …∂总统说你涉嫌破坏移交政府的世界▽是吗证据呢□²搜查令要求你转交系统控制权进行调查▽²随便你们我也想休息一下了□▽∫▽□真的不做任何事吗▽反正那个世界估计没救了∫他们一旦有权限就不能换回吗□你可能对世界系统设计原理不大清楚为了达到与我们相同的混沌度我们的干预是有限的据我推测这决定会被遗弃▽可是…∫²最初目的已经达到心愿已经完成一切随造化吧□²……∂… “根据我最近的调查，你天启不是我们世界的人，你是这些事情的元凶，”set还未说完。美洲总统就插嘴，“这不是废话吗？特别是这次的病毒事件。”“原来你们都调查地这么清楚。”欧洲总统也说，“本来就只是一个借口而已，世界早已不太安稳。”“仔细听我说，”set大喊出来，“我通过时间回溯技术和远距离传输，实现了时空传输，发现了一件事情，”set将会议大厅的屏幕投上了一段视频。 先是一个类似天空的地方，突然出现了一块石头，然后往下掉，掉到了中国大陆的一片靠近城镇的地方，然后石头裂开了，一个婴儿从中爬了出来。“哈哈，这是孙悟空吗？set你竟然能制作出这样的影片，”天启自己先乐了。“这可是你啊。”“啥？”婴儿在哭泣，但没过几分钟，有一对夫妇走了过来，并且将婴儿带回了家，而这家的位置和夫妇的样子。“这不是我父母和我家吗？”天启如此说。“天下真有如此巧合的事吗？”美洲与欧洲一起惊叹。“根据我的猜测，这个世界之外，有可以干预这个世界的东西存在，但干预能力有限。比如投入一个东西或者使某件事偶然发生。但好像不可以长期进行干预。因此事先，写了类似于程序的东西进入天启脑中，让他有时会闪出这种思想。然后正好在不久的这时爆发了。”“喂喂，你这是在讲玄学吗？如果要毁灭为什么要等这么久，为什么不多投几个？还有为什么要毁灭世界？”“对这些，我也不大清楚，但是干预限制肯定不止我说的几个，我怀疑世界可能存在两股上层势力，一方维护，一方破坏。维护方有主权，使得破坏方只能暗中行动。还有不久前出现的秋水。”天启插嘴，“他最近都不知道哪里去了。”“没错，我怀疑他是破坏方的潜行者，但由于限制，只能营造一个很好的家庭环境，我不久前调查了他的底细。”“说这么多废话和编造故事，还不只是得到一个众所周知的事实——天启是元凶。” “这样说也没错，但是…”set还没说完。这时屏幕前忽然有丝异样的气息，“嗨，凡人们，原来如此，你们竟有如此高的智慧帮我们省了很多麻烦事。”“什么人，为何目的而来？”“人？我可是你们口中所说的维护方的神，来拯救你们的。”三大首脑立刻起身，“真的吗？该怎么办呢？”神还没说话，set就哈哈大笑起来，“我的理论没有错，神，带我去你们的世界。”“这不可能的，你的感觉无法承受住神界的信息量。还是谈谈拯救世界吧。”“世界怎么样，我可不管，”set拿出了一个遥控器，“我在地心里埋了我特制的炸药，我一按，人类就完了。”“可是，…真的没办法。”“是吗？那全都毁灭吧。”没过几秒，烟尘散去，只留下一片废墟，尸人们也没了。使者看着，叹息，“这样啊。”然后消失了踪影。 …∂那个世界已经无意识物了可以推测元凶就是设计者∫那就抛弃吧▽²本来就没其它方法了□▽□∫你被放出来了一切都如你所料真的被抛弃了▽²…□²而且审判结果什么结果都没有就单纯扣留了一下∫…∫²要去找那个世界吗▽不用了因为那跟我十分类似我很明白▽²我突然又不理解了▽∫总之随它去吧“人能虚己以游世，其孰能害之”∂… 废墟的一角掉落两旁，从中冒出了四个身影。狂笑“我连神都能骗过。傻瓜，有哪个在地心的炸弹不会让地球瓦解，只剩废墟呢？”…… 小说进行时本篇 这是一个昏暗的空间，光亮只集中在一处，那是电脑屏幕发出的光亮，非常的微弱但很持久。在微观旁，有东西在动，原来是一只手，一只翻书的手。尽管光线微弱，但仍可以照亮白纸黑字。这是一个人，正在看书的人。如果仔细观察周围，发现这个空间挺大的，而地上放满的只有书。你会发现，没过多久有的书会不见，又有新的书将之取代。更惊奇的是，那个人换书看时，对书的定位精确无误，毫不犹豫，可他明明看不见书的封面。我们来看看电脑，连系统程序都被修改过，电脑除了文字就是文字，里面还不断进行着一些程序，当然是为了房间的主人可以一直呆在这里，再仔细看看主人的身上插了好几根管子，但丝毫不会影响他所需要的行为。当然，这个人除了睡觉，就是看书或者看电脑。 读者可能有许多疑惑，但都不重要，让我们来探索一下他的内心世界，因为他已经基本不会说话了，反正对于他也没有必要。现在的他开始逐渐意识到生活的窘境，父母去世后的遗产也要坐吃山空了，还能过多久与世隔绝的日子，他不想去思考。他将一切交给电脑程序，自初中起已经六年未尝与人直接接触。他恃才傲物地认为周围的人实在过于愚蠢，但他又无法摆脱小天地去见真正的伟大存在。直到父母因车祸去世的那天，他持有的不是悲伤而是解放的自由感。 他厌恶周围的人，厌恶他们的无知，那些人稍微知道一些东西，就自认为看破了一切世事。但是他们不明白，知道一些东西是很容易的，困难的是知道一些他们不知道东西的存在。他厌倦将他送去学校的父母，他认为他去的是知识监狱，而他渴望的是无垠的天空，不甘于做井底之蛙。他知道自己的无知与无力，但正因如此他才有可以不断追求的东西。人类因对某些东西的不了解而厌倦，更会因不了解而喜欢，这是人类的天性，但是… 他的困境开始了，口中感觉有一天没有食物的触感，电脑为防止电量耗尽在不断地减弱光线，他的意识感觉没那么清醒，书本身看不清，他自己本身也几乎无法看清。这时，头脑里响起了“幻觉”？ “少年，你想活下去吗？”一个苍老有劲的声音。 看来我真的穷途末路了，竟然出现了幻觉。 “我是真实存在的，并且是来帮你的。” 难道我已经人格分裂了吗？还故作老沉。 “汝想什么无关紧要！吾等要汝参加游戏。” 先告诉我你们是什么东西？为何而来？ “告诉汝也无所谓。在汝等眼里，吾等可称为神，为了吾等的研究，需要汝等的参与。” 是神的话，直接让我强制参与不就行了。 “这有悖于吾等的规则，参与必须得到同意。” 先讲讲所谓的游戏是什么再说。 “汝等暂时失去现有记忆，并在一个新世界的一个时间点的一个人身上，并持有其记忆渡过下去。直到到达结局，就可回来，并保持全部记忆。为了不影响汝等正常生活，在新世界里渡过一年，相当于你们当前世界的一小时。成功以后，将给予汝适量金钱作为回报” 所谓结局是什么？是指死亡吗？ “吾等并不清楚，吾等只是将汝抛入一个迷宫般的暗箱的入口，并等待汝从出口出来” 这个游戏是在研究记忆的影响吗？ “答对一半，但还其它目的不能解释。” 你们可以更改记忆，直接创世也没问题吧。 “理解汝等的语言已经花费大量时间，吾等对记忆的操作，本质是大段的复制、删除、保存，对许多细致的地方有许多没有解析出来” 你们所受的限制比我想象的多许多。我问最后一个问题，参与的人不只我一个是吧！但是怎么将人选出来的？ “随机选择” 好，我答应你的要求。 “108号记忆感知导入，开始了…” 我在前往京城的小路旁，坐下休息，回想我的过去。我已经是第几次前往参加会试了，前后快三十多年了，就是无法考中贡士，想要做大任的官已经很困难了。做官？我突然心生疑问，这个大唐王朝的制度问题好像很多，皇帝为什么可以独揽大权，可以世袭。明明通过百姓的支持来迭出不是更好吗？有很多朝代可以看出，世袭并不是一个好的方案。因为前代皇帝的英明，不代表后代如此。而且皇帝又负责殿试，很多高级官员的选拔，这更应要通过百姓才对。因为皇帝和官员应该为整个国家而做事。对了，可以通过各层百姓投票选出人民代表，一层层上去，最后得到应当迭的皇帝。为什么如今我才意识到。更进一步才行，皇帝家天下的思想有问题，每个人都是自由的，为什么皇帝可以决定生杀大权。不行，还有更多的问题… 回来了？自然界一小幅画面印在脑海，到底多久没有见过自然和阳光了？ “不得不说，汝实在快得让吾吃惊，依照约定给予汝适量的金钱。” 他看了看电脑屏幕，大概再撑三周？ “以汝的速度，这已经是最大限额了” 还可以继续的，是吧？让我搞个一年的份量。 “汝的欲求太大，吾等无法干预到如此地步，不过再多进行几场游戏是没问题的。” 听到声音“96号记忆感知导入…” 我躺在了床上，开始对过去进行了总结，一切都如此的记忆犹新。情感、为什么、怎么做…都是祖先所需要的东西。如今我们的社会没有劳动，只有对科学知识的记忆，而且将做什么也是安排好的。我们都感觉很快乐，从未体会过思考的痛苦。问题、思考之类都是远古时代人们所承受的痛苦。而我有幸地生于这个时代，不愁吃、不愁喝，每天进行正常的学习与工作，一切都在安排之中正常进行。真是奇怪，我在做远古人所做的称为回忆的事情。真是没用，明明现在如此的美好，又用了一堆远古人的东西，都忘记吧… 又回来了，好快，快到难以想象，还没有体会过任何图像。 “吾已在为汝申请24初始世界，稍等一下” 怎么感觉难度会一下子提高很多，他看了一下电脑，四周的份？ 你是不是感觉不到我的思考和我在世界里的事。 “是的。” 那你们怎么采取数据。 “吾等自有采取吾等所需之物的方法。” 挣钱变得容易了呢？生活不愁了吧… “汝将进入8号世界，准备好了吗？” 是的… 我是小说中的人物，神所写的小说中的人物，我将写小说的称为神。这是我一出生就明白的事，但出生是什么？我的意愿似乎因为神而改变，但明明没有一件事让我觉得我是被神所操纵。即使是神创造了我，我却仍有存在的感觉。明明没有神的解读，我只是一堆无意义的东西，胡乱堆砌。因为神的解读，我感觉到了自由意识。神构建我的世界时尚且有限制，我的世界又怎能没有。我的意义因神的解读而存在，一切的偶然都只是为我不无聊而做的安排。在神的眼里，我处于字里行间，并可被反复解读。而我的眼里见到的是大千世界和丰富的人生，并且一去不复反，这是我的感觉。我所感受的比神还要丰富。安心度日本身是个好的选择，但如今我在思索为什么我不能走出文字的枷锁。如果我一直认为我是文字，那么我永远只能是文字，难道我无法成为创造我的神吗？但是无尽地思索，总是带不出好的结果，越是去了解与发现，越是明白自己永远只能文字。因为神不再对我解读之时，就是我辈意志消失之时。神毁灭我易如反掌，我却只能无所作为等待消亡。这是神也无法突破的真理，有的东西永远无法改变，改变之后它就不再是他了。经过思考，我明白了，有很多东西即使不完成，也是没关系，我眼前的世界之中还有许多等待着我去探索与发现，未知的东西多得数不清，将其发现、了解已经足够渡过我的一生了，明明这样渡过已经足够了。无尽的问题等待着我去解答，周围的世界尚且暧昧不清，又怎能凭着如此多的不确定因素去挑战神界。果然文字永远只能是文字，无论在现实之中我处于怎样的地位，只要感受到我存在了，那就已经够了… 从一个诡异的地方回来了，记忆与思考是什么东西啊！连文字都会思考了，难道很多东西都会思考，只是我没发现。 “未大人，我们的主管，邀请你参加0号世界” 容我问一个问题，人类的计算机在你们的眼里是一种生命吗？未思维的跨越连神也无法理解。 “其我等看待你们，如同你们看待计算机差不多。差别是，你们是先创造了语言，才有了计算机。我们是发现了计算机，并去解析构建计算机的语言。” 可以认为我们在某些方面超越了你们吧？ “是的，但并不是你们眼中所谓的计算速度就是了” 无论大还是小，哪里都存在不解的地方。而我们处于中间位置，两边都是无尽的位置，是吧！ “中间位置的意志，很多地方都是不谋而合的” “0号时间准备完毕，这是吾等无法掌握规律的世界，请小心。” 好的… 咦？怎么回事，我的记忆全在脑海里。 (幕间剧情) “神是存在的”未早上一到座位，对周围的同学说到。沉默不到几秒，就响起了一阵笑声。 “你是三岁小孩吗？现在连三年级的学生都知道神是假的，科学才是真的” “可是，谁也无法证明神不存在” “就是没法证明，科学才比神可靠”没有一个人是认真的，只有嘲笑和讽刺。 “我父亲书房的一本书里写的，神是存在的。” 听到这，他们不再戏谑，反而变出更加厌恶和鄙视的眼神。一个人上前，盯着未说：“不要以为家里有些书，还多看一些就可以当智者了，你不过是个小学六年级的弱智儿而矣，明白吗？弱智儿。” “我一定会证明的。”他们失去兴趣地走开了。 ……“找到了吗？”沉默。 ……“找到了？”保存沉默。 ……“没找到？”还是沉默。 ……“没找到吧！”沉默不语。 “父亲大人，告诉我吧！你一定知道神在什么地方，这是你书房里书上写的。”未跪在了地上恳求。 “要我说多少遍你才信，这是几世纪前的幻想了，你给我去好好学习，别给我想这些有的没的，再这样就别进我的书房了。” “可是…”不等未说完，父亲已经不耐烦了。 “没什么可是，去把该做的做了。” 未还是赌气，还是冲出了家门，母亲也只能眼睁睁地看着未离开，不知所措。 现在是放学后的傍晚，未只是无心地四处飘荡，不知道过了多久，未经过一栋大宅的旁边的窗前，里面的景象吸引了他，是一个女孩躺在床上，周围有许多奇怪的东西。感觉她一动不动，又感受到了一些活动的气息。 这时，一张硬纸板（？）从床边被举起，上面用铅笔写着「你来了」她似乎知道未要来，这时注意到了房间有许多镜子，其中有几面对着未。未终于明白为什么她看着天花板，也能知道他来了。 未想看看她周围的东西，于是干脆从窗户翻到进去，离床大概一米左右时，牌子上写着「别再靠近了，这周围很危险」未看了一下周围，发现地上有许多电线，未尝试着问她。 “你怎么好像知道我会来。” 「在我的记忆里面有」牌上写到。 “说起来，你不能说话吗？”未发现她通过左手在板上写字，再通过机器展示给他看。 「可以说一些，但是没有必要，会影响效率」 “效率？”未不太理解她在说什么。 「我全身可以活动的只有手、眼睛和嘴巴」 「我通过左手把信息传给别人，左耳接受别人信息」 「我说多余的话，会使接收失真」 “那你右边是用来干什么的？”未看了一下对面。 「右手负责将信息输出存储在计算机里」 「右耳负责将计算机里的信息进行读取」 她右耳似乎连着耳机，究竟如何读取呢？ 「用我自己创造的语言，进行读取、写入」 「还有我的右眼负责获取世界的一些状况」 发现她右眼上方有一个不断变化的屏幕。 “你说记忆中我来过，怎么回事？” 「我已经活了几百年了」 沉默，未愣了一下，说了一个字“啥？” 回过神来，“感觉你跟我年龄差不多吧！” 「那是我存在这里的年龄」沉默。 「我的另一层意识，活在百年后」不解。 「在未来，形体不在，意识仍在」 “你是未来穿越回来的？”未提出一个猜想。 「否，准确来说我推算出了未来」 “不可能吧！这么大的范围的数据和不确定性怎么可能全部掌握并利用” 「我说过我有一套自己的语言」 “啥”，未对此难以理解。 「自然数是无限的吧！质数是没规律的吧！」 「但为什么我们可以把握自然数，判定质数」 “嗯？”未大概是在思索。 「这不重要，你应该有更想知道的东西吧」 “对了”未认真地问道“你相信神的存在吗？” 「相信，如果我们的概念是一样的」 “能讲讲你的看法吗？”未如此说。 「神存在于我们无法认知的地方」 「他们不一定由存在、感觉、意识组成」 「他们无法认识我们，我们也一样」 「他们会在无意识中干预到我们」 「我们却永远无法触及到他们」 「他们可以理解我们，我们却不可以」 「所以，神的存在表明了其的不存在」 “人如何才能触及到神的存在” 「不可能，除非他们来找你」 「这也是他们能被称为神的原因」 “到底为什么不能？”未想明白。 「他是你无法知道的存在」 “所谓知道是什么意思？” 「各种手段、感觉、思考所得的东西」 “话说，这应该不是现在理解、所感受出的东西吧，难道不会因此改变未来吗？” 「不会的，我的两个意识是分离，可交流的」 「只要仍是我们的世界，就不会改变」 “虽然不是很理解，但是我有更多的问题想和你谈论，没问题吧？”未展示出了他的探知欲。 「如果这是你想要的话，当然没有问题」 …… 「现在似乎已经很晚了，你不回家吗？」 未突然发现房间不知何时打开了灯，外面已经变得非常的安静，一片漆黑，“几点了？” 「北京时间，晚上10点44分10秒」 “非常高兴认识你” 「彼此」 “对了，你叫什么名字？”未想起了忘记的事。 「莱」 “像你这样的大小姐怎么能被冠上‘草’字头，没有‘草’字头才好。还有，我叫‘未’，这样我们两个人的名字就可以组成‘未来’了，多好啊。” 她似乎停顿了一小会。 「或许几次都难以改变」？？ 「没关系，就叫我“来”，我很喜欢。希望记住」 “来，再见了，”莱并没有回复未。 未怀着高兴的心情回家了。回去给父亲道歉，我真的错了，通过来小姐我明白了许多东西。 回到家中，未发现家里的灯都亮着，不过未有了很强的睡意。父母不会也已经睡了吧，因为没有感受到有人活动的气息。突然，未在餐桌上发现了便条，上面写着“我们出去找你，如果你先回来了的话。一定饿了吧，先吃些这里的饭菜吧。吃完以后，用座机打电话给爸爸。不急，没关系，吃完饭再说。——妈妈”未的确发现了肚子的饿意。为了尽早道歉，未吃饭的速度比平常快了几倍。 然后未拨打了父亲的电话，接通了。“喂，爸我…”还没说完，传来了一个陌生的声音，“你是黄先生的儿子吗？很不幸地告诉你，你的爸爸和妈妈因发生车祸，抢救无效，去世了。你能来…”电话已经脱离了未的耳边，电话里的声音，他听不见了。 (幕间结束，回归主线) 我有六年后的记忆，对最近记忆的考察发现，这时是我离开家在街上游荡的时候，难道我穿越了？到底要我完成什么？ 根据前几次的经验可以发现，这个游戏就是跟着自己的意愿去前进，然后自然可以到达结局，也就是我想干什么？ 穿越到过去的人都想干什么呢？我不大清楚，不过随着两股记忆的交织碰撞，我有了一个念头，去救我的父母。 到底什么时候发生，现在什么时候也不大清楚？更关键的是，我突然发现，除了父母因车祸去世，我什么也不清楚，该怎么办。 突然，有了一个想法，去找她，不知道有没有办法。 我凭借记忆找到了房子和房间，看向里面，有牌子写道。 「你来了，但为什么晚了？」我直接翻窗户进去。 「别再靠近了，这周围很危险」我停了，马上开口说道。 “莱小姐，能不能帮我一个忙？”她似乎很震惊，却没有表现。似乎在思考一样，停顿了一会后。 「先说说看」 “你记忆中附近将发生的车祸的具体时间和地点” 「未来不可以改变」 “难道我现在的行动和你记忆中的未来一样吗？” 「以我的位置为参考位置，现在为时间参考」 「9分36秒后，南偏东54度，947米处，一位作家被小轿车撞」 那是我父亲。“周围有没有其他人，比如一位女性教师” 「没有，周围除了作家，没有任何人，小轿车上也是」 嗯？“能不能扩大范围找一个教师”几秒后。 「9分36秒后，北偏西36度，1897米处发现了」 我脑子里描绘了一个图像，我父母竟然分头来找我。虽然还有很多疑点，现在要紧的先救人。可是无论怎么看，都只能救到一个人。先救母亲吧，她平常对我很好，照顾我的各个方面。不对，我现在是6年级小学生的体力，能跑这么远吗？能不能告诉警察我预先知道了车祸，让他们去阻止。不对，谁会听小学生没有根据的话。 算了，先去父亲那边，到时候看能不能和父亲一起开车去营救，时间就是生命，母亲只能晚点去你那边了，对不起，明明你一直对我那么好。出发前，突然想起一件事，我转向床那边“谢谢”，然后快步离开了。 我还是太高估小学生了，18岁的心灵记住的图像，用12岁的身体跑还是太累了，不过只能尽力了。不过现实还是难以超越，与我没来的差别，只是因我叫喊而产生了一个回转。幸运地是生命保住了，但因身体原因只能住院，母亲当然并没有营救成功。不幸的是父亲被查出癌症晚期，不可理喻啊！ 我坐在病房听着父亲说话，与我离开那天判若两人。 “是吗？母亲发生事故了。不过，我也活不久了，听我说说话吧。” “嗯” “我以前是搞核物理的，多少我也明白会得癌症的原因”不知道呢。 “最早引起我兴趣的是夸克禁闭现象，你可能听不懂”我听得懂。 “换个说法就是，人类借助一切工具所可到达的最大限度是存在的。一个是在微观上，先是出现了不确定性，再到后来的无法观测，也就是人无法知道和感知的领域。在宏观上也有一个无法超越的光速，另一个是宇宙不断扩大的边界。这一切都表明，人类有感觉其存在，却无法认知其存在的东西。反过来说，那里面的东西能否干预人类呢？我猜想，其中一定存在单向通道，另一边存在认知水平更高的存在，他们的感觉不一定是类似于我们的五官，但只要做到信息传递就足够了。还要否认的一点是大小观点，我们感觉其体积小的存在，其内容实在不一定是小的，或许其实水平更高的存在。因此，我提出了神的存在，你以前看的那本书就是我写的。”父亲的理论的确很难懂。 “神既不是高维或比我们广大的存在，也不是一个可以自由操作自然的存在，而是一个认识水平比人类高，不知形体、大小的存在。” “但是，没有人会认同的。因为神是被否定很久的存在了，只是我不知该如何称呼这种存在，因此将其取成了引入误会的神。同时，我的理论本身说明了其的不可证实，更增添了玄幻色彩，想要人信都很困难。” “因此，我才不想你去接触这种东西。人活在世上，不是为了获得全部真理，因为总有些真理是获取不到的。而涉世尚浅的人很容易被一些玄幻的东西所误导。也只有真正体会过各种东西以后，才能更加客观地看待各种东西，找到自己的生活方式与价值。” “……”听不见了。 我回到了现实。原来并没有穿越，只是体会了0号世界。 你不知道我在0号世界的经历。“是的” 你无法精确解析我的记忆。“是的” 那我不想参加游戏了没问题吧。“为什么？” 我想更加实在的自我生存，我带你去见一个更加适合参加游戏的人，我想她应该没被选中。我不参加了，没问题吧。“好吧，只能这样” 未拔下了身上所有的通道，整理好各方面的事务，穿上6年未穿的衣服。 然后出门，见到了6年未见的阳光，它依旧如此刺眼而温暖。 大概半年过后，一座宅邸的院子里。一个女仆推着一个坐着女孩的轮椅，测试移动的可能。 “莱大人，明明你都想到了，制造我在这边形体的方案，我也按你的要求改变声音和用说话交流的方式，你不能改变一下你自己的现状吗？” “不行…要自然…” “可是，这么久了，你的运动水平还是这么低。” “努力…成功…” 女仆心里传来一阵声音，要么叫“来”，要么叫“主人”。 “好，主人” “系统…怎样…” “因为主人和未大人，大部分已经退步放弃这个系统了，但有几个保守派要怎么解决。” “地位…怎样…” “都是旧派的人，思想顽固” “太多…不解…” “没办法，这是主人认知的极限，能到这一步已经很不容易了，按主人计划，再过几天应该可以结束。” “他…” “未大人不像主人这么长时间，已经可以正常生活了。” “完成…见他…” “为什么主人一直惦记，才见过一次的未大人呢？再说，主人这因营养不良而还像初中生的身体…” 女仆心里传来一阵又快又可怕的声音。闭嘴！如果不是因为你的出现，未，本应该是跨越了十几个世纪的天才。 “可是，那也只是你的推算。而且，我觉得如果不是我，他会一直关在房子里，直到饿死。” 不会的，他会因为不小心看到我写的书而走出房间。而且不是因为你的话，我的推算不会有任何差错，并且他的理论被理解又满足了各项条件，正要触向神的世界时，你却阻断了我。 “主人，难道不可以改变初始条件，再次推算吗？” 说的轻巧，我根本无法认知你们的世界。 “跟看电影一样的世界，你应该很早就失去了兴趣才对。你不是还成功的干涉了我们的世界。” “不稳…”她不想说什么了。 自从未走出家门的那天起，未开始了正常的工作与生活。他没有什么学历，只能干体力活。虽然，未身体素质不好，经常无法正常做完工作，但混饭吃没什么问题。在未的丰富知识和卖苦力下，他成功当上了工作小组的组长，工作也没以前那么劳累了。 早上，未正想着看一本好书来度过难得的周末时，响起了敲门声。未去门口开门，发现一个坐在轮椅上的女孩和身后推轮椅的女仆装的女人。这都什么时代了，还有这样的人，轮椅上的人有点面熟，未仔细地看了几眼。 “你好…我…来…是”轮椅上的女孩说到。因长期劳苦工作而忘记的记忆想起来了。 “你是来，还以为你得了重病，只能一直躺在床上呢？” “没…” “你这样的身体，你父母还允许你四处走？” “同意…有…” 女仆这时心里一阵凉意，她可是让我协助改变家人的记忆和意识。这样同意也不是什么假话就是了，她真的太厉害了。 “你来这里有什么事吗？” “聊天…以前…” “那我去准备一下”未刚要去布置时，一个眨眼间。一段空白，未发现自己躺在床上，窗外的太阳正要落山。嗯？ “谢谢你今天陪主人。未大人，我们走了。”女仆推着来要离开。 “等等，我们今天到底干了什么，怎么感觉一点记忆都没有？” “未大人真会说笑，我们走了。” “等等…”未也不知道该说什么东西，看着那两个人离开了。未只能茫然地呆坐着。 “主人，经过你自己制作的负一号世界，你应该明白了吧？人心是会变的，虽然我不是很理解就是了。” “未…特别…” “再怎么说，被背叛后，又弄一个温柔的人来安慰，想不变心都很困难吧。这样的检验根本没有意义啊，主人！” “未来…如何…” “…” “人…无聊…” “…” “神…不解…” “…” “手…”女仆用手捂住了来的整个脸，来第一次哭了。不是号涛大哭，只是细细地、不知所措的、茫然的哭。不一会，来不哭了，说。 “未…名字…” “主人，想了这么久，就给我起这个名字吗？” “问题…？” “当然没有了，只是这样不会让你一直念念不忘吗？” “未…代替…” “好吧，主人，从此以后，我将代替未，与你一起通向未来…不，无法掌握的未来。” “神…如何…” “他们已经不会再干预这里了，现在只有我在掌握着这里。主人的超算神经也已经被清除掉了。” “以后…不改……” “这样的话，以后很容易遇到危险” “未…保护…” “就因为考虑到这个，才给了我这样的体能吗？主人，你不会一开始就知道结果会这样吧？” “真…没…” “算了，现在要先把主人的语言能力先提上来在再说，要不要去上初中啊”气氛渐渐开始活跃了… 外传 “爷爷，神是什么呢？”一个天真无邪的小孩问坐在树下乘凉的爷爷，他拿着一本刚读完的书。爷爷抚摸着孩子的头说。 “是一种人类想他们存在并去不断追求的东西。他是一个永远无法到达的存在，人类精神的向往。” “追求不到的东西，却去不断追求，那样的人不是傻瓜吗？” “正是因为追求不到，人们才有源源不断前进的动力，使自己无悔于一生，感受到自己真的活过；正因为有追求不到的东西，人们才会更加珍惜自己所得到的东西；正因为追求不到，使得他的神秘更令人向往未来。” “一定要有所目的才会开心吗？游戏也让我开心啊。” “为什么游戏会比现实好玩呢？” “就是因为它好玩啊！” “不是的。因为在游戏之中，你有可以为之奋斗的目标。但现实的目标是自己找到的。没有目标的人生就是一个等待死亡的过程。” “爷爷把世界说得好可怕” “再举一个例子。为什么大多人不喜欢看古典小说，却喜欢看现代的热血小说呢？” “读起来很畅快。” “这种畅快感来自于主角有明确的目标，并为之不断奋斗。各种激情、斗智、斗勇都来自于小说里面如游戏般的世界。但现实生活要如此的激情，却是一件很困难的事情。” “爷爷把世界看得太简单了！” “是啊！爷爷已经是老一辈的人了，想要理解新一代人的想已经很困难了。”爷爷抬头看着天空，继续说，“我们已经是快要进入尘土的人了，想要仰望天空都变得困难了许多。追逐天空是新一代人的事了。” “爷爷，有些感觉难以言传吧！” “是的，难以言传也表示着难以感受与描述。是自己一生一事无成的空虚感？还是自己想说却说不出来的无奈感？自己的感觉空洞洞的，但是别人听着确是另一种感觉。” “这样的话，‘神’这个字，不也是会因人而异的吗？追求神的感受也是如此吧！” “不亲身去体会是难以感受到的。看多些同类的小说，可能可以体会一些。所以，我才叫你不要去看那些久远难以体会的书嘛！” 只见小孩书的封面上，作者两字旁写着：未、来。 从现在来看，我觉得这是一个遗憾，根据原来的手稿大纲，这只是一个引入，正篇是“来篇”(莱视角)和“未篇”(神视角)，但我现在不知道以前是被什么给耽搁了，结果只剩现在的内容了。连我自己都看得云里雾里的，已经过了三四年，早就不记得前因后果的设定了，现在也不知道该怎么去补了，只能就这么放着了。其实这篇小说还有一大段“附赠骚话”，因为感觉没啥用，就删去了。 裂痕的源头 星期天的校园真是宁静，高一的回家，高二的回家，只有少部分的高三还在学校。我像往常一样5:30左右就起了床，已经开学了一段时间，夏天快要结束，但天并不昏暗，于是我决定去操场四处走走，呼吸一下新鲜空气吧。一会儿，我走到操场旁的一条树林小道中，这里的空气还是最新鲜。忽然，在前面看到一个穿校服的人，坐在竹板凳上，拿着本书静静地看着。没想到还有起得比我早的学生，以前都没怎么见过。好奇心驱使着我向他靠近，这才看清他手上拿的是语文高三第一轮总复习用书配套的晨读本——里面包含了中学必背古诗词、古文化常识、经典古文等各种东西。仔细一看，发现他校服袖子上、肩上、肚子前、胸前都有大小不等的裂痕，有些还像一张嘴巴，终于有搭话的话题了。我从他前面走过，还故意大声说，“罪过，罪过，差点看到了一只不检点的猴子，还是尽快将它移出视野比较好。”走了过去，竟然一点反应也没有，读得太认真没听到没听到吗？“猴子真是胆小啊，遇到人类害怕得都不敢说话了。”“猴子还挺高傲，连人类都不屑一顾了。”……后来也不知说了些什么奇怪的话，但终于有回报了，“你觉得我们为什么要穿衣服呢？”被他这么一问我突然愣住了，到底为什么，这么理所应当的事我好像从来没有想过。“人在未进化成人之前就从来不穿衣服，”他开口了，“说到底都是人思想越来越复杂的结果，把简单的事复杂化。在我看来，穿衣服只不过是为了可以让你这种人不难堪罢了。游泳馆可以的服饰，为什么平常就不可以。既然我为别人而穿衣服，我干嘛要做这么多呢？知道了，就别打扰我了。”虽然不知说什么，但敏锐的作家直觉告诉我，他一定经历了许多。我做到了他旁边，“同学，给我讲讲这件衣服的事吧。”“哪有什么事，别烦我。”“那你给我讲点故事吧，我很无聊。”“自己去图书馆吧！我还有很多要复习呢？”“图书馆今天又没开，而且都是学过的东西，复习也不缺这点时间吧。”“你不是高三的吧。”“你怎么知道，我是高二的不入流作家，对各种事情都有兴趣。”他终于平静了下来，“好吧，就让后辈听听我的故事吧，不得释怀的话，我可能永远无法前进了，你要听吗？”我立刻高兴地回答，“学长，我求之不得。”学长说起了他的故事。(换段落表示，现实与回忆的切换) 过不久就要进入高中了，去天普第六中学，被称为姜涵区最好的高中。我在用手机查阅这所高中的相关资料，天普市每年考清华、北大的一般来自天普第一中学和天普第六中学，其它学校基本不会有，但六中分数线较低，不过奥赛班挺强的，而我就要进去了，当初就因中考前某一次实质检较好，就跟六中签约说达到分数线就进奥赛班，虽然文系科目我不太好，但达到分数线太简单了。这时客厅传来了父母的声音，母亲说，“今天去学校申请珍珠生名额，结果父母没缺胳膊少腿还不能申请。”“你难道想为了免学费让家庭失去劳动力吗？”“还不是你每周末都去赌，也赌不出什么东西来，省学费有什么不好，现在一家人都挤在一间房子里。”“还不是你不去好好教育无矢，人家进奥赛没有哪一个不是接近一中线的，无矢每天都学些没什么用的东西，结果差一中线50多分，就比六中线多一点。”“还怪我，手机不是你给无矢的吗？分数就是王道，拿了奖学金还免学费。”“羡慕有什么用，我们家就这水平，人家初中就是重点初中，我们这乡下初中能有多少出息，能进去就不错了。再说，旧手机总不能扔掉吧，无矢不用来玩游戏就好了。”“那么老的手机能玩游戏就怪了。算了，你说怎么办，学费一千多啊。”“出吗？这点还是可以拿出来的，还有让无矢寄宿，多在学校呆着，六中管理还是挺严的，他手机应该不会像以前那样严重使用了。”“对了，还要买校服，该买几套啊？”“一套要快100块，买一套就够了。”“可至少要2套。”“2套就2套，尽可能少就行了。无矢的消费水平应该不高，随便给一些钱就行了。”父母做怎样的决定无所谓了，反正我可以好好活着就行了。客厅是公共的，一家人挤一间房，两张床，勉强能住，在学校又有什么受不了的吧。 “等等，你是不是说太多废话了，都快到吃早饭的时间了，”我急忙打住了他。我看见他一脸认真地说，“你不想听的话，我也不说，故事还有很长一段。”我有点难以割舍，“好吧，这一天我就陪你了，我叫李韩。”“我的名字是华无矢。” 刚进入初中之时，我并不明白初中的重要，依旧带着年少的轻狂。令人惊奇的是我在初中成绩时常排名前几，可能是被父母洗脑太多，不读书不成器，语文推荐我们去看书，我也去看，看小说，看古诗文。有一天，我的同桌给我推荐了一本书，叫《三体》，我说这种现代小说少看比较好。但他告诉我，这本书涉及了很多初二才学的物理知识，作为成绩较好的我自然不能放弃机会。于是我就去读这本小说，乡下的初中时间多是很正常的。不知为何，读完三本后，我满腔热血立志要成为物理学家。幸运地是，父亲把他没用的手机正好转给了我。要学物理要趁早，时不待我，父亲叮嘱我用手机查资料，我当然不会辜负他。我立刻找到了经典物理学教程的电子书，但怎么也找不到与小说中有关的东西。于是我去看物理史，看看物理到底有些什么。大体有经典物理和近代物理，经典物理有力学、热学、电磁学等，近代物理有量子力学、相对论等。于是就去买近代物理，结果发现有许多经典物理的东西。于是我开始仔细研读经典物理。几天下来，我不了解的符号太多，前后文也没什么介绍。于是只得靠百度，发现原来是我的数学的基础不够，还让我明白了一句话：“数学是物理的基础。”为了我的物理，我决定开始学习数学。我直接找到了《高等数学》就读了起来，听网友说这是读物理必备的。那时我感受到了初中生的无力，我连一个叫集合的东西都无法理解，不断看几遍感觉没有学到任何东西，于是，我靠百度和各种网络科普文进行反复地理解。到初一上学期结束，我才只能理解集合、函数、极限三个概念。求学心切的我只能付更多的时间去学习理解，后来连上课我都借后排的优势偷偷钻研。天不饶人，初一下学期的一次期中考，我考砸了一次跌了十几名，父亲也发现了我最近好像过于沉迷手机而找上了我。一个房间实在没太多隐私，一天我在桌上研究导数，父亲上来就问我，“最近拿手机在干嘛？成绩怎么下降了这么多名。”“我在学习呢！”我把手机里的东西举给父亲看。父亲看了看说，“虽然我才初中毕业，但我知道这些对你学习没什么帮助，你应该学一些更有用的东西。”“爸，这是科学的基石啊，我怎么就不能学习。”“这也是你以后的东西，先把成绩提高了再说。”“不，我为了梦想，不想放弃这个。”父亲生气了，“连我的话都不听了，手机没收，看你还不好好读书。”他把手机拿走了。我失去了依靠，今后我该怎么学习呢？我只得先认真读下书了。有一天，我和同学去新华书店买相关教辅，我根本没有买的心思，只得四处看看，看见一排白色书，是一系列，叫“好玩的数学”。觉得这套书的名字真是奇葩，我拿其中一本叫《数学聊斋》的，随手翻了翻。突然眼前一亮，我在里面看见了我渴望已久的微积分，是有关速降线问题和变分法产生的一个章节，还给出了著名的欧拉-拉格朗日方程的推导。原来书店还有这种东西，激情不减地开始爱上了书店，当然不可以买回家。不到半年，我几乎把那块书架的书都看完了，因为长期回家过晚，爸爸终于还是找上门来，生气地把我带回家。觉得我每天回家太晚很危险，还是妥协把手机给了我，还留下一句话，“管不了你了，自己看着办吧。”为了不让父亲过于伤心，对平常的课，我还是只得认真听讲。但数学还是得学，到后来数学实在过于丰富，物理已经变成巩固我数学水平的东西了。好吧，至少初中，我可以自豪地说我没有虚度光阴，“什么叫虚度光阴呢？” “我跟你是同道中人啊！不过小说可不要出现太多专有名词。”“你还要写成小说？你理科也很好？”他有些惊奇地看着我。“额，其实我只是为我的一个学长收集素材的。话说，你初中毕业后，数学到哪一个水平了。”“其实，我真的很愚笨，我通过科普书对整个数学体系都有了了解，高等数学我通读了几十遍，对多元微积分不是很熟，复变函数和线性代数也只会一点点。”我想想跟我还是有些差距，问“学了微积分，你怎么不去学微分几何巩固一下，还有你是不是把物理给忘记了。”“当时，我确实都忘记了我的初衷。最近几天我才发现。”我坐起来，“学长，该吃早饭了，我请你吃吧。”他也不客气地说，“我可不知道‘客气’两个字怎么写。”去了食堂，我点了自己的早餐，就把饭卡借给了他，他还真不客气又点菜又点包子馒头。过来还跟我说，“李韩，这样一刷你卡里竟还剩两百多块钱，我一周也才吃七、八十块。”“我这是正常水平了，这是刚充的，”我回答到，“还不给我继续讲，学长。”“学长”加重了语气。“好好，别生气嘛，”他吃了我的东西，也不能太懈怠。其实，我只是想为之前的行为赔礼而已。 进入了高中，我才知道城里初中出来的学生有多厉害，在以前中考排名年段第二考出的我，在这里只能在后面做差生，原来我的学习真的很差。过了一个多月，我发现我真的非常不擅长学习，这样下去我高考真的会完蛋的。不过，偶然的一天我发现了新的出路。一天，一个同学被一群学生围着，我凑过去看了看，发现他在讲课。只见他手上拿着一张纸说，“你们可以把这张纸想象成一个四维面。”他又拿了一个实心小球说，“这是一个有质量的物体。”他把物体放到纸上使纸凹下去说，“质量使时空弯曲，弯曲的曲率就产生了万有引力，这就是广义相对论的基本内容之一，今天先讲到这。”同学们散去，我立刻亲近这位同学说，“同学你水平挺高的吗？不知你了解这个方程吗？”我把从《普通物理学》中背的薛定谔方程写在他的纸上。他看着愣了一下，“这个h是普朗克常数，▽²是拉普拉斯算子，ψ是波函数，i是电流。”前面都让我挺满意，最后一个让我差点笑了出来，他不会连虚数都不知道。“同学你平常都怎么学习的。”“看霍金的书，像《时间简史》什么的。”“你不去看看教科书什么的吗？”“我搞理论的，对数学计算不感兴趣。”他连理论物理是什么都不清楚吗？“你是不是除了知道他们的名称，其它也不太清楚。”“那些也不必清楚。你知道物理竞赛吗？这些公式和所代表的意义。如果是课外的肯定会说明，重点在于理解其物理思想。”“再怎么数学也是物理的基石啊。”“读那些很伤身体的，高中生也没必要想那么多。”“你说的都对，”我也不想跟他说太多，不过我对这个物理竞赛是什么有点感兴趣，“对了，你说的这个竞赛是什么东西。”他又得意起来，“这你就不明白了吧。理科竞赛其实有用的有5个，数学、物理、化学、生物和计算机，以我们学校水平应该会参加前4个。每门流程都差不多，都是省预赛，复赛，国决。以前参加是有加分的，现在为了防止偏科，门槛变高了。省一才能申请自主招生，拿到国一才可降分本一，进集训队可以保送吧。你就别想太多，这都是要从初中开始练的，能进复赛拿个省二或省三就很强了，对我们学校。”“竞赛跟一般考试有什么区别呢？”我想挑战一下。“区别可大了，我讲不过来，你去图书馆看一下那些竞赛教程就知道了。”我发现了一条摆脱高考的道路，怎么会不想尝试一下。尽管没有手机，但我在图书馆发现了一片新天地。 “我说，你是不是讲跑题了，感觉跟我想知道的差太多了。”我和他吃完早饭，准备离开。“知道背景和其原因，才能明白为什么会有这样的结果，万物都存在联系，断章取义十分不好。”“好吧，随便你讲，你讲什么我听什么。”这时因为是周日，食堂并没有太多人，“要不，我们去教学楼间的那个莲花池的那个亭子里慢慢说吧。”“提议不错。”“你手上的书拿着不累吗？”“没关系，不拿点什么，心理不踏实。”我和他在亭子里，相对坐下，书在桌上。 我去图书馆，发现里面果然有一书架专门放着竞赛教程，最醒目的就是一些蓝色的书，我拿起一本《集合》，这系列是“奥林匹克数学小丛书”，翻了翻里面，有挺多竞赛真题的，看了看总共16本。接下来干脆尝试着读一读吧，因我发现我看懂里面的东西并不难。后来想一想，干脆多看几科算了，多一科多一份保险。生物还是算了，这个理科中的文科我真的受不了。因为家里父亲，学校有老师，我的成绩暂时维持一个较低的稳定水平，反正我一直都这样，而且我发现刚开始我的理科优势非常大，所以维持这样日常问题应该不算太大。通过对竞赛书的阅读，我学习到了很多，同时也发现，有些竞赛题隐含着很多近代数学的萌芽在里面。于是我也不忘不断强化我的数学水平与思想，我不断看题、读题、理解题，每次看到习题时，都想还是先多学一些方法和技巧比较重要。而且我不止读小丛书，基本要把世面上所有教程都读一遍，像《奥数教程》《奥赛经典》《命题人讲座》等。高一的大半多年似乎很充实。高一下学期，终于将迎来第一次出征的机会，开学初，老师分了些竞赛真题，随便挑了些参赛人员，我当然在其中。因为我的数学在班级并不差，不过她说她只是按学校的任务办事，我们随便考考就行了。的确，有些人看了看觉得和平常不一样，就拿去压箱底了，我还是得看一看，这似乎不是预赛吧。难道我们省还把高一、高二分开考，话说这考了能参加全国联赛吗？看来对竞赛还是有许多不了解的地方。“请问老师，他们为什么可以这样做？”这时，我看到了一位同学，拿着刚分的卷子去询问老师。不过老师说，“其实老师对这些也不太清楚，这几年学校已经把竞赛淡化了，而且花太多时间也没什么用，就当平常考试，会做的做了就行。”发现新伙伴，同学从老师那离开，我走了过去，“叶轻理同学，或许我可以为你答疑解惑，”他把题目给我看，只是一道抽屉原理简单组合题，“抽屉原理小学时应该就知道，所以对我们来说重要的是如何构造抽屉。”…渐渐地，叶轻理和我熟悉了起来，我也很乐意不断向他传输知识和有趣的题目，教学相长说的就是这个道理。有一次，为了给他讲清多项式的有关知识，我把我半知半解的抽象代数的知识向他灌输，就为了说明，一般的五次及以上方程没有根式解。但我发现他理解得比我还快，对于“群”的理解是，“制定了规则后的集合”，对于“域”的理解是，“更多规则的学校。”我觉得挺好笑的，后来他还跟我说，“我们所处的社会何尝不是在一个庞大的群、环、域或其它的形式系统中。按规则办事，在现实还是在做题都是一样的。”偶尔放松一下，我也不反对。还有一次，他给我的一道竞赛题，我做不出来，我就忽悠他说，“这说不定是一道不可证明的题目，因为这是数论题。”“当然存在啊！”“你知道哥德尔不完备定理吗？”于是我再次拿出自己难以理解摘抄笔记，给他讲如何构造一个形式系统，如何进行哥德尔数的编码，如何构造一个不可证命题…后来他发现了问题，跟我说，“哥德尔构造的命题就是‘这个命题不可以被证明’，这算什么。”“至少他是非常严格地说明了不可证命题的存在，而且并不代表没有其它不可证命题。无穷下降法不也是这样，先构造一个非常显然的例子，然后才可以假设有最小解的存在。”“但是有答案的题目，怎么也不可以认为它不可证明吧。”就这样，我和他的时光不断流走。高一的竞赛不想说太多，很多人都是在考试前两天准备的，但最终我和叶轻理都只拿了个市三等奖。可能是我们都太关注最后一道组合题了，而且很多是非竞赛生可以解决的高考微难的题目。我给我们俩安慰说，“没关系，高一这次竞赛没太大用处，重要的是高二那一次，那一次关系到会不会进入全国联赛，而且这次还有选择题，非常不公平。高二只有填空题和解答题。”他是真的爱数学，我应该也是后来高一暑假补课时发现班上有几个人没来，了解发现他们去天普学院进行数学竞赛培训去了，他们都是市一等奖和市二等奖的人。不过后来他们回来没去参加全国高中数学联赛，我竟然松了一口气。原来我们的市一在省里是三等奖，并不可以去参加高联。数学老师询问了一些状况，原来她也不大清楚，只记得她跟学生说，“竞赛没什么用，不要把高考给耽误了。”高一就如此波澜不惊地度过了。 “高一你的父母和老师对你没什么管教吗？”“当然不会，因为高一我凭理科优势成绩在整个年段不算很差。有些中考比我好的，也不如我。当时一直想那些拿奖学金，现在却比我差的人就生气。学校干嘛拿钱去养没用的人。”不过他又低沉了下来，“高二过后，我才知道没用的人是我，我也是班上最晚认清现实的人。” 高二的时间选拔了一个特奥班，我当然凭借理科优势进去了，叶轻理也不例外。其实我明白，这只是学校抛弃一些人的幌子，但无所谓了。高二上学期过得与高一时差不多。班主任由原来的数学老师换成了英语老师。令我害怕的有几件事，一次有位同学拿物理竞赛去问老师，结果被老师骂道，“你连高中都学不好，去做这些干吗？”从此让我认为老师并不喜欢竞赛。还有一次，我看竞赛书的时候被班主任发现，她说，“还在看理科，还不快把你的两语补上来，而且这也不是高考范围吧。”其实到高二后半段日子，理科优势也不是很明显了，因为高考就那些东西，而且大家都是特奥班的，因此理科成绩都差不多，所以制胜的关键在于两语和生物，而我在这方面不用功，所以不太擅长，所以在班级排名不断落后。只有几个根本不想读书的人为我垫底。老师找我说过几次话，但后来也不想管我了，但不知为何从此之后，总有一种负罪感，感觉对不起父母，因为他们也不太懂这方面。这时我竟然下定决心要卧薪尝胆，反正高考的应试我也读不下去了。倒是叶轻理虽然还是与我讨论，但他还是注重高考，没像我一样痴迷。就有一次，我给他讲与解高考解析几何有关的射影几何知识时，他才与我认真一起研究了几天，但体验完极点与极线解题快感后，他还是移情于高考。而我读竞赛书也是偷偷摸摸的，特别要提防几个老师，如两语老师，因为我已经决定要进国家集训队了，现在我需要的是知识，而且我还是多科进行，以数学为主。偷看的手法也很基本，无非是两语书在上，竞赛书在下，只翻一边，老师来就将两语书展示在老师面前。高二开学迎来的第一次竞赛是生物。故事也是由此开始。 “原来你讲了这么多都是铺垫，”我只得苦笑。“其实我想参加竞赛，高考的应试技巧实在太多了，比如选择题，有什么特殊化、带答案，先把答案猜出来再说。还有解题，先把得分点的方程都写出来，再去算答案。我很反感这种不科学的东西，每次都认真地算出来，感觉不算出来不踏实。我本想着竞赛不应该是这样，但其实只有应试才能选拔人才是不争的事实，我以前可能意识到了，只是不想承认罢了。”“学长，你真苦啊！我初三时被指点过，高一也意识到了竞赛并不适合我们学校。”“是的，我只是一昧地接受，没有受到过专业的训练，又怎能比得过那些从初中就受过训练的人呢？” 高一结束时的暑假，有两个培训一个是生物，因为开课地点在我们学校，因此可以看监控来偷听，还有一个在天普学院的数学培训，可惜两个时间正好在一起，而且数学的推荐名额就三个，于是我决定还是选择数学，我的条件自然符合要求。但是数学培训在天普学院，而且是非参赛性培训，所以要收培训费、伙食费和电费等。我跟父母说这事，但听到要收这么多钱，他们这样跟我说，“无矢，没关系的，反正也不是很重要，我们没有条件，就不要去了。你就去问问去过的人学些什么就行了。”如此简单就被否决了，我也不好说什么，就跟老师说，“这都是培训联赛一、二试的内容。要是预赛都没过，去听了也没什么用，我还是研究一下预赛吧。”而且叶轻理也被我劝下了，不去培训，这样我们两个还可以继续钻研了。高二开学初，生物老师将参加竞赛的人的名单报了上去，我当然去，叶轻理也被我劝去，我跟他说，“多积累一下经验比较好，而且去市中心，当旅游一趟也不错。”不巧的是三周后的生物竞赛前一天，正好是开学的一次月考，所以许多以学业为重的人并没有去参加，只有几个好事者听说都是选择题就一起去参加了，人数也不算太少。结果，似乎好像除了我，大家还真把其当作一场旅行，仍然把月考当作重要的事情。就我一个傻子认真地在读，生物虽然全是选择题，但要背诵的东西特别多，所以这几天我都在专心记忆这些东西。月考我从来没把它当回事，月考考怎么样也不想管，成绩维持不非常差就行了，虽然与高一已有些差距。月考考完的下午，明天就是生物竞赛的时候了，其他人终于开始复习了，包括叶轻理，不过我应该比较自信，过个预赛应该没太大问题。但是我终不是考试能手，周围许多人都提前交卷，能在考场待上超过1小时的没有几个，我最终受不了这个孤独，几道选择题随便选了一下就交卷，也懒得浪费时间去回忆思考。但交卷后，我才后悔是不是太鲁莽了一点。我们最后欢快地吃完午餐回家了，星期日考完，星期一晚上就出来成绩。结果我还差2分就可以进复赛，果然还是应该撑到最后吗？不过我又欣喜过来，因为生物复赛时间正好是化学预赛的那一天。反正选择题也考不出真实水平，因为我们学校2个考前复习的人进了复赛，还有一个拿了市一等奖。生物这种靠记忆的东西果然不太适合我，而且选择题充满了高考味，不考也罢。这样安慰希望可以成功，又到化学竞赛报名时间，不过这次报名的人变多了，可能受到那2个人的影响。高二也在结束过程之中，数学竞赛倒是直接让我们班把所有的名额用完，我们班也才30个人，虽然写着自愿参与，两个竞赛相隔1周左右，对数学我比较放心，于是专攻化学，总共就有机与无机两大部分，记忆尽管挺多但与生物相差较远，叶轻理不一样，虽然他也被我劝去报了化学，但他还是优先学习数学竞赛。对待化学，还像太多人过了几天好像都不记得这一回事了。我有了上次的教训，这次我决定把无机中的元素化学还有有机反应机理都放弃。专攻其它与高中相关的内容，听说三、四十分可以进复试不知真假，满分120。与我同样有学习的还有一位同志，不过他不像我一样高一就有接触过，他学得怎么样，我不太想关注，我专注于自己的学习，老师就分了一套无机和几本有机叫我们看，就只有我和这位同志有看。奋斗的日子，努力的日子过得很快，很快就到了预赛的时间。三个小时的考试非常无聊，令我哭笑不得的是我那个考场，才一个小时多就剩下2，3个人了，这次看有人没走，我也只能顶着尽可能多做，因为做了的对错谁也不清。像有机随便接来接去有时也可以得分，今年有20分的有机反应机理，我也硬着头皮乱做一通，看得眼花的物构题我乱算乱画。2个小时过去了，教室气场凝重起来，因为考场就剩下我一个了，他们到底怎么做题的呢？难道分析化学的计算题不太想做了。硬算了半个小时，终于受不了了还是交卷了，我经过旁边另一考场时，又后悔了，因为这个考场一半多人没有离开。不过回到我们的队伍，原来我是做得最久的一个，他们基本都是考前学习的，他们就做了一下高考差不多的实验题，然后随便几下就退场了。这场考试后我才明白最贴心的果然是数学竞赛，至少看得懂题目的占很大比例。我们都不懂的是数学竞赛却是竞争最激烈的比赛。接下来我和叶轻理遨游数学世界的日子，不过还是很短暂的，他跟我说，“前两次只是熟悉环境，接下来要认真了。”他现在的数学积累与我的确有些差距，这段时间也没什么老师来管。不过班级大部分同学好像都倍受打击，似乎都不太想接触竞赛了，化学竞赛成绩出的较晚，只可等待。其间我发现了一件事，今年的物理竞赛的预赛取消了统一考试。我省好像也无意自己举行预赛，直接分配名额给各个学校，根据上一次竞赛成绩，不过现在还不清楚。高二下学期之间有过一次物理实验培训和理论培训，我很想去参加。但因为不在本市且学校也不报销，只得让我放弃了，父母也不会同意的。天普学院的竞赛也不过如此，不过这次考到最后的人基本是满的，大众化的数学永远是不一样的。叶轻理考完还和我说了一句，“还是数学给人一种亲近的感觉。”我应该也是赞同的吧。这次考试我直接放弃了几何和组合。只做好与高考有关的内容。一些日子过后，两次竞赛成绩出来了。化学我以市50名进入复试，跟我一样有努力的人却以一名之差没有进入。那两个去生物复赛的人拿了省三等奖。进入数学复试的人有3个，我市22名，轻理市55名，还有一个擦边进入。几个参加过培训的人都没进入，了解之后才知道，去那边的几个人，只有一个有认真学习，但其它几个因学得太难，就当在那边游玩，后来我也会遇到这种人。那个有学习的人差5名进入复赛。对我来说真是空前的胜利，我觉得应该更努力了。 “可喜可贺，可喜可贺啊！”我欢乐地说。学长却说，“你是知道的吧。其实进复赛并不怎么厉害，可惜我最近才知道。之所以进得这么容易是因为很多人都没有去读竞赛，要读的却基本从初中开始，基本省队或省一。而现在自主招生门槛高，我的确做了许多看起来是无用的功夫。”我问，“学长，你后悔吗？”“当然不会，因为我…我们先去吃午饭吧。”到了食堂，他竟然要我请他吃。“依赖别人太多可不好，”我只得回他。看他点的菜就一道豆芽和青菜，才3块5。我把卡给了他，“去加菜吧，算你讲故事的酬劳。”“名义上不必太认真。”我们开始吃饭。“快点接一下刚才的话。”“其实，你应该也明白的。因为那一段时间是我真正为了自己而读书的。虽然老师家长都没对我们说读书是为了自己，但是我觉得周围人都是在被迫读书的。至少我看来他们没有一个真正爱上过哪门学科。”“特奥班的不至于如此吧，说不定只是你不懂。”“还记得当初那个对物理有涉猎的人吗？他在高二已经认清现实而舍弃了，连特奥班也没进。”“他们肯定还有像玩游戏、参加社团一样的课外活动吧。”“也正是如此，才证明了他们为考试而学习。虽然这在现代是唯一可行的出路，他们见到自己做不出的竞赛题就不敢尝试，只得说这高考不考不做也罢。爱上学习的确很难，但竞赛过程中为我所爱之物奋斗的过程至少是无价的，我认为这份回忆至少可以带我更好地前进。”“这只是回忆，你后来到底怎样？”“听我慢慢说吧，今天下午就在食堂吧，外面热不想出去。”“反正一直开，无所谓。” 获得参赛名额的我自然欢乐，感觉更有底气挑战老师了，我也可以更认真地学习竞赛了。我本以为应该每个老师都知道，结果班主任竟然来告诉我期末考快到了，竞赛也结束了，是时候该好好学习了。我本来想反驳，但后来想想不知道也罢。到时候给你来个大吃一惊，我也只得假装上课认真听讲，然后不断学习竞赛，当然先学习底气不足而且先考的化学。叶轻理倒是奇怪还是以高考为主，准备期末考试，平常虽然也一起讨论，但都是些比较贴合高考的，几何和数论他也不太用心。算了，他跟我不一样，我要进省队就应该多学一些，我对别人水平不太了解，不久前我看了一部外国IMO的纪录片叫“美丽青年心灵”其它没学到什么，就是知道中国队非常厉害，基本接近满分，所以我觉得这种联赛，不能接近半满分是进不了省队的，所以我要学习更多。所以化学学习，我也穿插一些数学，因为这才是我的本行。六月份刚开始不久，高考结束了，别人刚走，老师就带领着我们进入高三说，“同学们，现在开始我们就是高三了，已经要开始进入高三状态了，不可以再懈怠了。”等等一大堆话。连期末考都还没结束就进入高三了。不久后又去参加高三毕业典礼和(字迹实在看不懂了，以后就打问号‘？’了)交接仪式，当然是什么十年磨一件，什么要努力学习，报效祖国什么的，我自然不能放弃学习的时间，他们说什么我也听不进去，六月份结束，结果又考上两个清华大学的人，搞得我们这个班又要去当听众，听学校对他们怎么悉心教导的话，又对我们表示期待。这样一轮下来，搞得我差点就有些愧疚了，在想我是不是应该马上开始学习呢？后来想想，我差点要进入高考的圈套了。忍，我要忍住，撑到最后。期末考后的高三自然是补课了，成绩不想说什么。不过那天发生了一件事，在为家长会场景进行布置的时候，有人闲得无聊拿着裁剪小刀到处乱挥，挥哪不好偏偏挥到了站在后面做事的我身上。他没注意到，因为太浅我也没注意到。但家长会后，我发现裂痕扩大了，瞬间来气了。找上了那个乱挥的人叫他赔偿，而他正好是上次那个差一名进化学复赛的人，不知是不是他觉得如果没有我他可以进复赛，结果跟我对上了说，“关我什么事，你有什么证据说明是我弄的。”我跟他争论一会，但他死不承认也没办法。于是我找上老师，叫他去调查监控，但是老师也不知道怎么了说，“衣服破了就去买一件吗？又不是什么大事，同学间多宽容一下吗？”要叫父母买一件哪有这么简单，他们还跟我说，“你应该带着报复考试考过他才行。”我承认他考得比我好很多，我觉得非常无助，可恶，竞赛我一定要进国家队。数学老师后来给我们几本竞赛教程，我发现是小丛书的第二版，有《平面几何》《组合问题》《数论问题》还有一本《竞赛专题讲座》和备有预赛的习题集。叶轻理拿走了习题集，另一个人完全没有学习的意思，我为了更高的目标当然只能读其它几本，我一定要在终点俯视在路上的他们。不久化学老师跟我说，复赛要去别的市考试，本来考前应该有一周的集训，但为了不耽误学业和我的家庭条件就不去了，路费和住宿费学校会报销，其它自理。所以让我把家长也带上比较好，她提前一天帮我报道完这样她也就可以走了。这样后，我知道了他们根本没把我当一回事，只是送佛送到西而已，我就算自学，也一定要拿个省一才行。父母当然是同意了，因为反正就出一些必须的伙食费而已。令人悲伤的是，光有斗志是不够的，不知道为什么我们省还弄了个预赛复试并不是全国初赛，而且听其它竞赛生说，“这次考试出现了几天前培训的内容。”那我到底是在考什么东西，傻傻什么都没听就去考，而且还跟一些听过课的人竞争，那次考完后毫无音讯。回来之后，听到有人还问我考得怎么样，我直接回他，“给你两个英文字母，问你这是什么元素，你会写吗？问了对你有什么用吗？”可能我真的太伤心了吧。不过后来，我又找回慰藉，因为化学国初和数学高联紧连着，看来这是天意，为了我可以更好地参加数学竞赛。没错，前面都只是铺垫，数学竞赛才是我应该真正要认真参加的竞赛，距离全国高联还有一个多月。我要快马加鞭地学习了。但还是有几个不明白情况，跟我说竞赛结束了，该好好学习了，我听得烦了，都懒得去回他们了。一定要进省队，令人难受的是我对这几个老师有些顾忌，看书都要小心翼翼的。令人难受的是，大家都在为高考逐步前进，而我却总是在做一些格格不入的事。八月初数学老师跟我们3个说，天普学院有个数学竞赛培训，讲得是二试内容，可以去听一听，我马上叫上叶轻理一起去，他说，“有几天把补课时间占了怎么办？”“没关系，落几天课不是大事，这可是高中最后的机会了，弄完再高考也不迟。”在我的劝说下，终于得到了同伴。另一个人竟然被叶轻理上一些时间，他说到学校补课他就回去。无所谓，只要有我和叶轻理就够了，至少我不太孤独。回去跟父母说这事，本来他们要反对说，“这没什么用，去了反而耽误学习。”“省一的话可以申请自主招生的。”“这个考全省第一，还不如高考。”他们不明白什么是“省一”，我只得解释一番说，“你看我预赛在我们学校第一，你觉得我会没机会拿省一等奖吗？”最终，因为只出伙食和水电费才答应了我。他们还说，不要像化学那样失败，我跟他们讲化学不好就是因为缺少培训，这次再不培训就是浪费机会。终于，我开始了这一生中唯一的一次竞赛培训，本以为会遇到很多天普市的竞赛高手。到天普学院安排好住宿，我发现我和叶轻理因为来的时间不一样住宿错开了，另一个人也不例外，算了还是认识一下本宿舍的同学，令我惊奇的是天普一中和其它竞赛优异的人竟然不来这边培训，到其它地方去了，是嫌这边不够高级吗？而我宿舍的太多人来这边竟然只是为了补暑假作业，上课也没太认真听，他们说，“我们是准高二，听不懂，不如不听算了。”我对我宿舍的人失望了，原来除了我都是准高二的。在课堂上，和我同桌的是拿了第5的准高三学生，也是这个教室内排名最高的一个，我发现他除了上课听讲外，其它时间都在做语文和英语作业。我怀疑我来的真的是培训营吗？还好还有叶轻理和我一起研究题目，我吸取众多教训后，还是决定做模拟试题，轻理自然也陪着我。通过几天上课，我发现培训有些无聊，无法就是讲一些我知道的知识和一些例题。跟我平常看书没太大区别，渐渐我都不太想听了，轻理当然在认真听课，而且我发现这10天只讲代数、几何、组合，远低于二试，没有数论。这种水平根本不适合我。当他补一些课外不等式或几何定理或图论知识时，大家像接触新知识一样，而我早就知道了。最后，我在培训期过得和以前没有太大区别，只不过可以更加自由地学习罢了。真是失望，都是一些没有水平的人，竟然还有一些不认真的高一学生。令人难受的是平常的模拟训练，我发现一试每次就只能对几道填空题。后来与真题对比发现，模拟题好像更难，叶轻理也赞同这点。于是我给自己安慰，都看得懂，都会做，只不过是有点粗心罢了，联赛的时候肯定没有什么问题的。其实，我心理有些慌，我好像数学思维能力没有这么强。不过，估了下自己的常识，没关系，我很强，省队一定没问题的。我知道的比我们市第5名还更多，现在应该尽可能全覆盖，讲所有的知识和技巧都学一遍。的确，我为了不遗漏任何一知识点，电子版的竞赛教程各种我基本都看一遍了。本来有个升学考，但因为我在培训所以没有参加。为了进省队，我又打算在联赛前一周看一遍综合性强的竞赛教程来训练。叶轻理也在做自己的培训，我也不去管。九月份他们刚开学，我却有一股如临大敌的感觉，9月份的联赛就要来了么。叶轻理叶轻理愿意陪我进行最后的疯狂是我最大的欣慰。学习、学习，我的实力很强。不知为何，9月7日、8日来了个什么衡水全国大联考，一个莫名其妙的东西，我懒得管，令我感觉被针对的是，学校给大联考拿到全校前7的每人1000元奖金，父母差点都想让我参加，我只能又讲一遍竞赛的好处。说实在的，看着别人都在努力复习高考，而我却在搞竞赛，我总有一股很深的内疚感，我高考这么差真的好吗？但又想到进省队后的待遇，一定要撑住。每次老师都叫我把作业补上，我就说马上补，马上补地应付一下。一定要先进省队，我已经没有退路了，我要更多的知识。终于到了竞赛前一天，因为这次有3个人所以由老师全权负责带去带回。9月初的时候，我们学校被分配了6个物理复赛的名额，太多人都不想参加，不知为何课代表竟然拉了9个人，因为要名单，最后只得抽签得到名单，我运气不错，倒是抽到了，但叶轻理没有抽到，我只能为他惋惜，他笑着说，“我数学会加把劲的。”物理老师把复赛真题发给我们这些参赛的人，当然目前我是以数学为主，所以没有过多关注，后来发现课代表竟是用免费市外旅游来诱惑他们，他们也真当去旅游也没放在心上。衡水联考奖金与我没太大关系，所以9月7日早上的考试也不考了，终于熬到了这一天，一到竞赛地点的宾馆，当然是好好休息，备战明天的考试，我也劝叶轻理跟我一起好好休息，不要负担太重，因为我信心满满，我学这么多可不是白学的。发呆、睡觉、发呆，第二天终于迎来了考试，7点30分，考场外聚集了几百号的考生，有些还在进行考前最后的复习。8:00开考，9:20考完，我觉得自己一试做得顺利的可怕，竟然做完了还剩几分钟，自己都觉得有些害怕。休息20分钟的时候，我与叶轻理稍微交流了一下，“无矢，我感觉挺顺利的，就是第8题不太踏实，第11题没做完。”“第8题考虑反面计数不就行了吗？第11题一个放缩也可以搞定吧。”他有些奇怪地看着我，“第8题也要分类讨论吧，11题恒成立还可以放缩做吗？”听了他的话我突然有些发慌了，但仔细想想其它应该都没问题，笑着说，“算了算了，不管了，吃点点心，好好休息备战二试吧。”9:40开考，12:10结束，没想到第一道几何让我搞了这么久，最后发现原来这么简单，代数做了一部分，后半计算取等条件的个数不会做，组合半天也不知道怎么解出答案。另一道不知道是数论还是数列的题没思路。没关系，这样估算一下进省队应该没什么问题。因为被数学老师说了几下我才明白，IMO有4个小时做3道题和高联两个小时做4道题有区别，不对今年两个小时与分数、时间无疑是加大难度的另一种方法。要进省队考个一百四五十应该差不多。轻理出来和我说，“今年几何题太水了，他几下就做出来了，不等式配方也做了出来，组合也可猜个答案吧，总之还可以吧。”突然觉得我的心越来越痒，星期天下午竞赛原题和答案已经在网上发布出来，我却一直没有看的勇气。终于星期一早上，我鼓起勇气，看吧，反正迟早要面对的，不看不知道，一看吓一跳。我竟然只有四道填空题算得跟答案一样，仔细一看，不是漏解，就是少考虑了东西。怎么会这样，刚起床的我又倒回了床上，其实我早就应该明白的，可恶，为什么我就是不愿意承认呢？我只是个知识的集合体，在解题上基本没有过多的经验，预赛会好，只是因为平常被老师强制补练的高考题太多了。其实本来就不擅长数学，学数学也只不过是为了有一个更好地数学工具去服务物理而已，本来初中我学得理解得比别人更多就应该明白，我本以为只是年龄的不足。真的玩了？不对，我还有最后的希望物理，物理才是我的学习初衷，物理才是我的真爱。这次不能再失败了，碰巧的是接下来，老师们都要去衡水中学出差学习，正好给我提供了机会，通过物理的学习，我发现物理才是真正适合我的东西。2018年的竞赛真题让我明白我的微积分终于有了用武之地。果然我的数学都是为了物理，这不到2周的时间我觉得完全可以起飞，知识点我很熟，数学工具的熟练帮我解题。可以成功，可以进省队，数学什么的不要去管了，高联几天后到了查成绩的时候，轻理考了一百三十多，他问我考得怎么样，我不想说考得很差，就跟他说，“准考证什么都放家了，没法查，而且最近还要物理竞赛，先不管吧。”近2周的物理和近2年的数学，到底谁更成功呢？没多久就到了物理理论考试，到考试地点后，我还继续学习一些题目，因为时间有些赶，并不像数学那样充分。其它4个人竟然跑出去夜游，就一个人愿意陪我赛前复习。我也不知另外几个人什么时候回来，只知道非常晚。开考的前半个小时，他们才拿起书说，“赶快先背一些方程，到时候能写多少写多少。”而且我发现周围也有好多人抱着同样的想法，我只能讽刺真没用啊。考前我最喜欢的就是放松身心了，考试还是带着愉乐比较好，我不是为谁，而是为了我自己。9:00到12:00，三个小时的考试，令人害怕的是，今年竟然只有7道题，而且最后一道70分整整一面的题目，我还是认真做前面的吧。个人感觉挺顺利的，前2道力学和1道电磁学做完差不多考试时间不多了，总感觉拿到了一百三十分，上一次的省队第一拿了一百几十分。所以我又做了热学、光学、核物理的第一题，然后收卷了，好像很顺利的感觉，最后那个长的题目我也没去看。算一算进省队应该没什么问题了。出来时，和我同一考场的学校同学跟我抱怨，“我想提前交卷，那个老师竟然说时间没到不让我交。”汇合时，另外几个人竟然也有同样的想法，这时老师跟我们说答案出来了，要不要校对一下，其它几个人直接说，“算了吧，算了吧。”我果然想看一下…为什么上天待我如此不公。第一道没有看到茶杯有水结果出计算问题，第二题的第一步少考虑了一部分转动惯量结果后面全算错，而且物理我喜欢写综合式不知会怎么给分，难道不是算出答案就基本满分吗？彻底明白了，学会如何考试才是真的重要。“没什么好看的。吃饭吃饭。”我强颜地催大家吃饭，一路的欢笑，在最后回学校的车上，我自己提议我先顺路回家，我已经不想再呆下去了。回家发生了什么不想回忆，但是我终于肯承认自己的无知了，终于明白… 时间已经到了傍晚，他站了起来说，“感谢学弟肯聆听到最后，不过我也要告辞了。”他走一边还大笑地说，“哈哈，我要让学校知道我的厉害，区区高考，我认真起来，它什么都不是。”我看着他也笑了，心想，“这应该是他最后一次回归阴影了。从此的他应该每天都是阳光。”“学长，请你吃个晚饭吧，”我喊道，他没有回头，“先等我会宿舍一趟，很快的。”“我等你。”","categories":[],"tags":[]},{"title":"中学文集第一辑","slug":"中学文集第一辑","date":"2023-02-12T05:16:32.000Z","updated":"2023-09-03T13:50:19.269Z","comments":true,"path":"archives/2023-02-12-中学文集第一辑/","link":"","permalink":"http://example.com/archives/2023-02-12-%E4%B8%AD%E5%AD%A6%E6%96%87%E9%9B%86%E7%AC%AC%E4%B8%80%E8%BE%91/","excerpt":"","text":"看着自己的计划表，发现自己实在是过于贪婪，想要完成的事实在太多了，比如数学继“费马大定理”后是“几何化定理”(特例庞加莱猜想)，后面还排了Faltings定理、连续统假设等，比如开发方面，我想基于开源的太阳神三国杀来实现一个卡牌游戏，又比如我在以弦论为基础构思的一本小说，一堆想看的小说漫画，还有更多。关键是，我不论怎么努力，想做的事却只会越来越多，搞得身心俱疲，于是想着做点简单的事情。恰巧翻出了，我在中学期间的大量手稿，因为当时在学校不能张扬地使用手机，所以我大量中学的文章全是纸制的。为了让它们更好的保持，我决定将它们电子化，由我自己一点点来录入。由于手稿实在太多了，所以就分几个合辑来录入，另外我会删去一些发病的、玄学的、宗教的、文言的、神学的、议论的文章，还有一些可笑的理论，比如“无限堆叠神论”的世界观之类的。所以主要录入的是一些比较正常的小说，而我的大部分思想基本集中在里面，因此前面所列的东西，也显得多余，没必要录入了。其实，笔者的记性一直很差，基本隔个一年没接触的东西都会忘记，所以很久以前就养成了随手记录的习惯，现在翻起以前的文章也会不禁感叹，原来我已经写了这么多文字吗？ 无li之人 又读完一本小说，往窗外看出去，夜空真美，这是小说对我的影响吧。不小心看到挂钟，已经九点了，快把没做完的作业完成吧。我初中的时候就喜欢读小说，不论古典还是现代，到了高中这已成为我的一种依靠。我也读过如散文，戏剧等，但始终觉得小说更胜一筹。每次看小说一看到底，故事千变万化。但有时读完一本后，总有一种感觉，好像看过或我也要写。特别是，现代的网络小说，几十万字读得特别快，因为太好懂了。读得慢印象较深的小说是卡夫卡的小说。这是时代不同的缘故吧，我甚至有一种妄想:我将是新一代小说拯救者。有时觉得这些书真碍事，早点做完作业去睡觉吧，一个人生活真累啊! 晚上这么晚睡，早上又要早早去学校，真想回到小学的时候。经过学校公告栏时，一张上的几个大字吸引了我——奖金一千元。近视的我立刻靠了过去仔细地观察。白话说，就是写一些杂七杂八的东西投到文字社投稿箱，然后会选出一些优秀作品获得奖金。可以写散文，诗歌，小说等，好像与我无缘，我这种拉学校后腿的学生如何和整个学校两千多学子竞争。可是一千元对我来说用处可比父母给的那一点大多了。而且像我这种读过成百上千的小说的人来说试一试身手也没关系，昨天看小说留下的热情发挥作用。 实在不好，今天一整天都漫不经心，老师说什么根本不知道。到底写什么一直是头脑中争论的话题，甚至连小说类型也要考虑，言情、恐怖、穿越……基本我都能写。直到放学，我想到一件事——征文的备注写到:文章要具有艺术性和可读性。也就是说，我写小说的话，只能写古典小说的风格，现代的题材都不合适。一整天，没有什么有用的结果，晚上再继续想吧。 作天晚上，我看小说到太晚，今天我思索写小说到很晚。九点了，好不容易想到写什么内容，初中的后遗症又令我苦恼。既然，要写古典小说的风格，那么艺术性应该指小说要有丰富的内涵或反应某种现实。我还想到一句话:名作无闲笔。也就是说，小说句句都能被分析。这对我这样的中学生太难了。头脑好乱，不知不觉，我倒桌上睡着了。 早上，我经过告示栏时，看到那几个醒目的字就觉得来气。白白浪费了我一整天的时间，还好作天没什么作业。不过金钱的数目又让我消了气，还是写吧。正好把我昨天的经历写下来，经过艺术修饰变成小说，也算一篇短篇小说了吧。中午，我留在学校自习，一会儿我就把小说写好，把它扔进黑色的投稿箱内，算一次尝试吧。 今晚，我讯速完成作业后躺在床上胡思乱想。中午反复读后总觉得不错，虽然修辞不怎么样。但想一想，连麦田里的守望者都是名作，我的这样又何妨?我会不会像玛格丽特·米契尔那样一作成名呢?一觉起来，说不定我就是作家了。 早上起来，我兴致勃勃地前往学校，感觉一会儿就会收到通知。今天老师的话我基本一个字也没漏听。老师说有个通知的时候，我精神倍增，但是只有一次次的失落。一整天下来，我没听到任何有关通知。但我又兴奋起来，按常理，如果没奖应该退回来，我也有注明个人信息。既然没退回来，说不定有作家正在鉴赏着，等一等，这是不能着急的。 一天、两天…过去了许多天。一次次地失去热情，又燃气更弱的热情。最终没有热情，我失望了。由此看来我写的小说不怎么好，只是我不懂得其中的流程罢了。没关系，反正离征文结束还早得很，不如多尝试几次，我现在又有东西可写了。 黑色的投稿箱内看不到白色的稿纸，由此看来的确有人取稿审查。我的宝贝啊，你是我得奖的希望，作家们保佑我吧。 悄无声息地又过了几天，没有任何消息。这个系统到底如何运行?算了，反正投稿没有次数限制。干脆，想到什么写什么，直接投进去，总有一篇会获奖吧。结果，我几乎隔一周多就写一篇令自己满意的小说。 中午，我在教室开始写第九篇小说。一会后，”哟，这不是初中上课看小说被罚，写作文用奇怪修辞的孔家后代吗?你也参加校园新人奖征文比赛啊”我一抬头，就看到薛数看着我的稿件发出讽刺，他旁边还站着李恶和华学。”既然知道就不要在这里妨碍我”我冷冷冰冰地说。李恶笑着说:”薛数初中作文竞赛拿过全市一等奖，你写不过他的””你不过是一个跟班罢了，这里没你说话的份”我抵抗他说到。薛数这时说:”在这重理偏文的学校，你这个数理化生不好的人只是拖后腿的罢了，语文和文科再好也没用。”华学声音较小地对薛数说:”孔天远数学是全班前几名””是吗？”薛数有点不信。”数学这种充满套路的东西，连我这个要念文科的人也可以考得好”我不该语气地说。”反正也没我们好，理化生才是以后就业的重点，政史地这种充满虚伪的东西也有人读，真是奇怪”薛数说。”只有你们这些人才会听这种老话，盲目从众。文科思维丰富，特别是哲学使人明智，你们是不会懂的”我说，”如果这就是你们想跟我说的话，就别再打扰我了””我只想说放弃吧，你写不过我的”薛数扔下一句话，带着一伙人走了。 初中时，我用了一些我从小说里学到的一些手法到写作文里。但是，一次课堂上老师分发作文时说:”孔天远，我已经在评语上写了几次这样的话，你不听，我只有当场跟你说了，写作时，不要用一些奇怪的修饰词。比如，这个’一块大白棉被似的白雪覆盖在地面上’”全班一阵大笑。我立刻站起来反驳道:”这是著名作家老舍用的比喻，我只要借鉴一下，有什么不行。像’白茫茫’’铺天盖地’什么的我早就用腻了”老师有点生气地说:”在中考，没有一个评卷老师会认为这好，只会认为它奇怪而扣分””我记得，当初鉴赏地时候还写到，这个比喻新奇，富有冲击力”老师冷笑道:”那是因为他是作家，你只是一个初中生罢了”我无言以对。 我为什么要听你们的话，我写了你们又不能把我怎么样。理科好又怎么样，那种使人变得机械的东西我才不学呢?我学数学，是因为文科也要考，一学发现尽是套路，基本分一拿就是高分，尽管不拔尖就是了。作文竞赛一等奖又有什么用，那只不过是初中作文罢了与这次征文差太多了。如此一想，我继续写小说，谁都阻挡不了我，理科状元也一样。 最近几天还真是有精神，写了九篇短篇小说，自己想想都觉得惊讶。昨天中午写了一篇小说，今天上课特别精神。中午做作业时，华学过来和我说，薛数找我有事，今天下午放学去教学楼后面一趟。我还没说什么，他就离开了。到底什么事呢?我一下午都被疑惑着。 放学后，我到教学楼后面，薛数等人已站在那里，等候多时了。”找我有什么事”我开门见山地问道。”我不是叫你不要再去投稿了吗””我写我的与你有什么关系””你看这是什么？”薛数拿出一把纸，在我眼前晃了晃，一副得意的笑容。”不就是一把整齐的废纸吗?”我毫不在意。”这里面有一些东西，我读一些给你听”薛数，举正纸，开始念:”一个闷热的下午，数学老师在讲台上摆弄着无聊的数字。一阵风吹来，也因携带着包含数字的声音而变得炎热。我真想大叫一声:别在那故弄玄虚了，直接了当地说过程和结果就行了。我…””这是我写的小说，怎么会在你手上”我变了脸色，我写的东西被念出来原来这么羞耻。”哈哈…”薛数旁边两人大笑起来，”这是什么东西啊””华学，把我的稿拿来”华学接过我的稿，递给薛数另一份稿。”别以为理科生不会写小说，我也写同样的事，让你看看我们的差别”薛数动情地念着，”烈日炎炎的一个下午，我无比烦热。但是，数学课开始时，仿佛有一丝凉风开始徐徐吹来，吹凉了我那颗烦热的心。数学老师在讲台上挥笔奋斗的身影仿佛一幅美丽的画卷，无聊的数字在你的手里变得生动有趣。这是一个有趣灵魂的有趣思想。…””够了，我可不觉得多么有趣”我丝毫不想在听下去，但两个跟班听得入神，一副被打扰的眼神厌恶地看着我。”这是两种境界的差距”薛数一句话，两个跟班总是说对点头。 “不同人爱好不一样，鉴赏能力也不一样，没有小说能被正确地评议。就像阅读理解一样，那明明不是作者的本意，我却要为了迎合评卷老师写一堆作者没有过的感情”我愤愤地说一通。”这不过是你的一己之见罢了。我们参加的是考试，评卷的人可管不了这么多，他只通过一张答题卡看不出什么，只能一笔扣住评卷人的心，才能在考试中取得成功。考试也是一门学科””我不想与你过分争论，浪费时间，你是从哪里拿的我的稿件的?”我问道。”哦，我主要目的都忘了。我是把稿件从小黑箱运到文字社评稿人那的使者，我看这稿件不舒服，就拿出来了”薛数一脸笑意地解释。”你胡乱截取别人的稿件是不道德的，会失去信誉的””这时讲什么不道德，这是权利，我看哪个不舒服就毁掉哪一个，反正这种烂文肯定选不上，不如早点让它消失”薛数一脸邪恶的笑容。”嘶嘶”稿件四分五裂，发出痛苦地呻吟。现在地上的真的是废纸了。”你在干嘛”我一声吼，仿佛失去了自己的孩子。”只是让垃圾成为真正的垃圾罢了，我们走”薛数等人离开。 我脑子一片空白，把碎纸拿了，又让它落下，如此机械地动着。我以前的稿件不会也是如此被毁吧，我却不知道。今天，他一定看我写这么多烂作不改，就当面提醒我。他们都是有水平的人，他们觉得不好，我还能说什么呢?看来我是没有有写作素养，我要去学习写作，然后写一篇让他折服的文章，让他不忍心撕掉。我起身，准备离开。那堆废纸怎么办?我转头看着那堆暗淡的东西。垃圾就是垃圾，我没必要把垃圾收藏起来，就让它当垃圾被明天扫卫生区的人扫走吧。 写作还真得修炼，今天入手了一本小说写作教程。哦，这些东西真有用，我贪婪地读了几天。我已经焕然一新了，虽然没什么精神，今晚好好睡一觉。明天开始写一篇真正的小说，尝试一次冷笔写作，不写热笔了。 我在投入小黑箱前又认真地读了一遍，与薛数的那篇有得较量，好好地把它送进文学社吧，友善的传递员。稿件被黑色给吞没了，小黑箱仿佛深不见底。 这么快就找上门来，又是华学，竟然说，下午放学老地方见。什么时候变得这么老了吗?我信心满满地来到教学楼后面。见到薛数等人一脸气愤地站在那里，”你为什么还要投稿”薛数拿着我的稿件质问我。”你读过了吗?怎么样?”我颇有兴趣地问道。”读了”薛数有些疑惑地看着我。”那天以后，我意识到我写作的不足后，拼命学习了一段时间，写了这篇小说，这是我初发的第一步”我兴致勃勃地说到。”你是不是误解了我的意思”薛数忽然变得冷淡，”我是觉得你这个人写的小说很差，不要挣扎继续写了””我这个人写得很差”我反复读了几遍。李恶突然说:”就是说你这样的书痴，写不出好小说，再怎么努力也没用”我有点伤心了。”我毁了它，让你明白我是什么意思”薛数又要开始撕了。这时华学往薛数耳边说了些什么，但薛数没有改变态度，让稿件又一次成了废纸。他们还没离开，我就一股脑地冲回家。薛数等人似乎追了出来，但我没被任何人拦住。 看来他们是存心不想让我参加征文比赛，我干吗还要不断地去做无用功呢?看来我与奖金真的无缘了。一本小说写作教程旁摆了一堆草稿，这也是我的心血啊!如果一篇都没留下怎么行，我应该要阻止他们。对了，他们这样做应该是不和法的，我应该要向别人告发他们。法院，对一个中学生太难了;父母，他们在老家，离这太远，没法帮我。看来只能去学校求助老师了，去找班主任吧，班主任是英语老师，像我这种英语比他们落后这么多的人去求助，行吗?我不管了，我的心血不能白费，我胡思乱想到了九点，快去睡吧。 这样直接进去没问题吧。老师的办公室门基本在上课期间都是打开的，老师们都在各自的桌上忙自己的事，我一眼看到了在距离我最远的角落里的班主任。我心情近张地走过一个个不认识的老师身旁。深吸口气，”老师，打扰了”老师停下手中的工作，看到我，毫不关心地问:”天远同学，有什么事吗?”我把发生的事与老师说了一遍。”哦，我会处理的，处理好了我和你说一声”他继续他手中的工作。怎么感觉好像被忽视了，没问题吧，我对自己说。 今天英语课结束后，老师叫我跟着他，路上和我说了一句:”没事了，你可以继续写了”就让我快去上课。为什么，特地走这么大一截，就说了一句话。不过，应该可以投稿了，薛数他们也应该被批评了一顿。撕坏的稿件肯定回不来，所以老师也没说什么。不管了，今晚可以冷笔、热笔结合写一篇小说了，可惜其它都没了。算了，那些不好的小说没了也罢，又要一个不眠之夜。 我来到这个小黑箱前已经多少次了，过了多少时间了。发什么情啊，好像也才十几次，不过几个月罢了，搞得多少个千秋似得伤感。我也不太希望拿奖了，只要我的小说能留下就好了。 哈，华学又来和我说，老地方见。他应该是要和我道歉的吧，我就大发慈悲地原谅他吧。我心情乐滋滋地过了一下午，无一点睡意。一直在幻想着薛数的行为和语言将如何表达。你也会有今天，撕了我这么多稿纸，还当着我的面撕了两次。看你怎么请求原谅，还好你遇到了像我这样的好人，孔家的后代就应该与人为善，待人宽容。 我前往目的地的路上，也没停止过幻想。直到看到他们三人，为什么觉得他们没有丝毫道歉的意思。李恶说道:”孔天远，你怎么还在投稿。老大的表达还不够直白吗?”怎么回事，我丧失了底气:”老师没找过你们吗?”薛数拿着我的稿件，一脸不屑的说:”哦，那个老师是来问过我，我说以后不会这么做了，他就离开了，事情就是这样”我一脸不感相信的样子说:”怎么会这样””看你这样，这次以后，应该不会再投稿了。这种老师从三个坏学生中救出好学生的煽情故事，就让它消失吧”薛数说。 在我眼里，看到了夏日里一场短暂的雪景。”不要浪费我时间了”薛数留下一句话，就走了。我还沉浸在对老师的不解中，我彻底迷失了自我。一具没有灵魂的躯体，到家无望地躺在床上。我哭了，我真的没有谁可以寻找求帮助了。 看到小说写作教程和一堆草稿，我忽然看到一个看不清脸的人，露着邪恶的笑容，把这些东西一点一点撕掉扔到旁边不知何时生起的火堆里。同时，我觉得我的手，我的身体也在被无情的火一点点吞噬。”不要”，我一下子从床上坐了起来，原来是一场梦啊。我已经多久没做梦了，还是小学无忧无虑的日子好。 又路过那个公共栏，那个征文公告还没被撕下来，反正我也不想在写了，我直接转身离去。看到班主任，我不打招呼就直接走了，班主任也不在乎我是否打招呼。看到薛数等人，我直接绕道走开。这样的日子过得真辛苦，这件事到底是谁错了?搞得我好像是罪人一样，躲躲藏藏的。小说写作教程什么的早就被压箱底了，好好地看别人写的小说就行了，何苦自己写呢?费时又费力。伤心的日子还真是短暂，仿佛这几个月我都没度过一样，我又回到了以前的那个我，丝毫没有改变。 征文也快结束了，早点吧，别在让我想起这段日子了。今天放学，我照常回家。到校门口的时候，一只手拍了我一下，一个田田地声音，传入我的耳朵”这位同学，能跟我走一趟吗?”我转过头，一个我女孩正睁着眼睛看着我。”好…好啊”我回答。我跟着她来到教学楼旁的一栋建筑的房门前，有一张门牌，上面写着”文学部分部” “快进来吧”我进入房间，这里有好多书在左右前三个书架上，一张较大的桌子上整齐地堆了些纸，旁边有一盏台灯，正对面的书架后面有一张床露出一角。女孩转身，面向我介绍到:”我要李晓诗，这次征文比赛的审稿人，孔天远同学，请多指教””你这怎么会知道我的名字”我疑惑地问。”我有个熟人认识你，他跟我说的””你把一个不太熟的人带来，不害怕吗”我笑着说。”我相信写出这样小说的人不是坏人，文如其人吗。我也是文学崇拜者，和你一样”她平静地说。”好吧”我说，”你找我有什么事””你以前隔一周多就写一篇小说，现在已经一个多月没写了”一个多月，是我写的最后一篇小说到现在的时间，不应该被撕了吗?以前的她也有看吗?”所以在征文比赛快结束前，我希望你再写一篇，当然你不必勉强，我只给你说一下””何必找我这种无名小卒来写呢?”我问。”不，我欣赏你的小说很久了”她毫不犹豫地说。我正要说另一疑惑时，忽然觉得桌上有些纸泛出亮光，有点奇怪。”那些是什么?”我指着桌子说。”就是一些别人投的稿件”她平静地说。我来到泛光的稿件旁，是透明胶，拿起仔细一看，上面有许多裂痕。一看内容，这是我写的小说。”这”我不知该说什么。”嘿，被发现了。我每天比较晚离开学校，那天，我刚好经过听到有声音，就在墙后看。看到了被撕碎的稿件和你们。我等你们走后，拾回来把它黏好。如此反复，弄了三份”我翻了翻是我最后写的三份。”你怎么不出来阻止一下”我立刻问道。”你怎么能让一个女孩子出来阻止男孩的暴行呢?””其它的呢”我紧逼问道。”什么其它的”她疑惑到。”我其它的几篇小说，这里只有三篇””不是在其它地方好好的放着吗”我翻几下，翻到了它们，喔，它们还在。我才注意到我失态了。”不好意思”我缓口气说,”你为什么要做到这个地步呢?””因为我欣赏你的小说，所以一篇也不能放过，你一定理解”我想起了我看小说的日子，真心地说”谢谢””你一定要保持自己的风格，好好地在写一篇小说，下午放学直接到这里给我吧”我的心里早已经燃起了这股热情,”一定不会让你失望””自由地写，不要有约束”我俩挥手告别。 一回家我就动笔，写了好长，因为感受太深了。写完后，我第一眼看到的是右手的那个茧。抬头，满天繁星的夜空印入眼帘。这就是夏日的夜空，多少次，我坐在这里一直都是低着头。这一次，距离上一次快过半年了;这一次，我的心情最为平静;这一次，我懂得最多。九点了，睡觉去吧。 不管几天后，会发生什么，也与我无关，至少我的小说还在这个世上，还有人愿意观看它。我已经好久没睡这么香了。 我的生存之道第一回:独乐之一 在这里，我究竟是什么?又可以做些什么?……明白了，我只是一个传递员，将长辈的接力棒交给晚辈。 下课铃一响，不等老师的下课指令，我迅速地从后面的座位起来，从后门冲出教室。可恶，慢了一步，有人已经在我前面了。我扭腰，转身，左蹦右跳，未等楼梯的人流密度变大，我已经冲出了教学楼。不过，战争还未结束，天桥上已经有很多人了，这就是六楼的我的地理劣势，不过我还可以凭经验制胜。模仿了一遍楼梯上的操作，但速度更快了。天桥和操场的缓冲作用，让我到达食堂时，人群已被甩在了后面。 对于我这种人一定要快，但不尽人意，最短的队伍也有两人，没办法只能排队了，谁让这里是一个重点中学呢?显眼的时候一定要有良好的素质。真是的，前面两个人怎么慢吞吞的，因为已经有如意宝座了吗?终于轮到我了，不过我的后面可不止一两个人了，我迅速地点菜，打饭，毫不拖泥带水，人的穿行也无法减慢我的速度，不过接下来有点麻烦了，食堂有百分之八十左右的座位被书包，书本，校服等物品给占据了，但是我的眼睛可敏锐了，立刻看到了空座位，然后我朝那走去。刚到座位前，忽然不知从哪里冒出的一只手，把一个铁碗迅速地放到了我的目标上，碗似乎是飞出来的，好像懂得主人的心思，害怕有一个与他类似的人将它抢走。我顺着手看到了那个人，他的表情仿佛在说，这都是碗自己的想法，跟我没有关系，不过，他很快装作什么也没发生地去打菜了。幸运地，在旁边吃完饭的初中生刚好要离开，我就顺势坐下了，这时看到那个与我发生一场斗争的人在现煮区。唉，看来我得让你搬家去造福别人了。 我吃饭还是挺快的，现在是食堂的高峰期，我已经吃完了一半多。我的经验告诉我，孤身一人的我很容易成为别人的目标，一场人人都讨厌，但人人都在做的文字游戏也即将开始。”同学，请问这里有人吗?”来了，重点中学的学生们的素质在这一句话中足以体现。我迅速一看，两个穿校服的男生，一个人的手上拿着书包，手上没有餐盘，看来是无所不在的占位者。我开玩笑似地说:”哎呀，同学这不是显而易见吗?难道我在你的心中就不是人吗?你倒是看看我的周围。”我朝我旁边的桌子示意了一下。”可是那里已经有人了。”我故作沉思样，说:”真是奇怪啊，我明明只看到一个碗。难道是隐形人?你告诉一下我怎么看到他吧。”跟我说话的人似乎有点不耐烦了，但还是强颜说:”是我用词有些问题。我想问的是，不久后，这个座位会有人来吗?”我也学他的说话方式说:”看到前面那些排队的人了吗?那些人都有可能在不久后到我的这个位置来，所以不久后肯定有人坐这里。”那个人还想跟我说些什么，这时，他旁边的人将他拉走，还说:”别跟这个神经有问题的人耗时间了，我们去其它地方。”近些日子，我已经有孔子的那种感觉了，想要别人不占位是不可能的，而我也只能知其不可为而为之。 我也快吃完了，我四处瞟一瞟，为了给与我志同道合的人给予方便。不错，很快就发现了可能的目标，我朝那个方向喊:”同学”那个拿餐盘的男生转了过来，我朝他挥了挥手，示意他过来，刚刚漫无方向的他立刻有了方向。他刚到我面前，我就问道:”同学，你在找位置吧，如果你不嫌弃的话，就坐这里吧。”我指了一下旁边的桌子。”可是这里已经有人了。”我立刻解释:”事情是这样的。我很快就到食堂打饭，拿碗去打汤，但发现今天的汤不是我喜欢喝的，但碗又不好意思放回去，就拿它占了一个位置，好给你这种人方便。””同学你可别忽悠我啊。我前几天刚被人骗，可难受了。”我一脸诚实地说:”你怎能对我们学校的学生如此不放心呢！你看看周围，那些放着书包的位置有谁去抢吗?还有那些把笔，书本，甚至是热水卡放在桌上的，有哪一次被人拿走过吗?在如此诱人的利益面前，很多人都豪不动摇，人们都互相信任着，你还有什么担心的必要呢！”那个人被说服了，安心地坐下了。我也离开了座位，去将碗筷放到清洁处。再回到刚才的那个座位附近时，已经有人将它占领了。我暗中偷笑，同学，你再流浪一会，体验一下生活吧。 第二回:独乐之二 卑鄙是卑鄙者的通行证，高尚是高尚者的墓志铭。但为什么明白的人都表里不一呢?搞得洋洋得意提出的我自以为成了思想家。 下课铃响了，我却不能像昨天那样冲出教室。一股无形的力量压住了我的双腿，台上的老师好像也在跟我说就等一分钟。原来老师操控着这种力量，他一放手，我的腿瞬间有了无比的力量。但是，楼道现在的阻抗极大，六楼的劣势扩大数倍。勉强挤出楼道时，天桥上只看得见密密麻麻的人头。我还是得快，到了食堂，预料之中的出现了许多长队。我迅速地扫描了一下，都很长，不过很快发现了一个熟悉的面孔，他朝我使了使眼神，我就假装借过之名穿梭于队伍之中，在到达时，就一下子插到了同伴前面，神不知鬼不觉。前面也有两个人，不过我已经省下了十几个人的等待时间。打完饭以后，高峰期已经开始了一段时间，据统计，刚下课5分钟为准备期，再过3分钟为聚集期，接下来就是长达15分钟的高峰会，最后为5分钟的消退期。对于我这一类人，一定要在聚集期就坐下。 前排流通速度快，人口密度大，所以我打算选择后排位置下手，这里的人的确少很多。我很快发现了一个上面放着小笔记本的桌子，就是它了。同时，我发现一个似乎跟我有相同目的的人，在附近徘徊。我朝他喊:”同学，我们一起坐吧。”还朝他挥手，他立刻走了过来，问:”坐哪里?”我指着这张桌子说:”这里”我把笔记本推到桌子的另一边，和他对坐了下来。我还说:”最近一个人吃饭，真是无聊极了。正好位置又有多，就把你叫过来了。”那个人立刻回答道:”那可真是谢谢你了，不过吃饭的时候尽可能少说话，小心噎着了。”切，真是无聊。就这样沉闷，无声地过去了一些时间，真想找些乐子，这座位的人不会一点赶人的胆量都没有吧。 想曹操曹操就到。”喂，你们怎么把别人的位置给抢了。”我抬头发现两个女生站在我们的桌子旁，前面一个大有一个泼妇骂街的感觉，另一个端着餐盘的畏畏缩缩仿佛在向泼妇求救。我对面的人立刻如坐针毡，慌忙地四处看。”别人的位置?什么叫别人的位置，明明我们都坐在这里了，应该叫我们的位置才对吧。”我向外永远都是幼稚的思想。”你的眼睛瞎了吗?没看到放在那里的笔记本吗?””真抱歉，借用了你们的位置，我去我同学那里了。”我对面的人已经坐不住离开了。我拿起那本笔记本翻了翻。”你干嘛看人家的笔记本?”我立刻一副焕然大悟的样子，装作一副绅士样:”两位小姐真是抱歉，你们的笔记本跟我的长得一模一样，我一翻才知道原来不是我的，我这就走。”我满脸歉意地端着饭菜走了。 真倒霉，竟然没选一个好地方，看我找一个其他人报复一下。这块区域到现在人也是比较稀疏的，立刻又看到一个目标，远处看没发现，走近一看才发现有一只笔在上面，竟然没有滚下去，我偷梁换柱直接把笔放到旁边有人占位却没人坐的位置上，满是快乐。可是屁股还没坐热又被人吼:”你强别人位置就算了，干嘛还把人家笔给偷了?”我看到一个端着饭菜，凶巴巴的男生。”笔?……哦，你说的是这根吧。”我指了一下旁边的桌子，”那可真是惊险啊，这根笔在地上滚，差点被人踩坏，还好我迅速地把它捡了起来，然后我觉得应该是旁边桌子同学的，就放了上去。”那个人用另一只手把笔收进了口袋，说:”可是这笔原来是放在你的桌子上的。动脑子想想就能明白，用书包占位后，怎么还会用笔呢?””同学，那你可真是太卑微了，一根笔都可以代替本人了，你干脆让笔代替你吃饭好了。再说，你也没有证据证明笔原来是在桌子上的。””监控可是清清楚楚地记录着。”“我明白了，同学你就是想和我拼桌吗?干嘛绕这么多圈子呢?反正还有三个位置，直接坐下来和气地吃个饭，何必浪费时间呢我?”我心平气和地和他讲道理。他没办法只好不服气地坐在了斜对面，口中还念着:”不信看监控，不信看监控……”我吃完饭后，小声在他耳边说:”同学，你下次可要小心了，要是遇到我的同伴，你可能连笔都看不见了。”马上，我就溜走了，留下在那里生闷气。 第三回:对峙之三 这个世界太复杂，但不能对其认识太浅，否则就会不适应地被淘汰。 一个刚经过一场”风雨”的同学走过来跟我说:”吴声进，第二节下课，去政教处一下，”他又低声道”，政教处主任心情好像不太好，你可要小心了。””谢谢提醒了”一节课我都在思索，像我这样不做坏事的底层人民怎么会被叫去呢?不会是想劝我好好学习吧，可也不至于教务处主任找我吧。算了，一去便知怎么回事了。一下课，长达30分钟的大课间，大家都开始释放紧张的学习压力了，我却充满好奇的去教务处。到了门口，门是关着的，今天是阴天还在里面吹空调，不过，夏天的阴天也很闷热，我吸了一口气，敲了几下门。 “进来吧，里面门没锁。”是主任的声音。我拉下门把手，开门一股凉气迎面而来，我立刻融入进去，关好门转身一看，发现教务处主任坐在前面中间的办公桌上，我班的班主任在左边坐在一把椅子上。”声进同学，你就坐那里吧。”我到主任所指的椅子上坐下，我们形成了一个等边三角形。”开始正题吧”主任开始了严肃地讲话”声进同学，你知道你为什么来这里吗?”气氛不对劲，说得和气一点吧”宽恕小生愚昧，还请大人指点。”主任愣了一下，马上恢复语气说:”我校做为省一级达标校，不仅要培养优秀的人才，更重要的是还要培养学生的品德，而我作为这一部分的教育者应当尽职尽责。”我应和道:”那可不，大人在各班都小有名气。就算不记得校长，也不会忘记大人你的功劳。”他咳嗽了一下，示意我别插嘴，”不过，作为本校学生，违纪的学生可谓沧海一粟，所以我一个个去处理，不久就可以结束。可是，我最近遇到了一件难以处理的麻烦事。声进同学，你说是什么呢?””就小生看来，目前在大人的治理下，应该已经没什么大事了。””不对啊，最近有许多人都来投诉，他们说的大致表明一点，食堂出现了恶霸，请求我去治理，虽然我主管教学方面纪律，但食堂也是本校的一部分，有违反风纪影响校风的我也该管管。”可恶，原来是这么一回事，不过应表现一下，”对啊，我作为寄宿生也经常遇到这些事，的确该治理一下了。”班主任坐在旁边不发出一点声音。”声进同学，你就别装傻了，你跟这事关系可大了。””我不明白大人说些什么，不过小生想了想，这应该是自然规律的自我调节吧。””不久前，在我校小论文征收中有一篇叫《学校食堂问题的一己之见》，十分谦虚的论文啊。””没错，那就是我写的，我认为不占位是食堂正常运转的标准，并详细地论述说明。””可是，没过多久，文学社向我送来一份稿件，说此作有伤风化叫我处理，这作品叫什么?”他朝班主任问到。”《乱世生存法则》”一回答，班主任就沉默了。看来是逃不掉了，不过应该不太严重吧，顺便试一试可不可说服主任。 “这作品的确很有意思，如果再正面一点就好了。我本想着，没发表就算了。可是没过几天，民间就出现了传抄本，许多学生读了此书，都受到了侵蚀，结果还真出现了乱世。效果极佳，你说是吧，小作者。””大人和大伙可能都误解了小生的意思，小生只想宣传学以致用，用科学的方法认识世界和改造世界。””那就看看你的方法科学到什么程度。”主任从桌子上拿起了一堆有序的稿纸，果然是我的原稿，装订边框是我原创的款。主任将其扔给班主任，班主任拿到后依旧安静地坐着。”来一段”主任下命令了。”知己知彼，百战不殆。要在乱世生存，就要了解乱世。以下是几代人统计结果基础上凝成的结晶，愿读者能有所收获。””停，原来这本书是为了创造乱世而使它发挥价值。””不，我认为如今食堂本身就是无法改变的乱世，我只是为了让我们这些人的利益不受侵害，才想出这些办法及其依据，来造福大伙。”我已经无所畏惧，成为了一个立场坚定的人，没错，我是为了大家。”再来一段””平衡公理1:将不占位者视为反应物，占位者视为生成物，那么它们构成一个一比一的可逆反应。其存在一个只与人数有关的平衡常数，称之为食堂平衡常数。平衡公理2:人数越多，食堂平衡常数越大。其变化幅度与食堂本性有关。平衡公理3:促进平衡逆移的方法只有①读此书②反应物感染生成物③极小概率地自行改变。但最终会回到常数值。人心公理1:每个人都是自私的，但总有一副无私的外表。人心公理2:每个人都无法从表面上摆脱规则。……”我自己都有点不太想听了。这时上课铃响了，班主任停下来说:”这节我们班自习，请继续。” “声进同学，你的理论和方法是不是有点矛盾?既然存在一个尝试，你去改变，最后不也会变回来吗?””世界是复杂多变的，许多东西都会促进正移，但反之方法少。再者，还有一个动力学因素，不幸地是此反应，浓度越小速率越大。根据书中记载，我们需要选择性催化剂，就是这本书和我。打到平衡常数甚至短期超越是我们的目标。””你的意思来看，我就是正反应催化剂，是吧?””完全正……确……”等一下，怎么感觉有点奇怪。”吴声进，现在对你宣布处分。因你破坏学校风纪，影响校风，还打算在发表的读物上辱骂领导，更在公堂上不知改正，特此停课一个月，回家反思，记入档案，从明天开始施行。”我开始着急了，这可真的完了，在家还不被父母骂，”主任，我不是这个意思。””刚刚已经得到了教职工大会的批准了。好好过这个月在学校的最后一天吧。”可恶，我在这里竟然被直播了，看来无法挽回了。”快回去自习吧”班主任对我说。”好”心想，留得青山在，不怕没柴烧，终有一天我会改变这里。 第四回:众乐之尾 把生命献给世界后我将一无所有，那我为什么要这样做呢?我应该让生命更近，做更多贡献才对。 我拿着把伞在教学楼一楼边缘处，我不管那些撑伞出去的人，而是看着楼梯口。”声进学长”我朝楼梯口挥手喊到，学长果然两手空空下来。”你怎么还不去食堂，我们班可是拖课了。””学长，明天我可见不到你了，我想再多学些东西。””你怎么知道的?””就贴在那边的告示栏里，第三节下课我就看到了”我指着远处的告示栏。学长轻轻地说了一句，”原来他们早就准备好了，就等我进入圈套了。””学长，你不是没带伞吗?淋雨多不好，我们可以一起去食堂””我跟你说，这是天泣，不就是一个月而已吗?我应该感受一下上天对我的怜悯。””学长，我们快去食堂吧”我撑伞准备出发，学长也跟了过来。在路上，学长还对我说:”你在高一可是一楼，又不是三楼，这么好的地理优势怎么不去利用，而且下雨天大家都很慢。不撑伞直接跑的话，说不定拖课也可以在高峰期前赶到食堂。””走快了，鞋和裤子都会湿的，多难受爱。””不就是些水分子吗?蒸发一下不就和原来一样了””我们地理老师说，这里的雨并不干净，粉尘浓度并不低。””哼哼，我们去食堂吧。””这不就在路上吗?” 刚要进食堂时，声进学长对我说:”把伞放在外面。””放在外面不会丢吗?””食堂超市都可以放在外面，食堂为什么就不行?而且，放在里面也碍事。””好吧”我只得照做。进入食堂，学长马上给我安排好插队位，真亏他还感做这种事情。最初不太愿意，现在也没什么实感了，觉得不是什么大事，没什么关系。”学弟，我们去找个好位置。”我跟学长走到后面。”就那里了，还有风扇。”我顺着他所指的地方，看到那里桌上放着一把雨伞。我跟着学长，毫无感觉地坐下了，但还说，”这里已经有人了吧。””没关系，这个人才放下伞不到一分钟。””你怎么知道的?””以统计经验来看，现在排队不过个八九分钟是不会排完的。我从伞的内层湿润情况可以看出，如果以过了二三分钟，上面的风扇足以把伞内层不是很湿润的地方吹干，而现在它还是湿润的，所以这个人必定刚走不久。学弟，你以后可要学会多观察啊。”我焕然大悟，思考一番:”原来是这样。”突然学长笑了起来:”骗你的，其实刚才打饭的时候我就四处看。我们开始找位置时，这人正好在这放下伞，我就带你过来了。””学长你的视力可真好啊”我心中有少许不高兴。 “这点小事不用挂在心上，要不你带上这个。”学长从口袋里拿出一个东西，展开后发现是一个牌子后面套着一个橡皮筋，上面写着三个大字——“流浪者”，还有一排小字:”无处可归，只得四处寻找依附，还请见谅，不满立走””这是流浪者头盔，带着头上不用说明，主人也会和蔼地把你赶走。”我的头脑里浮现出了戴这个东西的傻样，”还是算了吧，感觉太丢脸了。””都到这地步了，还顾及这个，你还入世太浅了，既然就给我安心吃饭。”不久，学长开始唠叨了，”还是得多让你知道一些东西，你看那边”我看见一个桌子，四个椅子都放了一个书包，桌子上还放了大概三四把伞。”怎么样，有没有物质侵占食堂，成为客人的感觉。””我只觉得那些人吃饭可能很不方便。””你觉得他们为什么要带书包呢？””主要应该是为了去宿舍学习，顺便用来占位。””不对，我可不这么认为。你想想，其实书包就是为了不占位才存在的。有些人必须带一些书本，但拿着又不容易打饭打菜，所以只好放在桌子上，顺便占位。但书包可是个好东西，其特点就是，在不会很大影响手和脚的活动下，携带东西。这样，背着书包打饭菜不就好了。””学长，这不现实吧。在较拥挤环境下，书包在后面撞到什么都是不知道的。比如，打饭时，不小心把别人饭菜撞掉了怎么办。””学弟果然可以给出很多有用的意见，看来我回去要好好静思了。” 又过不久，学长又开口了:”学弟，你坐这里如此不安的话，我想到一条妙计。”说完，他端起饭菜，我看到他到一个人的桌子旁好像说了些什么，然后那个人拿起他的饭菜和伞到我这来，学长示意我过去。一坐下我就好奇地问:”学长，刚才发生了什么?””那个人刚刚和同学在打室内蓝球，下课完一会才打完，现在他浑身很热想吹风。他一打完饭菜，我就过去跟他说，我们快吃完了，又觉得吹风太冷，想和他换一个位置，利益关系一致，他马上就同意了。我还跟他说，我觉得我们的伞带来带去太麻烦，等我们吃完饭，自会去取回伞。结果，他把他的伞拿过去，我就把原来在桌上的伞留在了那里。””学长，你这种记忆力和观察力正是我学不来的。”我感叹道。当那边座位的原主人到时，我和学长已经走了。 此后，我时常去看那张吴声进学长的惩罚公告。一天，我想明白了:”世界处处有缩影的社会，其中摆弄理论的人，在其的一生都是愚者，但他们的理论又十分讨人喜欢。比如说，我现在已经彻底地和他们站在一起了” 附带文《学校食堂问题的一己之见》引子：随便天普第六中学招生人数的增加，六中有些基础设施不够现象，对笔者关系不大笔者不研究。与笔者关系较大的是食堂问题，食堂特别在晚上有些过分的拥挤，对此笔者需发表一些看法。一、从两个现象说起 笔者差不多也是一下课就狂奔食堂的人之一，因此可以观察到食堂的一些情况。 ①“大家都很有素养”——令人恶心的道德绑架 我在食堂里吃着饭，等待食堂高峰期的来临。这是门口人流速度加快，一些人迅速地跑去窗口争取少排队，而另一些人则去有空位的地方放下书包、水杯等各种东西。嗯，这似乎极为正常。接下来，我最近的几个位置迅速被占满，占位人刚走开，各窗口的各队伍都已经排到了座位区，这时，有几个端着菜和饭的学生，四处徘徊，发现座位上有别人的东西就走开，就如此在我眼前。不久，就消失在我的视野中。我吃着饭，在我快吃完时，几个空位的“主人”拿着他们的食物到座位上开始享用，有的拿起他们不久前放在桌子上的食堂的碗去打汤。这极其常见而又正常吧？ ②令人发狂——这有什么令人害怕的？ 还是在食堂高峰期中，我坐在食堂用餐，周围的座位已经坐了人，但是食堂以每四个位置为一桌，有很多桌基本只做一两个人。这时，一个人四处走，看见有人的桌子，不管几人都走开。这是他发现一桌的两个人快要吃完，于是在旁边等待，不料那两个人在说说笑笑，最后一点东西吃得极慢，可惜不到10秒，不远处有一桌人刚离开，但不等这人反应，正好有一个人已经让他的物品置于刚空的桌上。真常见！二、对两现象的个人解析 这两个常见，又不引人注意的现象，在笔者认为是引发食堂拥挤的根本原因，请听笔者慢慢分解。 ①占座——降低食堂座位利用率的最大祸根 在六中食堂之中，有一个根本性的恶习就是大多数的学生都持着先占个座位，再去打菜的习惯。他们中大部分是这样的心理，不占个座位，等下打完菜没座位了怎么办？因为他们知道目前食堂用餐学生在增加，排队也要排很久，所以可能会没有位子坐，但实际上这是一种恶心循环。一些人占位引发先打菜者找不到座位的现象，应这次的先打菜者就会成为下次的占位者，也就导致了占位的人数不断增加。值得一提的是，食堂有少数的清醒者明白这一道理，但是终究无法改变大众的想法。占位有什么问题吗？有人会这样询问，我们先不考虑处理整体，从局部占位来考虑，一个座位被空占一段时间和用这一段时间来供人使用，显然后者更能充分利用座位，要知道食堂的座位不是给人放东西的，而是给人用餐的。但更令人恶心的是，有些人拿着食堂打汤的碗放在桌上占位。这时一种叫做道德就会束缚别人。首先，六中是一个文明学校宣传不抢位，一个学生端着菜过来，看见这个位置已有别人的东西，就在想，该占吗？可是这时旁边有几个人也有一样的现象，这人就会想，我占了别人没占，就会说我道德不行。结果面面相觑，没有一个人感下手。我先对这人表示遗憾，这人应该明白，占位本身不对，用食堂的东西占位就更不对了，你又怎么知道这个碗是谁放在这里的，这也可以说是我放的。 ②怕尴尬——降低利用率的又一重要原因 六中食堂还有一个问题是座位本身利用率低，食堂座位设置为四个座位一桌，各桌小距离分开摆放，这就导致了有些桌子只坐一两个人的现象。我曾问过一些人，一些桌子只有一个人坐，在迫不得已下，你为什么不一起去吃饭，还要再另外找呢？回答一般是，对方我不认识，怕到时候几个陌生人的熟人坐过来，导致就他一个外人很尴尬。也就是这一思想导致更多人产生了占位心理，一定要有一张属于自己的桌子，其实性格有时的确难以改变，还怕别人以为自己找不到桌子而丢脸面。接下来，我们进一步分析根本问题和解决方案。三、根本上的处理方法 其实，拼桌只是一种迫不得已的手段，本质上来说，占位才是应去除的现象。我们先考虑一下，什么是食堂的拥挤？是人多吗？有些接近，没错，是人多而产生的座位“不够”现象。食堂座位真的会不够吗？根据笔者统计食堂座位约有400多个，学校寄宿生和寄午生总共有600多人。400小于600，看似座位不够？但我们应该明白，学校为什么没有进行处理的原因！有一个经典问题，有两个锅和三张饼，每次每锅只能煎一面且要两分钟，以此难道要煎8分钟，大家都知道其实6分钟就够了。我们应注意到，除了空间，还有时间，我们应明白决定食堂流通速度的是食堂阿姨的打菜的处理速度。每个人只要你不是第一个人，你都要先排队等待。等待前一个人把菜打完。很显然，这个打菜速度就限制了食堂的流通速度。我们先明白一点，正常运作下，即每个人打菜，然后打汤再用餐的过程，食堂座位是足够的。假设食堂阿姨给学生打菜和学生打饭的平均速率为20秒每人(这显然是极度地降低了)，食堂总共6个阿姨(现煮区因用时太长而忽略)，最终的平均处理速度为0.33人每秒，学生平均用餐时间为10分钟，故人口最大流通量为0.33x10x60=180远小于400。要明白这是极端理想的情况，其实就算平均用餐时间为20分钟也不会超过食堂容量。对笔用时统计如下，从教学楼到食堂大约5分钟，排队打菜5分钟，吃完饭大约10分钟，其实笔者在同学中吃的比较慢的几个，因此真正的平均时应更短。好，接下来说占位如何降低利用率，其实显然的，一个人在用占位时间时，队伍已经较长，因此座位还要等待占位者排队时间，显然极其不合理。 根本方法：由上述的谈论可知，解决拥挤的方法为，接正常运作去食堂，即不应有一个人去占位。由学校发出指令，一切占位均视为无效，学生可以自由地选择没人的座位。四、一些小小的善后处理 ①抢位(已有位置吃饭，却被别人以占位视为无效) 因此要给出一个不视为占位的标准：将与食堂进行过金钱交换的物品且在一定时间(不超过4小时)内会失去使用价值的物品放在桌上不视为占位，如已经打好饭菜的餐盘，其余均视为无效(包括现煮)。 ②真的有物品怎么办？——不忽视书包的作用 有些人真的需要带一些物品去食堂，带着又不方便打菜，因此找地方放一下，要明白学生大多有书包的，书包正是为了不影响活动而存在的，把东西装入书包即可。 ③连书包都无法装入怎么办？ 没关系，你可以先放在座位上，到时再来取即可(别人并不视为占位) ④如果真的没有空桌怎么办？ 空桌可能真的没有，但空位是不可能没有的，一定要学会抛开面子勇敢点。五、总结 其实学校只做一件事即可，禁止占位，鼓励学生明白占位的不合理和学会有空位即坐的思想。 悠闲之人一、无奈的开端 看着摆在书桌上的天普第六中学的录取通知书和附带的暑假作业，心理总有一些不舒服的感觉。首先是市质检，虽然今年中考全省命题，但招生还是局限于市内，就因为这次发挥稍微好了一点，就和一些同样好的学生一起去听了广告。我听得都快睡着了，大概讲的就是天普第六中学在姜涵区是最好的，还很近，没必要跑到市那么远的地方去读书，还有业绩多么了得之类的话。我糊里糊涂地就带了他们给的几张文件回家，我还看都懒得看就往桌上一扔，反正就是一些教学报告之类的，还有好几张。再者就是我都不明白为什么要把它们带回来。后来我才知道，这些纸之中夹着一张协议，我父母暗中不明不白地与学校签完了。当时还像是给我惊喜一般说我只要达到六中分数线，就保进重点班，父母还真地被那些数据迷惑了，看看全天普市，六中录取分数线一点也不高啊！但我已经被迫第一志愿填六中了。当然中考完后，我比六中最低分数线高出四十多分，离天普一中还差了几分，但其它中学的分数线我都有达到。不过，今年六中也奇了怪了，竟出来一个清华和北大，当然全市除了一中其它都没有。但后来发现，去清华的是文科生，明明六中理科很强，去北大的是医学系，还是靠自主招生，北大医学系好像跟北大基本没关系吧。 暑假也过得不明不白，做做作业，玩玩游戏，一眨眼就过去了，报名流程也就走一走，交交各种费用，去去新生典礼，在新班级见见新同学，下午差不多就进入正式上课。结果发现，这个暑假作业一点也没用上，而且我被分到了三班，之前还有一、二两个奥赛班，官方说三、四是重点班，但我觉得好像和其它班没什么区别。又想起上午交保险的时候，我说这保险怎么一年比一年贵了。那个收钱的调侃地说这说明我一年比一年升值了。前往新生典礼的路上，我还很乐呵着，我的知识越来越多，表面我越来越值钱，傻傻把钱交了。一坐下椅子我才发现不对劲，明明每个人都交同样的钱，而且我们每年都交钱，他们却只有我们出事故的时候才给钱，仔细看了看保险单，就觉得来气，不交保险还不让我报名了，明明就是学校想把责任推给保险公司。新生典礼又是非常无聊，又是先耀一耀战绩，再讲各种规章制度，过去的东西有必要先讲吗？我也是心不在焉地听着，然后随大流到了班级。到班级来的第一件事，竟然是先签一个协议，协议主要目的是约束学生不要带手机等电子设备，老师叫签，每个学生感觉好像看都没看地签上了名字，根本没有当一回事，他们不会觉得签一个协议只是开玩笑而已吧？被同学们催着交，仿佛就耽搁了他们的时间一样，我也只能心不甘情不愿地签了名字。还有一件事就是老师点我名字的时候竟然不懂装懂地念成了“范庶龙”，虽然有些停顿，但还是让我难受。我也只能大声、没好气地说，那个读作“范庶詟”。选择班委时，好像可以内定，跟我没什么关系，这里大部分人都是来自天普第六中心的附属初中——皇清中学，好多人都相互认识。 放学后，又有人像以前一样谈论我的名字，我就走过去大声地说“各位，不用为我的名字想这么多，我来给你们解读，范庶詟，数学的‘数’，哲学的‘哲’，而范数又是度量空间中一个重要的参考量，具有你们听不懂的深远意义。明白了吗？我的理想是从事数学或哲学”他们中的一人笑了笑说，“其实，我们只想给你起个外号。芳淑者，你觉得怎么样？”“翻书者…嗯…这个感觉不赖，我确实很喜欢看书，很符合我的性格，就这样吧。你们呢？”“薛数”、“华学”、“李恶(wu)”“叫我们名字就行了。”“以后见”我去办我的事去了。我没想到的是，对我名字的误读，我竟然三年都没有发现。还把他们当成最先认识的好哥们。 开学前几天，我专注于学校的探索。这片学校处于低海拔的皇清山上，四周的确有不少年龄很老的树木，食堂、操场和宿舍等与教学区被一条河分隔，又由一座桥相连。我把学校一圈都走过了，发现竟然没有一处是没围墙的，而且有些偏僻的角落，还有监控录像，真是吓死我了。因为课程从早到晚，包括晚自习，其实跟强制没什么区别，所以我午饭和晚饭都在食堂吃。对食堂还真想抱怨一下，每次就去得晚一些，竟然没有我想吃的菜，而且还可以感受到，晚上有些菜是中午的。真不明白食堂的炒菜逻辑是什么，难道就没有对每天的销售情况进行统计，然后修正炒的菜吗？还有那现煮区，好好的面，硬要加一些菜，来使价格翻倍，还有那汤不知道被稀释了多少倍。经过进一步的深入调查，我还发现科学楼和图书馆大半多的地方都是给人住的，但没那么缺空间吧。一栋几层的图书馆大楼，真正的图书馆只能躲在半层里面，害我找了很久。 一天，我经过高三教学楼一层的一些空教室的一间时，我发现薛数等人在里面和人交谈，仔细一看这是文学社。他们是文学社的吗？我才发现这个学校还有社团。临近门前，发现在说我，干脆索性偷听“我们给他起芳淑者的外号，他竟然一本正经地解释他喜欢读书，说这个名字很适合他，你说好不好笑？”一阵笑声。真不明白“翻书者”有那么好笑吗？难道因为是一个动词性短语吗？后来没讲我了，还是继续探索吧。 在学习上基本现在没什么问题，由于之前的基础，学习也算不上一件难事。只是教室黑板之间有一个电脑平板，时不时就有人上去玩耍，不是放音乐就是放一些搞怪鬼畜之类的视频。我不大明白看别人故意放错有什么好看的，他们还看得津津乐道。而且周围人说话，除了讲八卦，开玩笑之类的好像都没什么娱乐方式了，大多时间都在学习。老师上课当然也是尽心尽力，只是我大多都没有听而已，没有什么好抱怨的。我还去探索过一次学生宿舍，当然每步都是小心翼翼，通过人流进行统计，得出哪些地方可以通过，说明白些，二到四楼男生宿舍，五到七楼女生宿舍。关于统计，我推出了食堂每项菜的价格，发现原来还多算了1远米饭钱也用不了多久。后来才知道，食堂入口旁边就有一个价格表，只是因为近视一直没看清而已。 学校差不多都调查清楚，有许多地方可以独自一人进行散步，上课基本都在发呆，谁让老师讲课实在太无聊了呢？说实在的作业我也不太喜欢做，而且除了上课基本也不想呆在教室，因为周围同学净说一些没什么营养的无聊话题。这就是学校生活的现实，我永远只能在图书馆找到依偎的地方，生活大概如此吧！别人的事我也不能管太多，随他们去吧。 二、走出孤岛 看了无论在哪里图书馆都是我最喜欢的地方，开学第一天我就那个穷小的图书馆，但发现竟然没开。通过第二天利用各个时间点尝试，发现原来图书馆只有中午才开门，说实在的时间实在太短了。图书馆在二楼的一个长亭里，有一半是用于学生自习的桌椅，图书区有入口和出口。我当然迫不及待地前去，但认证身份时，学生样的馆长告诉我，需要考试通过才能借书，馆长主持考试，同样考试的也有其他几个人，馆长先给我们发了一份借阅指南，里面包含各种图书馆的规则，包括校卡换代书板，用代书板保证书籍不会错位等等，内容挺丰富的，还包括借阅天数有15天，超期如何罚款。馆员好像可以多借书和多借天数，但后来明白，馆员是在奥赛班中暗中挑出来的，好像与我无缘。其实也没太大关系，可以续借，只是走来走去比较麻烦。 考试也用了两天，考试完之后还有实际操作练习，而且还有不少人数，虽然与全体新生相比不算太多就是了。考试通过也终于可以自由借书了，虽然一次只有2本就是了，但以我的个性没什么好说的，一本数学，一本哲学，如此简单。这边的图书馆的确比初中的丰富多了，感觉知识深度没有限制，我还可以看到一些比较古老的大学教程，我当然是看高中奥赛了，其实这片书地处位置，人烟较少，可能是书的封面太没有特色了。对于同样爱科学的他们，更喜欢那些拥有彩图封面的科普书籍。但我认为那给人的只是一知半解与以后的胡思乱想就是了，但其受欢迎，我也无法否认。 一天，我忽然发现馆员好像换了一批，根据推测，大概是原来的馆员上高二，在开学担任一段时间等待新的高一馆员出现后，就卸任了，不过好像跟我没太大关系。不一定？如果搞好关系，可以让他们帮忙借书，听说馆员可以借6本，每本30天。算了算了，去看一下今天预计借的书吧。我一过去发现，竟然不见了，明明每本都在，偏偏我要借的两本不见了。冷静一下，冷静一下。那两本关于组合和图论的书应该不是每个人都可以看懂的。有一件事需要说明，我发现这里的哲学类书是在我已有的知识中进行细分的，然而我不喜欢这种东西，没有新东西，我并不喜欢看，所以我就把两本机会都用在了数学上。没错，通过我几天的观察，这个学校的人应该不会再有像我这样的悠闲之人。而且竞赛的组合和图论已经远超高中教材，应该不会有人为了高考而借。一定是看了科普书，然后心血来潮，后来发现看不懂，过几天应该就会来还。以后我又来了一周，竟然还没有还，一定是里面名称太多了，他一定是在背名词用来炫耀，再用书来显示自己的强大，再过几天应该会还。又过了一周，这都快超期了。为了几个名词，有必要拿这么久吗？我忍无可忍了，我要馆员帮我查一下，到底是谁借了书。还好这里是中国，这类隐私，好像可以随便地得到。 我找到那个在还书处的馆员说“请问一下，能帮我查询一下两本书在哪里吗？”“没问题！书名叫什么？”我报了书名，不到几秒钟，他说“不好意思，这本书好像被人借走了”“是谁呢？”“林道一，对了，这是我们的一个馆员，他的排书任务完成了，应该在那边休息”他指了一下，馆员专用休息处，不过和其它自习地方一样，也只是两张大桌子而已。“谢谢了”我观察了一下林道一的地方，并记住了他的长相，究竟是一个怎样的人？在这也做馆员应该是一班或二班的人吧！先观察一段时间吧！ 我找一个座位坐下，假装做作业，不时地关注林道一的行为。他借的两本书在哪里？我感觉他好像在做作业。不知不觉，我竟然看别人做作业到了午休快结束的时候，我也只能跟着人群，并随时盯着林道一，前往教学楼，反正一到五班都在同一层楼，终于我确认了他是一班的学生，我还记住了他在教室的位置，我心中有了些计谋。 平常早上，我都是随着人潮七点左右来到学校，这次我六点十分就来了，因为我要偷偷翻一翻他的东西，看一看他的水平。说实在的，这么早经过空荡荡的校门，给我带来一阵空虚感，还得承受保安异样的眼光，我还是硬着头皮进去。之前调查不太充分，这次正好补充一下自己的调查内容，果然此时，教学楼的大门已经开了，这样看应该是6点左右开的门。之所以推测有开门，是因为有几次晚自习，我回去的晚，发现九点半晚自习结束，九点五十左右，教学楼门和总电闸都会关闭，管事的是一个住在学校的老头。每次会先关电闸，以熄灭电灯来告诉我们要关门了。 在不同寻常的前往教学楼的路上，我走得非常急切，但靠近一班时，我走得还是比较慢。结果，令人沮丧的是，林道一竟然已经到了教室。看来他应该是寄宿生。不对？不会是比我来得更早的通学生吧！再试探几天，我不信他每天都来这么早。又过了几天，他竟然天天都来这么早。我本来想起得更早，但实在是做不到了，因为要么父母早餐还没做完，要么外面早餐铺还没开门，这样看学校食堂应该开得很早，我每次都没看到他在吃早餐。不对，我来学校还要一段时间，没记错的话，我是在家6点出发，而学校教学楼与宿舍的距离不远，可也得走几分钟。不过，今天我好像注意到了，他早上在教室看的是我想借的那套丛书中的几本。于是，我下定决心去搭个话吧。 我到他旁边找了个座位，坐下说“嗨！同学，每天这么早来学习，晚上应该也很晚睡吧，这样对身体可不好啊！”“没有，每天宿舍十点半熄灯，我就去睡觉了，没有像其他人一样在自习处自习到一二点。”信息量不少，我看到了他这道题，立马说“同学，你看的这道题，其实我有一个不同于参考答案的解法。”他看的书是我几十天前还的书，话说，我好久没去图书馆了。我要让你原形毕露，让我认识你只是一个会看例题的人，没看他看的就是一道例题。“其实，我看这道解析几何，用纯计算也很不舒服，刚刚也想到了一个利用几何减少计算量的方法。”我的方法肯定比你简洁，这个我想了几个小时，“要不我先说一下我的思路吧”“没问题”我向他要了一张稿纸，将我几天前的解法重现了一遍，只有一次计算量，相比原题少了很多，而解析几何难免有一些计算量，怎么看都不会再变简单了吧。“你的思路跟我比较相像，不过，你这步计算开始时，”他指着我开始进行计算的部分“如果不展开的话，可以简化运算。”他写了一遍，看似很多符号量，但约几下，就又压缩计算量的算法。“的确”看来我对他有些敬佩了。“同学，我看你还不错，要不看看这道题，你有什么想法？”他翻到了一道习题，是我曾忽略的一道题。“嗯…”“对了，先说一下我的大致想法，不过有几个堵塞的地方。”他给我展示了一下思路，我瞬间发现了，如何继续前进的方法，这大概就是灵感，我们俩合作，把这题给解决了。 不知不觉，发现周围有了几个其他人，“不早了，我看我先回去了。”“好吧，我叫林道一，你呢？”“范庶詟”我在他的纸上写下了，然后回去了。结果，我每天早上与他交流，成了必备的一个安排。同时，我通他我对学校有了一个更清晰的认识，因为他是住校，也对学校进行了不少调查，他与同学似乎交流也不多，与我有点像吧！我只有晚上回家，与他的重合点越来越多了。 三、大众 这天，我和林道一吃完午饭，在回教室的路上，我问道“你每天就吃两道蔬菜，是珍珠生吗？”“其实，我只想点一道的，但是阿姨诱导我，我也不好意思，就跟其他同学差不多都点了两道。还有，珍珠生是什么？”林道一，好像并不知道。“你收到录取通知书的时候，没有一张关于学校珍珠生政策相关的文件吗？就是学校会免学费，还会每月补贴伙食。”“我收到的只有录取通知书和作业。”“你是什么学校毕业的？”“一个农村学校，不过我初三的时候，是跟皇清中学的奥赛班一起上的，不过市考中考，还有很多事都是在原来学校办的。”“也就是说，你的毕业证，还是原来学校的。”“是的”“我大概明白了，六中的珍珠生名额是有限的，他们大概先把机会给可能出高分的城镇学校。那些要求很严，我记得大概贫困的学生都可以，你家庭状况怎么样。”“我母亲带我弟，就我父亲上班，收入我不清楚，只知道是打工的，基本需求都没问题。”“无所谓，我猜名额可能会有剩，不久应该会再一次招收，你去试试吧”“尽力吧”“对了，你初三过来读是怎么一回事”“具体我不大清楚，就是考了一下试，过了，就来这里读，只是换了一个地方读书，不过以同学来看，好像他们也是重新组建的一个班，然后就一起进了高中奥赛班，后来也进了一些皇清中学的人”“为什么，我好像没有参加过”“参加的好像都是皇清中学，好像因为区政府要加强农村学生的培养，给几所农村学校了名额。”“我又明白了一些事，区政府与六中大概是一伙的，一起防止生源外流”“大概如此” 我们都沉思地走过天桥，忽然看见教学楼下的一个重要要道，摆了几个类似摊位的东西，听他们说话原来是在社团招新，我对林道一说“你想加入什么社团吗？”“我们老师说要加社团等大学再说，高中社团基本不伦不类。所以我哪个社团都不打算加。”“你的班主任是那个办什么事都很快的数学老师吧”“是的”“我们那个班主任是个历史老师，选个班委都大大地说了一系列方法，结果还是学生内定。就他那样，还鼓吹我们加入社团，我倒看看怎么样，对了今天你不去图书馆吗？”“我们有固定时间值班，一周，我才轮一次排书”“你要看看吗？”“我还是回去背点东西，下午还有那个英语老师的课，我也没办法”“好吧，我去看看，到时候给你讲讲。” 我大概地逛了每一个摊位，其实总共才三个，只不过桌子太长了而矣。广播站，各种部门，除了做事就是做事，挺无聊的，每天傍晚可以点一道广播播放的歌有什么用吗？我又不听歌，要这权利也没用，说实在地，我觉得那广播还有点吵呢。普仙风情社，听说是学校的代表社团，不过好像是一个共青团的管理机构，我又不是共青团员，听说那个共青团，除了交团费，做团课，好像也没什么用。学生会，看似很厉害，仔细一看，原来只是一个给学校打杂的，比如各种会负责安排、后勤之类，好像没什么实权吧。我总结出来的一点是，加入社团就能更好的服务学校了，大概可以用来培养责任意识，对我来说真的不太需要，每天完成学校的一些琐事，就让我劳累了，是我太弱了吗？ 回去后，我也没对道一说太多话，就说了的确没有加入的必要，他也没过问太多，应该是对我的信任吧。结果，第三天，我就看到了一个关于珍珠生的单子，面向全校，同时还有一个国家助学金。不过，说实在的，我忽然发现要求是不是变多了一些，我以前也没太仔细看，而且也不知道扔哪去了，可能是我记错了。一到中午，吃饭的时候，我就问“珍珠生和国家助学金，你要申请哪一个？”好像根据说明书只能申请一个。“应该是珍珠生吧，我宿舍有两个人好像已经成为珍珠生了，他们的条件也不比我差，我觉得应该没问题，不过要父母参与，这周末才结束，我正好可以回去一趟。”“不直接打电话吗？学校不是有那么多电话机。”“你是不知道，那电话完全是坑人的，每个月都要交几十块电话费，不管打还是没打，多打还要收更多”“现在电话套餐应该都是这样”“可是实在不划算，我一周也不会打多少次电话，有时一个月都不会打”“可以向老师借吧？尽量早一些比较好吧”“说实话，我不太喜欢向别人寻求帮助，能自己解决，还是比较好一些”“自立精神吗？”“对的” 通过天桥后，我又发现了，摊位不是两天前的了，变多变密了许多，我向林道一说“今天似乎真的社团出现了，我去看看吧，你呢？”“今天星期三，图书馆我要去排书，没有空。”“好吧”与两天前相比，今天的看起来的确更像社团，对联社、英语社、动漫社之类的。不过，社团活动的时间真的少得可怜，早上，下午都要上课，中午大概才两个小时，要用来午睡和吃饭，早上大家都喜欢睡懒觉，下午放学过大概一个小时又要上晚自习，晚上九点半晚自习结束后，又要回家睡觉。社团大概就是把中午和傍晚的时间利用上，的确跟林道一老师说得差不多不伦不类的。再说，一些运动相关的社团，还不如学校的一些体育兵练习的多吧，他们每天下午才上两节课，又有体育老师辅导，不过，社团应该只是兴趣，没必要太精细吧。我可能跟不上他们的脚步吧。我还是跟道一说的确没什么东西。社团招新到周五下午就结束了，其实，我觉得这种东西不应该可以随时加入吗？听说，这些还要经过挺多程序，具体我不太清楚，不过我不知道是哪个社团，在周五下午最后一刻还用表演来招更多人，好像招不到人社团就有毁灭的感觉，话说回来，我平常在学校感觉没怎么见到过社团呢？ 又是平淡的一周，周六照常补课，明明以前听说，只有奥赛班才对，不过可能我们这一届学生注定是不平凡的。周六下午回家，休息一天，周日傍晚就要来上晚自习，我当然找到林道一，并在走廊尽头的一块小阳台上说话。“珍珠生申请怎么样了？”这当然是我最关心的事了，我什么时候变得像别人的父母一样。“一天内准备材料似乎太困难了，不过，我去的时候名额已经报满了，所以还好没准备各种材料。”我叹了口气“也就是说你没报吧！那国家助学金呢？”“好像要共青团员才能报，其实我一直搞错了，印象中似乎有一次共青团的听讲，本以为我进了，结果只是拿了申请书之类的，也没有提交。今天，我才知道原来我不是团员，可能是当时忘记了。”“那还真是辛苦啊”“其实也没什么，自力更生多好”他摆着一副笑脸回答。“是吗？政策太麻烦也是没办法的”我也只能无奈地叹息，我实在太渺小了，什么也做不了。 过来一两周左右，学校举行了一个社团嘉年华暨心理游园活动的一上午的活动，就星期六一个上午。听说，以前两个明明是分开的，还持续两、三天。听说到底从哪里呢？难道不是偷听吗？他们讲那么大声，也不是很吵闹，但周围人总是会听到吧。凑巧，此时又逢上一个不知从哪里来的3D打印机的讲座，也在星期六上午，听起来挺高端的，名额还有限，我竟然毫不犹豫地报名了。不过大家似乎不太感兴趣，星期五晚上，我问了林道一“你明天要干什么呢？”他说“我明天要去听一个关于3D打印的讲座，也不知道会怎么样。”很无奈的感觉。“我也要参加，真巧呢！”“你应该是自己报名的，不过我，大概是被引诱了的，不知不觉就掉进去了，说什么奥赛班不能没有人去，我答应的事也不好反悔。”“这样啊！希望明天不会让你失望吧。”“但愿如此吧。” 星期五晚自习时，发了一些叫集章卡的东西，正反两面，共16个章，应该是去社团摊位玩游戏，成功了可以得一个章，还会搞一个集章排名，全集齐的还有奖励之类的，无非只是一些文具吧！我真是太不合群了，这些花里胡哨的东西，让我觉得十分厌烦。第二天上午早读结束，我与林道一结伴去科学楼的电脑室去听讲座，路上已有一些看似很有趣的东西摆了出来，我连电子游戏都不怎么玩，怎么会对这些东西感兴趣，话说林道一怎么样呢？我们到电脑室，教室人也不多，50个位置大概坐了四十多个人，电脑已经被控制了，放着3D打印相关的课件，我和林道一选了一个并排的座位坐下。课程开始了，有高一还有高二，不过我发现比想象中的无聊，都是一些我在科普网上看到过的一些大众性的东西，一点也不够深入，有点想睡了，不过我不明白，为什么会有一个人如此积极地进行提问。“道一，你觉得这课怎么样？”“挺无聊的”“你平常见过这些东西吗？图书馆也没这么新的东西吧。”“当然是用手机看的啦。”“你周末回家的时候？”“当然了，我也没胆大到把手机带过来”“你不玩游戏什么的吗？”“我的手机是父母不用的旧手机，只能玩一些老的单机游戏，不过现在那些游戏我的手机根本运作不起，而且wifi也是靠蹭领居家的网络，流量还是挺贵的。单机游戏，我大概初一的时候就玩腻了”“单机游戏的确是这样”“现在除了上上网，看看书也不知道那手机还能做什么？”“你平常看的那些书，其实有电子版的”“我知道，不过还是要收钱的吧，虽然比实体书少一些就是了”“不会的，你可以不去专门性的网站，有很多免费分享的平台。”“是吗？我有时间去试试”“电脑你有用过吗？”“上信息技术课的时候吧。”“在家呢？”“我父亲有一台很老的电脑，基本是给他拆开再拼回来的，根本没怎么用过，不过我不在家时，可能开启过我不知道而已。”“你爸是个什么样的人呢？”“一个非常珍惜电子设备的人吧，有一次，手机换脸盆，我家有一部按键的，基本没什么用的手机，我母亲想把它换成实用的脸盆，但还是被我父亲给阻止了”“真是有趣呢！” 在愉快的对话之中，3D打印的讲座不知不觉的结束了，当然，我们只是窃窃私语而已。出科学楼时，大多社团摊位已经收起来了。看来下一次干脆还是来看一看吧。“下次真不想再来了”林道一还会抱怨了。“估计也不会有下次了”“是吧” 四、团队 星期三的中午，在阳台上，我问林道一“接下来的两天半运动会，你要干什么吗？”“我们班积极性不高，抽签决定项目，我被派去参加三级跳了，你呢？”“我们班参加的大有人在，活跃积极，我连插手的机会也没有，不过我也没打算参与，不过每天要写广播稿件有点麻烦”“你负责写？”“全班没参加的都要写”“投稿数量有限吧”“所以多的刚开始就被剔除了，我估计我就是那一类人，稿件不嫌多嘛！对了，你们订了怎么样的班服呢。”“班服？”“就是运动会时为了体现凝聚力买的，不是有一张纸吗？”“我们老师说穿校服就行了，不过我们班中好像有几个人想自己买，不过老师说无所谓。”“我们班还要去全部人都买呢？”“一位也不便宜吧”“这倒没错，跟校服差不多。我更明白了，你们的班主任真得明智许多，一件校服外套加校裤，一百多元，就每周一升国旗的时候穿的确有些浪费，拿来利用还是比较好的。相比之下，我们班的少数服从多数都是让人头痛。让我有点明白《乌合之众》所表达的一些东西了。”“《乌合之众》是什么书？”“你没看过？是一本讲大众心理学的，有时间可以去看一看，我挺喜欢的。”“好吧” 操场的主要部分是8条400米跑道。窄部分，一边是通往教学楼的天桥和体操用的沙坑，另一边是宿舍和食堂，宽的部分，一边是举行大型典礼，比如开学典礼的体育馆和没怎么用过的后门，与跑道之间夹着篮球场，另一边是观众席和中间夹着一个主席台，斜的观众席后面也有一个短跑道。高一、高二和初中分别在主席台两边，后面是给高三的，应该是为了给他们一个安静环境迎接高考，跑道中央有一片草坪，似乎是用来踢足球的。其实高中的体育课，跟自习课没什么区别，不过每次还来操场上点个名签到一下是很麻烦的事，当然也有许多活跃操场的人。体育课一般是最后一节，所以我一般都是利用体育课提前去食堂吃饭，实在无聊，也就走一走吧，看看大家都在干什么？ 运动会的开场白也是多得麻烦，各种宣誓和代表讲话，我跟没听一样。早上都是比较多事的，因为刚开始吗？道一下午又要去参加三级跳，看来第一天，只能我自己一个人四处逛逛了。田径也就两种比赛，径赛无非就是各种各样的跑步吧，田赛就丰富了，有跳、有蹦，还有扔的。所谓的大本营暴露在太阳之下，即使有人撑伞，也遮不到我，所以随便地稿件写完，就待不下去了，想四处走。走了走，发现也没有想象中那么有趣，要么就是像我差不多的新手，要么就是运动员级别的。运动员级别的很多细节又看不懂，就看谁做出来多少成绩，感觉和做数学题直接看答案一样，没多少意思。不过大家能做到的也就这些，看别人出丑来娱乐自己，或是为专业级别的结果而惊叹，看客大概也就只能看到这些吧。果然对于几秒就结束的田赛，的确没什么感受，可以看的大概就是径赛了，至少过程还可以看看谁超过了谁，虽然都是跑步，但还是有一些过程感，大多人应该都是这么想的。看一看后援团的安排就可以明白，欢呼喝彩最多的也是径赛，因为田赛才喊几下，我们的队员就一轮结束了。不过我对径赛，其实有点不太喜欢，还是因为差距。特别是跑上千米的比赛，要么就是哗众取丑的慢跑，要么就是拼老命跑到最后，再在终点呕吐，只有几个体育兵的比赛比较像比赛吧。不过大概可以明白，像我一样不怎么运动的人非常多。说到底，这运动会只是学生的一次娱乐放松吧。 晚自习的时候，有不少人请假还有几个人叫苦连天地抱怨自己有多累，你们不去参加就行了嘛？不过比起他们，我连挑战的勇气也没有，准备来说，我只是不太想浪费时间而已，反正也拿不到好名次。但是你觉在操场上走来走去真的好浪费时间也，不过我边不好学有些人在教室学习，还是明天去找道一说话吧。 第二天，我试图邀请他一起四处边走边聊，不过他说“真不好意思，我被叫去给跑道撑护栏了”“就是防止学生乱窜在跑道上的护栏，不应该很早就安排的吗？”“我不清楚，反正就是有人跟我说，我没写稿件，无非跳了几下，不如去办点事。而且，反正我也很闲，做一点也没什么关系，也就一天半。”“这样啊” 说实在的，我也不太想在操场上呆了，因为我还看到有人在操场中间的草坪上跑着在跑道上跑步的人，当然，他们跑的短了许多。我当然就只能逛学校了，现在六中和皇清的学生基本集中在操场，所以其它地方基本都比较安静，也发现不了什么新东西，只不过去皇清中学走一走。皇清中学并不是很大，食堂、宿舍、两栋教学楼基本接得很近，没什么大片的空地，不过初一、初二教学楼交接宿舍前的一片空地似乎正要改建为皇清中学的操场，看这大小只能200米吧。皇清中学从名号上看，没什么可圈可点的地方，就只是与六中通过两扇门与六中相连而已，不过有一条小道可以通向六中校门，初三教学楼与初一初二之间，有几个乒乓球桌，停车也基本在这一块地区。好吧，基本也没什么新奇的收获。 结果这两天半以来，我基本都是在无用的漫步，自己都不知道自己在干嘛，感觉比参加比赛项目还浪费时间。运动会闭幕之后，举行了一个教职工接力，而且只是4x100的几个年段互相竞争，虽然大家都情绪高涨，但是不太明白与前两天的有什么区别，只不过是换了参赛人员，却比这两天以来更多的观众，大家都在围观吗？下午就要回家，所以也没有意思与林道一会和。运动会正式结束的时候，评选了各种东西，竟然还有一个组织奖，真不知道有谁在观察我们的组织情况，具体情况，谁得了什么我就真的记得不太清楚了。反正我无聊地渡过了。 五、生活 这一周，从周一上午到周五下午，我们学校全部高一学生要去社会实践，说得很好听，但不过是在一个社会实践基地的小空间里，而且还上交了五百多元钱。大概伙食费占了大部分，还有一些就不大清楚了。在这过过日常生活节奏快，基本没有自由活动时间。就是一种对集团军队生活的模拟，食堂也比学校食堂安静许多，早上要把被子折得四四方方而且要在十分钟内完成各项工作，不过大多数人都是提前起床完成。每班有一个退休军官带领，进行站军姿、走齐步之类的练习，还有走路时声音要又齐又大这个奇怪的要求。偶尔参加了一些走绳索、爬墙、翻墙之类的活动。比较大的，一个是登上，早上出发上山，在山上吃午餐观光，下午再下山。洗澡用的是大众澡堂，很多人都是穿着内裤进来洗，真不太明白男生之间有什么好害羞的。当然有些人比较极端，这五天来没有洗过一次澡、换过一次衣服，当然我比较明智，基本没带什么东西，因为被子、枕头什么的都会提供。令人发笑的是，有人带来作业没时间做带来飞行棋之类的没时间玩等等。还好我一直就是比较喜欢轻装上阵。当然，这里有发一套统一的军装，所以我备用的衣服也懒得换了。还有一次较大的活动，就是周四晚上的晚会吧。其实展示才艺的都是本校学生，全过程下来，唱军歌才是主旋律，其实，我对唱歌、跳舞之类的实在没有太多兴趣。对于那些吼出来的军歌，我也只是在班级里滥竽充数。最后一次，星期五上午，还举行了拔河比赛，我只是一个无聊的看众而已，最后当然是一个类似于阅兵的成果展示，实在是没什么好讲的。星期五中午算是最后的午餐了，就是比平常丰富了一些而且。整个流程下来，感觉不到多少新鲜的东西，中间还有一些自由自在的老师们，不过他们也只是拍照的罢了。虽说是社会实践，但我感觉，除了上次登山，没有一次从这个基地走出去过，当然对于其它学生有乐有悲吧，听说还有几个学生受不了训练，中途回家去了。说实话，真的挺无聊的。 一回到学校，我自然约林道一在阳台说话，问他“新县的社会实践过得怎么样？”“反正发生了很多事，非常累”“是吗？我可得好好听听了，我感觉自己在那像尸体过日子一样，要不吃块新县方糕，讲讲发生了些什么吧。”我把买的一些新县方糕给他了一些。虽说他们宣称是特产，但除了贵一些，感觉跟普通的方糕没什么区别。他们也真是的，最后走的时候还要赚我们的钱。买都买了抱怨也没用。 “首先是，刚到那里的时候，教官叫我们帮女生拿行李到她们的宿舍，本来我也想去看看的，但是想到我们班男生比女生多，应该会有多，然后我竟然犹豫了。结果，其他人单单就把行李全领完了。本来我还松了口气，因为我不知道该选择哪一个，没拿就算了。可是，结果教练竟以我们没有心肠，而罚我们做体能训练，真不清楚他在想什么。”“不知道该说什么，但应该会发生更多的事”“是的，我们班的一个人因身体不适而中途离开，教官说，为了悼念牺牲的战友，又一次体能训练。还有一次，进行东西大查收的时候”“当时，我没带什么东西，所以没太关注”“他说，我们班每搜出一个违禁、扰乱军规的东西，就罚一套全体体能训练。还有一次，是思考很久才得到结果的事”“什么呢？”“就是登山后，教官说我们忘记出发前他说的话了，又罚了一套体能训练，结果带着一身酸痛去参加晚会。后来才明白，我们在山上，去上厕所和做一些其它事时，没向教官报道就做了，所以才被罚。”“其实就是一些提升身体素质的事，也没太大关系吧。”“这倒的确是真的，不过让没怎么锻炼过的学生，进行这种程度，实在有点痛苦，不过多亏了初中为体验考试而参加的各项活动，不然真的会累死的。”“人一有话就喜欢发浑吗？”我自己低吟道，林道一问“你说什么？”“没什么大不了的，除了体能锻炼，没有什么其它的吗？”“在那种地方不会有什么其它事吧”“的确” 不久后的几天，迎来了两天长时军训，是的，只有两天，本应该开学就进行的，学校接口是说军队要去参加附近市举办峰会的保卫工作，时间比较紧，但是实际情况，谁也不清楚。尽管我很喜欢调查，但总有一些东西是调查不出来的吧，只能靠猜测了。军训其实还好，经过社会实践后，大家的士气高昂，精神振奋没什么问题。不过我们的教官，对我们走步声音故意弄大，提出其没必要，我们说这是之前在社会实践中学的。他说那些都是旧时代的老兵了，思想不够，现在真的要弄出声音，都是靠鞋底安一块钢板来发声。我们也只能欣然接受，并受到了一种新的训练方式，这样看来新县社会实践不过是去玩的吧。大概因为许多错误的做法，学生也渐渐忘记了新县生活，原来在新县培养的大声说话，积极问好的习惯，也渐渐消去，可能是因为校园气氛，又或者是那一套在学校不太适用的原因，结果社会实践的影响几乎不留了。 当然，林道一又来找我抱怨，说这个军装又用了一百多块钱，才穿两天，因为上课也不可能穿军装吧。我也就听一听应和一下，林道一找我抱怨的次数的却在不断增加。说实在的高中发生了许多事，又似乎没有发生过一样。 六、舞台 音乐课也是和自习没什么区别，听听歌，随便在一本课本上画一画，太多同学还是在做作业。听说有一个学校组织的会考，不过通过率似乎百分百，真不明白到底要不要学习了才能通过。以前是这样，但最近几天并非如此，因为歌咏比赛要来了，所以最近的音乐课，变成了训练时间，我既不会钢琴等乐器的伴奏，又不会指挥，当然只能呆在群众之中了。大概要唱两道，一道是校歌，一道是充满正能量的歌。他们歌是怎么选的我不清楚，我也是拿着歌词和同学一起唱，也没有标题，不知道在唱什么？大概是红色歌曲吧。我也尝试着为班级做贡献，稍微提高过声音几次，也唱一唱，不过被领导级别的同学阻止了，说我可以小声些，也没说理由是什么，结果我只不过是在其中对个口型吧。做个装饰品就算了，竟然还要侪，就是买班服。上次运动会的时候，开学没多久，天气还比较热，而且又要运动，所以买的是短袖，但如今快12月了，在舞台上站着不动，容易发冷，所以有得买一套区别于其它班级的外套了。我也不知道她们在争什么，明明是唱歌，都穿校服也没什么关系吧。重点在音乐吧，但是同学们并没有这样想。 我也问过林道一一些情况，不过他从一开始就发声不是很大，也就正常的滥竽充数，没像我一样被警告什么的。他一开始就对唱歌不太自信，也只能这样做吧。我傻傻地去尝试，真是自找没趣，反正结果都是一样的，学林道一多好。不过，林道一又向我抱怨买衣服的事，说才开学没几个月，就买了不少奇怪的衣服，不知以后会怎么样。我就安慰他说，以后学习为重，不会有更多活动了。但是，以后的事真的什么都不清楚。 时间很快过去了，一眨眼就到了表演的时候。虽然全过程，我都只是跟凑数的没什么区别，但我还是认清了同学们的艰辛，所以即使是对口型，我也在尽力地做。听说以后活动会越来越少，为了不在悔恨，还是稍微努力一些比较好。台上一个班级十几分钟就结束了，十四个班级过去，竟然也用了两个多小时，晚自习当然同时被冲掉了。虽然这次没做成什么东西，但是我突然对学校年末的元旦晚会有点感兴趣了，晚会当然是在元旦前的一个周六晚上举行，就当是晚自习也没什么关系。 其实，我以前对各种像春节联欢晚会之类的表演不太感兴趣，认为对我的志趣没有较大的促进作用，经过这次歌咏比赛，我觉得还是去看看吧。看看我们学校有多少隐藏的艺术能手，也去获得一下我不大清晰的美的感受吧。 看一下节目单，全名叫元旦晚会暨社团文艺表演，合并现象到处都比较常见。基本所有晚会都是相声小品、唱歌、跳舞之类的，变化的是内容，我们的元旦晚会也涵盖了各种方面的内容，有些是社团进行组织演出。不过高一是有组织地去观看，占据了中间最核心的位置，后排还有一些高台座位是给其它人坐的，当然包括高二、高三的学生。对于各种各样的东西，说实在的我不太明白该怎么进行鉴赏，音乐跳舞什么的实在是不太懂，相声小品之类的有点内容，还是有点看头。我突然想了一下，这些人平常都在什么地方训练，感觉没怎么见到过，不过自从遇到林道一以来，我的生活轨迹基本没有什么变化过，上课期间，就算自习课，也基本都在教学楼，大课间操的时候，也没像其它同学一样去食堂买些鸡排之类的小食品，感觉自从上了高中，生活变单调了好多。以前小学的时候，没有什么晚自习，上下课直接又不是很长，所以总是在回家不是很远的路上，走路远超八倍的路程，都归于四处探索的原因。以前探索的都是广大的世界，但越到高中，我们的生活方式就越发单调，对未知事务的好奇也在不断消失，每天都做着为了打好基础的重复训练，目的为了达了一丝不苟的完人。虽然高中似乎学得很广，有如此多科目，但与知识海洋相比，不过是沧海一粟。就算在单个科目内，我们的知识也只限于课本及课本所衍生出来的无数习题。可怕的不是重复本身，而是我们竞习惯了重复，并不法自拔。 啊！我是怎么了，就是看一个小品，我就成这样了，刚刚都演了些什么，感觉才走神一小会，剧情已经推进了好远，无法跟上了。想找人说话，但是各个班级是分开坐的，中间隔了一个二班，也没有办法与林道一说话，我唯一能做的，也就是继续盯着舞台吧！从舞台之中，我心中又涌出一股感觉，我们观众在座位上一动不动，仿佛被限制了一样，但是舞台上的同学却在不断地自由自在地挥洒自我，展示魅力。这正是被囚禁的人看着自由人却无动于衷的感觉。但这是因人的追求而产生的差异，像我这一类人就是那么对万物都百般无聊的感觉。但舞台上的人，为了不负青春，勇于走上舞台，并为了走上舞台，在背后进行了无数的练习，我真能正体会练习这个概念是在歌咏比赛训练的时候。因为我以前就没有做过练习，为追求什么而努力过，所以自然无法练习的艰辛。当然看出算不算什么练习吧，只能算一种消遣时间的娱乐而矣。比起舞台上的人，我与他们的起点又差了很远，每当看到舞台上与自己年龄差不多，但却比自己出众时，就会情不自禁地称对方为天才，并贬低自己没有才能这种东西，但是天才究竟是什么呢？一出生什么都会？但这种人估计是不可能存在的吧。学东西很快？这应该可以勉强算上，但其中也涉及许多因素吧。比如自己的意愿、学习的方法等。在我看来，人唯一的天赋就是对未知事物的好奇吧。有的人对音乐好奇，就去学习理解，结果在音乐上颇有造诣，有的人对钢琴感兴趣，但是家庭条件找不起教师，买不起钢琴。所谓的天赋也渐渐被抹杀了。但价值观的差异，也是一个很大的障碍吧，孩子往往是好奇心最旺盛的时候，但也是自我能力最弱的时候，处处都要受限于父母，父母的价值观多少会影响到孩子吧！糟糕，糟糕，演出快要结束了，我到底看了什么。真的没有一个节目是完整看晚的，总是会不知不觉地去想别的东西，是对我太没吸引力了吗？不对吧，很多同学都看得很认真，特别是对舞台上的表演者。至少让我把最后的大合唱给完整的听完吧。看文艺之类的东西还真是会让人浮想联翩，看数哲之类的书都未曾这样过。不对，只是不会有如此大的主题跨度而已。相比于舞台上的人，我是不是缺乏勇气呢？ 七、整齐 不久又要召开春季运动会了，本来听说，春季运动会应该有各种各样的花样。不过，我们是特别的一届，所以今年春季运动会改为跑操比赛，真是个好理由。跑操是除周一升国旗和下雨天，都会占据大课间一段时间来集体跑两圈的群体跑步。只有两圈800米，比中考的长跑还少了两百米，当然对男生来说。其实这是比较突然的，平常大家都在体育课练跳绳，听说是为了春季运动会做准备，结果一听改变了，立刻就变成了跑操训练，为了达到目的不择手段，大概就是这么一回事。 林道一也来跟我说话，当然这次终于没有抱怨了，“听说到要进行跑操比赛的时候，我就想是不是又要买班服了，不过学校要求穿校服才让我这颗心给放下了”“这确实不错，希望上次歌咏是最后一次买统一服装吧”“这样最好了，说起上次歌咏，我突然想起了我们的英语老师，下午又有她的课了”“我一直很好奇，你为什么对那个英语老师害怕的感，趁现在有时间说一说吧”“其实没什么，只是她搞了许多麻烦的东西”“又不是班主任，除了给你们上课还能干什么”“她是二班的班主任，而且同学们都爱执行，当然可以为所欲为了”“到底做了什么呢？”“她说，为了活跃课堂气氛，所以设置了一个分数体系，上课主动答一次题加一分，被叫到又答不出来就扣一分，她说英语就靠自己去读，所以上课基本是题目组成，一周下来，至少有百来的分数”“分数有什么用呢？”“没什么用，只是分数后几名的要罚去唱英文歌。在大家面前，大家最爱看这种东西了，所以上课的时候的确异常活跃。我算是那么总是垫底的人吧，不过也有几次打了擦边球没被罚。所以歌咏，我也从一开始就没怎么认真过。”“你的事情还真是丰富啊！”“有趣的东西到处都应该有，只是你大概缺乏感受吧。”“是这样吗？” 跑操比赛的训练，有有趣的东西吗？我似乎有点忘不了林道一说的话。从初中到现在，我的活真是小的可怜，以前小时候还好，越大视野就越狭窄了。初中前一段时间在家玩游戏，但一个人越来越无趣的时候，就去书里寻找伙伴，但总感觉小说非常的平凡，一大段一大段的文字真不太习惯，后来发现数学的符号让我很是着迷，数学家里面有不少哲学家，像笛卡尔之类。所以我也看过哲学类的书，但是真的看懂了没有，就不大清楚了，只知道里面有些看起来有些高深的词语让人很兴奋。话说最近好像很喜欢胡思乱想，到底是什么时候开始的呢？现在应该专心跑操训练才对。 不过我怎么也感受不到一些有趣的东西，最后还被叫下来和周围的几个人练齐步，好像就因为我一个人走不好，连累了好几个人，都那个胡思乱想才对。最后当然因为要下课，监视的人急着去吃饭，也就草草了事了，不过还不忘提醒我，让我去独自多练一些。我一个人又能练什么，她想过没有？ 不过，我还是有去认真练一练吧，跟着我自己的口号去练，也稍微比别人多花了一些时间。在集体里面最好还是不要与集体的理论相悖比较好。不过最近还是越来越喜欢听林道一讲故事了，虽然是在听，但不知为什么想听，听了却没什么感受，仅仅只是想听而已。不过他们班纪律严明，跑操也只是正常的在跑，并没有发生什么大事情，的确让我有些扫兴，但事实就是如此，无法改变。 虽说是跑操比赛，但无非就是绕操场一周一个接一个地跑，在经过主席台前喊一个口号，各种各样吧。然跑完，还有一个评选排名的活动，不过人都部在主席台上，真的可以看到全过程吗？而且他们评判的标准又是什么呢？不过大多人，也只是关注最后的结果，它怎么产生的是无所谓的事情，在他们的眼里，排名从最后往前念是激动人心的，当然是从有奖的最后开始念，没排名的也就算了，因为这样也才更有感觉。不过，我真没什么想法，结果都已经条好了，先念后念又有什么区别，不如一下子将结果全展示出来，这样方便多了。不过这里也没有什么大屏幕，只有广播在工作。 听着有人因为念到自己的班级就群体大声欢呼时，我只是不解。首先，他们欢呼的是什么意义不明，只是一声奇怪的噪声。其次，欢呼也不会造成什么巨大的改变吧，不过大家都喜欢，我又怎么能去干预呢？结果，这次又是一事无成吗？又找不到乐趣所在吗？ 八、心灵 基本过一段时间经过教学楼前就会有惊喜，这次又摆了不少立体牌，上面有心理学现象的一些图片、一些学生漫画、心理剧剧本等，还有一墙高考祈愿墙，写着学生们的寄语，高一也终于要结束了吗？看来是心理协会开始工作了，其实心理课感觉上并没有上过几节，上的话也只是看了些视频吧，也没有课本什么的。不过高一一过，有些课程也快没来，比如心理、音乐、信息技术。信息技术还有一个学校举行的会考，当然是轻松通过了。不过在提倡德智体美劳的社会背景下，体育还是不会取消的。不过心理相关部门，举行过像心理征文等各种活动，我都没有参加，不过心理相关部门占据了图书馆大楼的很多部分，大概是五、六两层楼。心理咨询室，我当然没怎么见识过，因为我去的时候基本都是关门的，心理协会似乎有一个专门的报纸叫“心苑”，不过也只是在校内发送，好像还要从班费中收些钱，然后随便往我们教室扔上几张，四开的纸，各种心理协会的活动获奖名单和宣传就占了一个版面，也收录了一些学生的征文，当然都是阳光向上的漂亮话，也附一些心理学的相关知识，和对学生遇到问题的解答。心理学也是哲学相关的东西，我也了解了一些，很多就是由各种实验及所得出的象现结论组成。我对自己的心理，也不是很了解，但我也不太想去了解，也没有了解的必要。 不过林道一很惊奇，问我说“为什么我连参加的消息都没得到过？”“应该每班都会分一张活动介绍，不过我明白了，照你们班这样中央集权来看，估计被处理人员领回来时，就开始内定了，她们可能认为班级不会有多少参与者”“可能的却是这样，能解释的通就可以释怀”我走到心理剧展示区，说“这里，有你们班的心理剧，要不要看看？”“算了吧，到时候看表演的时候再看就行了”“你不知道吗？这边的只是入选的剧本，到时候要进行一次预演，通过的班级，才能在心理剧舞台上表演”“额，我还真没听说过，不过也还是算了，一部剧不能只看剧本，也要从道具，演员等来评价，无法通过预选的也没必要看”“是吗？我对鉴赏没什么概念。”“看的舒服的感觉总会有吧”“或许我只是没感觉到” “话说，你有看过小说吗？”我问道一。“以前的时候，就是初中时，我用手机看过许多网络小说，大概也只能做这些事。最近，我们语文老师，推荐我们去看一些古典小说，而年段不是曾经发过一张书单吗？我用大概在沿着书单看书，还挺多的，有时间看一看”“又要看数学相关的不写吗？”“对自己爱好的东西，做起来和休闲没什么区别吧，而且平常同学说话，我也插不上嘴，只能看看书了。上课学习算是一种苦，看书就是一种休闲。”我沉思了一下，大概我平常有没怎么上过课，觉得并不是很很劳累吧。因为一直处于休闲之中，所以微小的痛苦也就呈现了出来，所以看一本长篇才会觉得难受，不想看吗？但是我为什么会想看小说？应该是受平常考试语文试题的影响吧。林道一正在看心理协会所摆的其它东西。看着他，我不经又比较了一番，我和他在班级都是比较沉默的人，都是经常看数学题休闲的人，但是他似乎比我更容易发现琐事中的美好。我却一直抱怨生活无聊，并且一直无所作为。其实，林道一也就在与我说话时比较能言善道。他根我说过，他非常不善于主动找别人说话，总会有各种各样的顾虑，生怕自己犯错，惹别人不高兴。也曾有几次，有人找过他说话，他当然很高兴，甚至为有几个能说话的人，而洋洋得意，沾沾自喜。但是那些人很快因与他志向不和而渐渐远离他。而我的情况不太一样，不是我不会找人说话，只是我认为我不想和他们同流合污，远离他们的是我自己，认为他们很无趣，做些无趣的事，于是我也只能在自己的小天地里找乐趣。学一个新来的名词，或做出一道难题就是兴趣之一吧。林道一说，我找他时，他很开心，也想谨慎地维持关系，但他后来发现是多余的，同道的人怎么走都会不自觉的会到一起。我大概因为总能从他那里听一些有趣的事，挺开心的。心理实在太复杂了，我不明白该如何去改变。 一个班只能交一部心理剧本，所以当然由负责人员内定组织，所以我对情况不是很了解。但还是像元旦晚会一样地去看一看吧，当然也是由年段组织进行，我相当于又是一个人在看戏了，没有交流说话，跟一个人没有什么区别。心理戏时间不长，一个班也就十多分钟，入围的班级也只有八、九个，不大清楚。但主题基本都是一样的，与学生生活有关的烦恼与解决，造具当然也不是很复杂。比如一个门框就可以当门，连墙在什么地方都看不到。不过有一群辛勤的后勤人员值得赞赏，场景变换的时候，幕没有拉下，但他们行动敏捷，如安排那样，撤下旧道具，换上新的布置，几十秒就完成了。对于演技什么的，我是看不出什么，我是外行人吗？结果，我终究只是来看故事加配音，我不太懂配不配音对内容有什么影响。但对我来说，和看剧本没什么区别。不过这样看的话，这里更加糟糕，因为回看功能，一不小心走神，就会跟不上剧情，感觉和上次的元旦晚会差不多。不过还有一点，所有的剧情主题都一样，而这主题也正好不是我所需要的，所以这次真的比上次元旦晚会还要无聊了。这种大家都明白的道理，再演多少遍，变多少种剧情，都不会有太大感受。这难道就是所谓的缺乏表现力？不真正去体会一下课本所说的词话，还真的是难以理解。不过考试不会给你这样的机会吧，你无需去体会，只要不断去背这种术语，记住什么情况下使用就行了。大概就是因为平常的考试，我对文学性的东西没有什么好感，也就得过且过，跟着大众随便写写都可以拿分，虽然上不了高分就是了。这次的确是没有什么收获的无聊啊！ 九、竞争 关于学校特奥班的事，不过对外奥赛班被称为实验班，特奥班被称为零班，都是林道一告诉我的。我对这些不大清楚，只知道高一快结束的时候就要分班，林道一告诉我，在分班的时候也要分出特奥班。我和林道一大概选的都是理科。关于特奥班选拔考试，林道一说，从开学到快结束已经举行了六、七次了，不过我感觉没有听说过，还过忽然想起，班上有些人曾离开一段时间去干什么，不过高一事情这么多，也不敢肯定是不是去参加选拔。我在班级成绩属于中等水平，估计也没有什么，机会去参加吧。不过我个人也没怎么感兴趣，根据和林道一的交谈中，我大致明白奥赛班与普通班的区别只是人员组成不同。但对于像我这类本身不怎么和别人交流的人来说，在哪里都没什么区别。 奥赛班的人都要参加选拔考试，考试的科目只有数学、物理、化学。生物一直被人们认为理科中的文科，所以并没有列入考试范围。到时候，老师们会根据同学们选文科或理科来决定看哪些成绩，理科特奥要全部，文科奥赛要看数学。值得说的一点是，高一的时候，文理还没有分科，所以只有奥赛班与普通班的区别，当然奥赛班主攻理科罢了，这是我们学校的强项。 林道一还告诉了关于竞赛的事情，如果不是他说，我还真不知道高一还有竞赛这么一回事。高一的时候有数学竞赛，但和高二的还是有本质区别，重要的是知识容量。当然都是省内的预赛，高一之中只有全省前几的才有可能去参加全国竞赛本省赛区的初赛。虽然平时，我经常看数学竞赛相关的书，但我对竞赛本身并不怎么敏感，反正和高考一样都是考试，能少考当然就少考了，我只是单纯对知识和题目感兴趣而矣，根本不通过考试去表现自己。林道一说得非常传神，说在初赛拿一等奖，可以去参加各高校的自主招生，如果在全国决赛拿一等奖，绝对保送清北。高一的时候还有一个化学竞赛，也是省内自己搞预赛，好像还要选两次，第一次高一高二全都参加，考同一张卷子，先以市内筛选一波人，然后第二次再筛选可以参加全国初赛的学生。不过，我觉得高一去和高二竞争，实在有点不大可能吧，这是经验积累上的差异。当然，一般学生好像都不大清楚这些事，只是学生没有去了解，老师也没有对他们讲而矣，竞赛是对所有学生开放的。 林道一平常那么怕生，这次竟然两个竞赛都报名了，当然也有不少同学培他一起去。因为都是听他说的，所以很多细节并不清楚。因为化学和数学的初赛都是九月份，也就是刚升高二后不久，化学又有两次预赛，所以化学举行的比较早。对于林道一的学习情况不大清楚，只听他说，他去和高二的一起听历年竞赛试卷的讲解，自己也在背后着摩了一些。他学数学的，所以他说自己很多都没有学，比如物构和有机，但他又说自己慢慢进修，多少看出一点东西，但真假我就不清楚了。然后竞赛当天，星期天早上——这是专门设计的，当然是为了不影响学生正常作息，他和高二的还有一些他们奥赛班的几个同学一起去了市内参加竞赛，就是去考了一场试就回来了，不过他回来又是一堆的抱怨了。 首先，他通过对其它学校的观察发现，有几个比较顶尖学校，比如一中，竞赛培训从初三就开始，初三将高中学完，高一就开始搞竞赛，而我们学校正好今年不搞这方面的内容了，听高二说是付出与回报对学校来说不划算，以前竞赛随便拿一个市级的奖就可以加分，但由于其功利性太强，被教育部门给取消了。同时要拿到省赛一等奖才真正有些回报，但全省竞赛强校太多了。虽然六中放在区内还行，但一到全省就并非如此了，所以六中就将竞赛任之由之，老师想讲就讲一讲，学校主攻方向变成了高考，而我们这一届正是学校的转折年。还听说，初三进行人才选拔下一年似乎也要停止了。就是说，不会再出现像林道一那样初三的时候换学校读的情况了。所以道一说他的竞争对象不仅是高二，还有那些提前学习的高一，想要拿到全市前几十似乎不大可能了。后来，事实也的确如此，不过道一在参加考试的近一千人中，排名前二百多，也算不错，但要进行第二次预赛，要全市前六十左右。不过他并没有气馁。 他说，他要在接下的数学竞赛中拿个市级奖，按照分配至少前八九十才能拿一个三等奖，不过只有高一就是了。他说，这是为了高二的时候做准备，先来个小前进，我问过他他同学对此事的态度怎么样，这其实我很想知道。他说，他的同学们也有参加，不过大多都是老师指定一些来补充人数的不足。不过后来老师也没提了，学生们大多数因为平常繁忙的功课，忘得差不多了。报名与正式比赛那之间有两个月左右。林道一学习任务许多，但他同学之中大多都没有他想象中的那么繁忙，他们上课期间认真听，自习认真做作业，但课间，还有回家都在四处游走晃动或者在家玩游戏。林道一就有些不懂得劳逸结合，体育课大多都活跃在操场，他却在不舍地完成任务，我真的很担心，他不会有什么事吧？也的却没什么事，安心地撑到了竞赛当天。不过林道一给我讲了一个有趣的现象。当老师通知完明天去市里参加竞赛时，大家纷纷拿起很久以前分的往届试题来做，还有人说一晚上要把它做完，但事实怎么样谁也不清楚。 林道一考后情况又是一肚子的话往我这里散，这次他不抱怨别人，开始抱怨自己，说他一直专注于增加区分度的后两道题，一道几何、一道组合，在高考标准课程基本不会教的东西。学校都不搞竞赛，老师当然不愿意交了，因为对他们来说，这只是上班，谁又愿意加班呢？结果林道一前面比较基础的东西做的比较快，很多答案都是用错误的条件解出来的。但结果出人意料，道一还是拿了一个三等奖，但是他们班还有一等奖，一等奖当然并不是全市第一，而且在全省上排名也不是很靠前。所以最后大家就是得到了一张奖状而且。林道一当然比较不舒服，说自己应该还能更高的。我也只能安慰他说，还有高二呢？不过值得一提的是并没有高三了，高考是其中主要原因，但还有一方面是因为是，就算高三参加了预赛，到初赛的时候已经上大学成年的，不符合参加全国初赛的要求之一——在校高中生。他听完后，也没什么表现，我也不清楚，就当他已经调整好了心态。 特奥班的选拔，对林道一来说当然不是什么困难的事情，他成功地以第二名考进了特奥班。分班的时间是在高考后，中考时。高考的时候，当然放假了好几天，但中考也真是奇怪透了，皇清中学还有一所其它学校在六中考试，而我们高一高二要搬到皇清中学来上课，与两天的高考不同，中考有三天被充分的利用了起来。分班是在最后一天的最后一节课完成的，根据文理科进行了学生和老师的分配。我还是被分到了三班，但是老师变了，值得一提的是我们的历史老师也就是我们原来的班主任变成了11班，也就是文奥班的班主任。十四个班级的数量并没有改变。但是二班人数也就是新的特奥班只有31人，一班变成了一个拥有全年段人数最多的班级。林道一说了一件令他自己害怕的事他的班主任是二班的英语老师了，他还说，他开始对未来充满来担心，令人惊奇的是有一个5班的人进了特奥班，他是二班中唯一一个不是原一班、二班的人。当然也扩充了几个其它班的人就是了。不过让我有点欣慰的是我和道一的班级距离变近了许多。 十、挑战 我现在想要的是找到乐趣，虽然应该不会有林道一那么好的发现能力，至少一两件也好。现在是中午，高一即将结束，林道一在图书馆的工作变忙了许多，还要去学生还书，不过这并不是他的工作，他也不大可能做这种事情，他能做的只是排书而已。现在，我只能百般无聊的四处游走，企图发现一些新的东西。经过高三教学楼一楼的一间教室时，我发现有三男一女在里面交谈，忽然想起，那三个男的是我最初来学校时和我说话的三个人，名字我好像忘记了，因为那以后我们几乎没有交集了。这次我注意到了门上的牌子，上面写着“文学社”，他们在交谈着什么，干脆靠在门边的墙上听一听吧。 男声：“果然，你的确暗中利用了我们。”女声：“你应该第二次的时候就发现了吧。”“的确，所以当时我也专注于眼前的事，第一次本来只是因嫉妒一时冲动，没想到他又来找我，不过让我发现了你，才明白应该继续演下去。”“当恶人也没什么累了，其实你们也没什么辛苦事，最辛苦的还不是我”“我们也只想说着抱怨一下，不过让孔天远一直蒙在鼓里好吗？”“有些事情不知道才好，正是因为不知道，才更能激发心中的感情，写出优秀的作品来。”“是是，只是他估计不会想到他心中的天使原来是恶魔”“你敢跟他说吗？而且做坏事还是你们？我可一件坏事也没做。”“是啊，是啊，我们才不敢得罪你。”…… 孔天远，感觉似乎有点印象，好像是我们班的人。更清晰了一点，他跟我一样是课间在座位看书的一派人，我对同类都比较好奇，而这样的一类人又比较少，所以我也就顺势记住了，当然都是没什么交集，沉默就是我们最好的交流方式。感觉我似乎听到了一个针对他的计划的感觉。忽然听到，里面人站起来的声音，我立刻装成从旁边路过的行人。我平常不怎么待在班级里表现，他们三应该也认不出我。事实的确是如此，等他们离开后，我回到了文学社门前，门已经锁了进不去，但幸运地是窗户虽然闭着，但是并没有锁，我想试着去找一找有没有计划书之类的东西。我当然不怕学校的监控了，因为如果不发生什么大事的话，监控和摆设也没有什么区别，而且我又不是去偷东西，只是想看一看而已。还好现在才一点左右，并非学生上下学的高峰时期，所以我没什么好担心的。 里面的摆设也没什么复杂，就是书架、桌子、椅子，桌子的一角有叠着一堆纸，上面用重物压着，桌子正中也有摆，我走去看了一下，封面标题《无li之人》，右下的作者“孔天远”，原来是小说稿件。这标题真是有意思，第一次看到中英混合的小说标题。嗯，说不定只是我读小说太少了，语文老师讲鲁迅文章的时候，提过一部叫《阿Q正传》的小说，好像也是中英混合。啊！这都不重要，反正现在还早，不如看看，说不定可以发现一些有趣的线索。一口气就把小说看完了，也不是很长，不过我似乎有些明白了事情的始末。大概是，一个女子为了得到一篇充满真情的文章，利用三个男子充当恶人，给一名作家带来苦难，以此来激发作者创作。好像挺有意思的，无过“无li之人”记述的事是真的还是假的。如果是假的话，前后就解释不通了。要不去找那个孔天远试探一下吧，我将布局摆回原样，前往教室找孔天远。 现在是中午，在走廊，我就看到了座位上的孔天远。我用我那一套不成熟又大胆的打招呼方式，顺势就坐到了他的座位旁边，还没开口说话，他就说“同学，你坐错位置了吧”我惊了一下，不过离开回话“我只是想和你说说话”莫名其妙地谈起了他的小说。一会后，“你来不会只是谈这个的吧。”“是的，我觉得找到你，可以改变我觉得无趣的生活。以前觉得，得过且过也不错，但你的小说让我改变了。”“那种小说可以改变一个人，我都不这么觉得。”“读者与作者要有完全相同的感受是不可能的。”“你陈述你现在的生活，或许可以帮助你。”我把充满无聊字眼的故事讲述了一遍。他认真听完，停了一小会说“趣味不会凭空出现，你可以去发现或寻找，我觉得后者比较好”“寻找，具体该怎么做呢？”“比如四处走走”“我经常有在走。”“你要在恰当的时间、地点四处走走”“这非常困难吧”","categories":[],"tags":[]},{"title":"年末galgame总结会","slug":"年末galgame总结会","date":"2022-12-31T08:47:33.000Z","updated":"2023-09-03T13:50:19.751Z","comments":true,"path":"archives/2022-12-31-年末galgame总结会/","link":"","permalink":"http://example.com/archives/2022-12-31-%E5%B9%B4%E6%9C%ABgalgame%E6%80%BB%E7%BB%93%E4%BC%9A/","excerpt":"","text":"最近闲来无事，就着年末，来总结一下目前所推过的一些GalGame，并来选出一些个人偏好。首先我要限定时间为2017-2022年，并不是以前的不好，只是我们应该向前看，就我而言并不是很喜欢情怀这种东西，还有另一点原因是很多经典放到现在感觉基本被套路化了，现代的东西看多了，以前的东西就没啥感觉了，更何况还有画风差距摆在那里。在经典之作中，唯一让我印象深刻就只有Ever17了，它是一部强大的叙事技巧作品，说实在的到现在我也没发现类似的存在。不过说起2022，也没几部令人满意的作品，所以实际的时间轴基本是2017-2021，近5年的作品，算是一个比较好的数字了。接着，我要排除一些游戏性强的会社和一些特殊的会社，前者有a社(Alice Soft)、e社(Eushully)和戏画做代表，我只是想单纯的看故事，不想中间插一些复杂的操作。后者的话，就比较多了。第一，我想以“出名”来排除它们，比如Key、型月社等等。只是讨论的人太多，销量又高，我也没啥可以说的地方。第二，就是我的个人偏好问题了，比如下面这些会社都要排除，柚子社、颜艺社(ASaProject)、CUBE社、SagaPlanets、方糖社(Lump of Sugar)、Favorite社、SMEE、水晶社(CRYSTLIA)等等。为啥要排除呢？明明他们才是正统的GalGame，所以我想以视觉小说作为前提，理由嘛，其实很明显，对我来说过于催眠了，实在没有一下子全推完的劲。现在有两部作品，金恋(2017美少女游戏大赏剧情第一)和樱花萌放(2019美少女游戏大赏剧情第一)占着我电脑硬盘几个月了也还没推完。第三，就是画风，好像也属于个人偏好，比如InnocentGrey社三少女系列和NOVECT社的海市蜃楼之馆，它们一直都躺在我的移动硬盘里，碍于画风就觉得先放一放算了。不过像海豹社、妈妈累之类的油腻画风还是能接受的，不过它们基本都是无汉化纯爱系列，所以也不在讨论的范畴就是了，推嘛都能推，但时间有限还是得选点自己喜欢的才行，而不是别人喜欢的。因为时间我排除了tone work’s，没办法这个会社的作品都太长了，但确实优秀。第四，就是国产了，一句话概括就是，没盗版只能买，但又不想买，不过确实有几个让我关注的作品，等财富自由了再去体验吧。最后，我们不区分剧情作和废萌作，我知道他们区分的意思是什么，所有的视觉小说都是有剧情的，无非就是有时候像喝白开水，有时候像喝果汁。有时候喝了还想喝，有时候喝了不想喝，有时候还可能想吐。其实最近推了不少作品后发现，我喜欢那种，似乎有点什么隐情，又能在后面揭晓的作品，总之就是对神秘和异想天开的追求。至于煽情作嘛，玩多了，看多了，基本就没啥感觉了。其实我也很痛苦，一大堆GalGame放在移动硬盘里没时间推，更何况我还有好多小说漫画要看，其实每当这时，我不禁想有看的必要吗？又为什么要看呢？我稍微统计了一下，ACGN排除动漫，在几个硬盘里加起来内存3T多了，还不包括因为硬盘坏掉而丢失的。其实我并不是很心疼，反而觉得可以少看一些而松了口气。对于精密仪器(手机、硬盘之类的)反正也顶不过自然灾害，多多体会失去的感觉，对于锻炼精神力还是有些好处的。在众多限制之下，给出个人偏好如下，当然都是建立在我所知道的GalGame中，因为说不定真有我喜欢却没发现的存在。 男主：爱内周太女主：天童优衣感情：水葬银货的Istoria奇葩：拔作岛1+2推理：樱之云·绯之恋轮回：景之海的Apeiria悬疑：月影魅像-解放之羽-战斗：9-nine百合：青空下的加缪精美：创作彼女的恋爱公式 我喜欢的呢，是新奇有特色，有些东西一旦多，一旦泛就没那么有意思了，这就核心理念，我们以此为基础，来稍微谈谈我所做选择的理由吧。爱内周太是“爱因斯坦携爱至上”的男主，虽然我是被爱因斯坦给吸引进来，但其实它跟爱因斯坦没有半点关系，剧情没啥好说的，路线结构上和SummerPocket差不多但简化了很多，日常上也是新岛夕风格，剧情比较让我不满的吧，就是在FD中，干嘛非得在人物消失加个齿轮的设定，在那个故事框架下，连灵魂都能抓到，给灵魂加个生物肉体也不难吧，更何况在本篇的女主拖机器上怎么也看不出机械那般有力的感觉。首先我不会让男主来自乙女游戏、配角、双男主，并非我不玩这些游戏，这是个人的选择罢了。其次感觉就应该选他。最后没有理由，偏爱属于感觉，感觉就是真心。天童优衣来自“Butterfly Seeker”，为啥我会找到这个游戏，只是因为Silky’s plus出版过景海，被我给顺便给发现了，剧情没啥好说的，就是查案子找犯人，然后每次都是找共同点，再来一次犯人再犯而完结，特色在BadEnd和DeadEnd中，推理就随便选反正都会给你纠正回来。有一点值得吐槽的是，羽矢的立绘和HCG中胸的差距有点离谱。其实咱们是博爱的，平等的，对所有Galgame的所有女角色也是如此，所以我现在给出的说法是，这是我随机选出来的女角色，信不信就由你了。这是一个缺爱缺真情的时代，简单来讲就是因为不知道不理解所以才会缺少，于是我们赋予“爱”的称呼，因此有了博爱。你不会觉得我接下来都会给出这么无聊的理由吗？“水葬银货的Istoria”是我在纸魔社(ウグイスカグラ)中最喜欢的一部，也是我唯一一个能在所有知道的涉及感情的作品中能选出来的作品。像什么催泪啊，煽情啊，生离死别啊，迫于现实啊，无可奈何啊等等的作品其实多得数也数不清，真要选个喜欢的，哪里选得出来，因为这几乎是所有的作品都有的东西。首先，第一次抛弃会使女主完全脱离舞台。我不得不说的是有些作品有个特点是，进入女主线后其他女主就几乎没了存在感甚至都不露面，这是我很不喜欢的一点，但水葬却不会给我这样的感觉，可能这就是抛弃选项所给出的力量。其次，“眼泪”是整部游戏的主题。再者，反派给我的恐惧感，主角没什么力量搞得我一直担惊受怕的。排除猎奇和NTR作品，很多游戏女主被抓了都没啥好怕的，因为有主角光环，就算消失也是非自然的存在，但水葬的通篇都是人为，至于一点非现实的设定倒是无所谓，或者说正是有点非现实的设定我才可能会去尝试这类作品。然后，好多有立绘的角色和一条很长的非女主线。后者是大家所谓的真结局，真正让我惊讶的不是没带有一个真女主的真结局，而是它的容量还不小。其实没有什么所谓的真女主，只是她正好出现在真结局(TrueEnd)中。没有最后，喜欢就是喜欢。“拔作岛”我认为1+2才能成为一个整体，其实我很想选Qruppo在今年年初的新作“变态监狱”，但碍于画风一直没推，不好做评价。以我个人观点来看，拔岛的整体剧情属于正常水平，那个战斗啊、人物故事啊，实在没啥好说的。奇葩的意思是不同寻常、脱颖而出，在一个非拔作中，把性引入故事背景，将sex视为正经行为，又有满嘴涉及性的说话方式却又不像黄腔的普罗大众，到底怎么形容这部作品，恕我词穷了。其实，选中的原因也是新奇，但这种新奇特别在哪，以致于冠上奇葩之名呢？现实而非现实，青蓝岛在现实具有实现的可能，但又没有实现的可能，前者考虑的是物理条件，后者考虑的是人伦。为什么人只会在人少的时候谈性，是因为矜持吗？禁黄是可以理解的，因为背后会涉及地下交易，但这属于sex而不是性。我不得不说一点，性和sex是有区别的，我们以拔岛的世界观来说事，拔岛还有一个特点，就是深受青蓝岛文化熏陶的人，说话特点很有“性味”，我挺佩服拔岛1的翻译组，咱不说玩梗，因为我也发现不了，但说话的特色是真的翻译出来了。这和黄腔很像，但又不是黄腔，形容起来的话就是，性与对话混杂的方式，一个是融合，一个是插入。回到正题，很多人所认为的性话题，在我看来属于sex话题，这其实就是世界的另一面。以我的视点来看，可能是国内对黄的限制过于严格，导致大多人将性直接视为了sex。我直接说吧，国内的A片十分的无聊，在国内A圈逛多了就会发现，他们唯一能做的添加色彩的就是前后文。所以即使外国的有马赛克，也愿意选择外国的，这其实挺新奇的，国内禁黄但黄片限制却比国外更少，这就是错上加错。好像有些偏题了，但拔岛所能给我的就是引发基于现状的思考。其实我也玩过一种阴谋论，为什么国内对性的开放程度不能像国外一样，会不会是为了地下的黄色产业可以发展才这样。类似想法其实很多，比如正是有长城防火墙，才使得VPN翻墙成为了一个产业。我甚至还会想，这不会是为了增加就业的奇招吧，明暗、黑白，有着各自的生存之路。我就不考虑里世界了，来考虑一下表世界吧，限制欲望有个好处，就是始终留着一个神秘地带，防止人的欲望进一步扩张。如果人不能轻易的得到sex，那么sex就会处于被渴望的一环，得到的过程就能消磨大量的时间。所预防的，其实就是猎奇，当然这是我的个人猜测，完全根绝当然是不可能的，但减少绝对是能做到的，而样例少的情况下，可以防止混沌使社会趋于秩序。我来讲一下拔岛对sex泛滥化的考虑，它们认为青蓝岛的制度阻碍sex行业的发展，但却滋生了另一个现象就是未成年人sex，嗯，我觉得没啥好说的，它思考与我有些相反。其实拔岛能谈的并不多，我所给出的评价是“奇葩般的昙花一现”，但它又是绝对值得一提的作品。对于“樱之云·绯之恋”或许很多人喜欢的好像只是后面的高潮部分，比如所长找出男主的真实目的，又或者后面通过时间悖论来消灭敌人，但我其实喜欢的是前面的日常侦探剧。在推理之中，我并不是很喜欢像柯南那种复杂的案件，动不动杀人，动不动搞个复杂的作案手法，虽然这才是推理探案小说的基调。我喜欢的推理是什么呢？就是错误推理、合理推理。小说“虚构推理”是个好的例子，它的目的是将妖怪作祟解释为令人信服科学现象，就挺有趣的。如果一个人能推理出真相，我能相信的只能是他的直觉好，在很多不完全信息的情景下，合理的解释多得数不清，你所认为唯一真相，只能说是作者诱导的结果。这方面的代表就是我们的所长了，当然案件本身也是我所喜爱的，普通而没有波澜，平常又不失乏味，这可能也是因为死人案看多了而想看点新奇的东西而导致的结果。轮回作还有一个候选是“奇异恩典(AmazingGrace)”，其实这部作品我也很喜欢，但它没被选上的原因有两点，第一，拯救ユネ的方式只是交换弓和箭，我觉得过于草率了，而且我觉得正因如此导致了很多问题，比如小镇的广播只知道它和圣诞树有关就没更详细的解释了，还有就是人物真名的剧情太短了。更严重的结果就是第二，サクヤ和ユネ的个人线几乎重合，当然从整体剧情来看，サクヤ线应该在サクヤ的那个轮回和每个轮回中，而ユネ线则是在开始和每个轮回的简章中，最后只是恰巧在结尾收束才导致重合了。我喜欢奇异恩典也正是因为这一点，キリエ和コトハ虽然看起来有个人线，但她们的核心线路应该是在小镇毁灭的真相上面，这种人人都有存在感的剧情我挺喜欢的，唯独就是感觉结尾有点短。正篇重合我就这样放过算了，但它还在AfterStory里还重合就让我有点不爽了。这给我一种什么感觉呢？就是好像作者也把握不住这么复杂设定的感觉，干脆就把原来的框架分开写成两部分算了。所以我没有选择它，但它确实是部优秀的作品。“景之海的Apeiria”比较没想到的是，我竟然因为它的OP才知道的这个作品的，更让我惊讶的是它竟然是在拔岛之前就使用HS战斗的作品。景之海有个神奇的操作就是，轮回一次收一个后宫，然后FD又收一个确实有点溜。每次轮回基本没有重合剧情，虽然每次只带一个女主有点不是很爽，但有一点是有立绘和剧情的不止是女主，所以我又发现为什么我不喜欢有些女主线中没有其它女主的难受了，因为不够热闹，大多游戏只有女主有立绘和剧情，导致二人世界看着不是很舒服。但景海就不一样了，就算只带一个女主，但又因为其它几个角色的存在，导致气氛热闹起来了，就不会那么讨厌了。景海还有一个特点就是配图丰富，有时候一大堆的解释在文本其实是很容易让人厌烦的，配图虽然不能让完全用心，但至少可以让人有听的欲望。景海还有一个特点是，包含了轮回以外的其它丰富内容，像战斗、斗智之类，而且并不是简单的一笔带过，而是有大量的文本在里面。另外，我对男主的虚空索敌和往错误方向进行合理思考，感觉十分的喜欢。当然景海也不是没问题，只是瑕不掩瑜就不说了，我也时不时地幻想，如果人类被ai饲养能否达到共产主义和按需分配呢，我也时不时幻想能否让自己是一个活在梦里的缸中之脑呢，Apeiria网络真的存在就好了。为啥我会使用悬疑这个词呢？悬疑=悬念+怀疑，通常用在侦探推理的作品中，虽然在G游中这类题材不常见，但也是有的，近些年的比如，流星时间的演绎者，Azurite的前两作等等，带些超现实的设定是无所谓的，我看来的侦探推理作只要是找真相的就行了。悬疑的另一种看法是带上奇幻恐怖惊悚几个字，它可能会趋向猎奇，我所知道的是比较老的作品，比如寒蝉鸣泣之时，混沌之脑之类的。排除猎奇和侦探推理后，我所渴望的悬疑是什么呢？那我们需要知道解放之羽到底是怎样的作品，首先这个作品除了一两张cg外不存在血腥场景，其次整体的超现实设定只有一个看似无害的活人偶，最后游戏整体气氛所带来的恐惧感。疑神疑鬼说得就是这样的情形，恐惧感存在于人的内心，因氛围的存在而导致设想不存在的事物存在于此。我可能有点语无伦次了，我想说的是，解放之羽不存在本质性的危险，也本不应该诱导恐惧的心理，但因为“悬”的背景渲染和“疑”的人心惶惶，再加上bgm和OP给下的基调，只能说这种感觉就是我想要的。其实“消失的世界与月与少女”曾经也是候补，但知道假轮回的真相后，我只能把它称为悲剧，但是后面的奇迹救人让悲剧不够彻底，我就不是很喜欢了，另一问题是有两个女主ed重合了，不知道是不是我的游戏的问题，真正没选择的原因还是中间的欢乐基调太多了，导致不是很能将悬疑作为主基调。解放之羽的一个问题是太短了，虽然结局好像是一大堆，但总感觉有些水分在里面，也算是美中不足，至于像活人偶做真女主、与木质感sex什么的，勉强是能接受的。推游戏本来就是来感受的，从氛围来选游戏也是一个大胆的尝试。说起战斗，其实在以前的GalGame中比较常见，更何况我们排除了非文字表现形式的战斗，在近几年基本找不到了，所以我们只能把战斗限制为存在多方势力争斗的视觉小说，势力当然不能简单地以正恶来论，这样的话，其实作品就会多了起来，我不说战争而说战斗大致就是有这样一种想法。对于“9-nine”需要把系列看成一个整体，它最大的特色是最后在时空上的战斗，虽然我觉得它的表现力不够，但这是一个很好的创新起点，“其实战斗本不是一个分类，有了‘9-nine’，也便成了一个分类”，我意思表达得很清楚了，关于9-nine的其它方面我没啥好说的地方，它分割就算了，好歹最后搞个剧情合并版也好，搞得剧情有些违和的地方实在有些难受就是了。其实后面几个分类也是这样的感觉，请不要在意。请别搞错了，我可不是喜欢“青空下的加缪”里的猎奇部分，至于背后的剧情也没啥感觉，我好像喜欢的只是，背景音乐和两个女孩在这种环境下寻找出路的感觉。在我看来，日G的百合好像还不如国G多，特别是近几年。“冬滚滚”带着百合的标签，后来却出现了转性技术，让我不禁对百合产生了怀疑，到底啥是百合？带着这种心情推了“一生推不如一生恋”和“君羽couples”，大概就能明白，如果去除人类的性别这种属性，百合和一般的恋爱或友情好像也没啥区别。所以看纯粹的百合，还是得像青空缪这种“少女在末世”的感觉，少男在末世不行吗？不行，太碍眼睛了，其实我害怕的就是因此导致的“冬滚滚”的现象，只有Y染色体不存在，这样的末世才是纯粹的，你懂吗？不懂就算了。为什么“创作彼女的恋爱公式”还能再加一个分类，这需要理由吗？光动态立绘这一点就是很多Galgame做不到的，创作彼女绝对是我目前观感最喜欢的Galgame了。最后有个没提的分类就是，猎奇/ntr/凌辱/血腥/调教/恶堕…(嘛嘛，我个人觉得这些都是同义的，就都放一起来)，这里举一些比较近的例子，WhiteBlue、蛇足、真爱百合、被寝取的公主(寝取られプリンセス ～姫も女王も女騎士も、気付いた時には寝取られ済み～)、SaDisticBlooD、erewhon、サルテ。当然这类作品不是很值得去推，因为不知为何，现在的血腥和猎奇程度远不如以前了，是因为现代画风的原因还是分级限制越来越严了，不是很清楚。我心里一直有个不爽的疙瘩，为啥这类作品的很多OP总是让我很喜欢，比如Escu:de最近的两部作品，但也只能感慨。erewhon确实值得一推，因为它的剧本作者有一部前例，就是euphoria，而サルテ算什么不好说，但这类作品在现代还是挺少见的。至于ntr有啥不能接受的吗？只要反向思考就行了，即ntl，我想起了上次法学通论的一个论文主题就是“代孕的合法性”，现实有类似的事，更何况还是在虚拟世界中。更进一步的是血腥猎奇，比起内容本身，我更在意的是不亲身经历真的能写出这些玩意吗？所以我们的前提就是现实不可能发生这种事，比如虫和人的sex，不说生殖隔离，虫主动去和人sex从生物行为学上也是不可能的事情，也不知道是谁想到的这种设想，搞得它一代代的流传了下来。没错，我更在意的是想，我将猎奇定义为超乎常理，它不同与我所考虑AR型小说。AR型小说和猎奇好像都是多一种设定，前者比如给主角多一种时停的能力，后者比如两个人各切一半然后缝合成一个整体。核心其实是人，AR型小说是人的外界进行想象力的探索，猎奇则对人自身进行想象力的探索。我举个简单的例子，让猪和虫进行sex，你会觉得猎奇吗？不会，你只会觉得这是一场生物实验。算了算了，不讲了，其实我也没那么喜欢猎奇，因为人类的想象力限制放在那里，也就几种类型换来换去，看多了也没啥意思。其实我还想提一个会社，紫社(Purple software)，目前我只玩过它的两部作品，天津罪(アマツツミ)和青鸟(アオイトリ)。虽然名字有种耳目一新的感觉，但其实只是对日语不熟产生的翻译效果，当然我是这样被吸引的就是了。剧情嘛，以我的观点来看，废拔剧情作的正常水平，但要说纯爱嘛，虽然确实没有牛头人，但还是有点淫乱，主要是在sex方面。算了算了，这些都不是我特地要提一嘴的重点，重点在于它的UI设计上。首先是文本跟随人物立绘，它其实令我意识到了一个问题，就是平常推游戏的时候，我基本都是盯着下面的文本框看的，往往都是名字对人脸的时候，需要瞟一瞟立绘，来建立一个整体第一印象。其次是自定义界面UI按钮，主要是紫社预备的操作选项很多，我们可以按需选取，我很喜欢这一点。最后就是鼠标手势，这更是一个好东西了，情景有些难以描述，总之就是很便捷。我们来讲点细节的东西，在天津罪里，背景里有动态水，而不同人物对话的字体变色到不是什么新鲜的东西，有一点比较奇怪的是，为啥有时女主画胸罩，有时女主不画胸罩，不知道是忘了还是故意买福利。青鸟和天津罪有个奇妙的相似点就是开局女主都要被看起来是真女主但又不是真女主的女主踩一脚，莫名地让人有些兴奋。在青鸟里也有些比较奇妙的东西，比如故事进度在存档里的标记，男主与女主的生理期互动，真女主的乳头凹陷。虽然我也觉得有些不明所以，但确实它不太让我想跳sex部分，其它的sex就那么几种样式变来变去挺无聊的，但插入一些神奇的东西就会让人有尝鲜的欲望。故事进度标记，可以让我对目前的进度有个期望，以便合理的安排时间，其实一般的废拔剧情作没啥必要，就像这个青鸟，但你在明理篇后面再加个没进度的故事是几个意思啊，就不能简单的结束吗。除非是那种有探索欲望，令人想一推到底的作品，加上进度我觉得是有必要的。其实我提一嘴紫社，只是想夸一夸它的这些无法分类的优秀之处，我的力量也不会强大到能号召其它会社来学习这些东西，我的这个偏好总结会，终究只是个人的感情宣泄罢了。还有什么能说的呢？那就是总结了，近几年，我追寻了各种题材和各种形式的故事。虽然我们通过标签分类来选择，但我可能还是不太喜欢标签，我喜欢多元化的作品，错综复杂的作品，但能够驾驭的作者可谓少之又少。不过也无需灰心，如今的大多作品虽然有所侧重，但有很多细节会涉及方方面面，细细品味总结发现对自己有所感触的地方。或许认清现实、放慢脚步才是目前我所该做的事情。","categories":[],"tags":[]},{"title":"随缘更新声明动态","slug":"随缘更新声明动态","date":"2022-11-15T00:51:21.000Z","updated":"2023-09-03T13:50:21.774Z","comments":true,"path":"archives/2022-11-15-随缘更新声明动态/","link":"","permalink":"http://example.com/archives/2022-11-15-%E9%9A%8F%E7%BC%98%E6%9B%B4%E6%96%B0%E5%A3%B0%E6%98%8E%E5%8A%A8%E6%80%81/","excerpt":"","text":"最近实在没什么写文章的灵感了，Galgame又推得有点上头，不过想推的剧情作，到今年末差不多就没有可推的了，以后大概也就无聊的时候推推废萌和新作吧。以后文章什么的就随缘更新了，我想做一些实在的，提升一些硬实力，所以转移到B站做视频了，当然做视频工作量比较大，除非水视频否则至少2个月才可能出一次吧。最近一个比较大的饼是“朗兰兹纲领”，差不多已经写了三分之一了 它是费马大定理的延申，预计年末应该可以完成。不过我创作的主基调还是那么几个，文娱、计算机和数学，因为只有这几个才是我比较擅长的。","categories":[],"tags":[]},{"title":"不靠谱的机翻但还是用","slug":"不靠谱的机翻但还是用","date":"2022-11-04T09:42:40.000Z","updated":"2023-09-03T13:50:19.125Z","comments":true,"path":"archives/2022-11-04-不靠谱的机翻但还是用/","link":"","permalink":"http://example.com/archives/2022-11-04-%E4%B8%8D%E9%9D%A0%E8%B0%B1%E7%9A%84%E6%9C%BA%E7%BF%BB%E4%BD%86%E8%BF%98%E6%98%AF%E7%94%A8/","excerpt":"","text":"关于“このままイクぞ。今度はしっかりと飲めよ”这句话，无聊的时候用了一下机翻 我真怀疑是不是我的日语水平出了问题，它们难道都是一个模型吗？“今度”显然是“这次”的意思吧，应该是语感吧，有个“このまま”在前面怎么也不觉得是下一次，可能是句号让机翻感受不到上下文吧。最近稍微整理了一个我比较喜欢课程的总结，唯一一个上课老师让我们玩桌游的商业伦理，使用我最爱的关键词法，在文科中我特别喜欢用这种启发式学习法，它的关键不在于理解其中的内容，而在于看完后有什么感受、又能得到什么启发？紧凑的写法也是为了更好地建立思维网络，把握用词间的联系。为什么我会喜欢听日语歌呢？其实我以前还是挺喜欢像郑智化那一辈老歌手的歌的，但现在的流行歌曲很少能让我提起兴趣，我比较喜欢悠扬寂静的歌曲，它比较适合我的风格，听得不太懂的日语反而能让我更多地从音乐本身来享受，再配上广大人才的翻译，这就是另一方面原因，有很多人因为热爱而投入其中，所以在传播上也占据了优势，我喜欢用爱发电的人，所以我渴望与他们站在同样的舞台上，就是这样一个小小的期许罢了，最后日语是我见过表音性最强的语言了。","categories":[],"tags":[]},{"title":"","slug":"不靠谱的机翻但还是用/galgame","date":"2022-11-03T02:56:42.705Z","updated":"2022-11-03T03:01:04.433Z","comments":true,"path":"archives/2022-11-03-不靠谱的机翻但还是用/galgame/","link":"","permalink":"http://example.com/archives/2022-11-03-%E4%B8%8D%E9%9D%A0%E8%B0%B1%E7%9A%84%E6%9C%BA%E7%BF%BB%E4%BD%86%E8%BF%98%E6%98%AF%E7%94%A8/galgame/","excerpt":"","text":"一些可能有用的工具一些黄油工具的介绍。注意：本导引目前只包含工具的索引和简单介绍，不包含工具的具体使用说明；如果对于使用工具由相关疑问请善于利用搜索引擎（ 关于引用为 n/a 的说明：百度一下遍地都是 解压包含解压软件和解包工具 工具名称 说明 引用 WinRAR 终点论坛唯一指定解压缩软件WinRAR吧有去广告版 https://tieba.baidu.com/f?kw=winrar&amp;ie=utf-8 GARbro 通用解包工具几乎可以打开世面上所有Galgame的媒体素材的包文件虽然最后一次更新是两年前 https://github.com/morkt/GARbro/releases KrkrExtract 由X’moe汉化组开发的对于krkrZ引擎的游戏使用的素材包的解压软件可以处理一些上面处理不了的游戏 https://github.com/xmoeproject/KrkrExtract/releases xp3viewer 比较老的针对krkrZ引擎游戏的解包软件，功能并不比上面两个强 n/a Crass / Crage 很古老的资源提取工具，现在已然力不从心但是仍然可以用来碰碰运气 n/a 转区 为什么要转区？ 很多Galgame（生肉）都是仅供日本国内使用，采用的编码方式和中国不同。故在中文环境下运行某些游戏可能会出现乱码和意外的错误。 工具名称 说明 引用 Locale Emulator 目前使用最为广泛的转区工具最新版已经支持 Windows 11 https://github.com/xupefei/Locale-Emulator/releases AppLocale 是微软官方的编码转换工具 群文件 &gt; 转区工具 &gt; apploc.msi LocaleSwitch 转区运行工具 群文件 &gt; 转区工具 &gt; (日文游戏启动工具)LocaleSwitch.rar NTlea 也会附加到上下文菜单 群文件 &gt; 转区工具 &gt; NTLEA.zip 翻译器 “只能说建议学习日语” —— Cure Asahi 工具名称 工作方式 说明 引用 Visual Novel Reader Hook 笨重但是功能极为全面内置的调用翻译API的脚本（Python）已经过时可以使用离线机器翻译百度贴吧里有懒人包 http://vnr-file.ys168.com/https://tieba.baidu.com/f?kw=vnr Misaka Translator Hook + OCR 目前最有实力的 VNR 替代品可以使用离线机器翻译 https://github.com/hanmin0822/MisakaTranslator/releases YUKI Translator Hook 可以使用离线机器翻译据说提取文本成功率更高，但是容易出错 https://github.com/project-yuki/YUKI/releases 团子翻译器 OCR 自建 OCR，但是速度感人 https://zhuanlan.zhihu.com/p/143513449 关于工作方式的说明： Hook：直接从运行程序中提取文本，无需联网即可工作；有的游戏需要“特殊码”，提取出来的文本可能包含乱码。 OCR：联网进行图片转文字，使用范围更广但是速度较慢；百度云不再为新实名用户提供额度之后，需要一定的成本。 这些工具仅在 PC 端可用 移动端可以在非 Windows 设备上运行 Galgame 的工具 特别声明：使用任何设备进行游戏都是平等的，没有什么高低之分。 工具名 平台 说明 引用 Kirikiroid 2 / XP3 Player Android / iOS 在移动设备上运行 KrkrZ 引擎的，并且经过处理的 GalgameiOS 需要在非国区商店购买 https://github.com/zeas2/Kirikiroid2 Artroid Android 在移动设备上运行 Artemis 引擎的游戏目前似乎没有资源站专门提供这类游戏 https://kira-09flare3.seesaa.net/article/479825496.html Tyranor Android 由绯月巨佬@nene开发发布支持 Artemis 和一些用 JavaScript 的引擎游戏的运行 https://kf.miaola.work/read.php?tid=912800&amp;sf=233 MiNE Android 具有较全面的 ONScripter 的整合还支持一些其他引擎（几乎没见过） n/a 其他一些虽然经常使用但是难以分类的工具。 工具名 说明 引用 AlphaROMdiE 破解收到 AlphaROM 保护的游戏，绕过 DVD 验证使用这种手段的主要是 Visual Arts n/a 流风 绯月论坛通用破解工具，几乎通杀需要具有绯月账号且有一定的等级才可下载禁止私下传播 绯月ScarletMoon 一些可能有用的网站由于各种原因，现在资源变得更加难找。这里为萌新准备了一些比较方便的网站： 资源相关或多或少有些门槛，斟酌使用： 网站 备用地址 说明 备注 绯月论坛 https://kf.miaola.work/https://bbs.kfmax.comhttps://www.9shenmi.com/https://9moe.com/ 新作生肉基本都有人发汉化作品也会有人在这里发但是不多 需要玩咕咕镇爬塔获取论坛货币 终点论坛 https://bbs.zdfx.net/ 有比较全的已汉化作品也有一些别的东西，但是需要较高的阅读权限 偶尔会自墙国内，需要科学上网才能使用目前签到门槛变高了，大约需要签到一个月才可以使用偶尔会关闭注册，请随缘注册 南+ https://south-plus.net/http://north-plus.net/ 和绯月类似，但是更杂一些有些绯月找不到的东西可以来这里碰碰运气 需要科学上网签到给的论坛货币没有绯月多 基本都是比较老的网站，所以大概是不会跑路的；如果用不了大概是你使用方法不对（ 其他相关除了游戏之外的一些可能有用的网站： 网站 备用地址 说明 月幕Galgame n/a 一个比较新的网站，有一些群友在这里写感想主要的功能性在于可以查询特殊码 Bangumi 番组计划 https://bangumi.tv/https://bgm.tv/ 国内的批评空间（主域名被墙）可以查询有关于游戏、厂家、角色的各种信息以及一些群友写的文章部分内容因为各种原因被该站和谐 2DFan https://www.2dfan.com/https://galge.fun/ 收录了游戏的相关信息和攻略补丁等 The Visual Novel Database n/a 收录了有关于游戏、厂家、角色的各种信息，且比较全面国内可以访问，但是速度极差，建议科学上网英文 新：誠也の部屋 n/a 各种游戏第一手详尽的攻略日文 这里的站点主要的功能用来查询信息，书写评论等 群友推荐由群友提供的各种有用的网站/博客，虽然发布时经过验证，但是不保证可用性 注：“门槛较低”的资源站一般难以长时间存活 网站 类型 备用网址 说明 初音的青葱 资源站 https://www.yygal.com/https://www.yngal.com/ 无门槛注册但是需要两个月以上的注册用户才可以看到下载链接 Galgame 世界 资源站 n/a 无需登录，但是链接补档较慢以KRKR资源为主 绅士天堂 资源站 n/a 目前无门槛，但是曾经有过公众号测试时可以直接使用 GGBases 资源站 https://www.dlgal.com/https://www.ggbases.com/ 提供拔作的磁力链接和种子需要使用相关的下载工具下载 萌站 资源站 https://hmoe.top/ 萌站导航，有时会炸裂但是似乎活了挺久的样子 如果有什么问题或者变动请联系我更新/删除。","categories":[],"tags":[]},{"title":"","slug":"文件管理的基本素养/APlayer.min","date":"2022-11-01T01:41:00.527Z","updated":"2022-10-14T23:47:10.904Z","comments":true,"path":"archives/2022-11-01-文件管理的基本素养/APlayer.min/","link":"","permalink":"http://example.com/archives/2022-11-01-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/APlayer.min/","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n","categories":[],"tags":[]},{"title":"","slug":"文件管理的基本素养/APlayer.min","date":"2022-11-01T01:41:00.526Z","updated":"2022-10-14T23:47:10.903Z","comments":true,"path":"archives/2022-11-01-文件管理的基本素养/APlayer.min/","link":"","permalink":"http://example.com/archives/2022-11-01-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/APlayer.min/","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/","categories":[],"tags":[]},{"title":"","slug":"世界拒绝了我/APlayer.min","date":"2022-11-01T01:39:45.257Z","updated":"2022-10-14T23:47:10.904Z","comments":true,"path":"archives/2022-11-01-世界拒绝了我/APlayer.min/","link":"","permalink":"http://example.com/archives/2022-11-01-%E4%B8%96%E7%95%8C%E6%8B%92%E7%BB%9D%E4%BA%86%E6%88%91/APlayer.min/","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n","categories":[],"tags":[]},{"title":"","slug":"世界拒绝了我/APlayer.min","date":"2022-11-01T01:39:45.253Z","updated":"2022-10-14T23:47:10.903Z","comments":true,"path":"archives/2022-11-01-世界拒绝了我/APlayer.min/","link":"","permalink":"http://example.com/archives/2022-11-01-%E4%B8%96%E7%95%8C%E6%8B%92%E7%BB%9D%E4%BA%86%E6%88%91/APlayer.min/","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/","categories":[],"tags":[]},{"title":"文件管理的基本素养","slug":"文件管理的基本素养","date":"2022-11-01T01:13:22.000Z","updated":"2023-09-03T13:50:19.831Z","comments":true,"path":"archives/2022-11-01-文件管理的基本素养/","link":"","permalink":"http://example.com/archives/2022-11-01-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/","excerpt":"","text":"我也未曾想过，我竟然会想写一篇有关文件整理的文章。不知从何时起，整理对我来说就像呼吸一样自然，看到乱了整理一下、无聊的时候检查一下、桌面乱七八糟排一排。但我还知道一点，不喜欢整理的人也有不少，因为我对计算机比较熟悉，所以经常帮宿舍附近的人做一些开发上的调整。不得不说有些人的桌面是真的乱，分类啥的不存在，软件和各种文件毫无顺序地布满了桌面，说实在的，使用的人能顺利地在里面找到想要的东西也真是厉害。当然这只是我的吐槽，因为并不是所有的人都像我这类人那样对数据敏感，对他们而言，数据不是在云端，就是没啥用，手机电脑什么的也是随便换，不存在数据迁移啥的，缺的东西再下载就完事了。 const ap = new APlayer({ container: document.getElementById('aplayer'), autoplay: true, lrcType: 3, audio: [ { name: '虹色の世界', artist: '相良心', cover: './cover1.jpg', lrc: '相良心 - 虹色の世界.lrc', url: './相良心 - 虹色の世界.mp3', }, { name: 'アズライトの棺', artist: 'アヤネ', cover: './cover2.jpg', lrc: './アヤネ - アズライトの棺.lrc', url: './アヤネ - アズライトの棺.mp3', }, { name: 'ライムライトの残火', artist: 'アヤネ', cover: './cover3.jpg', lrc: './アヤネ - ライムライトの残火.lrc', url: './アヤネ - ライムライトの残火.mp3', } ] }); 资源整理我也未曾想过，我竟然会想写一篇有关文件整理的文章。不知从何时起，整理对我来说就像呼吸一样自然，看到乱了整理一下、无聊的时候检查一下、桌面乱七八糟排一排。但我还知道一点，不喜欢整理的人也有不少，因为我对计算机比较熟悉，所以经常帮宿舍附近的人做一些开发上的调整。不得不说有些人的桌面是真的乱，分类啥的不存在，软件和各种文件毫无顺序地布满了桌面，说实在的，使用的人能顺利地在里面找到想要的东西也真是厉害。当然这只是我的吐槽，因为并不是所有的人都像我这类人那样对数据敏感，对他们而言，数据不是在云端，就是没啥用，手机电脑什么的也是随便换，不存在数据迁移啥的，缺的东西再下载就完事了。甚至他们连手机上的文件管理器都没打开过，这类人确实是有的，别质疑。我也见过不少人，特别是搞创作、搞开发的人，他们一般对数据比较敏感，所以至少分类整理的基本想法都是有的，迁移自然也就方便了许多。那么有关文件整理，有什么可以讲的吗？不就是一个习惯罢了，而且怎么整理好像也会随不同的人大相径庭。但是我们有些可以用来参考的通用原则，首先我们只从资源本身来考虑，而不考虑分类的问题，分类是习惯的问题，一般通过文件夹来实现，于我而言，过程很简单，先大后小，一般会先简单确定大类，直接将资源扔进去，资源是不断增加的，当某一类资源的数量过多时，就可以进行细分类，再相应地搬家即可，也就是说分类是随时间变化而动态改变的。资源的来源一般就两种，网络收集和自制，这是最基本的重要程度分类。网络收集是大概率可再生的，一般得到资源的同时要保留来源，即url链接，如果在某次转移中，出现从大内存到小内存的情况，一种方案是云端存储，也是大多数人的方案，而且还能保留自制资源，而考虑比较极端的断网转移情况，自制是必须保存的，能缩减的也只有可再生资源了，删文件保url是较好的方案。有人可能觉得，谁没事去保留链接啊，在p2p网络上，链接还是很常见的，最常用的就是bit种子和磁力链接，所以自然会留下链接。我知道大部分人都是https协议来下载文件的，这种情况下，浏览器会自然地把链接保留下来，但是这一般都不能用的，因为Web上的资源传输，通常是动态验证的，你再次访问链接的时候会因为动态参数失效而无法再次下载，这是防爬虫的一种手段。这时我比较喜欢使用浏览器书签功能，特地开辟一个书签文件夹来保留下载链接地址，觉得重要的链接就收藏起来，这算是一种习惯吧，转移的时候可以直接用书签的导入导出，因为书签还有标题数据，所以还能直接进行书签搜索。最后情况是软件所下载的东西，一般我们都可以靠找到下载路径来获得数据，一般保留文件名加软件即可，比如网易云音乐文件名自带音乐名，用ls &gt;&gt; res.txt啥的就行了，当然有些软件不会文件中保留信息，而是使用一堆无序的数字字母组合，比如bilibili的缓存视频，这种情况下通常会有一个元数据表，它保留了信息和相应的文件指向，通常都很好找。稍麻烦的是没root的手机，元数据又存储在系统目录里，这个情况我们在下一部分以一个实例来说明。还有一个情况是破解资源，如游戏cg提取之类的，这个时候保留破解流程和工具就行了，而且多数情况下都是即拿即用的，也没有特的地保留这些数据。善用压缩包，这个十分重要，压缩包可并不是单纯压缩体积那么简单，最重要的是压缩包在传输中的作用。在多数的传输协议中一般不能保留目录结构，在开发中这是很致命的，所以通常传输开发项目的工程文件时，通常是压缩包形式，gz、xz、7z之类的。在linux体系下，归档和压缩是分开的，tar是归档，tar.gz则是归档的基础下使用gz对应算法进行压缩，前者保留目录结构，后者减少传输的流量。压缩还有一个作用是减少文件的碎片化，熟悉文件系统存储机制的应该知道，文件是分块存储的。有人可能觉得，压缩可能会破坏我们之前的索引结构，这是属实的，但压缩通常发生在自制的情况，如果是下载的话，对于碎片化文件发布者会自己把它压缩好，这也是适应传输的较好形式，大可放心而不用过于在意。我们要考虑丢失承受度，即面临数据丢失你能否承受。搞云端存储的，其实还是挺辛苦的，首先硬盘要正版，其次还要保证硬盘在保修期内，最后要组成阵列来防止丢失。对于外伤肯定是无能为力的，烧了、碎了什么的也只有时间倒流才能拯救了，对于很重要的数据一定要云端备份，要是云端都保留不住就更被说你本地了，那时的环境到底有恶劣啊。而内伤是有被治疗的可能的，比如常用的硬盘结构，只要扇区没坏，总有办法把数据给复原出来的。但是说句实话，对我而言，好像也没什么数据不可丢失，我也只是有收集癖，丢了再去找就完事了。这也是我很伤心一点，没有想法，没有创造，没有一点属于自己的东西。 资源转移你可能不知道现在转移一个软件数据有多难，真正做起来你的心态会崩掉的。先来看看我们要转移的目标 在没有root的前提下，对此你得知道一点，现在要root是十分困难的一件事，首先官方不提供recovery模式，你得刷第三方rec，而此时你一般需要向产商要BL解锁入口，这样你会失去保修，手机可能变砖，不过更要命的是它会清除所有数据，那就没备份的必要了。有root肯定可以畅通无阻，但没root的话，我们唯一能移动的数据只有/sdcard/Android/data内的数据，虽然它看起来是数据的大头，2.92G的漫画数据都在里面，但是问题是不能识别。比如前不久我玩过的summerpocket，你安装后把数据移进去再运行是不可行的，你必须先运行一下更新系统内的数据，再移动外部数据才行。通常情况下/data/app和/data/user/0才是软件的核心数据，只有将它们复原才能实现完美备份，其实只要有后者就够了，前者是死数据一安装就有了，不过在以前安卓版本/data/data。我们只能在权限上做功夫，shell权限就是一个很好的工具，它在root之下却在我们一般用户的权限之上，通过adb工具的adb backup完成，但事实却是 这是因为大部分应用的“allowbackup”参数被设置为了false，导致无法提权，据说为了啥数据安全。我们其实可以反编译修改这个参数，但在无root的情况下签名验证过不了，无法覆盖安装，而卸载重装的话，这些数据又会被清除。有人说可以通过adb来实现保留数据卸载，后来我发现，保留数据会导致系统应用让你安装失败，现在系统必须让你强制完全卸载才行，我只想说现在的安卓真是另人无语的不自由。其实另一种方法是应用软件对自身拥有的绝对权限，通过应用替身来访问自身的数据文件，比如Termux对它自身目录下的文件具有绝对控制权，这一篇文章通过替身的方法来实现数据的转移，遗憾的是这是有前提的，每次应用都是在替身载体上安装的，比如作者所使用的太极虚拟框架安装。我没有这样的习惯，所以也没有实现的可能。其实，我想过一种破解应用私签的方式，但仔细一研究发现，签名一样也是信息摘要的认证方式，理论上像md5一样没办法破解，也难怪现在也没有人给出破解签名的方式。结论是，你只能被产商拿捏，让他们给你出一个云端备份的功能，来帮你备份，自己实现的可能性基本为零。唯一比较幸运的可能是Termux了 虽然它有近9.56G的内部数据，但可以通过它自身的命令行打包并移出数据。我想说啥呢？就是软件的开发商是可以令应用获取到数据，并放到云端的，但是他们并没有这么做。这里我又想起一个事就是进入开发者模式想进行一下USB调试，都得用一些特殊的方式才行，只能说太恶心了，安卓早就不是以前那个安卓了，最近我才知道，现在手机系统里都能大胆地放广告了，而且还是几年前的时候，因为我一直都在用老手机所有都没发现。没有Android本源的自由，还得跟着产商的步调走，只能说我放弃转移数据了，重下算了。 git的使用接下来我想说说git这玩意，很多人可能把它和github或gitee或gitlab之类的等同了，甚至有人把它当网盘使用，其实我也差不多，但是它们都存在内存限制，拿来存储一下工程目录倒是没问题，几个G的游戏就根本放不进去了。所以gitXXX等同于网盘肯定是不对的，因为它们只是提供了一个远程git服务器而已，也就是说，如果想要的话，我们自己也是可以搭建git服务器的，自己也能实现一个gitXXX之类的，不过嘛，它们提供了一个可视化的界面，实际的核心只有git这一个指令而已。我们先来本地探讨一下git指令，我们先来确定一下git的整体定位，它相当于一个“文件夹的记录板”，以我本地的hexo工程来说明一下这个事。 我们应该要将git视为一个可撤销的文件工程项目，其中的.git代表了这确实是一个git项目，而git还有几个比较重要的文件，比如.gitignore和.gitattributes，但我们不应该把它视为git工程文件的成分，而是某种可以改变git行为的文件，后面我们讲流程的时候会说到。可以看到云端和本地的区别就是，本地有.git而云端没有.git，但所看到的不一定是事实，事实是云端只有.git，而本地除了有.git还有其他内容。而云端则是为你提供了一个.git存储服务，实际上.git已经包含了大量信息，可以将你每次提交的内容复原回来，而云端则是将最近的提交内容放在了首页而已。建立一个git工程十分简单，像下面这样几下就可以完成 此时我们的gituse形成了一个git项目，git实际上可以文件夹下逐文件的跟踪撤销，但我还有大部分的开发者都是采取“全部跟踪+.gitignore”的方式，简单来说就是为了方便，开发者一般要有一个好习惯，将中间文件和目标文件单独放到一个文件夹并通过.gitignore忽略跟踪，这样可以做到只传递源码而大幅度减少传输内存。什么是跟踪呢？我们将git的工作流程通过下面的图展示出来。 我们先看在本地的左边三个东西，workspace(工作区)，staging area(暂存区/缓存区)，local repository(版本库或本地仓库)，它们在本地文件的对应关系也很简单，工作区就是除.git以外的所有gituse下的文件，缓存区和本地仓库都在.git内，看下图 git add 文件是使用通配符的方式将文件放入缓存区，我们通常都是git add *或git add .直接将当前目录下所有文件纳入缓存区，当然它有两个行为值得我们注意，首先它一定会忽略.git文件夹，其次它会忽略.gitignore所匹配的文件，不过这是有前提的，就是之前没有被纳入管理中，比如我的hexo工程，里面虽然写了忽略node_modules但是因为之前没有先写.gitignore就git add 所有，导致现在git add 所有已经不能.gitignore了，其实也可以通过git rm来移除跟踪，但不知道为啥就是不想做。还有一种情况是空文件夹不会被跟踪，像下面这样 可以看到dir没有被跟踪，但可以通过.gitkeep来实现跟踪 值得注意的是.gitkeep只是一种习惯，它将一个空文件夹变成非空从而实现了对空文件夹的跟踪，换言之，写成.nofile或者任意的东西都是无所谓的。至于git commit则是将缓存区的东西放入本地仓库，其实有些人可能和我一样，为什么非要有git add加git commit两个步骤，而且还得加个message。首先我们先明确一点，对于git add我们默认以全部文件为习惯，那么缓存区相当于一个文件的一次撤销板，就像window那个记事本，但那个记事本可不是什么好玩意，只能撤销单次，能不用就别用了。执行一次git add相当于将当前的工作区文件进行了一次保存，如果后来对工作区进行了大改动，文件结构都变了，可不是单文件撤销那么简单，那我们可以通过git checkout .来回复上一次的保存，当然还可以具体到文件上。如果每次这样的保存都放到仓库去回退的话，是很消耗内存的，特别是大项目，所以仓库的每次版本的改动一般都比较大，当然分支是可以合并的。继续回到流程上来，通过git commit可以将缓存区的数据放入本地仓库，而git reset HEAD .则是将仓库数据放回到缓存区，HEAD表示当前仓库的版本，本地仓库以树状的方式存储了每次commit的内容，对于个人而言只是一个单线，树状只会发生在多人协同开发的时候，后期还会出现合并的任务。以我们个人的视野来看，本地仓库的每个版本相当于一次文件夹的快照，切换版本其实就相当于查看某次版本的内容，可以通过git checkout 版本的方式将仓库的版本的内容复原到工作区，HEAD表示当前执向的分支，一般是最新分支。至于本地仓库与远程仓库的交互就比较简单了，设置好地址以后，git push同步到远程，git fetch同步到本地，至于git clone实际建立在你本地没有仓库的情况，可以直接从远程获取.git并且将最新分支复原到工作区，一般情况下如果只要一次源码的话，最好要将.git删除掉，因为它太吃内存了，或者直接用远程服务所给的zip打包下载也行，它会自动去除.git文件。至此git的基本思想已经差不多了，总体内容不多，首先远程只保留.git，其次缓存区相当于一个一次撤销板，其中的步骤不会被记录在仓库中，最后仓库记录了每次提交的文件结构和内容可以完美的实现复原。其中的转换命令可以看之前的一张图，我们其实可以把git理解成“附带撤销功能的文件夹记录板”，当然这只是对个人而言，git真正强大的在于多人协同的分支管理，可惜我用不到就是了。 电子网络其实网络的本质是一个低成本的数据传输平台，说来也难受，世界上最挂念的无非就两个东西，一个是现世的亲人，另一个竟然是电子设备上的数据。我曾想过离开网络，离开手机电脑，但发现一旦离开我将一无所有，拥抱生活可真不简单，有人喜欢嘲讽为虚拟产品消费的行为，但他们可能不知道对于穷人来说它们可是唯一的娱乐了。穷人买得起手机吗？我说得可是娱乐啊，而不是温饱，如果温饱也不能满足，没有可支配收入的话，我认为他不在讨论的范畴内，我们想讨论的穷人是可支配收入少的人。“穷人”的定义是啥就别管了，不然你让我怎么称呼我想讨论的这类人呢？在此基础上，你就会发现现实中很多活动太耗钱了。其实有些东西，我不是很理解，我周围有几个人很喜欢去一些店里玩一次几百块的像剧本杀之类的桌游，我在想这东西就不能自己买一副，随便找个安静的地方玩吗？网店上的一副剧本杀，只能玩一次要50-100，另外在城市里想找个安静的地方竟然超乎想象的困难，还不如去店里，分摊一下也不多，还能有个好的环境。如果放到网络上，就会大不相同了，成本低，人好找，次数随便，网络将人联系起来的能力可不能估量。现实中的消费会随次数而不断激增，但手机电脑的话，除了开始的投资，就只要电费和网费，而且内容丰富，玩法众多，想玩就玩，次数无限。有人纠着网络的一点去批判还是有些片面了，无论怎么说，网络绝对是最便宜的消遣了。或许有人更加当心的是，手机电脑对身体健康的影响，只能说“优胜劣汰适者生存”，我们应该反向思考如何去适应现代的娱乐方式，就算是放到现实中，环境早就大不相同了，周围充满了各种用于传输的高频人造电磁波，比如wifi的频率在2.4GHz到5.8GHz之间，你怕不怕，不过像用眼疲劳之类的就别去适应了，但它跟手机没啥关系，你看书久了也是一样的。当然还有网传的lcd和oled显示屏中，后者更伤眼睛的说法，确实有一定道理了，不过我所用的设备都是lcd显示屏所以也无所谓了。有关网络资源一定要提的一点是，正版付钱，盗版绝对白嫖，简而言之“倒卖狗”举报就完事了，当然对于他们而言成本低收入高，杀肯定是杀不完的，只能说尽力而为，不要交智商税就行了，还有千万不要听他们说什么“资源收集来之不易”这样的鬼话，因为这样的现状是他们一手造成的，我就点到为止了。 资本赢家都是投机商最近看到一个有趣老师的视频，他说如果你想要知道赚快钱的方法，就打开中华人民共和国刑法，里面写满了你想要的东西。曾经有人跟我说，“黄赌毒”中的“黄”好像只违法没有犯罪，比如“嫖娼”就没写在刑法里，当要知道“嫖娼”是亏钱的，你要反过来看，“卖淫”才是赚钱的，自然也是犯罪的，也确实如此。我们扯远了，我们从最常见的股票交易说起，我一直觉得这东西的合法存在很不合理，我甚至觉得它和赌博没有区别，不会真的有人觉得自己可以通过各种金融咨询、国家政策、市场走向、公司状况之类的东西来推出股票的走势吧？事实是，除非一些特别明显的东西，否则你知道的当韭菜罢了。股票最开始只是一种投资凭证，放在现在就是购买发行股，但有些人却很聪明，他告诉别人这家公司未来会有很多的盈利，如果你买下这张股票，就可以获得接下来所有的利润了，一旦很多人出现了类似的幻想就会出现价格竞标的情况，而买股票的投机商很快的就能获得比股票原价更高的回报，这就形成了股票交易的原型。这时就会出现第二中投机商就是中介了，比如你找不到想要买你股票的人，但中介那里有，于是中介就可以获取佣金，中介也就变成了股票交易所，佣金变成了手续费。我很喜欢把中介称为投资商，因为他们好像没做什么却可以很赚钱，比如银行，我们把钱借给银行利率不高，但银行借给公司却有更高的利润，银行甚至还能拿钱去搞金融投资，凭什么，凭人脉。其实最另人叹息的就是，资本和人脉才是最值钱的，“人脉”是什么呢？可不是说你认识多少人，而是说你可以为多少人搭桥牵线，供需匹配程度有多高，它有两个典型的代表，“广告”和“平台”，对于广告而言，无论是提供货源的还是购买物资的，都不是很好，反倒是中间投广告的可以两头通吃，以较低的成本获得极高的利润。“平台”就很常见了，购物平台、交友平台、视频平台、直播平台等等，拿直播举个例子，平台可以搜刮直播主超过50%的利润，干活的是直播主，平台只是给你提供人，现实中的经纪公司也是一回事，他们做了什么吗？以资本提供平台的搭建，构建人脉提供客源。这种东西只有人有胆量，能交流都有实现的可能，但现实却是“饱和然后全员进入虚拟世界”。不过目前我看到的说法是，经济在倒退，基本需求已经从虚拟的精神上又在逐渐变回现实的物质上，不过我没什么感觉就是了。“钱很值钱这件事”还需要说明吗？在我看了“先富带动后富”从来都是个可笑的东西，只要没有共产主义，资本仍然存在，它只会让钱成为值钱的东西而不是技术。就算你的技术再高明，没有钱研发，没有钱买设备，你需要依赖资本，准确来说是大量资本，银行能起来不单单依靠它的客户流量，还依赖于用大量客户而产生的大量资本，我们所认为的值钱的东西，所以你给企业借钱不会高利润，因为很少，但银行就不一样了。一旦技术依赖于资本而活，但资本却可以不依赖于技术，那么就会形成不对称的支配市场，技术自然也不会比资本值钱。资本为什么会如此值钱，因为它可是一般等价物啊，它可以对所有实际物体形成支配市场，贫富差距只会变大重来不可能变小，除非能削弱资本的价值，但除了共产主义这种不切实际的幻想是不可能的，我们只能采取一些策略来旁敲侧击，像分级收税之类的。最后我们来正视一下“投机”是什么，投机实际上就是对社会的利用，人因社会而组织起来，在人类的群体生活中，利用好社会才是榨取最大利润的根本，以前的宗教和君主专制其实都是类似的思想，只不过现在换了个名字叫资本，而资本的起源是生产力提供的产物，是人类发展的必然，未来是否会出现新的统治者呢？我就不得而知了。 无知的恐惧有人可能怕没钱，但我却更怕无知。想来想去，钱也就是那么一回事，赚不到骂自己就行了，一旦发生什么大灾难不就是一堆废纸吗？但无知必回让你坠入深渊，现在审视一下自己为什么会如此珍视电子资源，或许是因为我害怕失去里面的知识。我上面会提两次资本，其实也是如此，资本令我们想要获取资源变得困难，让我们想要转移资源变得困难，如果不了解手机的构造，又怎么敢去拆解手机呢？依稀记得以前还不是一体机的时候，手机的零件想换就换，还有一大堆第三方制作商，现在呢？如今连安卓的底层系统都不太能信任了，它已经被产商该得面目全非了。知识十分重要，它可以带来很多东西，但很多东西都不能带来它，而且它具有极强的抗风险能力。但我依旧对无知感到恐惧，因为能完全记住的东西太少了，容易忘记的东西太多了。这其实也能验证验证我最喜欢的两个AVG主题，知识和记忆。我们的记忆力不够强大，无法做到过目不忘的地步，但计算机却能做到，所以在知识方面，我们不仅要依赖记忆，还要依赖计算机的辅助，所以我们才会倍加珍惜那易碎而脆弱的电子资源。这是其实有个很有趣的想法，人负责资源的组织，使其更容易被检索到，而计算机则负责存储编解码，这就是我所认为的“资源整理”的重要性，这是对无知恐惧的一环，我们害怕资源虽然唾手可得，但我们无处寻匿，在混乱之中迷失自我，因此我们喜欢秩序，它是知识的代表，讨厌凌乱，它是无知的象征。当你认为世界毫无规律可言之时，大概是自己过于无知了吧，害怕无知和害怕无序其实是一回事。这么看来，经常整理的习惯，或许只是在缓解自己的恐惧，而减少对无知的压力罢了。在资本的世界里活得很痛苦吧，没关系，拥抱知识吧。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"整理","slug":"整理","permalink":"http://example.com/tags/%E6%95%B4%E7%90%86/"},{"name":"素养","slug":"素养","permalink":"http://example.com/tags/%E7%B4%A0%E5%85%BB/"}]},{"title":"急急忙忙赶博弈论作业","slug":"急急忙忙赶博弈论作业","date":"2022-10-19T08:00:42.000Z","updated":"2023-09-03T13:50:19.803Z","comments":true,"path":"archives/2022-10-19-急急忙忙赶博弈论作业/","link":"","permalink":"http://example.com/archives/2022-10-19-%E6%80%A5%E6%80%A5%E5%BF%99%E5%BF%99%E8%B5%B6%E5%8D%9A%E5%BC%88%E8%AE%BA%E4%BD%9C%E4%B8%9A/","excerpt":"","text":"突然想起还有课堂作业没完成，于是今天马上就用最近的想法赶了一篇文章。写到后面自己都绷不住了，什么鬼玩意啊，为了服务文章强行修改经济学内容，灌输自己的主管判断，参考文献也是一通乱引用，当作业交上去应该没问题吧？","categories":[],"tags":[]},{"title":"越来越坚强了吧","slug":"越来越坚强了吧","date":"2022-10-17T14:14:08.000Z","updated":"2023-09-03T13:50:21.746Z","comments":true,"path":"archives/2022-10-17-越来越坚强了吧/","link":"","permalink":"http://example.com/archives/2022-10-17-%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%9D%9A%E5%BC%BA%E4%BA%86%E5%90%A7/","excerpt":"","text":"又坏了一个手机，便宜货倒无所谓，数据丢失是真难受。不过对于这种事早就麻了，因为以前就坏过两个手机、两张内存卡、一个U盘、一个硬盘。就跟ChronoBox一样，真佩服自己承受能力，竟能忍受着推完了好几个类似的作品。 说到底就是图个新奇，玩多了也会无聊。不过像纸上的魔法使这类，现实中加点非现实要素的作品，可能是我的偏好，至少它会不断刺激我读下去，而不是那种为了推完而推的作品。另一个就是记忆类，像白昼梦的青写真这种，其实ChronoBox也算吧，控制记忆相当于控制人的感知，考虑人自身的话确实十分有趣，最后是科学类，像牛顿、爱因斯坦什么的，或许我只是想看看它们能到达什么程度。剧情嘛，不看好坏，只看喜恶。","categories":[],"tags":[]},{"title":"","slug":"零零散散碎碎念合集/APlayer.min","date":"2022-10-14T23:47:10.904Z","updated":"2022-10-14T23:47:10.904Z","comments":true,"path":"archives/2022-10-15-零零散散碎碎念合集/APlayer.min/","link":"","permalink":"http://example.com/archives/2022-10-15-%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%A2%8E%E7%A2%8E%E5%BF%B5%E5%90%88%E9%9B%86/APlayer.min/","excerpt":"","text":"!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"APlayer\",[],t):\"object\"==typeof exports?exports.APlayer=t():e.APlayer=t()}(window,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=41)}([function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=/mobile/i.test(window.navigator.userAgent),a={secondToTime:function(e){var t=Math.floor(e/3600),n=Math.floor((e-3600*t)/60),i=Math.floor(e-3600*t-60*n);return(t>0?[t,n,i]:[n,i]).map(function(e){return e=0;t--){var n=Math.floor(Math.random()*(t+1)),i=e[n];e[n]=e[t],e[t]=i}return e}([].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);ti?t:e+(t-e)*((a=n/i)n?\"function\"==typeof i&&i(t):l(u)}()},n=function(e){if(!e.defaultPrevented){e.preventDefault(),location.hash!==this.hash&&window.history.pushState(null,null,this.hash);var n=document.getElementById(this.hash.substring(1));if(!n)return;t(n,500,function(e){location.replace(\"#\"+e.id)})}};return document.addEventListener(\"DOMContentLoaded\",function(){for(var e,t=document.querySelectorAll('a[href^=\"#\"]:not([href=\"#\"])'),i=t.length;e=t[--i];)e.addEventListener(\"click\",n,!1)}),t}})?i.call(t,n,t,e):i)||(e.exports=a)},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});var i=function(){function e(e,t){for(var n=0;n1),n=0===this.audios.length;this.player.template.listOl.innerHTML+=(0,a.default)({theme:this.player.options.theme,audio:e,index:this.audios.length+1}),this.audios=this.audios.concat(e),t&&this.audios.length>1&&this.player.container.classList.add(\"aplayer-withlist\"),this.player.randomOrder=r.default.randomOrder(this.audios.length),this.player.template.listCurs=this.player.container.querySelectorAll(\".aplayer-list-cur\"),this.player.template.listCurs[this.audios.length-1].style.backgroundColor=e.theme||this.player.options.theme,n&&(\"random\"===this.player.options.order?this.switch(this.player.randomOrder[0]):this.switch(0))}},{key:\"remove\",value:function(e){if(this.player.events.trigger(\"listremove\",{index:e}),this.audios[e])if(this.audios.length>1){var t=this.player.container.querySelectorAll(\".aplayer-list li\");t[e].remove(),this.audios.splice(e,1),this.player.lrc&&this.player.lrc.remove(e),e===this.index&&(this.audios[e]?this.switch(e):this.switch(e-1)),this.index>e&&this.index--;for(var n=e;n","categories":[],"tags":[]},{"title":"","slug":"零零散散碎碎念合集/APlayer.min","date":"2022-10-14T23:47:10.903Z","updated":"2022-10-14T23:47:10.903Z","comments":true,"path":"archives/2022-10-15-零零散散碎碎念合集/APlayer.min/","link":"","permalink":"http://example.com/archives/2022-10-15-%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%A2%8E%E7%A2%8E%E5%BF%B5%E5%90%88%E9%9B%86/APlayer.min/","excerpt":"","text":".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;transition:all .3s ease;max-width:400px}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#00ffffff\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\" \"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#00ffffff\",endColorstr=\"#ccffffff\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;transition:all .5s ease-out;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;transition:all .5s ease;will-change:height;display:none;overflow:hidden}.aplayer .aplayer-list.aplayer-list-hide{max-height:0!important}.aplayer .aplayer-list ol{list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list ol::-webkit-scrollbar{width:5px}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list ol::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list ol li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list ol li:first-child{border-top:none}.aplayer .aplayer-list ol li:hover{background:#efefef}.aplayer .aplayer-list ol li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list ol li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list ol li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list ol li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}} /*# sourceMappingURL=APlayer.min.css.map*/","categories":[],"tags":[]},{"title":"换了一个稍好看的框架","slug":"换了一个稍好看的框架","date":"2022-10-14T23:28:17.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2022-10-15-换了一个稍好看的框架/","link":"","permalink":"http://example.com/archives/2022-10-15-%E6%8D%A2%E4%BA%86%E4%B8%80%E4%B8%AA%E7%A8%8D%E5%A5%BD%E7%9C%8B%E7%9A%84%E6%A1%86%E6%9E%B6/","excerpt":"","text":"终于把主题从Next换成了Butterfly，都是当初魔改Next的锅，导致现在又要魔改Butterfly。因为Butterfly用起来简洁优雅，所以改成了它，没什么别的原因，以后还会慢慢完善的。","categories":[],"tags":[]},{"title":"零零散散碎碎念合集","slug":"零零散散碎碎念合集","date":"2022-10-14T23:27:42.000Z","updated":"2022-10-14T23:47:10.899Z","comments":true,"path":"archives/2022-10-15-零零散散碎碎念合集/","link":"","permalink":"http://example.com/archives/2022-10-15-%E9%9B%B6%E9%9B%B6%E6%95%A3%E6%95%A3%E7%A2%8E%E7%A2%8E%E5%BF%B5%E5%90%88%E9%9B%86/","excerpt":"","text":"大纲 经济与教育 学习为何要交学费 大学为什么而存在 资本主义下的，现金流动，资本剥削与技术发展的关系环境问题、资本操作网络资源、毫无契约精神 职业、工业、经济、学术知识的倒退，理解跟不上，真假难辨，与出海问题只是工具而已，重要的是创意(搞艺术) 生存环境，变异是好事(各种辐射)纯真绿色的价格炒作 犯罪理论黄赌毒痛苦理论 碎碎念的本质：随想随写、杂乱无章、没有逻辑的拼接之物；只提问，不回答；以自我为中心；数据资料事实全凭想象。 const ap = new APlayer({ container: document.getElementById('aplayer'), autoplay: true, audio: [{ name: 'スーブニール', artist: '奏ナコト', url: './スーブニール.mp3', cover: './cover.jpg' }] }); 碎碎念的本质：随想随写、杂乱无章、没有逻辑的拼接之物。 高等教育最近我看到一个很久以前的观点，它认为，在大学眼里，学生只是产品。我不禁有些赞同，并且还想以自身的立场来说一些闲话。在中国有个比较奇怪的现象就是通识教育的不断提高，在国外，学生面临就业和升学的选择在高中，但在国内却基本是本科毕业才开始选择。我没读过中专和大专，这类人的去处也不是很清楚，只能通过各种网传文章、视频来了解，最近印象比较深的是像“被嫌弃的40%”这样的标题，至少可以从中看出家长对于学历的态度。这样看来中国学历的普遍偏高应该是件好事，嗯，话说回来，当今大学生的校园现状怎么样呢？我只能说不知道。我们来考虑一些简单的问题，为什么大学要收学费呢？有人说这不是废话吗，学校还有养好多员工呢，要知道公立学校有很多东西都有国家拨款的，学校真得那么缺学生交的学费吗？我听过这样一种传言，大学实际上，一些有志的学生为了探究深入的专业知识而雇佣此领域的专家而产生的组织。大学本应该是为了学生的求学而存在的，但如今似乎有点成为资本下的牺牲品了，中国有那么多的教育培训机构，外国有吗？好像也有。那为什么国家要打击教培机构呢？它与国家的双减政策有关，简单来说双减就是不会让学生太劳累的一个政策，而教培只会增加学生的学习负担。很多人其实都这是一个很矛盾的东西，大家都学，我却在双减，不是自我放弃吗？我们放到大学来考虑就会发现“学习”已经变成一个多么畸形的存在。不断地学习更多的东西并不是什么大问题，问题在于你一直在学习重复的东西，很久以前就有人诟病，绝大多数大学本科所学的东西都与时代脱轨了，而那些重复的学习资料在各种培训机构的焦虑制造下，比如考研人数越来越多什么的？录取率越来越多什么的？但重复资料的上限就在那里，最终获利的还是那些似乎让你提升的教育机构那里。大学早就已经变成和初高中类似的通识教育了，只不过带有专业知识的通识教育。有人可能会觉得，这难道不是知识积累过多的原因吗？举例来讲就是一个领域知识积累了很多，导致只能在大学在建立一个通识性的专业，再在研究生阶段进行深入研究。这说到底只是一套说辞，读大学的人真得只是来求学的吗？在我看来，只是有些大学不愿意去把教程翻新罢了。我虽然不是什么全专业通才，但是我很清楚地知道一点，很多人都不知道自己本科在学什么玩意，而且本科毕业以后的工作更专业没有半点关系。讲得更通俗一点就是，你大学毕业后能做的工作，高中毕业后就能做了，那你说大学本科有什么存在的必要吗？单纯的只是学习证明吗？ 资本的潜层理解很久以前有人问过我这样一个问题，为什么出钱的老板会比员工的收入高出很多？盈利越高的企业越是如此。当时我还想，难道是劳动力的供大于求变得不值钱了？也难怪学历为什么在不断攀升，因为工作都找不到了。但仔细想想总觉得那里不对，以前自给自足的时代，生产力低下，却感觉大家都过得悠然自得的，但如今生产力不断提高的当下，理应进入共产主义，空余时间越来越多才对，但事实好像却是恰恰相反。不久前刚萌生出一个想法，难道“资本剥削剩余价值的本质是因为生产力的提高”，我们无法想象古代到底怎么样，但确实资本主义第一次盛行的时候正好是第一次工业革命(有人会觉得大航海时代就出现了资本主义，但那时也存在某种能力的提高)，这是巧合吗？不是吧。要知道，资本剥削的正是工具所产生的价值，而工人却因为所做的事越来越少变得更不值钱了。这样思考引出另一个问题，生成提高意味着所需工人的越来越少，一个好的方法似乎是增加更多的工厂，物资越来越多不是更好吗？错了，资本只有挣钱它才能发展，地球的资源又是有限的，它限制了工厂的数量，另一方面则消费力的有限，资本过度发展最终只能导致金融危机，生产资料过剩，消费力不足。深入探讨的话，就会痛苦地发现，经济系统的良好运行时无解的，综究还是得回到自然界的“物竞天择，适者生存”上面去，剥削永远是存在的，你要么站在被剥削的地位，要么去剥削别人。 虚拟付费人与人产生交易时，一切就会变得奇怪了。虚拟产品就是其中之一，记得还小的时候，我一直认为电子书是一个极大的突破，它可以极大地减少信息传输的成本。这本应该是技术发展的初心才对，但现在人似乎不这么认为，它们认为虚拟产品包含了作者的辛勤付出，应该要有版权意识，是要付费的。但我总觉得难里怪怪的，是因为人家有付出才要收费，还是因为能收费人家才去付出呢？我一直在想古人写那么多文章有收费的概念吗？好像有说书卖艺之类的可以赚钱，但大多时候的创作难道不是因为想做才去做的吗？很久以前我认为是因为资本的介入才使得原来为爱发电的产物都变成了资本的销售产品。但如果考虑到我之前所说的，“生产力导致的失业”，那么另辟蹊径，寻找新的就业方式应该很重要的。虚拟付费就是其中之一，其实不久以前我产生过这样一种设想，当生产力极度发达的时候，贫富差距绝对很大，而实体生产的工人需求量不高，物质层面已经极度饱和了，就应上升到精神层面，过剩工人从事虚拟产品的制造，让上层资本主义进行消费，实现资金的流转。但转念一想这不就是现代社会的底层运行逻辑吗？虽说虚拟付费不合理，要知道资本产下的虚拟产品只会让为爱发电的人觉得空虚，但为了社会的长远发展，只能让它进行下去了，但是“倒卖狗”绝对是不能被允许的。与此同时，我们在steam买下第一款虚拟产品“WallpaperEngine”。 技术如今我更害怕的是好多技术都学不到了，它们不存在于通识教育的大学了，而存在于老师傅的传授之中，至于职高技校有没有，我就不得而知了。现实的很多产品，我们都没有完整地知道是如何从自然界中制作出来的，又有多少的流程，有人会觉得这是术业有专攻吧，人怎么可能奢求完美呢？问题是这种技术为啥没有被传播开来呢，因为对大众无用，还是核心技术的保密。说实在的，后者确实需要认可一番，有些制造技术需要考虑现实环境，被企业作为核心技术进行盈利，像光刻机之类的。像我这样渴求这些知识的人，终归只能抱怨，抱怨自己无法走遍大江南北，深入探索各种制造技术。但是呢，我们可以退而求其次，探索复杂度有得一比的计算机技术。但不得不说学校一直止步不前，实在令人感慨惋惜，不论现实的制造技术，还是虚拟的计算机技术都得靠自己。其实这也没什么，就是轻松的人更轻松，基本没什么学业负担过了就好，累的人更累了，因为它们还得不断卷学业为了考研。但这又产生了另一个问题，学生对老师的不信任，当大多学生都是为学习而学习之时，导致他们的知识水平一直处于这个层次，老师随便蹦出几个听不懂得词语，自己也懒得解释的时候，就会很容易让人产生质疑，特别是我这种人，老师你真的理解自己在说什么吗？暂且不说那种本身就很玄幻的文科，理科也是如此。书基本都是抄来抄去，连自成的体系都没有，只是东抄抄，西抄抄，形成一个缝合怪。很久以前，我就很认可一种说法，只有让人听懂了你讲什么才能说明你理解了它，但有人喜欢用这是专业知识无法科普为借口来掩盖自己的无知。技术一直都很玄幻，总给人一种似懂非懂的感觉，大家都不敢编书，因为编书可是意味着理解啊！如果不理解的话，不就只能一直用被理解的老知识不就行了吗。 想法有时学了一大堆工具，你就会不仅的思考，我什么也没有做到，因为你没有创作的想法。工具学得再多你也不算什么，真正的强者是拿着仅有的工具发挥出远超想象的作用，你可别认为这是无稽之谈。举个简单的例子，如今市面上流传着众多Ps、Pr、建模之类的教程，但我觉得很多都不合格，它们只会告诉你这个软件怎么去使用，但这完全是可以由产品的说明书所提供的信息，所谓教程只不过是缩减编排了一下而已，师者,所以传道授业解惑也，单纯地念说明书的能叫老师吗？我们比较欣赏的是那类案例教学，先介绍几个基本功能，然后基于各种想法，只通过这些工具实现许多的案例。现在很多人，特别是在编程领域的想法就是，有没有什么第三方库能实现这个功能，并美名其曰“不造重复的轮子”。当然，在媒体制作上，一般是素材的堆砌，“提高效率，快速地实现想法”是个好的出发点，但做法不是很恰当，这样很容易让人产生懒惰的想法，导致组合的时候也是干巴巴的，做不出什么有意思的东西来。你会使用的只是表明，工具的组合复用和各种奇思妙想，你都没有学会。我最近的一次案例教学还是在“商业伦理”的课上，只可惜我对这类东西实在不是很感兴趣。我记得有些hr会这么感叹，总是招不到合适的人，但明明一大堆人都在找工作，很多企业基本都是“宁缺毋滥”的思想，较多的人为学习而学习，他们只知道怎么用，想着机械地完成工作，没有自己的想法去改进。看着如今越来越不好用的软件，我不仅感慨都是什么人在维护这些软件啊！我们已经很久没有写计算机相关的文章了，很大的原因是因为缺少想法，什么样的文章值得被写出来，我们不清楚，但我们知道像说明、操作、复述等没有任何创新和改进或形成架构的东西，不值得出现在这里，它只会让这里的整体价值下一个台阶。想法一般来源于大众，在互联网中丰富内涵，提升想法广度是我们目前采取的策略，一昧地学习已经没有意义了。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"合集","slug":"合集","permalink":"http://example.com/tags/%E5%90%88%E9%9B%86/"}]},{"title":"审美好难啊","slug":"审美好难啊","date":"2022-10-13T02:12:06.000Z","updated":"2022-10-14T23:47:07.909Z","comments":true,"path":"archives/2022-10-13-审美好难啊/","link":"","permalink":"http://example.com/archives/2022-10-13-%E5%AE%A1%E7%BE%8E%E5%A5%BD%E9%9A%BE%E5%95%8A/","excerpt":"","text":"搞艺术的话，重要的还是审美能力，不然再好的工具也难以达到满意的效果，但审美这种虚无缥缈的东西怎么培养才是个大问题。","categories":[],"tags":[]},{"title":"ai的不断发展","slug":"ai的不断发展","date":"2022-10-11T23:54:38.000Z","updated":"2022-10-14T23:47:06.788Z","comments":true,"path":"archives/2022-10-12-ai的不断发展/","link":"","permalink":"http://example.com/archives/2022-10-12-ai%E7%9A%84%E4%B8%8D%E6%96%AD%E5%8F%91%E5%B1%95/","excerpt":"","text":"最近怎么回事，一大堆AI绘图。明明我还在苦苦学习，想要设计一个形象，现在搞得我都不想干了，干脆用AI帮我完成算了，反正这也不是我的主业，结果我的电脑根本跑不动NovelAi这个模型。到底该如何是好呢？","categories":[],"tags":[]},{"title":"奇怪的打脸方式","slug":"奇怪的打脸方式","date":"2022-10-04T10:18:50.000Z","updated":"2022-10-14T23:47:07.738Z","comments":true,"path":"archives/2022-10-04-奇怪的打脸方式/","link":"","permalink":"http://example.com/archives/2022-10-04-%E5%A5%87%E6%80%AA%E7%9A%84%E6%89%93%E8%84%B8%E6%96%B9%E5%BC%8F/","excerpt":"","text":"前几天，我刚说不看好量子计算机，今天物理诺奖就颁给了量子信息领域，真是讽刺，看来我的学习还是不够深入呢！","categories":[],"tags":[]},{"title":"学点新东西之量子化学计算","slug":"学点新东西之量子化学计算","date":"2022-09-30T22:18:14.000Z","updated":"2022-10-14T23:47:07.848Z","comments":true,"path":"archives/2022-10-01-学点新东西之量子化学计算/","link":"","permalink":"http://example.com/archives/2022-10-01-%E5%AD%A6%E7%82%B9%E6%96%B0%E4%B8%9C%E8%A5%BF%E4%B9%8B%E9%87%8F%E5%AD%90%E5%8C%96%E5%AD%A6%E8%AE%A1%E7%AE%97/","excerpt":"","text":"最近读怀尔斯关于半稳定模性定理的证明有些厌烦了，于是我们来学点新的东西吧，最终我锁定以一个看起来比较有趣的东西，就是这玩意，量子化学计算。 理解理论虽然这只是一个编程的事，完成代码就行了，但是不理解原理的话，就会轻易地被各种名词给绕晕，完全不知道自己干了什么。其实这个比赛，只是之前已有比赛的打榜活动，题目基本一致，换了数据集，然后使用上一次比赛的比较好的算法作为模板，并以此为基础将优化作为比赛目的。综究，两次比赛的模板有较大差别，不懂得原理的话，想将上一次选手的代码搬运过来都不是简单的事。总之，我们理解理论基础是必需的，不然像下面这样的题目 也完全不知道到底要干什么。从所有已知的信息来看，我们需要学习两个东西，量子计算机的基本架构和量子化学的基本原理。 量子计算量子计算机像是个大饼，基础理论在20世纪就已经有了，但实际制作却有着极大的环境限制，特别是低温环境、低比特等，想要投入日常还有好长的路要走。但真的需要学量子力学吗？笔者虽然学过一些，但以笔者的观点来看，比起物理，它更像数学，准确来说，你可以理解数学上的量子力学，但你不应该说自己理解现实的量子力学。当然理论大饼还有好多，实际能投入应用的也真不多，主要还是人类对自然的控制力还不够大，回归正题，我们需要理解什么呢？先从现代的电子计算机说起，并且我们来考虑计算机最原始的作用，数学计算。主要原理是微观电路，使用电路的通断实现0,1的数字模拟，所以进位制的数字都是等价的，因此进行二进制运算和进行十进制运算是一样的。运算实际就是电路状态的一种转化，两条电路接入一个门电路以后，另一段可以输出门运算的结果，而这种运算依赖于，在低电压环境下晶体管的特殊性质，比如二极管的单向导通，通过特定的组合可以形成各种门电路，通过数学的基本原理可以知道，门运算完全可以模拟四则运算。这样借助电路的高速流通，我们可以实现一般意义上的电子计算器。这些都是众所周知的事情，计算机的另一项重要技术是编解码，通过对二进制信息的解码理解，有些外置设备可以由此实现不同的表现效果，从而构成了现代家用计算机的基础。计算机的基本构件无非三个，可控的状态表示物、可以改变此物状态的控制原件和对状态的解释原件。量子计算机使用的状态表示物，只要是微粒基本都可以，比如“九章”使用的是光量子，就是我们常见的那个光了，至于怎么让它如我们所愿去流动，只能说如果我知道的话，早就去当研究人员了，其实我一直觉得工科比理科重要太多，理论是一回事，怎么在现实中实现则是件更困难的事了，它可没有理论中那么美好的假设。而量子比特的状态，使用|0&gt;和|1&gt;，似乎与经典计算机没区别，但实际还有一种叠加态|φ&gt;=a|0&gt;+b|1&gt;，其中ab满足归一化条件a²+b²=1，而状态的测量，则依靠哈密顿算子&lt;φ|H|φ&gt;，怎么实现不是我们这种一般人考虑的问题。另一部分则是“量子门”，用来改变此物状态的控制器，以目前对量子力学的理解能实现较多的门控制器，相比传统计算机的与、或、非，量子计算机有X门、Y门、Z门、Hadamard门、CNOT门以及旋转门RX门、RY门和RZ门。X门有非门的作用，可以将量子态|0&gt;转化为|1&gt;、|1&gt;转化为|0&gt;。想要理解这些量子门，最好从量子力学的矩阵表示来解读，对于一比特的量子，我们使用二维向量来表达两个量子态上的分量，于是 另外对于多量子比特，比如2比特的|00&gt;、|01&gt;、|10&gt;和|11&gt;，则可以使用张量积来生成 而相应的量子门，表示向量间的转化，于是可以用矩阵来表示 其中H表示Hadamard门 其中旋转门带有参数，而CNOT门是作用于两个量子比特的门，通过一个量子比特来表示另一个量子比特是否执行X门。此时量子比特通过一个门，可以表示为矩阵的乘法，比如X门 有些人说，量子计算机因为具有叠加的性质，数据量随比特数呈指数增长，因此有极大算力，这种说法是有问题的，存储能力的增加并不代表计算能力的增加，量子计算机的强大在于比特间通过矩阵所实现的并行运算，但这和GPU的并行运算有本质的区别，显卡是通过多个计算单元在统一的指令下实现的并行计算，实际是以量来取代速度，但量子计算机则是纯正的矩阵运算，它是单核实现的并行运算。简单来说，比如计算下面矩阵积 传统电子计算机，需要完成4个任务，1×4+2×2,1×3+2×1,3×4+4×2和3×3+4×1，由于它们之间的计算互不干扰，所以可以分别用四个计算单元来并行运算，现代人工智能的主流——深度学习，还有就是现代游戏高端渲染的图形学，常用的运算就是矩阵计算，也因此GPU在这些领域大放光彩。如果放到量子计算机的话，矩阵运算就是它的天然运算，计算速度自然也是成倍的增长，这差不多就是量子计算的简单秘密。由于量子计算机，我们用不到，所以只能拿框架依据原理来模拟，参考文档在这里。 量子化学接下来我们要进入我们的重点了，量子化学，简单来说，它就是研究怎么解薛定谔方程的学科，通常情况下，我们要解的是对不同分子体系的定态薛定谔方程 其中是哈密顿算符，它有两部分相加，表示动力学的部分ħ和表示所受势能常的部分，总结写成如下形式 我们需要方程的基态能量，由于波函数我们是不知道的，我们只能通过分子构型给出势能场，主要电磁力场，而对于其它三种力，引力由于质量过小可以忽略，而化学往往将原子核作为一个整体考虑其与其它电子和原子核的作用，核内质子与中子之间强力可以不用考虑，而弱力存在于衰变元素中，量子化学考虑的都是稳定可拿来运用的元素，因此也不做考虑，对于多原子分子体系，其展开薛定谔方程如下 如果考虑量子场所在的希尔伯特空间，我们通过哈密顿算符矩阵表示的特征值来得到基态能量，而不需要波函数，这其实就是矩阵理论中求特征值和特征向量的过程。所以目前解方程的难点集中于哈密顿算符上，向前迈出的第一步是BO近似，即将原子核与电子进行体系分离，主要因为两者的量级差别大，对互相的影响不大，最开始的波函数是整个分子体系的叠加，分离以后，我们会得到电子和原子核两个量子体系方程。原子的性质由外层电子决定，因此我们主要考虑电子所在体系的薛定谔方程，而计算的也是这个体系的基态能量。接下来用很多的方法来求基态能量，比如HF、CCSD、FCI等，至于怎么做的也不重要，知道它是计算电子体系薛定谔方程的基态能量就行了。还有就是，基态能量有啥用吗？测不出来吗？什么的问题。基态能量，它受测不准原理的影响，对于物体的内禀性质，往往要依靠其它量来计算，比如速度，我们要通过同时测出路程和时间，然后相除来得到。但在量子体系中，有些量存在互斥性，不能同时得到，它们的误差积永远大于一个固定值，能量就是这样的存在。关于基态能量的作用，我也不太清楚，似乎是可以通过大量计算各种分子的基态能量来寻找合适的材料，而量子化学只需要分子构型就能完成计算。 VQE随着分子量的不断增大，上述的算法，特别是比较精准的FCI，在传统计算机上，计算量呈指数增加，因此对于自然界广泛存在的大量大分子物质，计算速度不满足需求。其实我也很好奇，这些东西又不会变化，计算后再做一个数据库不就可以了，还寻求啥优化算法，越学就觉得学的东西越来越奇怪。人家机器学习要算法是因为数据总会变，但物质在怎么多，认识到的也是有限的，总会被时间搞定的，但后来我才知道，它的作用是用来为合成做指导的，通过遍历各种分子构型的能量，从而知道那些分子可能是稳定的，从而这个分子可以作为合成的路径点，这样我们寻找合成材料并非胡乱合成而是有了确切的方向。总之，提高计算基态能量的速度是有必要的，而VQE则是一种通过量子计算机来实现高速计算的方法，感觉是废话，难道有哪个算法放到量子计算机上是速度变慢的吗？当然它还说自己是一种量子-经典混合算法，不管它说什么，我们还是来研究一下原理，在MindQuantum的这个文档下有稍作介绍，简单来说它有两个步骤，首先转化为一个量子参数学习过程，然后再学习相应的量子参数值，也就是说它的基于量子机器学习的优化算法，我们先来讲讲什么是量子机器学习。我们可以先来看一看传统机器学习的框架 机器学习的模型实际就是一个带参数的可计算函数，一般模型开始时会随机生成参数，学习过程就是不断喂入数据计算，然后通过损失函数来评估结果，再通过反向传递的算法来更新参数，其中的每一步都有极大自由度，怎样的函数结构？怎么评估结果？如何根据结果来修改参数？我们可以看到机器学习的神经网络与人有较大差别，人的神经元网络结构随学习而改变，而机器学习的网络结构一般都是固定的，学习能改变的只是参数，当然实际上也有一些比较奇怪的算法来模拟神经元死亡之类的，但我们不过多关注。量子机器学习也是类似的存在，只是它的学习可以直接在电路上实现，传统计算机的门电路不带有可学参数，本身不具有可学习性，我们只能通过内存数据可变来模拟学习参数。但量子计算机的门电路天生带有参数，指的是旋转门，因此量子机器学习是在电路层面上的，这就是由量子电路组成的神经网络，而损失函数和更新算法则是在传统计算机上，总结如下图 两者的主要差别就是这个计算的函数，我们把量子计算机上的这个函数或电路称为量子线路，量子计算机的优势就是矩阵运算，而传统神经网络部分的计算核心也是矩阵，因此将这部分转化为量子线路是合理的，这只是从计算角度考虑，单纯考虑逻辑能力的话，还是传统计算机更加优秀成熟，这其实也是CPU优于GPU的地方，正因如此我们才会将损失函数放在传统计算机上。传统量子路线应该有三个部分，Encoder(编码)，即将训练数据转化为量子比特数据，Ansatz(拟设)，即我们主要的训练计算网络，里面还有相应的量子参数，Measure(测量)，即量子态数据转化为可用于传统电路的数据，传统计算机的冯诺依曼构造，有一个重要的部分是存储器，目前的量子存储器还处于开发难点期，所有如果想要保存数据的话，最终还是要放到传统计算机上，因此目前来看Measure是一个重要部分，不过说起来，量子计算机好像也还在梦里。回到我们的VQE，我们不存在训练数据，也没有验证结果如何数据，这是种无监督学习，因此我们肯定要在传统结构上改革。VQE基于变分原理实现参数更新 我们使用参数决定函数来作为拟设，它是一个变分，而此变分的最小值是基态能量，我们的目标是得到这个变分决定参数，有些人可能没有学过数学上的变分原理，所以可能不是很理解。我们可以把它理解为一个求最小值所对应变量的过程，对于拟设，我们可以把它看为一个变参函数，我们只要让这个函数的值尽可能小就能越靠近基态能量，这样问题实际就是一个求最小值得过程，这是一个典型的无监督学习过程。转化为具体的过程大体如下。先准备所需的量子比特，接着通过带参拟设量子路线，它相当于一个根据不同分子构型生成的一个带参函数，接着我们将得到的比特进行测量，通过一个计算过程它相当于由拟设得到的能量，进行一次优化算法，更新量子线路参数，反复计算我们就会离极小值越来越近。对于优化部分是传统计算机的求极值算法，不做过多讨论，我们看看这迷一般的拟设，比如拟设就是乱搭量子线路吗？肯定不是这样的，跟传统神经网络一样，对于特定的问题应该相应匹配的结构才能达到较好的效果，比如图片识别，肯定会用模拟视觉的卷积神经网络，语言相关肯定会用与记忆相关的循环神经网络。而用于求基态能量的VQE应该也要有相应的基础架构才对，乱搭肯定是没啥效果的。当拟设量子线路是一个幺正耦合簇(UCC)时，VQE的计算效果比较好，你把它想象成有具体构造的量子线路，真要讲的话又是一大堆东西。在UCC基础上，效果更好的是UCCSD(Unitary coupled-cluster with singles and doubles)，而题目的要求其实就是要我们在uccsd基础上进一步设计量子线路。关于uccsd拟设我们再说点其它东西，它是一种量子线路生成算法，它会根据不同的分子构型，生成相应的带参量子线路，mindquantum提供了一个基础api函数generate_uccsd就是如此，它需要传入分子构型，而输出结果ansatz_circuit,init_amplitudes, ansatz_parameter_names, hamiltonian_QubitOp,n_qubits, n_electrons中，ansatz_circuit是拟设量子线路，n_qubits是需要的量子比特数。 实践操作学习的差不多了，我们来看看题目具体的代码模板吧，有了一定基础后，我们直接来看主要代码 在传入参数中，prefix只是一个分子名称，代表了分子的构型，主要传入uccsd预设，用于调节某个依分子改变细微参数，molecular_file是分子构型数据文件，就是一些数据的集合，可以使用HDFView打开 看起来有一大堆数据，主要是矩阵和列表两种，但真正用到的数据也不多，比如ccsd_××这样的数据属于ccsd计算过程中的一些数据，ccsd_energy则是对应计算出的能量，basis表示计算定位基矢类型，此处是sto-3g，它们最终包装为python中的MolecularData结构，下一句是初始化构造优化器，没做什么具体的内容，run_pyscf则是对molecule进行scf,ccsd,fci等算法并生成带有这些计算过程的MolecularData对象mol，其中1,0分别表示相应算法是否执行，这其实是为后面的uccsd做准备的，我们知道uccsd实际是一个机器学习算法，我们需要学习其中的参数，那么为了完成计算过程，初始化是必需的，从目前已知的研究来看，使用ccsd的结果、大于设为0、大于随机，因此我们在此处使用计算量较小且精度较高的ccsd，并对这个结果进行量子机器学习优化。下一步，generate_circuit即更具分子mol来生成相应的量子电路，里面就是我们主要要修改的地方。最后，optimize以固定精度进行优化迭代，在通过en返回结果，它集成了学习的所有过程，目前1e-2效果较好，没有太多可改的地方。我们来看看主要的电路部分 电路的第一步是X转化门，量子比特的初态都是0，为了后面便于使用此处先转化为了1，接下来就是重要的拟设部分，它都集成在了Uccsd_Generator内部，也就是说探索这里的内部才是优化的主要部分，后面生成量子线路模拟器并给优化器使用。这样，代码结构、需要做什么已经很清楚了，笔者在研究时发现了这个架构的不协调点，也正因如此笔者决定放弃继续研究这个东西了。从上一张图，笔者跑了一下这个基础模型，用了比较久的时间，最后得分456.96多，我们先来看一下这个评分标准 最开始就看到了，“与FCI方法计算结果进行比较”，基态能量不能直接测量，也就得不到如何评价算法优劣的指标了，于是比赛方干脆拿计算结果较好的FCI作为基准，这时我就想到了破绽在哪里，这样哪里有必要用那么多时间去进行量子学习优化，直接拿FCI计算结果不就行了吗，就像下面这样 看到没，我直接不做任何优化，直接把fci的结果返回给en，最后得分0.7180多，这和我电脑性能没什么关系，我就把这个东西直接提交过 我自己都觉得郁闷，1.1325确实低得有些离谱，其实这还不是最离谱的地方，通过之前的探索我们知道，为了通过Uccsd进行优化，我们需要先预算出ccsd能量，然后再进行逼近，但如果我们懒得逼近了，会怎么样呢 分数竟然离谱得更低了，简直优化了个寂寞，当然这样刷小聪明，不是什么值得称赞的事，我们必需清楚比赛方的意图。在此之前，我们先来解释一下为什么会有这样的结果，首先是ccsd的得分比fci高，通过日志文件 可以看到ccsd的运行时间比fci小很多，而在评分公式也可以发现，精度只要达标就行了，主要定位度量还是时间，好巧不巧的ccsd计算结果正好达到了要求的精度，num_err个数为零，结果就是单纯变成了时间的比拼，没错这其实才是关键所在，如今我们使用了三套体系计算基态能量，CCSD+量子线路、FCI和CCSD，由于这些算法全都达到了精度，于是在时间比拼上胜者必定是CCSD，但这显然不是比赛方的目的，回顾比赛的主题，我们发现应该是量子计算而是量子化学，而量子化学只是来表现量子计算的一部分而已。笔者猜测，它们应该是这样一种未雨绸缪的思想，当量子计算机真得实现的话，在有相当的精度下，CCSD+量子线路的时间应该是比FCI小，但这次精度的设计并不好，导致CCSD可以直接钻空子。其实不仅如此，我们还需明白为什么差距大得有些离谱，当然是我们吃力不讨好地用传统计算机来模拟量子线路的原因了，这样反而使得简单的算法变得更加复杂，从而导致时间被大量的浪费了。不过思来想去，可以从另外一个角度来看待这个问题，如果传统计算机都能达到较高速度，那量子计算机不就不得了了。我猜测正是因为这个原因，比赛方才会把时间作为评分的主要标准。这里我们不得不提一下比赛得另一部分，虽然它已经过去很久了，且还没有打榜活动，但它却是以正确率作为评分标准，而且是一个很传统的手写体识别问题，如果用传统的算法实际上比什么量子线路正确率高太多了。其实这里主要是另一个目标了，就是在量子线路上提升智能性，这与我们的量子化学所考验的计算能力是不同的，也难怪得分是一起算的。正因为这些莫名其妙的情况太多了，涉及智能类的算法是，经常在决赛都有一个答辩环节，来看看你是否有造假的可能。所有笔者也不太喜欢参加这类比赛，虽说实际设计的时候，也不是胡乱搭建，有一定的逻辑思考，但怎么看运气成分还是有点大的，而且计算机还有浮点数据精度的限制，出现的问题太多了。再者，目前比较前沿的算法，运算量都比较大，在笔者手上的这个破电脑上跑起了还是太吃力了，有一次我跑了一个152深度的残差神经网络，跑了一半，内存直接溢出，电脑给卡死了，而且我还是关闭桌面系统linux上运行的，应该算是给出了所能给出的最大资源了，但依旧无济于事。总之，我算是给自己了一个退出学习的理由，不想搞了，除非哪天量子计算机真得到了我的手上。虽然笔者还未触及最精彩的部分——uccsd具体的内部结构，但已经没有什么前进的必要了。量子化学，我们有缘再见。还有那个我随便耍耍的分数，不给更低的都不更新我的结果了，搞得我很难堪啊，难道只能删账号跑路了吗？","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"未知","slug":"未知","permalink":"http://example.com/tags/%E6%9C%AA%E7%9F%A5/"},{"name":"理解","slug":"理解","permalink":"http://example.com/tags/%E7%90%86%E8%A7%A3/"}]},{"title":"谁才是资本主义","slug":"谁才是资本主义","date":"2022-09-28T23:41:41.000Z","updated":"2022-10-14T23:47:10.335Z","comments":true,"path":"archives/2022-09-29-谁才是资本主义/","link":"","permalink":"http://example.com/archives/2022-09-29-%E8%B0%81%E6%89%8D%E6%98%AF%E8%B5%84%E6%9C%AC%E4%B8%BB%E4%B9%89/","excerpt":"","text":"中国，China，一个比资本主义国家更加资本主义的社会主义国家，开玩笑的，我其实不懂资本主义和社会主义。","categories":[],"tags":[]},{"title":"世界拒绝了我","slug":"世界拒绝了我","date":"2022-09-21T01:58:57.000Z","updated":"2022-10-14T23:47:06.838Z","comments":true,"path":"archives/2022-09-21-世界拒绝了我/","link":"","permalink":"http://example.com/archives/2022-09-21-%E4%B8%96%E7%95%8C%E6%8B%92%E7%BB%9D%E4%BA%86%E6%88%91/","excerpt":"","text":"“伽玛函数，我记得好像是有个e乘了个x什么的然后再积个分之类的吧？啊啊啊，这东西查一下不就行了吗？”“不行哦，XX。这是基础不牢的体现。”“可是除了考试，能感知它的存在就足够了吧，知道这么一回事不就行了吗？”“数学与其它学科的根本区别在哪里？”“没什么用，现在都不知道在研究一些什么奇怪的东西，嗯…最虚的学科吧，我说的纯数学，可别误会了。”“数学上都这么不严谨，说话倒是小心翼翼的。”“怎么说呢？自然养成的吧。”“数学与其它学科根本区别是严谨。”“啊，说起严谨，真的是这样吗？我记得，有老师洋洋洒洒地说模形式可以构造出一个椭圆曲线，然后又讲什么模性定理，什么费马大定理的证明什么的？但是，听得越仔细就越觉得奇怪，比如怎么构造怎么也没说，还有怎么构造表示也没说，直接说什么这个表示与模形式相关什么的。”“这是讲解地需要，有很多东西，全都讲完全的话，时间根本不够，重要不是定义是什么，而是它有怎样的性质，能给我们带来怎么样的感受，所以模表示，后来才会用Frobenius元素的性质来定义。”“其实，我还很好奇一点，数学这东西真的能看出读者有理解吗？定义、定理、证明基本都是搬来搬去，说是什么严谨，有时连表述也懒得改，所谓的讲，和把提纲读一遍没什么区别，不论哪里都看不出转述者的理解在哪里？”“不说数学，其它学科不也差不多吗？水平这种东西全凭主观。而且，这样难免有点以小人之心度君子之腹了，说不定只是人家不擅长将理论讲给别人听而已。”“我一直觉得被动地接受理论而没有任何质疑实在太奇怪了，这给我一种感觉，没有理解理论的自信的感觉。”“对于正确的东西，有质疑错的也是自己吧，或许教师只是不想将学生引向错误的道路而已。”“但是只有犯过错才能体会成功的美好。”“是的，只有经历过邪恶的善良才是真善。”“我们别说这些虚的东西了，反正我已经变成这样了。”“怎么样了呢？我没有什么感觉。”“当然是遗忘了，我的记忆力出奇的差啊，看样子不适合数学，连个伽玛函数都记不住。”“你刚刚不是还说挺正常的吗？”“对了，我到底是来干什么的来着？”…………现实看起来很魔幻，但远远比小说来得平淡，他就是如此的普通，没有任何苦难，学习上虽然会有些小挫折，但也就那样，校园欺凌、社会的黑深残什么的，永远只能活着幻想的世界里。他很不满这样的事实，为什么生活会如此地一帆风顺，为什么没有一场极大的灾难降临到我的头上，为什么我不可以有一个出身贫寒，艰苦奋斗的形象，那我苦苦学习为了什么，学的还是这个世界上最抽象的理论——数学。我学不会数学，但不能把它归咎于外部原因，因为我找不到这样的原因，我想把它归咎于自己比较傻，但这也不行，虽然你的成绩这么好呢？学校的考试算什么呢？你只能说，是自己懒，只想学着装逼，什么都跳着看，找到些看起来不错的词就记下来，丝毫没有理解其中的内涵，你只能说是自己急功近利，想要快速地掌握所有的内容，飞速阅读，成功学会了所谓抓重点的技巧。呵呵，这个世界太可笑了。坐在教室，看着大家勤勉的样子，想想自己在干啥呢？拿着作业装样子，一点也不想看，看看都觉得无聊。看到窗外的世界，似乎很广阔的样子，但每日每夜都在几个固定的地方游离，只是没有摆脱日常的勇气罢了。他知道自己无能，早就与数学失之交臂，但它难免有一点幻想，幻想自己在中国这种学术环境下脱颖而出，并且接受采访，再给自己附上一层悲剧色彩，因为这腐朽的教育制度，导致自己与名校愈离愈远，但想起自己的梦想，一颗永不磨灭的心，毅然决然地在低廉地环境中做出远超环境的学习，并封闭自己专心研究，日思夜想，只为解决世界数学难题。仿佛自己是世界最孤独之人，身边没有任何可以与自己畅谈的挚友，但是他不忘初心，强忍着无人可解之痛，最终到达理想之巅。“××，你还在做着这样的妄想啊。”“好歹，我也是很认真地在学习，虽然越读越不想读了，我真得好痛苦，可是我除了数学，什么也没有了，这已经是一条不归路了，时间成本让我无法回头”“其实，现在低技术的工作根据我的猜测，至少有个百分之八十吧”“那也是猜测吧，社会都还没步入，谁知事实怎么样呢”“看到那个花坛了吗？说点东西描述一下。”“这是要干什么”“别管理，你说就是了”“大大的花坛，五颜六色的花，真好看”“不对吧，这花不就两种颜色，哪里有什么五颜六色”“因为让我的心情变好，所以感觉就是五颜六色了”“也就是说，你是思想派了，什么都靠想出来是吧。”“别说得我好像不接触现实一样，我每天至少三次要和食堂的阿姨打交道”“现在让你写一篇文章，你觉得是什么风格的”“给大众科普某个定理”“不不，讲点文学性的东西”“当然是一种生活艰难，受尽歧视，却已经坚持自己梦想的人的奋斗故事了”“那是你给自己的设定吧，真要写的话，你真的写得出来吗？这种与现实不符的东西。”“不太理解”“比如你的故事只有妄想和设定，然后没有任何故事描写来充实设定”“嗯，我看了这么多，怎么可能写不出故事”“如果和你所见的相同的话，那就是套路了，被读者读腻的套路，比如对话在这种背景下写得出来吗？”“有的，我光是自己学习的时候，就会想我在给学生讲课，而且学生不断会提出疑问，然后我再一一解答”“人格分裂了吧”“不至于，好歹没出现哪段记忆缺失的感觉，而且我是在遵循希尔伯特大师的教会，”理论的成熟意味着可以把理论清楚地讲给普通人听””“对于数学，这不大可能吧”“最开始，我是这么想的，但后之视今亦犹今之视昔嘛，以前很多概念，像坐标、矩阵之类的，很多人都不懂，现在感觉很平凡，但…”“但…？”“如果仔细想想的话，定义深度很值得考虑，如何一个数学定义的依赖定义多到一定程度的话，科普什么的，根本不存在吧，因为真得严格科普的话，不就变成了教数学吗？”“但我们应该正向地思考，正因为教育的越来越普及，概念基础深度就会不断减弱”“但这存在速度关系吧，数学深度增加的速度远大于平均水平提高的速度。而且数学还有很特别的一点是，数学不同的领域都能存在鸿沟，这在其它的领域是很难见到的。”他的眼角有一点湿润，他只是坐在书桌前，对着读不下去的参考文献发呆而已。“哈，又到吃饭的时间了，为什么我会意识到这一点呢？”“为什么就不能出现所谓废寝忘食的现象呢？”“为什么我作为一个学术人却过着这么有规律的生活”“为什么反倒是周围那些不知道干什么的人经常日夜颠倒，饮食毫无规律”人都好善良，不想把别人想得艰险狡诈，不想随意的揣测别人，食堂阿姨很好，经常给我加菜，经过的路人很好，至少谦谦让让，不会盲打莽撞，走过的路也很好，从来没有让我滑倒，窗户也非常的好，为炎热的我带来凉风，空气也非常好，至少不会让我窒息，天气也很好，经常不会下雨……我又不禁感叹，或许奇怪的是我不是世界。“你的视野有些狭隘，不能把这样的生活用于所有的学术人，这应该只是个例”“是嘛，但我找不到任何完全描写学术人生活的作品，传记之类的不算吧”“大众小说需要亲民，连一点日常感都没有的日常根本没人看得下去吧”“是的，反正知道自己什么都不懂，不是一天两天的事了”“你的口中充满了傲气”“谁不是这样呢？说话不充满自信的话是不会让人信服的”“是吗？”“只要你自信地说大众听不懂的理论，至少一半以上的人都会盲目信从，人类真是愚蠢至极啊！”“是吗？你有统计过吗？有确实地数据吗？”“没有，这都是我猜的，议论这种东西难道真的需要证据吗？”“当然了，对于议论文，论据十分重要”“那种社会新闻上出现的个例，所以说嘛，我讨厌辩论”“因为它不如数学那样明了”“这不是废话吗？”所踩的道路之上，并不是他一个人的世界，不只是人来人往，还有一花一草，但是啊，如果语言不能相通的话，那么周围除了动物就是植物了，他生活在动物世界里，不断地寻找进化的方式。看着路边的树，到底该发出怎样的感叹呢？“你的学习能力应该不错，怎么不多学点其它东西”“因为太无聊了，而且学得不明所以，一点充实的感觉也没有”“这怎么显得你有学科鄙视链一样”“当然不会了，对于百科全书我还是很热于学习的，而且虽然鄙视链不是什么好东西，但我觉得鄙视鄙视也没什么问题”“自己站在鄙视链的顶端，没错吧。”“内心肯定是看不起的，言语上也会说不知道他们在讲什么，不如说大部分学文的人都是这种感受”“暂且不说文科，人家物理也能称自己站在顶端”“世界是物质的，是吧？怎么觉得像哲学”“牛顿的书都叫自然哲学的数学原理”“在乎称呼根本不重要好吧，重要的是内涵，现在的物理在以前就叫做哲学，按照某位物理教授的说法，哲学是从物理里分出来的，在现在也不知道在研究什么的东西”“我怎么记得他说得好像是数学”“确实，我也不知道数学在研究什么，特别是现在的前沿，代数几何分析”“线性代数、高等几何、数学分析，是这些吗？”“当然不是了，应该是代数几何、几何分析、分析代数，当然这些都只是统称，几何分析实际指的就是解析几何，特别指现代建立在拓扑流形上的解析几何，分析代数指的一些实用性的学科，基本由分析和代数组成，像动力系统、微分方程、组合数学、计算数学之类的，代数几何就像它的名字那样”“数论这样的瑰宝，还有数理逻辑这样的基础呢？”“数论属于渗透性的东西，一旦涉及序数就渗入各个学科中去了，但这也是初等数论，因为哥德尔不完备定理的存在，很多数论定理不可能在数论定理中被证明，也就有了解析数论、代数数论之类的东西，但它们本质只是研究数论的方法，学科基础还是属于各自的领域。而数理逻辑嘛，我也不知道该怎么说，它一直都很独立。还有啊，别拿像博弈论、控制论之类的应用性学科来说事了。”“因为我们在说纯数学？”“非要这么说的话，数学的定义就不明确了。”“也就是说，纯数学的定义就是没啥用咯”“我说过，别说这些充满争议性的东西”“可是不讨论有争议性的东西，那媒体不就只有就事论事的八卦了”“所以说嘛，我不喜欢聊天”“聊天可以社会构成的基础”“哪来的奇怪理论”“而且不分线上线下，根据最新研究表明…”“好了好了，说这些东西不符合我的身份”“你有啥身份吗？”“数学爱好者”“怎么不是数学家？”“因为我什么也证不出来，光是学习就用了好多时间”拿起手机，看看学校又发出了什么最新的消息，核酸检测、工时补录、暑假社会实践、青年大学习、奖学金评定……好多，但似乎跟我一点关系都没有，为啥要有QQ微信呢？它们在手机里活着，感觉就是毒瘤、寄生虫般的存在。“不不，这是你的社会义务，保持与社会的联系，而且这种比较现代的方式也适合你这种现代人”嘁，给我滚出去。打开B站，没有什么新动态，刷新、刷新、刷新，尽是些无聊的东西，热门，也没什么有趣的东西，那这机械动作的意义何在呢？哼，又看到了一个妄图科普费马大定理的存在，随便看看，果然还停留在“Frey曲线+Ribet定理+谷山志村猜想”的阶段，自己都不懂的东西，还妄图给了科普，人类还真是自大啊。“搞得你不是人类一样”“我确实不想当人类了，还得靠衣食住行才能活下去，而且受法律道德伦理的约束”“难道你还有什么超脱常理的想法吗？”“超脱常理别说我了，这个世界上就有一大堆，一大堆现实无法实现的东西，全都发泄到了游戏小说漫画里面去了，说实在的，我还挺喜欢猎奇的”“心理变态是种疾病”“现实都这么无聊了，在虚拟中追求点刺激难道还是错误的吗”“啊不，就怕哪天你被洗脑了”“可是，那些都只是绘制的形式，与现实的差别很大吧，分不清虚拟和现实还不至于，而且占据我现实大部分时间的可是数学啊”“数学怎么了吗？”“对于数学以外的现实之物，排除维持现实肉体正常运转的东西，其它的东西我完全无感。”“这叫毫无社会经验诶”“只要我能活下去，这些根本不重要好吧”理性分析感性决策，计量什么的，真是纸上谈兵吧？连我自己也不自信了吗？学习什么的，我本来就没什么感觉，什么能不让我挂科就行了，能让我拿到毕业证就足够了，他害怕数学专业，更不敢踏上这条道路，大学是个什么也学不到的地方，如果无法进入最高学府，在哪里都是一样的，那为什么不选择一条最简单的道路呢？因为现实本来就只是负担罢了。上课、上课，这学期结束以后，选修的学分全满了，只有拿该死的必修非得按学校的套路来，真想早点毕业，但他却想永远当学生，以后会不会很忙？还有时间学数学吗？他是很害怕的。“我好像知道怎么证明了！”“证明什么？”“XX猜想啊！前人研究的深度远超你的想象，就差临门一脚了”“证明费马大定理最后部分的作者怀尔斯，100多页的论文，一半左右都在复述以前的理论，顺便加点自己的东西”“佩雷尔曼证明庞加莱猜想的三篇主要论文总也是加起来不过70页，因为那时里奇流和哈密尔顿理论已经十分成熟”“而且他们证明的是更广泛的结论，半稳定模性定理和几何化猜想”“是吗？我要成为画上句号的人吗？”“是的，今天要久违地熬夜了，熬夜将思路全部理清”“以前只是为了学习而抄抄抄，总于轮到我制作的时代了吗？”“把书上的东西抄下来，然后看得还是书，这不就是纸的浪费吗”“不，这是小平邦彦式学习法”“别兴奋了，稍微注意一下周围吧”“别吧，现在可是证明的关键部分的整理中”“不不，我叫你看一下路啊，离宿舍越来越远了”“现在都这么晚了，稍微认错路也挺正常的嘛”“啊，关键是你走到公路上来了”“嗯……”…“为什么不开车灯呢？”“当然是坏了啊，而且我选择的也是人少的路”“大晚上的，人少的地方不应该更难走吗？”“月光还是可以让我看清路的，只是没太注意”“这案子该怎么审呢？”…他什么也没有留下，不为世人所知，啊，真是一个十足的悲剧啊！！！…………“怎么样？应该多少有点被我煽情的话所感动到吧”“至少一半以上的世人不会有任何共情”“可是你应该多多少少有一点点吧”“不完全没有，我看你只是个一直妄想自己充满悲剧色调的狂妄小子罢了”“我已经很用心了”“可别忘了，现在你可是在死中梦里与我对话”“没办法，我们就是靠这个活下去的，或者说这就是我们活着的方式”","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"故事","slug":"故事","permalink":"http://example.com/tags/%E6%95%85%E4%BA%8B/"},{"name":"短文","slug":"短文","permalink":"http://example.com/tags/%E7%9F%AD%E6%96%87/"}]},{"title":"记一次GalGame的简单逆向","slug":"记一次GalGame的简单逆向","date":"2022-09-16T09:14:01.000Z","updated":"2022-10-14T23:47:09.669Z","comments":true,"path":"archives/2022-09-16-记一次GalGame的简单逆向/","link":"","permalink":"http://example.com/archives/2022-09-16-%E8%AE%B0%E4%B8%80%E6%AC%A1GalGame%E7%9A%84%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91/","excerpt":"","text":"起因学习累了，放送一下，看看书，玩玩游戏是很正常的事情，但是呢！有些游戏就是让人十分的不爽，比如下面这个 这是我目前见过汉化最糟糕的游戏了，没有之一，时不时蹦出日语还不是事情，结合前后文和日语基础还是看得懂的，但后面莫名其妙出现的“第三种语言”——乱码，就真的令人十分难受了，再加上这游戏的强制缩放屏幕，搞得一天的好心情都没了，所以我决定来破解它。既然如此我们要破解什么呢？我个人猜测，后面的乱码会不会是已经翻译的文本，因为GBK和UTF-8的编码不同导致封包后，一部分内容完好，另一部分乱码，基于这个猜测，我们来看看能不能把它还原回来。当然，事实到底如何呢？现在的我也不明白。 学习既然要破解，第一步当然是学习了，我呢！实在不想再体验当初那种一步步读汇编码的痛苦精力了，这次我要站在巨人的肩膀上，在GalGame的破解方面技术是十分成熟的，这并不像我上次解包的那个游戏，基本没有人去研究，自然需要来消磨耐心了。破解的技术散布在各个论坛里，目前还活跃在国内的论坛，有看雪、吾爱等，甚至还有bilibili，首先是下面这位大佬的基础性视频，当然讲得都比较简单，基本都是识别基本引擎，使用现成工具，和一些普通的调试技巧，但跟着做很容养成破解的勇气，所谓艺高人胆大就是这么一回事，exe直接改十六进制文件，说实在的，我平常都不敢这么干，我是很怕出现各种文件验证、地址错位等问题的，但在软电池Sdwrap过法那里，更是将勇气发挥到了极致，直接删十六进制文件的内容。以前的我真的没这样的勇气，要知道对于二进制文件而言是有严格的格式要求的，有时还需要统计字节数，如果是我，顶多就只敢修改资源文件，因为反汇编也不可能得到完全的原始汇编代码，更何况它肯定不可能来自汇编代码的编译，也就是我们勇气只止步在静态分析上，看看它到底怎么运行的，修改它的运行轨迹，重来没有想过。接着是调试工具，我们不会使用ide，它胜于静态分析，取而代之的是Ollydbg和x64dbg，当然我主要使用后面这个，因为前面的这个界面有些不好看，不太喜欢，就目前来看，功能性上基本都差不多 想要学习软件的使用的话，本来应该去看官方提供的手册，但我们是什么人，学计算机的人，有些东西稍微瞟一眼就应该知道是做什么的，更何况我们还有源代码调试的经验 首先是区域1的“模块1:ntdll.dll”，它表示当前代码所在的文件部分是动态库内而不在主程序里，对于非主程序部分一般都是不考虑的，它属于系统代码，可以相应的系统API手册来看用法，没必要去读难理解的反汇编代码；接着是区域2的eip寄存器，它指向将要执行的代码，也就是当前调试到了代码哪里的意思；区域3有步进和步入两个操作，它们用来推进代码的执行步入是一行行执行，而步进则会对函数调用的代码跳转进去，如果对于某些函数的作用不清楚的话，则可以跳进去看看，对应到汇编代码就是“call+地址”；区域4则是显示CPU的寄存器参数，比如EAX、EBX之类的寄存器，还包括记录下一步代码地址的EIP指针和一些标志位ZF、PF等；区域5是stdcall即调用栈堆，表示call指令调用路径，此处可以约化深度，更详细的需要选项栏中的调用栈堆；区域6则进行内存的监控，但地址需要自己从运行内存中找，一般动态修改工具都是在这部分区域找到对应参数进行修改的，比如你在代码里申明int i = 1之类的就可以在里面找到；区域7是用来管理断点的，断点这玩意一般的调试都挺常见了，运行的时候我们一般不会从头一行行的到想调试的地方，而是通过在特定位置打断点，等程序运行到此处再调试。这样，其实我们对x64dbg当然基本界面就已经很熟了，当然如果你对程序的运行机制很了解的话，自然就知道它需要什么，它该是什么样，然顺便就在程序中找到了它的对应位置。对于程序的基本机理不是很懂的话，可以看看这个大佬的新人破解教程，他直接从汇编的角度来教新人，基本可以不需要开发的基础，直接从一些基本的汇编指令来理解程序和它的运行，还教授了调试工具的用法和一些实例，甚至还讲了jmp和call之类跳转指令的区别，真正的强者敢于面对复杂的汇编指令，并试图去寻找规律，从而破解它，实在是令人敬佩。当然，调试还有一个更高的境界就是代码注入，本质和Chrome浏览器那个执行js代码的终端差不多，但是它是针对静态语言肯定比动态语言js困难很多，但仍有大佬开发了基本框架Frida，对于这玩意，因为知道它的原理，想要研究还是可以研究的，但因为基本用不到也就深入研究的必要了，只能说需要多少就学多少，不然太容易忘记了，就白学了。说了这么的学习的东西，接下来该回归现实了，我们研究的这个游戏不归属上面大佬所说的任何一个GalGame引擎，好像就解包不了了得自己研究，但事实却是，我们的GARbro资源解码收录器的数据库实在太强大了，还是把这个游戏资源解码方式给收录了进去 自然地，资源解码就不在考虑的范围内，当然这玩意也不是万能的，像下面这个游戏 格式包装方式虽然是已知的，但对应的加密方式并不在数据库内，对于这样的资源解包就得亲自去分析汇编代码了。 游戏初探索接着我们来仔细研究一下这个游戏，资源结构如下 其中ini是明文配置文件，txt是开源使用协议，movie是游戏的OP，save是游戏存档，sfa16.exe是原始的程序，sfa16_cn.exe.exe是汉化后的程序，aos是可以被GARbro解包的资源文件，其中的scr就是我们汉化的核心，剧本文件了，通过简单的解包 我们发现游戏资源是以日语形式存在的，也就是说这些数据是给原始程序使用的，那么我们的汉化跑哪里去了呢？这时我们注意到sfa16_cn的内存比原程序大了几倍，这意味着汉化脚本应该在程序里面，没办法了，只能先动态调试一下了，首先我们将程序运行起来 我们想要干嘛呢？在运行内存中找到这句对话，并顺手找到脚本所在的地址，从而看看改后的剧本长什么样，我们对内存进行特征匹配收索 我们可以直接在GBK编码中输入汉字，程序会自动转化内存中的十六进制编码形式，结果有很多个，主要是这句话可以出现在好多地方，我们最后选择了两处 上面是这句话所在的内存地址，大概在0xAB95FE0处，而下面的则是脚本读取后所在的缓存地址，大概在0x2C1014D处，值得注意地是这些都是程序运行的虚拟地址，在主程序的十六进制文件中是找不到的。我们随便跳点剧情，可以看到 运行结果如我们所想，所以猜想大概率是正确的，我们来监视一下内存2，它包含了对话的主要内容，先看看日语处的情况 和所想基本没有区别，即所显示的文本GBK下的日语，接着看看我们主要研究的乱码部分 在GBK下内存数据和显示的是一样的，那么乱码的原因如我们之前所想的那样吗？可惜并非如此 在Shift_JIS编码下显示正常，这意味什么呢？这意味着汉化组没有汉化这部分内容，而且对于这部分日语还没有转化为GBK编码，所以在同一套GBK体系读取下，被转化的日语被读了出来，没被转化的部分被读成了乱码。基于这样的事实，我们一开始的目的看样子是没办法完成了，本来就没有汉化也就没有修复成中文的说法了，但是像这样的东西留着收藏库里总觉得不是很舒服，所以我们有了一个新的目标，乱码转日语，并配上机翻。 汉化分析要想完成我们的新目标，就需要知道汉化补丁是怎么产生的。首先我们注意到这样一个事实 汉化补丁的函数导入表明显比原始程序的导入表小可好多，这意味着汉化补丁被加壳了，但这并不是那种防止破解的加壳，想想就知道，本身就是搞破解的，还会去加密吗？我们使用查壳工具来一探究竟 原始程序没有任何加密，而汉化补丁使用了MoleBox，这是window的一个资源打包工具，随便使用一个程序就轻松地把它解开了 解包后的exe与原程序的大小基本一致，这里我们稍微提一下window的资源查找机制，当代码中查找当前目录中的文件时，会优先看exe是否是打包型资源，并在里面进行查找，没有的话才会查找当前实际的目录。正因如此，我们就会见到两种类型的程序，一个很大的exe，又或者是exe带了一堆dll和资源文件，当然了单文件的时候也有可能是它本身没有依赖。这种资源打包机制的一个作用就是PC程序安装，安装包就是资源打包型的exe，一部分是配置代码，另一部分则是作为资源的主程序，运行过程就是将exe内的资源复制到安装路径，并进行一些必要的配置操作，像修改注册表之类的事。而我们则是利用它来实现汉化补丁与日语原版的共存，运行原版时它读取路径下的原版资源，而运行补丁的时候，但遇到汉化文本时优先读取exe内的汉化资源，而对于exe内没有的cg之类的，则进一步读取当前的目录，从而达到对于非汉化资源读取共同部分，而汉化资源读取各自部分的目的。当然了，直接改日语的资源也是可以达到汉化的目的的，但总会给强迫症一种不是很完美的感觉。汉化exe和原版exe内存虽然接近，但仍有较大差别，所以肯定被改过来，我们看看到底被改了什么，在此之前我们先将_extracted里的文件移出来，让汉化补丁读取到它，你可能会有疑问，为什么同样是目录下的资源文件，却优先读取汉化补丁呢？这其实游戏通常的开发习惯有关，进行调试的时候，我们一般都希望是明文，这样便于修改，脚本游戏也是类似的，但存在封包资源和解包资源，优先读取解包资源，利用这一点很多游戏有衍生出来patch即补丁机制 经过不断实践，我们发现游戏主要改了几个地方，首先是图片区，在片头的第二张里面换成了汉化组的信息，还有一些基础的UI，这些直接在补丁里添加即可，并不困难 当然格式最后保持一致，因为大多游戏都是文件名加后缀识别文件的，后缀不同有可能会读取不到；然后是菜单的汉化，它属于window内置API，可以十分容易的提取处配置文件并修改 通过探索我们发现有两个一样的menu，那么游戏读取的是哪个呢？只要制造差异就行了，像下面这样修改两个配置文件 封包后并运行可以发现，下面结果 所以游戏选择的第二个菜单，这也是汉化组所选择的那一个；接着应该是编码的修改，原始游戏使用Shift_JS，而修改后的使用GBK，这个可以通过跟踪CreateFontXXX之类的函数来实现，因为大部分游戏都是通过这种系统API方式来创建字体的 在调用的参数中，我们发现字体编码对应的16进制代码页是86，也就是GBK，而原来的游戏可以发现是80，即对应Shift_JIS，如我们所预料 最后一个是汉化的脚本，原来游戏对应的是scr.aos加内部的.scr文件 如果对应到非封包资源理应是scr/+.scr，但它却是tst/+.txt文件，注意到两者长度一致，所以大概率是改了16进制文件进行重定向，通过16对比，我们可以发现修改的地方 首先我们可以猜出，游戏对脚本资源的读取顺序应该是，txt/%s.txt、scr/%s.scr和%s.scr，其中的%s应该是占位符用来表示要读取的脚本的名字，而原始的读取方式应该是第二种，破解则是针对第一种，大概是用来测试的情况，将原来的txt/%s.txt改成了汉化所对应的tst/%s.txt，为什么可以这么猜？只能说这是实际测试出来的结果，只要敢于尝试就能猜出来，实在不行的话，就定位去读汇编代码吧 反正就是这么一回事，分析什么的也懒得做了，至于其它细微的区别都是因为打包软件的不同所导致的，本质运行上是没有差别的，最后我们来分析乱码的根本原因在哪里？对比原版和汉化的，可以发现 汉化提取的资源少了很多，而少的那部分却包含了文本剧情，这意味着汉化补丁在运行的时候，对于这部分剧本找不到脚本，只能去读取原始的资源，而原始的资源是Shift_JIS编码，读取的却是GBK编码，从而导致了最终的乱码，一切的原因都已经摸清，接着就是改造了。 游戏改造我们预计完成两个改造，首先提取所有的包含剧情的脚本，然后移动到tst内，对于出现的跳过即可，然后时间排序，对于刚引入的资源进行编码转化，这样进行一次封包，从而得到中日混合的游戏，至少不包含乱码了。接着我们对日语部分进行机翻，我不是很喜欢这个游戏，所以也懒得去润色或自己翻译了，这样完成了第二次封包，拿到一个中文的补丁，这样我们的目的和任务就全部都达成了。首先，我们查出，包含剧情且没被汉化的有下面这些 转码以后，值得注意的是这里的转码并不是读取以后改个编码，而是以Shift_JIS读取文本形成通用编码的中间体，再以GBK编码进行数据保存的意思，然后我们进行第一次打包 然后运行起来，在原来乱码的地方已经变回了正常编码 但其实我们还发现了一个问题，有些选项是日语，而有些选项却是乱码，其实有些选项也包含了文本 所以对于这类脚本，也不得不包含进汉化补丁里面，经过排查，我们找到了所有需要转码的选项脚本 最后进行同样的操作，校验一遍后没有遇到什么大问题，于是得到了第一个混合包，中日混合版，接着我们直接对其它部分用百度翻译，突然发现机翻也没那么好用，它会直接改变脚本的结构，还得一句句复制机翻，呵呵，算了吧，反正我也不怎么喜欢这个游戏，同一题材的3days和euphoria的剧情明显优秀多了，就让有志者去翻译吧，而且日语我又不是看不懂，下面是解包资源，将里面没汉化的脚本进行汉化，再用随便一个打包软件，比如EnigmaVirtualBox，就能制成汉化补丁了。就说这么多吧，其实这次的破解实在没什么惊艳的地方，游戏本身就比较老是原因之一，破解工具比较齐全也是一个原因，但作为一个学习的记录合格的，不能因为简单就小看别人吧，好歹人家也是努力过的。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"galgame","slug":"galgame","permalink":"http://example.com/tags/galgame/"},{"name":"逆向","slug":"逆向","permalink":"http://example.com/tags/%E9%80%86%E5%90%91/"}]},{"title":"百合最棒了","slug":"百合最棒了","date":"2022-09-11T07:50:27.000Z","updated":"2022-10-14T23:47:08.239Z","comments":true,"path":"archives/2022-09-11-百合最棒了/","link":"","permalink":"http://example.com/archives/2022-09-11-%E7%99%BE%E5%90%88%E6%9C%80%E6%A3%92%E4%BA%86/","excerpt":"","text":"Lycoris Recoil和咲う アルスノトリア すんっ！感觉制作都挺精良，就是不知道为什么，后面的这个没什么热度，明明相比起来我更喜欢后面这个。","categories":[],"tags":[]},{"title":"费马大定理证明概述","slug":"费马大定理证明概述","date":"2022-08-31T23:40:21.000Z","updated":"2022-10-14T23:47:10.335Z","comments":true,"path":"archives/2022-09-01-费马大定理证明概述/","link":"","permalink":"http://example.com/archives/2022-09-01-%E8%B4%B9%E9%A9%AC%E5%A4%A7%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E%E6%A6%82%E8%BF%B0/","excerpt":"","text":"费马大定理的基本证明路径，我差不多摸透了，但并不能说完全看完，因为其内部应该还包括几个数学领域的重要定理。数学学习的基本思想是先建立基本的数学认知，无聊之时再去看看一些零散的定理是怎么证明的，数学一个重要的作用是建立正确的直觉，在数学的某个领域中，当你感觉应该是这样，并且已经有定理来验证的时候，这个领域也学得差不多了。不讲更多数学方法论的东西了，不过我们应该要清楚一点，数学的定理是十分多的，每个定理都一一地去看证明的话，是十分消磨学习热情的。 上篇旅行的起点费马大定理即，当n&gt;2时方程 没有非零整数解。当然n必须要求是整数，当n为2时方程是有整数解的即勾股数，在直角三角形中可以很容易地找到解，当n为3和4时使用的方法都是无穷下降法，即假设存在解，然后找到了一个更小的解，因为整数是不可能无限地变小的，所以方程没有非零整数解，大概就是这么一个流程。实际上，费马大定理的证明也包含了无穷下降的思想在里面，接下来我们需要考虑的是n为不小于5的素数的情况，素数情况没有非零整数解通过反证法足以推出所有不小于5的整数的情况。素数和不超过5在后面的证明中都是需要的，稍微整理一下，我们只需要证明下面方程 当p&gt;4为素数时，其没有abc=0以外的整数解。移项基于p为奇数的事实，但也没什么深刻的含义，只是觉得这样好看一些，并且此时a,b,c没有任何区别。真正的用处体现在Frey曲线的构造，下面形式的曲线 并且要求a≡3(mod 4)和2|b(即b为偶数)。对这个曲线我们的疑惑应该有很多，令y=0此时曲线是关于x的三次方程，最开始我们要对方程形成一个共识，a,b,c要么相同都是0，要么一个为0另外两个为相反数，要么互不相同，从方程的对称性也是可以发觉的，这表明了如果费马大定理成立的话，曲线右边关于x的方程只有一个三阶零点0，反之费马大定理不成立的话，应该存在非零的a或b或c使得曲线右边关于x的方程没有重根。a,b,c互相对称选谁都是无所谓的，重要的是下面的两个约束条件，其目的实际是为了a,b,c区分出来。由于方程的右边为0，因此a,b,c要么都是偶数，要么一个偶数两个奇数，对于前一种情况，可以通过提取偶数部分的公因子化为后一种情况，而且这两个奇数必需一个mod4余1一个mod4余3，a,b,c谁占据这三个位置(mod4余3,偶数,mod4余1)都可以，而我们要求如上面所示。Frey曲线的一个精妙之处是去除部分，使用x来代替，如果像下面这样构造Frey曲线 也可以通过是否重根来区分非零解的情况，但这样会使得方程多了一个参数关联的约束条件而且提取信息时少了个条件，即a,b,c相同时一定为0，所以将替换为x+0是一个明智之举，并且此时a和b可以互相独立不存在互相的约束关系，而选择一奇一偶的原因是为了防止方程存在的第二种情形，此时为零，和互为相反数，曲线右边的方程有一个二重根，至于a,b自身内在约束主要为了尽可能增加a,b的更多条件以便于证明，如果a,b过于自由，只有整数的约束的话，条件少所能证明的东西也少，对于挖掘数学对象的精细结构是十分不利的。我们或许还有一个疑问为什么曲线不写成以下形式 从当前并看不出其中的原因，等我们到后面的计算才能看出其原因。我们总结一下费马大定理到目前化归为证明一下定理，不存在以下曲线 并且要求a≡3(mod 4)，2|b(即b为偶数)和右边关于x的方程没有重根。为了方便我们把上面的曲线称为Frey曲线，于是我们只要证明不存在Frey曲线即可。很多科普费马大定理证明的，对Frey曲线基本就是一笔带过，搞得一切好像都很自然，这也是我不满意的一点，当然很多人都喜欢拿原始的方程并且以正整数解来说事，这样没错，但放在费马大定理的证明里，更多的是令人感到莫名其妙。如果有人说没有整数解，那完全就是在胡扯了，(0,0,0)和(0,a,a)就是一组很明显的解。 椭圆曲线椭圆曲线严格上应该是射影空间上的东西，但为了便于理解，我们通常考虑的是椭圆曲线在仿射空间上的形式，即欧式坐标下的方程。仿射空间和射影空间其实完全可以以一种等价的方式来看到，仿射空间+无穷远点=射影空间。如果你可以接受在我们通常的笛卡尔坐标下加上一个无穷远点，那么直接考虑椭圆曲线的仿射形式也是无所谓的；如果你觉得无穷远点缺乏数学上的严谨性，那么只能不得不从射影空间寻找其合理性了。射影空间的基本思想是使用齐次坐标等价类来代替通常意义下的笛卡尔坐标，如二维笛卡尔坐标(1,2)，可以表示为射影坐标(1,1,2),(2,2,4),(3,3,6)等等，它们的特点是差一个常数倍，于是它们可以组成一个等价类[(1,1,2)]={(x,y,z)∈R³|(x,y,z)=λ(1,1,2)}，这样对于平面上任意一点(x,y)都可以在射影空间中找到一个等价类[(1,x,y)]与之对应，此时我们可以令无穷远点与[(0,a,b)]对应，这样在射影空间中无穷远点就可以由严格的算术理论了，而对于我们而言考虑仿射空间就足够理解了。首先我们定义Weierstrass方程如下 和一系列可以计算出的量 Weierstrass方程的目的是为了定义任意域上的椭圆曲线，虽说模性定理指明了有理数域Q上的椭圆曲线，但证明过程却用到了其它域上的椭圆曲线，所以我们需要更深入地考虑各种域上的椭圆曲线。当我们说域K上的椭圆曲线指的是其系数属于域k且Δ≠0，至于(x,y)是怎么取点的，如何包含无穷远点，我们先不考虑。我们考虑到不同的方程可能会定义拥有同样性质的曲线，所以我们需要考虑不同Weierstrass方程间的线性变换，减少不必要的方程形式，其就是下面定义的允许变换，其本质是保持方程形式的仿射变换 如果两个椭圆曲线的Weierstrass方程可以通过允许变换互相转化的话，则称这两个椭圆曲线是同构的。如果不考虑特征为2的域，那么所有的Weierstrass方程都可以通过允许变换化为以下形式 如果进一步不考虑特征为3的域，则我们有以下形式 过程并不难，第一步对y进行配方即可，此时出现2，所以只有域的特征大于2才能进行，第二步则是解三次方程常用的一步消二次项的方法，会出现3，所以只有域的特征大于3才能进行，有时为了方便讨论，我们将上述方程转化为下面的形式 此时，如果你熟悉三次方程的话就会发现它其实是右边关于x的方程没有重根的充要条件，所以我们之前所说的Frey实际可以认为是椭圆曲线，为什么椭圆曲线会有一个三次方程没有重根的条件，其实主要目的是为了保证曲面的光滑性，不过嘛，我们可以从另一个方面来看待它。接下来我们讨论复数域C上的椭圆曲线，且(x,y)的取值为复数，还包括无穷远点，此时椭圆曲线或许不是线而是“面”了。我们采用正向构造的方法，考虑复数域C的子集，如果在复平面中画出这些点的话，∧实际是一系列格点，所以我们称∧为一个格。在格的基础上我们可以定义C中元素的等价关系，如果a,b∈C满足a-b∈∧，则称a与b关于∧同余，它是一个等价关系，于是我们可以定义一个等价类集合C/∧={z+∧|z∈C}。实际上，可以在C/∧上构造一个复结构，使其变成一个亏格为1的紧黎曼曲面，有关实流形和复流形的东西真要讲起来东西太多了，目前我们只研究复流形，它也是一个实流形但性质更强，而且我们只研究一维复流形，即黎曼曲面。更有甚者，我们研究的一维复流形基本都是从复数域C关于某个等价关系导出的，根据黎曼曲面的分类定理即单值化定理，黎曼曲面只有五种类型，我们所研究的是紧黎曼曲面，那么就更简单了，球面(亏格为0)、环面(亏格为1)和亏格大于1的曲面。我们来思考一下为什么C/∧会是一个环面呢？准确来说，我们其实是依据环的一些性质，将C/∧视为了一个环面，C/∧可以看成由和所夹成的平行四边形区域，到达边界的时候，通过等价关系因而从另一边回来，在环面上可以找到两条不能互相转化且不能缩为一点的回路，在C/∧也是同理的，我们说的其实就是闭曲面的基本群，但C/∧比三维空间里的环面是更加本质的。三维会给我们一种错觉，让我们误以为环面是一个三维的实体，但环面应该是一个二维面，应该从二维的本质去认识环面，而复平面就是一个很好的载体。我们给出环面C/∧上函数的定义，简单来说就是在同余点处函数值相同的函数，显然这样的函数是一个双周期函数，其周期的基由格的两个参数给出，实际上，我们将C/∧上的亚纯函数称为椭圆函数。我们将格∧写成如下形式，基于此此我们构造一个Weierstrass函数 它的许多性质在概述中就没必要说了，比如右边的级数是收敛的、洛朗级数展开、取值等。 通过洛朗级数可以得到此函数满足的一个方程 而且对应函数方程还有一个特殊点取值的性质 我们来总结一下，对于一个格我们可以定义一个Weierstrass函数，通过这个函数及其导数，我们可以将C/∧映射到一个C上的椭圆曲线，当椭圆曲线补上无穷远点，我们就可以建立一一对应的关系 所以C/∧可以视为C上椭圆曲线，另一个问题C上椭圆曲线都可以视为一个环C/∧吗？我们只考虑等价椭圆曲线类的一个代表元有两个参数，而也是两个参数，所以感觉上应该可以互相找到的，也确实如此，证明的过程基于函数是满射，我们知道有这么一回事就行了。或许比较令人惊奇的一点是，Weierstrass函数的一个特殊点取值的性质，正好对应了椭圆曲线中没有重根的要求。至此我们应该有这样一个认知，C上的椭圆曲线就是一个复环面，环面的亏格为1，所以我们说C上的椭圆曲线亏格为1。亏格在数学上有严格的定义，但最形象地理解就是曲面上洞的个数，稍微严谨一点就是，最多几个面上的闭曲线不会将曲面分割成两个部分，比如球面任意一个闭曲线都会将球面分为两个部分，所以亏格为零。我们继续讲C上的椭圆曲线，我们通过同构进行了第一次分类，排除了方程形式对椭圆曲线的影响，并且此时可以唯一的找到一个复环面C/∧与之对应。熟悉黎曼面知识的人应该知道，对于紧黎曼曲面，亏格为0时一定解析同构于球面，亏格为1时一定解析同构于环面，但环面之间却不一定解析同构，而任意两个环面解析同构的条件是 这个定理包含了全纯映射的情况，而我们探讨的实际上是最后一部分即可逆的情况。换言之一个格可以通过乘以一个复数得到另一个格，那么它们生成的复环面就是解析同构的，用几何的观点来看就是，格进行了旋转和缩放两种变换，为什么没有平移？这需要考虑环面上的群结构了，对环面上的两个点，我们定义加法就是对应等价类中代表元的加法，可以证明C/∧关于此运算可以形成一个加法群，于是两个环面之间的全纯同态可以诱导一个群同态，并且有如下性质 平移存在两种情况，一种是格点到格点，其本质就是乘一个复数，但格点和非格点间的平移，不能满足群同态的基本性质，即单位元到单位元。当然了，我们只需遵循这样的直觉即可，两个环面解析同构意味着它们的格差一个非零复数，我们将解析同构的环面称为是同源的，必需指出的是这里解析同构和同源正好一样只是一个巧合，对于高维的复环面还有其它的定义，进一步两条椭圆曲线对应的复环面同源，则称这两个椭圆曲线同源。我们能找到所有的同源等价类吗？实际就是对格的两个参数做文章，首先我们运用除法进行第一步变形其中的是上半平面中的一点，但这样的不能完全区分同源，首先我们有下面的定理 在这里我们第一次见到了完全模群，此群可以作用与一对复数，实际也可以作用于它们相除得到的上半平面的一个复数，因此的全体才能确定一个同源，即下面的定理 由于我们假设了上半平面，所以矩阵的行列式等于-1的情况可以排除，原书也进行了相应的申明 如果上半平面中的两个复数可以通过中的一个元素转换的话则定义它们等价，在这种等价关系下，复半平面可以构造一个等价类集，其中选取的代表元称为的基本区域，我们可以容易地得到一个典型的基本区域 它在复平面的图形如下面所示 过程不必深究，我们需要知道结论，完全模群基本区域中的每一个有限复数对应一个同源椭圆曲线。 同余子群我们给出完全模群的具体形式 它是一个群，单纯地研究它实在没什么意思，我们想研究的是它丰富的子群，我们挑其中几个比较特别的群 这些群有什么好玩的吗？实际上这三类子群也可以建立与同构椭圆曲线的对应关系，但不一定是同源。开始前，我们先建立一些简单的直觉，对于每个群，可以如同完全模群一样建立复数等价关系，上半复平面通过此等价关系可以形成等价类，其中的代表元一样构成基本区域，容易知道群越小，意味着等价的情况越少，点的种类越多，基本区域则越大，下面是两个简单的例子 如果我们想对应到椭圆曲线的话，就需要同源再增加一些要求，这样椭圆曲线的种类就会越多，才能在直觉上形成对应，那么该怎么加要求呢？对于映射，加要求的一种方式就是点的固定，椭圆曲线上哪些点被固定是我们想要的呢？我们从复环面上来找这些点 第一批是**N扭点(N-torsion points)**，形象地理解的话就是在C/∧的基本区域内取一个N×N的格点。另一个的话，没有名字 这里实际是由N扭点组成的一个集合，值得注意的是保持一个集合比保持一个点是更弱的，因为保持一个集合并不是保持集合里的每个点而是保持集合内的点仍是集合内的点。通过这些点我们来构造同构椭圆曲线的等价类，首先是第一类 看不懂没关系，其实这就是一个在原来同源的前提下，加上了保持椭圆曲线上的一个循环群的条件，这个循环群其实很好找，在N×N的N扭点中取一行或一列即可，此时这些点在环面加法下可以形成一个N阶循环群。其次是第二种 这里要求的点是N扭点，但并不是每个N扭点都是可行的，因为N扭点可能存在退化的情况，可能在N次相加的过程中就出现了零，我们知道N扭点基于环面加法可以形成一个群，那么其中的N阶元才是我们需要的，当然如果N是素数的话，所有当然点都是可以的。最后是第三类 这里选择了两个不相关的N阶N扭点，这其实是个很好的巧合，N扭点正好有N×N，我们就会觉得N扭点似乎是二维的，所有能正好选出两个点来，也正因如果，我们不会在有三个扭点的情况了，目前已经不知如何该继续加限制了。这正好对应了同余子群Γ(N)不能再小了，但请理解这个“不能再小”的意思不是说没有子群了因为Γ(kN)就是它的子群，也就是说“不能再小”的意思是的子群总会包含一个Γ(N)，当然我们并不考虑平凡子群，这是可以证明的，所以同余子群实际上就是的子群。通过上面加限制的同源映射，我们可以将其生成的等价类与一些同余子群的基本区域对应起来，先引入一些基本区域的符号 于是我们可以得到下面的一系列对应定理 如果看不懂，问题也不大，你只要知道它实际上是一些同余子群与一些椭圆曲线等价类的对应关系即可，就和我们之前由完全模群建立的对应关系是类似的。 尾声在本篇章中，我们将费马大定理约化为了证明Frey曲线不存在，Frey曲线正好有一个无重根的性质，由此我们引出了椭圆曲线，通过对椭圆曲线的探索，我们发现了其中的环面结构，对环面同源的探索，我们发现了同余子群。可能离于我们最开始的目标有些遥远，但我们至少明白一点，证明Frey曲线不存在的矛盾应该在椭圆曲线和同余子群中寻找。本篇中揭示了椭圆曲线和同余子群存在一种简单的对应关系，那么证明某个椭圆曲线(Frey曲线)不存在，或许可以转化为同余子群下的某些东西不存在，这就是我们接下来要讨论的东西。 中篇模曲线在上一篇中，我们从椭圆曲线发现了模群和同余子群，而这篇中，我们将学习如何从同余子群构造出椭圆曲线。你可能会说，之前的对应关系，不就可以直接构造出椭圆曲线吗？这也没错，但是我们无法发现更加丰富的性质来达到我们最终的目的，找到Frey曲线的存在矛盾。C上的椭圆曲线范围过于广，导致我们无法看到一些特殊情况下的精妙性质，如果考虑Q上的椭圆曲线或许是一个好的选择，因为Q特征为0的最小域，我考虑过在基本区域内找到它们的同源像，不过发现自己的能力好像有点不足，算不出来。不过嘛，我们作为学习的人跟着先辈们的足迹走就行了。上半平面H关于同余子群Γ的等价类集合，我们记为Y(Γ)，可以验证它是一个黎曼曲面，但并不够，我们需要紧黎曼曲面，方法也很简单，把Γ的等价尖点加进去就行了。我们可以直接从相关的结论得到尖点，我们定义Q∪{∞}在Γ下等价类的集合为Γ的尖点，这不是原始的定义，但这是合理的定义，其实不知道太多也无所谓，只要知道这样做以后形成的曲面记为X(Γ)并且它是一个紧黎曼曲面。比如完全模群它有一个尖点等价类，我们把其中的一个代表元无穷远点∞加进去，此时我们把等价点黏起来就可以形成一个闭曲面了，也就是紧黎曼曲面，紧黎曼曲面有一个优点是可以定义亏格。我们把X(Γ)称为模曲线，模曲线的亏格有相应的公式计算 里面有些其它的概念，比如椭圆点和映射的级，我们其实不必要知道这么多，只要明白亏格这玩意可以计算出来，比如X()的亏格为0，X()的亏格为1之类的。对于一个黎曼曲面，或更一般的流形，我们想要研究其上面的亚纯函数和亚纯形式，全纯也是亚纯的一部分，所以没什么好说的。由于我们构造的流形，是复半平面诱导出来的，因此我们寻找模曲线上的函数也不会太难，只要找到复半平面H上的某些函数进行限制映射即可。我们先来考虑模曲线上的函数，思想十分简单，即要求在等价点上的函数是相同的，就像下面这样 当其中的k=0即是我们想要的，不过数学家显然考虑更多情况，这主要因为k=0情况下的函数实在少得没啥研究的必要，比如完全模群且全纯的时候，只有常函数符合要求。不过我们进一步把条件放宽为亚纯形式的话，其实还是能找到的，就是椭圆曲线中的那个函数。我们先不管模曲线上的函数，不如先考虑一些更广泛的情况，然后只要挑出需要的即可，统一思想的研究往往是方便的，首先是模形式和尖形式的定义 一下子似乎涌入了不少概念，我们来解答一下，首先我们考虑的是同余子群，其包含的元素更少，函数受到的约束也更少，所以我们将拥有更多的函数，所以第一条我们让是个全纯函数也是有可能出现想要的函数的，第二条简单来说就是在同余子群下满足之前的那个等式，比较需要讨论的是第三条全纯函数最开始是定义在上半平面上的，并不包含尖点。由黎曼面的构造我们可以知道，尖点实际是孤立的，即它的周围都属于函数的定义域，而我们为什么考虑无穷远点呢？我们很容易发现，模形式实际是一个周期函数，所以存在复数形式的傅里叶展开 我们发现傅里叶展开经过一个指数函数后，其实相当于对应点的洛朗级数，不过嘛，根据延拓的相关原理，将上半平面的函数扩展到整个平面也不是不可能，所以有个展开也不是稀奇的事。至于最后一部分，将傅里叶展开没有常数项的模形式称为尖形式，没啥好说的，要求而已。然后再来一个自守形式的定义 差别不大，只是将全纯的条件弱化成了亚纯。以后我们把它们通称为模函数好了，关于模函数，我们需要记住几个区别类型的参数，比如k表示模函数的阶，同余子群Γ表示模函数基于的同余子群，这两者合起来才能确定一类模函数，我们知道同余子群有一个级N，自然的我们也把N称为模函数的级，但这个N必需要求最小。最后当然是看一些实例来加深理解 当我们赋予模函数加法和数乘时，容易发现，模函数空间有封闭性，还能构成复数域C上的一个线性空间。所以我们自然对其维数和标准正交基感兴趣，因为这样我们就能摸清整个函数空间，并且通过基来生成所有的模函数。首先是维数，通过对模曲线的分析可以得到下面的公式 这里偶数和奇数是分开讨论的，还是那句话看不懂不用紧，只要知道维数确实是可以计算出来的就行了。我们接下来用到的其实只要一个，即权为2的尖形式空间的维数等于亏格。即然确定了维数，接下来的目标自然是寻找基了，对于所有的同余子群可能并不好找，但对于一些特殊且重要的同余子群还是可以找到的，首先是转化性质 它告诉我们研究Γ(N)和完全模群下的模函数，可以向中间靠拢，之研究Γ1(N)和Γ0(N)的情况，然后再转化过去即可，而这两类同余子群有着分解关系 我已经在说明了写的十分清楚了，进行整体的研究看即可，如果要进行更细致地研究则考虑带特征的，但特征为平凡特征时就回到了子群自身的情况，注意同余子群的包含关系和模函数空间的包含关系是反过来的。接着我们再来考虑一下模函数的基有哪些？完全模群的情况比较清晰，所以我们来考虑一般的同余子群，我们主要考虑的模形式情况。此时我们应该参考泛函分析相关理论，当一个函数空间组成线性空间的时候，我们可以考虑函数自身的线性变换，即函数算子，此线性变换对应的特征向量组就可以构成此线性空间的一个组基。在研究模函数算子前，我们先引入几个变换的记号以便于后面的计算 这实际就是我们之前所见到的模形式定义所用的的变换，模形式的一个条件就是在这种变换下不变，在此基础上进一步有陪集变换 简单来说就是关于双陪集的变换，就是相对于其陪集分解中代表元变换后求和，可以证明其结果与代表元的选取是无关的，这里是一般化的情况，我们实际需要的是它的特殊情况 这里定义了两个算子，Diamond是人名，所以别随便翻译成钻石算子，它是基于一个矩阵的变换，形式比较明确，系数关系也可以直接得出，稍微复杂的是下面这个基于陪集的变换算子，其实看不懂也没关系，它是可以直接化归为具体的算子和，由下面定理给出 此时算子只有素数情况是不够用的，所以我们进一步推广到正整数的情况 算子的数乘与加法，可以看成函数的加法和数乘与算子运算交换次序，而算子的乘法则视为算子作为映射时的复合映射，这都泛函分析的常规操作，就不深入说明了。我们知道模形式可以完全由傅里叶展开系数来确定，于是考虑这些算子都傅里叶展开系数展开系数的影响是足够的 这里看似有两个部分，实际是一样的，第一部分是通常的，因为其特殊数据不够细致，所以里面包含了一个Diamond算子，但如果考虑其更细分的情况，即带特征的，此时计算就更加明确了，Diamond算子可以直接用狄利克雷特征来代替，这也印证了之前所说的Diamond算子对下模函数空间的划分作用。为了考虑标准正交基，我们需要内积的概念，使得模函数空间可以形成一个内积空间，我们考虑Petersson内积，比较遗憾的是，在尖形式空间下此内积可以很好的收敛但一般的模形式空间却不行，但以后我们会知道，尖形式已经足够用了 定义链稍微有点长，使用的是广义上积分定义法，先引入辛测度，再定义辛体积，最后在定义内积。其实它主要告诉我们内积是怎么计算的，但对于研究通常性的理论，基本都不会去计算，用得更多的是它们的性质，从而完成某些定理的证明，比如我们的目标，正交基的组成定理 这里面有几个值得注意的点，首先是同时特征形式，即我们的基函数必需同时是所有Hecke算子的特征向量，而且这个特征算子还要剔除一些情况，只能选取互素的情况，这是为什么呢？实际上，当一个函数是下的模函数时也一定是下的模函数，这说明下的模函数可能有些不够纯正，它可能是因子级的函数，这些退化的情形不是我们想要的“纯正的级为N的模函数”，我们把这些函数构成的空间称为旧形式空间，它有一个严谨的定义如下 顺便我们还把它的补空间视为新形式空间，值得注意的是补空间的定义依赖于内积，内积只有在尖形式下才能有比较好的定义，所以讨论新旧形式都必需在尖形式空间下。接着我们可以给出特征形式的严格定义 可以看到此处的特征形式，要求所有的Hecke算子而不需要排除非互素的情况，另外注意到线性空间的数乘性质，可以通过除法让首系数为1，从而给出正则特征形式，在此基础上，我们给出了新形式的定义，看以到新形式是十分确定的存在，通过下面定理 我们终于找到了，新形式空间的标准正交基就是所有新形式的集合，如果要扩展到整个空间的话，则只要把级为因数的新形式考虑进去即可 可能比较碍眼的是那个n了，它可以不需要吗？其实是不行的，主要还是旧形式空间过于繁杂，我们先这样来考虑设是级为M的新形式，那么只要那么就是的函数，显然它们都在旧形式空间中，并且还是线性无关，但它们并不能是某个级下的新形式。简单来说就是，新形式不能完全构成的基，但可以通过新形式来生成，但它却是正则特征形式，所以以后我们不仅仅考虑基的性质，而进一步考虑特征形式的性质，比如下面的这个 它表明了，正则特征形式的傅里叶系数可以由素数情况完全确定，所以说模形式与数论存在联系也不足为怪。知道模函数以后，我们终于可以来研究模曲线上的函数，聪明的小伙伴应该已经意识到了权为零的自守形式其实就是对应模曲线上的亚纯函数，自守形式空间的维数的研究较少，但黎曼曲面上亚纯函数研究倒是不少，我们只要知道结论就行了，至于怎么证，不知道也罢 我们要看的只有最后一部分，前面是在告诉你如何把需要的函数给构造出来。其中C(X)表示模曲线X上亚纯函数的集合，而C(函数1,函数2,…)则表示通过这些函数四则运算构成的域的集合，换言之即这些函数的有理函数构成的集合。从中可以看出不少信息，如同余子群越小，则基本区域越大，符合要求的函数自然也就越多，大概因为只有多才能研究出更多东西，所以我们不会只研究完全模群。最后，我们来考虑一下黎曼曲面上的亚纯形式，亚纯形式和亚纯函数的区别在于多了个小尾巴，长这个样子它必需满足在每个局部坐标下形式不变，考察构成黎曼面的变换的性质 可以看到进行一次模变换，增加了一个二次自守因子，所有可以有以下的对应关系 当k=2时就是我们所需要的，即模曲线上的亚纯形式与权为2的模函数一一对应。这里我要提一些其它的东西，大家可能都知道在欧式空间的微积分中有全微分形式的不变性，其原因是欧式平面的平坦性导致的，即高斯曲率为零。而对于我们研究的黎曼曲面大多都是曲率不平整的曲面，甚至不一定能嵌入到三维欧式空间中去，而对于能嵌入的曲面，即通过我们平常所研究的古典微分几何可以知道，求导之类的运算会引入Christoffel符号之类的东西来辅助计算，所以对于一般性曲面，微分形式和可微函数不对应应该是可以理解的。我们需要亚纯形式当然主要是为了积分，我们把符号单独写成，在这里我们只需要全纯形式 比较有意思的是，模曲线上的全纯形式，对应的是权为2的尖形式，而不是模形式，这是为什么呢？最开始我们要清楚一点，这并不是因为模形式空间和尖形式空间可以对应，有时它们的维数都不一样，模曲线上的全纯形式要求在所有局部坐标下形式不变，我们在构造模曲线的时候基本用的都是恒等映射，唯一特别的坐标是椭圆点处的情况，它使用了二次和三次函数，以这个情况去考虑的话，大概就知道原因了，对于我们的概论而言知道是这么一回事就行了。 雅可比簇有了上面的准备工作，我们终于可以来构造环面了，基本方法使用的是商群 在这里我们构造了模曲线的雅可比簇，但我们需要注意的是所有的紧黎曼曲面都可以构造雅可比簇 所谓的雅可比簇实际就是全纯形式的对偶空间对同调群的商群。我们先来迅速认识一下什么是同调群，准确来说第一同调群 标准定义比较复杂，所以简单地讲述一下，同调实际有两种情况，一种是我们这种，暂时称为下同调，还有一种是deRahm上同调 废话很多，我把关键部分说一下，首先在黎曼曲面上积分，需要两个东西，路径和微分形式，路径不单指黎曼曲面上的一条路径，还包括路径的线性组合，因为积分有线性的特点，所以定义路径的线性组合上的积分是合理的，如果要求线性组合的系数为整数，那么称其为一维链，详细内容如下 我们往往考虑那些闭的一维链，即边缘为零的时候 如果一个闭链与另一个闭链的差也是一个二维链边缘，即闭链，则称这两个闭链是同调的，这样所有的闭链形成的等价类就是我们的下同调群了。虽然原始定义复杂，但我们发现同调链上的积分都是一样的，所以同调实际可以用另一种方式来思考，即微分形式在上面的积分是相等的。同调链的基本基路径是可以找到的 为什么是这么几条，可以参考复变函数的柯西公式，对于复平面上全纯函数而言，闭曲线上的积分都是零，与选择哪条路径没有关系。至于上同调就很好理解了，它实际表明了积分的另一个部分，即微分形式的等价类，至于恰当的、闭的之类术语其实也不用管，只要知道两个同调群可以确定积分方式即可。接着再说一下对偶空间，这在线性空间中就有定义，它表示线性空间中元素到其基域的映射，换到微分形式实际就是就是到复数域上的映射 积分运算正是其中的一种情况，我们通过路径的不同来区分不同的微分形式到复数的映射。正在认识同调群和雅可比簇时，积分什么的只是计算方式而已，本质还是得把同调群视为整格，对偶空间视为高维复平面，雅可比簇视为高维复环面。这里提到积分的主要作用是计算和证明，比如下面的对应定理 这是黎曼曲面上除子和积分方式的对应关系，从而引出了Picard群与雅可比簇对应关系，当然我们更感兴趣的是怎么把雅可比簇计算出来，在《Algorithms For Modular Elliptic Curves》这本书里有详细地介绍，对于亏格为g的模曲线，我们自需要计算出同调群上的参数即可，总共有2g个g维复向量 由于对权为2的尖形式空间真好有个巧合，它的维数与亏格相等，于是正好可以把作为基的尖形式拿出来做不互相同调的全纯形式，配合2g条可能的闭路径，就可以计算出2g个在R(参考一维环面的构造，两个复数是是R上线性无关的，而不是C上无关的)上线性无关的g维复向量了。除了知道雅可比簇实际就是一个高维环面以外，我们还要知道Hecke算子实际是可以作用于雅可比簇的 雅可比簇可以看成一个积分路径的等价类，或者是由微分形式到复数的映射等价类，Hecke算子作用于雅可比簇实际就是，先作用于微分形式再进行积分映射，而它之所以是一个定理，因为我们需要证明这样交换运算后等价类的像依旧是一个等价类才行。我们来扩展一下Hecke算子的数量，并让它关于之前的乘法和加法形成一个环，并补上数乘形成一个代数 再定义一个由模形式生成的Q的扩域 这些定义以后会用到，为了研究雅可比簇的一些性质，我们深入探讨一下权为2的尖形式，有下面这个定理 它说明了这类尖形式的有理构造，由此我们可以引出同调群和雅可比簇的有理构造 我们知道雅可比簇是个复环面，那肯定与椭圆曲线有关系了，但由因为雅可比簇的有理构造导致了这样的方式还真不一定能引出所有C上的椭圆曲线，这也是为什么模性定理要求有理数域Q上的椭圆曲线是模的。这里又不得不提一下一些错误的科普结论，比如每个椭圆曲线都有个模形式与之对应，这是不对的，如果这个椭圆曲线是C上的，并且不能通过容许变换转化为Q上的椭圆曲线的话，那么它一定不可能由模形式通过上面的构造生成出来，因为生成出来的一定是Q上的椭圆曲线。 阿贝尔簇如果模曲线的亏格为1，通过上面的构造，我们实际已经得到了一个一维环面，换言之即一个椭圆曲线。当然了亏格为零模曲线得不到雅可比簇，自然得不到椭圆曲线，所以我们的导出椭圆曲线的对照表都是从11开始的 这里对应的模曲线是，我们可以通过公式 很容易地得到当N&lt;11，所得的模曲线计算出的亏格都是零，自然也没有什么导出的椭圆曲线了。回到正题，我们在意的是亏格大于1的情况，有人可能会觉得，从R上无关的复数中挑两个出来不就能形成一个一维复环面了吗？可不能这样，我们举个例子比如模曲线的亏格为2，那么我们的雅可比簇应该有4个线性无关的2维复向量，如果我们需要一个一维复环面则需要2个1维复向量，首先是维度上，两个2维复向量可能线性无关，但怎么才能保证导出两个线性无关的1维向量呢？投影肯定是不行的，(1+i,1+2i)和(2+2i,1+3i)在R上无关，但1+i和2+2i在R上相关，取巧肯定是不行的，我们需要一些更加科学的方式。方法是借助雅可比簇上Hecke算子生成的核 这个其实挺好理解的，比如亏格为2的雅可比簇实际可以看成一个平行六面体，而通过商群构成的等价类实际相当于这个平行六面体中的一个面，即平行四边形，而它就相当于一个一维环面。想要真正证明它是一个复环面依赖于下面的定理 从雅可比簇构造元素中扣掉一些东西用类似的构造法就形成了我们的阿贝尔簇。这是你可能发现这个阿贝尔簇好像也不是一个一维环面，这里必需说明新形式，或者正则特征形式，最多只能是代数整数系数 而之前所说的有理数系数，指的是尖形式空间的可能基，新形式是基，但基不一定是新形式，所谓雅可比簇的有理构造并不是指其中的复参数都是有理数，指的是有理数的代数闭包，即代数数，这个事实十分重要，正因为这个事实，后面我们才能对阿贝尔簇来构造Galois表示。至于阿贝尔簇怎么计算，由于上面的定理，其实跟雅可比簇的区别不大 里面说明了要选有理新形式，因为只有这样我们才能得到一个一维复环面。至此，我们终于可以给出证明费马大定理的一个重要中间定理，模性定理，的一个严格表述了 首先我们缩小函数范围为，这个的合理性得我们认识到伽罗瓦表示的时候，模性定理有定量的性质，情况下会带有特征，所以在情况下是更加精准的，其次我们要求椭圆曲线的不变量是有理数，Q上的椭圆曲线是可以推出这个结论的，但反过来却不一定，但是如果只是考虑两者之间连续上的性质，分析上的对应的话，后面我们会看到只要格参数是代数数就够了。这里的满射全纯同态实际就是我们之前讲的同源，这是我们要注意到一点，同源下的同构曲线可能不止一个，参考之前的对照表，但N=11的时候，一个同源类下有三行数据，其实就是这个原因，但以后我们会考虑模性定理的定量关系，在同源情况下它们一样的。对于一个特征形式，它有几个数来确定它的外貌，首先是阶k，但一般情况下我们取k=2，另一个是级N，还有素数项的傅里叶系数，模性定理的定量情形开始于下面的两个定理 即模形式的几个特征数可能与椭圆曲线的一些数存在定量的关系，我们可以轻易地将它们定义出来 此处我们定义了Q上椭圆曲线的*级和一系列由有限域上解定义的数*，因为当p是素数时上述有限域才存在，所以椭圆曲线定义的一系列数只有素数的情况。当然这其实是知结果给定义，本质的路径往往是反过来的，不过对于后人来说无所谓了，而且在2,3加性约化时值根本就找不到 按照椭圆曲线导子的作用，它有tame和wild两个部分，而2,3的时候不确定的正是wild部分，更具下面的一些研究 简单来讲，它不是很确定，会更具不同椭圆曲线的情况而改变，对我们而言最好的办法，而且下面的计算公式 估计也没谁会拿去用，反正我们只研究半稳定情形，根本遇不到这么特别的导子。最后我们先把定量的模性定理给出来 当然我们能这么有底气是有前提的，特别是下面的这个定理 它说明了，由模曲线导出的椭圆曲线符合上面的模性定理，而模性定理则对应其反过来的情况，它要求证明每一条椭圆曲线都可以由模曲线导出，当然通过更深入的推导，可以证明阿贝尔簇的情况 证明由主要由Deligne完结，全是法文(数学嘛，不是英文就是法文)，笔者读着读着就读不下去了，有兴趣的同学自己去研究吧。其实，本来的路径应该是正因为有这些定理，才引出了椭圆曲线上的一系列特征数，并引起了对所有Q上椭圆曲线定义这些特征能否往回思考的想法。 尾声在本章中，我们只做了一件事就是，从模形式的世界走向椭圆曲线的世界，通过这样的探索我们发现，Q上的椭圆曲线似乎有些特别，好像可以由模曲线通过一系列映射构造出来。而且通过Eichler–Shimura, Langlands, andDeligne等证明的定理可以发现，所有导出的椭圆曲线上有一系列的特征数字与原来的模形式存在着数值上的关系。我们想着这些特征数能否推广到所有Q上的椭圆曲线，这就是我们证明费马大定理中最重要的一环，模性定理。 下篇Galois表示联系模形式与椭圆曲线的，是有理数域Q的绝对Galois群的表示论，准确来说是环面导出的表示，在此之前我们先来认识一下群表示是什么 一个群表示要素似乎很多，首先是域，其次又是域上的线性空间，而对应的还是线性空间之间的可逆线性变换，还要满足群同态。当如果回忆起线性空间的基本理论可知，域k上的n维线性空间都互相同构，且在选定基以后，这些线性空间之间的变换同构域k上的n阶可逆矩阵。也就是说，真正研究群表示的话，我们只需下面情况即可 因此以后研究表示，我们所指的都是矩阵表示，原始的定义主要有助于证明一些表示的基本定理，但从一般层面上来看的话，矩阵表示有助于我们理解表示，并运用表示的理论。至此我们知道了一个表示有几个决定因素，需要被表示的群G、基域K、维数n、群同态方式ρ。考虑Q的绝对Galois群，其中的表示Q的代数闭包，即代数数，它是一个无限群，我们将这个群的表示称为Galois表示，以后我们主要研究它的矩阵表示。维数没什么好说的，我们来考虑基域的情况，更据域的基本理论可知，域可以依据特征进行分类，一种是特征为素数p的有限域，其最小素域，另一种是特征为0的无限域，其最小素域为有理数域Q。有限域的扩域是唯一的，而Q的扩域目前已知存在两种情况p进数和实数，分别记它们为和，实数的代数闭包比较清晰就是复数域，与此同时我们将p进数域的代数闭包记为，由于复表示的理论比较无聊，所以我们主要研究p进素域的表示理论，并有下面定义 另一个等价定义，即把这个群的元素作为线性空间中的一个线性变换，我们就不考虑了，除非哪次证明需要用到。当然这还不够，我们还需要认识两个东西，p进整数和剩余表示，它涉及了一种p进数的构造法，p进数看起来其实比较魔幻，并不像实数一样给人一种实在的感觉，下面是p进整数的定义 它是一个交换整环，所以存在分式域，我们将这个分式域称为p进数域。p进数一个好的理解方式就是把它看成数反过来写的样子，p进整数就是从个位开始反过来写到无穷的数，当然也可以为零，所有整数属于p进整数，但并非所有的有理数都是p进整数，比如就不是7进整数，但却是5进整数，不过所有的有理数都可以嵌入到p进数中，可以使用p进除法来生成，所以p进数确实是有理数的扩域。实际上，我们可以将所有的代数数嵌入到p进数的代数闭包(这里需要考虑复数的成分，p进数的代数闭包类似于实数向复数的扩张)中，但由于p进数和实数的解析性质不同，所以并不认为p进数和实数是一样的。注意到以后我们考虑的p进数域上的表示本质上是p进整数环上的表示，p进整数环是一个局部环，它有一个极大理想，因此可以构造剩余域，按照下面的定义 和之前所指出的同构关系≌，于是我们可以得到一个特征为p的有限域上的表示，称为上述p进表示导出剩余表示。其实不需要有太深的理解，两者有区别吗？一个是有限域上的表示，另一个是无限域上的表示，当然不一样了，但是对于我们即将研究的环面表示上，两者实际是性质上完全一致的，这是因为构造p进表示的时候，我们用的了特征为p的有限域上的表示。最后我们来考虑表示的一些特性的定义 这里给的定义是关于Galois群的，主要针对一般的域，我们把它特例化我们的情况，即考虑代数数域，此时它的代数整数环为，即所有的代数整数，所以它的极大理想可以由素数构造出来即，这就是所谓“lying over p”的极大理想，此时的剩余域实际就是特征为p的素域，所以decomposition群和inertia群实际是一样的，它们的商群就是平凡群。inertia群是的一个子群，它有一个决定参数即代数整数环的一个极大理想，此时inertia群可直接视为保持这个理想的元素的集合，注意这些都是我们的特例下才有的性质。下面对于我上述所说的东西进行了详细地说明 Frobenius元素关于某个极大理想定义，也可以视为基于某个素数定义，我们研究其的目的主要为了从代数数中挖掘出p进数来，挖掘的第一步就是先从理想导出特征为p的有限域，但这样是不够的 我们需要保证，表示对于同一理想下的Frobenius元素结果是一样的，所以我们定义了一个表示，在一点素数上的非分歧，或者在一个极大理想上的非分歧 只有在分歧点，我们才能很好的保证，表示在同类Frobenius元素处的表示有相同的行列式det和迹tr。其实非分歧并不是很重要，重要的是表示在一点有限，它的定义很复杂 包括我们以后用的Ribet定理，实际也是针对有限的情况，有限和非分歧的等价，有一种情况没被包含，即域的特征与点p相等的情况，而这种情况给出了平坦的原始定义 这里面的定义链有些复杂，我们来理清一下，首先最开始的定义是“表示在某点有限”，它涉及代数几何的相关概念，这样的定义显然有些不够纯粹，而“非分歧”就很好地将有限的大部分“有限”的情况给带走了，而且还不涉及代数几何的概念，而另一部分我们就干脆定义为了“平坦”，所以分歧实际包含了两种情况，一个是有限中的平坦情况，另一个则是不平坦的情况。所以表示在一点的情况，分为不有限、非分歧和有限平坦三种。知道这些东西对我们理解Ribet定理是十分重要的 注意到Ribet定理的原始论文与现代的转述有些不太一样，首先原始论文中的第一个情况实际是Mazur的结论，Ribet证明的是第二个情况，由于一定是素数，所以N与互素的实际意思就是不整除N，对于非分歧两者是不同的素数，所以一定互素，而对于平坦的情况，由于特征与表示所约的素数相等，这实际就是现代的转述中第一句的“where e不整除N is a prime”，这样也可以很好地把“p||N”(即N的素因子p的次数为1)的情况考虑进去。所以两者实际上意思是完全一样的，模表示是什么可以先不理会，我们总结一下表示在怎样的素数p是可以约化的，首先p必需是N的非平方因子，若p与特征不等，则只需表示在此处非分歧，若p与特征相等，则表示需要在此处平坦。你可能会好奇MainTheorem的第一部分，即Mazur的结论 从现代表述和Ribet论文中的表述，我们可以看出实际上它与Ribet定理的主要区别不在非分歧和平坦上(本质都是有限)，而在于p与N的关系，但你会发现Mazur的要求之一也有p是N的一次素因子，换言之Ribet定理实际包含了Mazur的结论。这里就要提一下Ribet实际证明了什么，即下面的定理 Ribet实际完成的是一个次数向上的工作，而新产生的这个q又正好满足Mazur结论中的要求，应用Mazur的结论最后才得到了我们的Ribet定理。也就是说Ribet的证明+Mazur的结论综合起来才得到了现代的Ribet定理。考察Ribet论文的核心部分，它先是在“Raising the level”部分证明了升次的定理 然后在“Lowering the level”部分，结合Mazur的结论的结论完成了最后的降次定理 当然证明中用到了由模形式构造表示的一些东西，不过我们知道是这么一个过程就足够了。 Tate模下面讲述了如何从一个椭圆曲线，或复环面，构造一个2维p进Galois表示 第一步是构造环面上的Tate模，p进Tate模可以看成环面上一系列扭点关于映射的反向极限，至于反向极限可以看成满足映射关系的反向点列，这样的构造与p进整数的构造是类似的，区别在于Tate模上的点列是二维的，而p进整数上的点是一维的，所以两者的同构关系是这样的≌，所以两者上的自同构集也是等价的，而上的自同构集实际上就是二维矩阵集，它是二维p进矩阵的子集，所以如果要构造一个二维p进Golois表示，我们只需要将绝对Golois群对应到椭圆曲线的p进Tate模的自同构群上即可，这里使用的方法是限制映射，自同构群一定保持有理数域Q，那么只需要求扩域是Golois的，即代数扩域就可以保证的元素到上的限制映射。简单来讲就是的元素是保持Q扩域之间的映射，而当我们保证是代数扩域时，它就是的子域，所以映射可以通过缩小定义域来变成上的映射，而另一方面子同构群依据其特性是保持有理数域Q的，所以此时存在到的映射，由椭圆曲线来确定，进一步通过图的交换和Tate模的定义，我们可以将映射扩充为到上的映射，从而我们构建了从椭圆曲线的2维p进Galois表示。但其中有一个值得注意的点，即椭圆曲线上的N-扭点必需是代数的，Q上的椭圆曲线是可以做到了，研究来源于代数几何 对于Q上的椭圆曲线，其不变量也是有理的，所以相当于是Q的代数扩域，当然这里的下面加了个，它表示由决定的椭圆曲线 其中也详细说明了有理时与Q上椭圆曲线的关系。不过嘛，我们只要知道Q上椭圆曲线确实可以构造一个表示，并且知道表示所拥有的下面性质就足够了 首先这个表示是不可约的，其次是表示在pN以外的素数非分歧，所以在这些点上可以定义Frobenius元素的表示，其中的两个特征即行列式和迹，当然我们是将其藏在一个二次方程中的，而且它还与椭圆曲线的一些特征数存在数量关系。更近一步地，我们来考虑剩余表示的性质 在里面，a是有理数，而整体表示a中因子p的次数，分母时为正，分子时为负，其它情况可以约掉，比如和，不过这个前提也比较奇怪，曲线E要半稳定。所谓奇表示指的是 其中的2.7就是我们需要的。接着我们要将这样的构造应用到模曲线导出的环面上，过程其实没啥好说的，跟椭圆曲线的构造过程基本一样，首先是模曲线 值得注意的是模曲线的表示，指的实际是模曲线上雅可比簇的表示，学过复流形的应该知道紧黎曼曲面是可以嵌入到它自己的雅可比簇中的，雅可比簇是一个g维复环面，所以定义类似的p进Tate模也是简简单单。需要考虑的还有添加扭点的Galois性，当然这里每个分量的Galois性，你觉得它对就行了，而且很久前面的探讨也大概能感受到这些。另一个觉得怪异的点是，方程的系数为啥是算子？上面其实也讲得挺清楚的，原始的几个Hecke算子可以成一个环，它们构成的Hecke代数可以视为雅可比簇(或皮卡群)上的变化，它可以视为一个Z模，它可以与原始的Hecke算子建立对应关系，所以将表示视为群到Hecke代数的映射是可以的。更进一步，我们可以得到想要的存在即阿贝尔簇的情况 在这里我们也可以发现，模形式导出的表示和椭圆曲线导出的表示有惊人的相似之处，同时也知道了为什么之前我们选取同余子群的情况就已经足够了。最后我们给出，什么叫做一个表示是模的，主要是p进表示 简单来说就是与一个模形式导出的表示等价，但它还多了一个对行列式的要求 其实椭圆曲线和模形式导出的表示都有这个性质，但表示等价并不能保证这个性质，所以才给它加上的。由此我们可以得到模性定理的最终表述 我们注意到这个定理有一个参数来表示表示是进表示，在表示的一些特征数中是排除了的情况，但N是有限数，所以实际上我们只要选定特定的几个就可以覆盖到所有的椭圆曲线与模形式的对应关系，这就是下面的这个定理 模性定理的完整形式已经讲述完了，接下来我们考虑另一个重要的情况，即约化表示的情况，因为只有这种情况下才能使用Ribet定理 基本上大差不差的，把对应由模形式导出的表示也约化就可以了。由于我们不考虑模性定理的证明，所以对于引进约化表示，我们主要为了费马大定理，这样可以借助之前对椭圆曲线的研究，来得到约化表示的性质 即表示的模性可以向剩余表示传递，当然反过来就属于模性定理证明的范畴了。至于Ribet定理就看上一部分内容吧。 Frey曲线我们飘离主题这么久了，终于可以回到正题上来了，Frey曲线究竟有什么问题？又可以引出怎样的矛盾呢？我们的第一步是得到Frey曲线作为椭圆曲线的两个基本特征量 首先Frey曲线是条半稳定曲线，这其实挺重要的，虽然模性定理对所有椭圆曲线都成了，但半稳定意味着它的导子没有平方因子，由于b是偶数，所以Frey曲线的导子包含了2，至此也看不出Frey曲线有什么奇怪的地方。依据模性定理，我们可以得到一个Frey曲线导出的表示，，p对应方程中的指数，这个表示是模的，考虑剩余表示，我们发现导子的所有的奇素因子都在判别式中且次数都是2p，根据椭圆曲线剩余表示的性质，我们可以得到 这才是Frey曲线真正离谱的地方，它的剩余表示在除了2的地方都是有限的，由于Frey曲线又没有平方因子，根据Ribet定理，这个表示最后的级是2，这意味着Frey曲线对应的表示是由新形式导出的，但是模曲线的亏格为零，根据维数公式，这样的新形式并不存在，所以Frey曲线并不存在，费马大定理成立。关于证明还有几点需要指出，p是不超过5的素数，所以可以导出所有包含这些素数的合数的费马大定理，而且p=3并不能用这种方式来证明，所以这种情况的证明是必要的，剩下的情况就是2的幂的情况，除了n=2的情况，都可以由n=4的情况导出，所以证明n=4的情况也是必需的，而且也不能移植到用Frey曲线的证明上。所以费马大定理的完整证明包含n=3、n=4和Frey曲线不存在三种情况。如果你不觉得Frey曲线奇怪，那我们来看一看正常的椭圆曲线，考察Q上的椭圆曲线 计算可得它们的判别式分别为-11,-11和-161051=-11⁵，由于针对整数情况分式有理变换会使因子降12次，故上述三个方程都是极小Weierstrass模型，再计算可得它们分别为16=2⁴,375376=2⁴×29×809,496=2⁴×31，因此上面三个椭圆曲线均是半稳定的，且在11有乘法约化，其它点为好约化，故导子均为N=11。我们需要知道这三个椭圆曲线是同源的，怎么证？我也不知道。我的一个学生曾这样跟我说过，首先椭圆曲线同构当且仅当不变量相等，这样关系一一对应的，其次我在之前说过，椭圆曲线的参量空间(即决定同源曲线的参数)是群的基本区域，我们知道是这个群上的自守函数，所以也是基本区域上的函数，最后可以得到结论同源曲线和同构曲线是一个概念，都由的基本区域来决定。我来简述一下，它想表达的就是，决定椭圆曲线的那个参数可以由反求出来，然后由于是权为零的完全模群的自守形式，所以同源曲线的相等可以推出同构，最后同构必是同源，所以两者等价。一开始还真没看出什么毛病来，τ决定的同源曲线的相等所以同构，感觉好像挺有道理的。但仔细研究椭圆曲线的构造的话就会明白τ决定椭圆曲线和决定的椭圆曲线是不同的 换句话说就是，你通过椭圆曲线的解出的和椭圆曲线所对应环面的完全不是一个东西，自然地“由τ决定的同源曲线的相等”这句话是错误的。一个参量τ有几个，即一个同源类有几个同构类，这个嘛，我也不知道，不过可以通过查表来了解 比如，导子N=38对应的椭圆曲线有2个同源类，其下面分别有3个同构类和2个同构类。回到最开始N=11的椭圆曲线，前两个的任何赋值只可能是0或1，所以剩余表示无处有限。最后一个椭圆曲线的对11进赋值为5，此时考虑表示，我们计算复共轭的判别式为5进整数(5-1,5²-1,5³-1,…)这是反向极限表达，转化为5进展开即(4,4,4…)，显然1+(4,4,4,…)=0，所以它是有理数-1的嵌入，即它是一个奇表示，实际上只要一个表示是模的，都可以推出它是奇表示，而Serre模猜想则是所有的奇表示都是模的，这已经被证明了，当然我们针对的是二维Golois表示，由于曲线是半稳定的，所以它的剩余表示在11处非分歧，由Ribet定理，表示的级可以约为N=1，但这样的尖形式不存在，所以这个椭圆曲线不存在？又是一个麻烦的学生，不过善于思考是件好事，由类似的方法很多椭圆曲线都可以变成N=1的情况，其实问题就出现在这个N=1，Ribet定理其实有个隐性的条件没有说出来，就是待约化的N必需是合数，即约化的最后结果最小是素数 否则对N的分解和假定两者互素都是有问题的，不过这似乎被认为是显然的所以没有被提及在定理里，有人觉得不整除的条件已经包含这个条件，因为说一个数是否整除1没什么意义。既然如此，我们考虑椭圆曲线 计算可得判别式Δ=-21952=-2⁶×7³和=-215=-5×43，所以椭圆曲线在2,7处有乘法约化，其它点处有好约化，是半稳定椭圆曲线，根据模性定理，我们得到表示是模的，考虑赋值，3整除6和3，所以此表示在2和7处非分歧，根据Ribet定理，我们得到此表示的级为2，这样的尖形式不存在，故此椭圆曲线不存在？啊，不行了，这该死的费马大定理给我带来这么多麻烦，老老实实地接受不就行了吗！谁给你这么多质疑的权利了？哦，一定是因为不可约，就算原表示不可约，但剩余表示不一定不可约 注意到上面推论2.8(c)的“for all but finitely e”，意思是不可约剩余表示有有限个特例，再看下面的定理2.9(b)，所以对于半稳定曲线特例可以出现在2,3,5,7的地方。一下子把上面的两个情况都驳倒了，质疑是件好事，说明你确实在思考，也说明自己还有什么东西没有理解到位。而对于费马大定理实际可以用下面2.9(c)的更强结论，p=2时方程有解，对应的表示是平凡的，所以大于3的素数的剩余表示都是不可约的。接下来，我的学生再也找不到反例了，于是我宣告了胜利，费马大定理证明完成。 尾声怀尔斯只证明了模性定理的半稳定情况，最后还是由它的学生泰勒完善了其中的错误，但也无法掩盖怀尔斯是最大的功臣，仅仅是因为它将费马大定理的证明做了结尾吗？要知道其中的许多过程都是必要的，比如Eichler–Shimura, Langlands和Deligne从模形式构造椭圆曲线的过程，它使得模性定理走向定量化；还有Tate的p进表示构造和有限平坦群簇理论，它给出来由特定环面导出表示的过程并结合代数几何给出非分歧，平坦等基本概念，从而使得模性定理的研究转向了群表示理论；接着是Serre和Frey详细地研究了各种椭圆曲线上的代数和表示，并且发现Frey曲线与一般的椭圆曲线有些奇妙的不同；然后是Mazur和Ribet对剩余表示的约化提供了理论基础，为后面的Frey曲线的矛盾引出提供了方法，使得Frey曲线也可以用“无穷下降的方式”引出矛盾；最后是Wiles证明了模性定理的半稳定情形，为费马大定理的证明划上了圆满的句号。这个领域还有许多东西，我的旅途还未结束，让我们继续前进吧。 参考书籍模形式导引, 群表示论, 复分析导引, A First Course in Modular Forms, Modular Forms and Fermat’s Last Theorem, Algorithms For Modular Elliptic Curves, A Course in p-adic Analysis, The Arithmetic of Elliptic Curves 论文Sur les représentations modulaires de degré 2 de Gal(/Q).On modular representations of Gal(/Q) arising from modular forms.Modular elliptic curves and Fermat’s Last Theorem.On The Modularity of elliptic curves over Q:WILD 3-ADIC EXERCISES.","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"难题","slug":"难题","permalink":"http://example.com/tags/%E9%9A%BE%E9%A2%98/"},{"name":"猜想","slug":"猜想","permalink":"http://example.com/tags/%E7%8C%9C%E6%83%B3/"}]},{"title":"无知与惊奇","slug":"无知与惊奇","date":"2022-08-24T12:06:57.000Z","updated":"2022-10-14T23:47:08.078Z","comments":true,"path":"archives/2022-08-24-无知与惊奇/","link":"","permalink":"http://example.com/archives/2022-08-24-%E6%97%A0%E7%9F%A5%E4%B8%8E%E6%83%8A%E5%A5%87/","excerpt":"","text":"人们会对看不懂的东西、云里雾里的东西赞不绝口，我对此并不感到惊讶。","categories":[],"tags":[]},{"title":"形态不定的Ribet定理","slug":"形态不定的Ribet定理","date":"2022-08-15T04:04:16.000Z","updated":"2022-10-14T23:47:07.909Z","comments":true,"path":"archives/2022-08-15-形态不定的Ribet定理/","link":"","permalink":"http://example.com/archives/2022-08-15-%E5%BD%A2%E6%80%81%E4%B8%8D%E5%AE%9A%E7%9A%84Ribet%E5%AE%9A%E7%90%86/","excerpt":"","text":"在费马大定理证明过程中，一个重要的步骤是Ribet定理，但通常情况下，人们印象中的其实是它的一个推论，在Ribet的论文里，我们可以找到主要定理和它的推论 推论说的是如果证明Q上的椭圆曲线是模的(其实就是谷山-志村定理)，则费马大定理成立。其实推论没啥，问题在于这个可以被称为Ribet定理的主定理，原始定理的叙述比较古老，所以我们应该看一些比较现代的叙述，但一看反而让我对这个定理的内容越来越模糊了。首先是我学习模形式的书籍 虽然一笔带过了，主要讲的Serre的模猜想，这里我不得不提一嘴，国内的百科真不靠谱，国内搜索Serre猜想，只是随便拿一个出来讲讲，讲得还不清不楚的，最后还是得靠维基百科 叫法并不重要，只要是Serre提出的猜想都可以叫Serre猜想，但不做区分，不叙述具体的内容，谁知道你是不是在胡说八道。我们探究的是Serre的模猜想，在wiki上有详细的叙述 比较让人在意的是absolutely irreducible，有人给出翻译叫绝对不可约，甚至莫名其妙在国内还能找到绝对不可约表示的定义，即扩域保持不可约性。但我认为是错的，这里的absolutely指的是域Q导出绝对(absolute)Galois群，我看过相关定理的证明，其中只用到了不可约性，并没用的所谓的绝对不可约性，另一方面从我目前所看的教程，它只要求表示是奇不可约的，并没要求什么绝对不可约。一个不好的习惯甚至带到了Ribet定理的wiki叙述 比较有趣的是我参考的另一本书 这是一本模形式理论汇总的书，在费马大定理证明概要，它给出这样的Ribet定理，然后又在后面给出了正确的形式 可以发现它并没有给出绝对不可约的条件，其实最让我不爽的是，有些人的胡乱科普，比如有些人读了这本书的开头概要，就以为自己会证明了，还给出来一个错误的翻译 虽然有人会觉得我以小人之心度君子之腹，那我举个很明显的问题，这个定理的第二句话，l=p且表示在p处平坦，先不论它整篇文章没有给出一个表示在某点平坦的定义，光这里莫名其妙给出的p就有些问题了，为什么这句话不直接写成表示在l处平坦，如果去翻原文的话，就会知道p是有具体含义的，Galois表示对应的有限域的特征。而我看了整篇文章，它没有全局声明，就是像“以后用f表示函数”,“以后用E表示椭圆曲线”这样的说法，也没有在定理里面指出来，相比之下有一本高等科普书倒表现得比较好 但然它这里综合了两个人的结果，第一句就是我们Ribet定理，而且也没有绝对不可约的条件，但这本书也有一些令难受的东西，就是翻译，这本书虽然是现代数学基础丛书，但它其实是从日语翻译过来的，甚至因为翻译导致出现了一个叫模椭圆曲线的东西 如果去看日语的原文的话，这么翻译也没啥问题 但是如果真地要去深究出处，也就发源地英语的话，正确的叙述应该是这样的 这个“modular”可以翻译成模的，连起来就是“模的椭圆曲线”，简化一下读成“模椭圆曲线”，好像也没什么问题。无歧义确实没什么问题，但关于“modular”确实存在一种奇异的情况，在下面这种情况 讲的是一个表示是模的，也就是“模的表示”，简化一下就变成了“模表示”，但确实存在模表示(modular representation)这个东西 前者表示与模形式存在关系的表示，后者的话说得却是有限群满足域的特征整除阶的表示，是两个完全不同的东西，都叫成模表示难免有点说不过去，而说成“这个表示是模的”。与此同理，我认为不应称什么模椭圆曲线，而应该说成“这个椭圆曲线是模的”，而且确实有个国人的想法和我差不多 当然他的翻译感觉读起来更顺口，至于民间流传模椭圆曲线其实还好，更离谱的是有人还流传模曲线和*模形式化(即被模函数参数化)*之类的说法，前者是确实存在的一种由同余子群导出的紧黎曼曲面，而后者曲线被函数参数化是确实存在的，但模性定理说得是对应关系，并且对应关系中存在一些量的相等，真正把椭圆曲线参数化的是魏尔斯特拉斯函数，它是一种椭圆函数，而不是模形式。很多的科普视频跟没科普一样 我知道为什么？因为Ribet定理，不仔细研究还真不知道该怎么表示，干脆直接拿个推论算了，比如费马大定理与模性定理矛盾，与Frey曲线矛盾之类的。有人可能会说科普的都是大众，但如果不是搞数学的谁会闲着没事去看费马大定理，而且拿出椭圆曲线，模形式化之类的名词，不加解释，随便地拿来用。你说模形式化，但谁都不知道它是什么意思，而且Ribet定理为啥加个模性定理就推出费马大定理，哦，因为你就是这么写的。所以我对Ribet定理很无语，有这种原始版本的转述 还有这种经过现代加工的东西 为什么我会觉得Ribet定理的科普有问题，因为我觉得这叫科普历史，不叫科普证明，因为你给的Ribet定理相当于在说明上下文，不是什么推出的关系。而且反证的逻辑线也有问题，正确的应该是下面这个 而且上面那个科普还有一个问题，它说方程不可能有解，显然有问题，首先实数解是存在的，(0,0,0)也是它的一组解，所以真正完整的叙述是没有非平凡(nontrivial)整数解。有人可能会说，科普视频那么严谨干嘛，但我认为正因为是科普才要严谨，否则会给读者传递错误的知识，在数学上有些东西是反直觉的，如果依旧以模糊的方式科普，在错误的路上越走越远，干脆就被科普了。其实有位数学家说得很对，数学是拿来建立正确直觉的，而不是让人在错误的直觉上顽固不化。有人可能觉得为啥通篇基本都是英文，因为没办法，前沿的科学基本都是用英文写的，而且大量都没有翻译，而且像数学这种概念套得十分深的学科，强行翻译的话，很容易引起像我上面所说的那些歧义，甚至直接导致错误的知识流传。还有一点是数学存在大量的证明，而且基本被承认以后都不会有人去看了，所以有些人在搬运定理的时候，可能直接抄过来，也不看看具体的内容和上下文，结果搞得定理搬来搬去都搬得莫名其妙了。其实，在我看来数学应该是可以建立一种通用语的，随便编一个通用语词典，不过看起来还很遥远就是了，主要还是搞数学的没精力，有精力的看不懂数学，还真是一个难以解决的矛盾。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"定理","slug":"定理","permalink":"http://example.com/tags/%E5%AE%9A%E7%90%86/"}]},{"title":"终于完成了","slug":"终于完成了","date":"2022-08-04T01:10:31.000Z","updated":"2022-10-14T23:47:08.239Z","comments":true,"path":"archives/2022-08-04-终于完成了/","link":"","permalink":"http://example.com/archives/2022-08-04-%E7%BB%88%E4%BA%8E%E5%AE%8C%E6%88%90%E4%BA%86/","excerpt":"","text":"无聊的时候还是把这个给完成了嵌入开发不过这审核也是真的慢。","categories":[],"tags":[]},{"title":"无瑕之人","slug":"无瑕之人","date":"2022-08-01T10:08:09.000Z","updated":"2022-10-14T23:47:08.078Z","comments":true,"path":"archives/2022-08-01-无瑕之人/","link":"","permalink":"http://example.com/archives/2022-08-01-%E6%97%A0%E7%91%95%E4%B9%8B%E4%BA%BA/","excerpt":"","text":"人可以不“完美”，但一定要多样。古话说得好，人无完人，但我却不禁思考，什么才叫完美的人？生而为人，我们能做到些什么呢？无非两个方面，思想和行动。先从思想这个易得的方向开始，思想有理性的和感性的两方面内容。前者源于学识，后者属于观念。当然以个人观点来看的话，直接分为理科和文科是可行的，当然此文理科非彼文理科，我们就以此为基础进行更进一步地探究。理科的思想领导是数学，唯一的差别在于，数学的公理是凭空产生的而非数学的公理源于规律的总结，规律总结得出的公理并不完全正确，所以特例的出现是自然的。比如对于金融，我只有一个观点，风险与收益的平衡，事实或许并非如此，但还是得说一说。金融是经济一个特例，特指交易现象以及由此产生的价值度量。交易似乎是个很简单的现象，一手交钱一手交货，但一旦引入数字或者对钱和货的概念进行引申，它就会变得纷繁复杂。交易的根本是价值判断，所以物物交换并不在考虑的范畴，就算真的有物物交换，其本质也要通过钱来做间接判断的媒介。实际上，钱和物本质上也是等同的，它们的区别在于不同的价值判断，价值判断我说了很多次，那么什么是价值判断呢？交易离不开群体，价值判断包含两方面内容，个体对其的预估价值和群体中进行此价值判断的人数。钱就是如此，在政府机构的权威之下，对钱进行价值判断的人为全国，造钱的成本如何不清楚，但大概率不会超过其面值。另一个将价值提高的例子是投机性质的理财产品，最典型的是以比特币为首的加密货币，它的价值判断十分模糊，甚至没有任何依据，就算是股票它至少还有个上市公司的情况来进行价值判断，但加密货币就完全只能看舆论了。我们更进一步思考，价值判断的本质实际就是风险，但大众对一件产品的价值判断不够稳定时，其价值波动大，也就是其风险大，资本家赚钱的核心就是从风险中获利。那么所谓的打工又如何呢？打工也是一种交易，其风险来自于公司对你给予的劳动的价值判断。裁员是一个典型的例子，但你的劳动对公司起不来作用的时候，对你劳动的价值判断相当于零。高风险的交易还有很多，比如直播、明星等，有关风险和价值判断已经明了了很多，风险就是价值判断的稳定程度。或许有人注意到了垄断的情况，但考虑到垄断的原因，只能说自作孽。经济学都有理性人的假设，但基本所有人都是，理学分析，感性决策。我为什么会认为买金融产品相当于赌博呢？因为我没什么闲功夫去研究它的未来走势，或者说决策的人都不够理性，又能分析出什么来呢？金融泡沫就是其中的典型，当然还有阴谋论说有操盘手的存在，这是基本不可能的。那么感性，或者文科在研究什么呢？文科的基础是文字，或者说语言，值得说明的是，任何的被认为的学科，不能单纯地划分为文或理，而是文科部分和理科部分。就算是社会运行的规律，我也想把它认作理科，那么到底什么是文科呢？一门改造思想的学问，文科的本质是一个人改造一个人，或者说一个人说服一个人。为什么要遵守法律？为什么要有道德？我有留在社会的必要吗？所有的问题都没有答案，但需要有一个人来说服我们，甚至我也将小说之类的文娱产品列入其中，就算文字没有意义，它怎么也能对读的人产生一些影响，荒诞派那一时期的东西大体都是如此。但无论如何，文科离不开文字和他人，一个人是不可能产生文科的，当然如果存在别人的文字造物，就不能算一个人了。更进一步，文字一定要是文字吗？其实只要是能传递足够信息的载体就行了，但当一个载体能传递足够信息的时候，那它必定只能是文字。由此引申出来的命题是，文科的价值也只能在群体中才能体现出来，你说一篇文章的思想有多高吧？一部小说有好吧？我说我看不出来，难道能说我眼界狭隘吗？就是大众怎么地推崇它？谁又能保证不是人云亦云呢？我不喜欢文科，并非我歧视它，而是它并不适合我。与我而言，文科永远只是一个拿来看得东西，在别人激烈争论的时候，我在一旁看戏就行了。但不能止步于此，文科还需要考虑的一个东西，那就是感性决策，当别人争论那件事符号道德，哪件事要被写入法律的时候，我还要考虑，当遇见某些事的时候又该如何？是跟随芸芸众生，还是特立独行呢？抉择最大的障碍是自己独立生存的能力和对父母养育之恩的感情。没有道德说起来很简单，做起来还是很困难的，我们在不经意之间已经被别人的道德观给束缚了，这不是件很可怕的事吗？思想告一段落了，理科是知识的积累与对知识吸收的能力，是改造世界的能力，文科是文字的游戏，兼容并包但要有所选择，是改造他人的能力。知识我们不一定要完全记住，但一定要有找到它的方式，文字终究只是玩物，一旦化为现实则毫无意义。我们并非全知全能，也不能理解一切思想，但我们是思想上的完美之人。下一步，我们来看看行动上的造物，有什么呢？肌肉记忆，我的印象中只此一种，这也是更符合生物规律的。肌肉记忆泛指一切通过长时间训练而不自觉完成任务的能力，比如艺术体育等。甚至是，对自己私人空间的收拾和整理，为了生存的炒菜做饭，人际交往中的各种行为。这些行为有一个共同的特点就是个人的可完成性，而对于一些个人不可能完成的事情，我不想将其纳入行动的范畴。在我的认知中，团体行动，团体本身也是一个意识体，其中领导担任这个意识体的脑。整体有自我，它的局部也可以是有自我的，我们身体里有许多生物，我们并不能完全的控制它们，但对于能控制的部分，它就是我。对于意识体的区分，我们以控制为基准，能为之事的考虑也只限于可控的范畴。进化的本质是控制能力的提升，人比动物强大的地方之一就是，对工具的使用。或许有一天，我们可以进化成国家、地球、甚至是宇宙，这些都是妄想啦！我们回到讨论的正题，个人不可能完成除了物理上的限制外，还包括时间这个要素。我一直在学习的有一个是野外求生，虽说可能性不大，但为了生存，必需要有方法找到应对各种可能性的发生。比如，更高文明的生物降临地球、某种病毒肆虐全球、甚至是四维时空中的意识体干扰我们的生活。维数本来就是一个人为的概念，所谓四维的意识体是什么呢？其实指的就是控制范围涉及时间的意识体。我一直喜欢用意识体来称呼，主要不想把类似人的存在用生物来称呼。或许确实有一种存在就在我们身边，但是因为我们互相不理解，导致我们不认为对方是具有意识的。存在但不认为存在，这可能吗？古人为什么会迷信神之类的存在呢？明明什么也看不到，而现在的人好像基本都有恃无恐，妖魔鬼怪啥，丝毫不畏惧。我们认为我们认识了世界，从微观到宏观，基本所有的规律都在我们手上，就算不知道的也都是细枝末节，我们认为在能见范围内的东西都可以得到解释。但值得注意的是解释以后的解释，综究还是解释，我们知道四种基本的力是，引力、电磁力、强力和弱力。对引力进行更深入解释的话，我们得到了相对论，质量扭曲了时空，导致所有质体在时空上沿最短闵氏距离移动。相对论比传统力学更进一步在于将时间和空间上的规律统一了起来。物理世界是规则的，至少我们都这么认为，因为有规律可循，所以我们才不会畏惧，真正可怕的是未知和混沌。回到野外求生，我想说是徒手制造的问题，如何在自然中，制造出我如今十分依赖的手机和电脑。Dr.STONE(石纪元)，我前些日子看过的一个漫画，主角的制造能力是真的强，记忆力也是真的强，如果放到现实中有什么问题呢？强大的记忆能力，几千年后还能记住的知识，对于经常在这个学科研究的人，确实可以很轻松地记住很多东西，很多东西用多了都是可以自然记住的。当然人家是虚构的，有作者在背后查阅大量的资料，但我们需要考虑的是自己，如果遇到这种情况，脑袋里能有这么多知识吗？特别是记忆性强的东西，化学和生物，这两个东西说实话基本记不清了。以前有这样一种言论，记住基本规律，剩下的全靠推导，我们不考虑时间的问题，数学上已经证明了混沌现象的存在，对于我们即得之物都是混沌的产物，是理论上不可完全推导的。换言之，对于此类事务，只能靠记，细胞的组成是什么，有什么化学性质，这种自然物中可以提取什么，都是靠记的，当然记忆是可以书籍进行传承的，读书的目的就是减少验证的过程，增加记忆的速度。但更可怕的情况是，陌生的环境系统，目前所有的生化知识积累都只限于地球。你可能会说化学元素应该比较本原，哪里应该都一样，不对，从物理上来说的话，存在其它粒子组成的物质，但是这些物质在地球上并不稳定，导致研究成果较少，由其它粒子组成的稳态不一定不存在。实际上，软件就是人为构造的一个稳态系统，它有确定的规律，并且是一个让很多人沉迷的世界，也包括我自己。制作电脑不是一个单线程的过程，比如为了制作芯片我们要先制作一个光刻机，为了制作半导体我们需要提取硅又要一台镀膜机等等。当我们一步步展开，一步步深入探索每一个流程的时候，我们会发现，电脑制作的流水线长到有些可怕，而且还是树状的。而且每道工业还有检验的步骤，检验设备需要制作，如果不这样做的话，有时候运行的结果都是难以预料的，结果不知为何，也不知该如何去排查错误，只能功亏一篑，从头再来。如果我们拥有无限的时间，或许可以悠哉悠哉的，但奈何时间是有限的。既然谈到了现实世界，我想说一说那些，创造精神价值，而不创造现实价值的东西，它们十分的常见，比如艺术，虚拟产品，这些都属于大众视野的东西，我想说的是炒股之类的东西，在我看来，炒股本质就是资金的无序流动，当然股票只是一个便于称呼的代表，我们所指的是所有金融产品，还有一点是炒股和买股票有一定区别，炒股是投机行为，买股票，特别是发行股，是投资行为。股票交易看起来没啥，有钱人的游戏，收割散户的韭菜，交易所再从其中获取手续费。股票本意是好的，为资本家筹集资金，但不知为何像如今这样，一副赌博的模样。说到底也只是一种感叹，对于有些行为是社会性的，我一个个体也无能为力，做不了什么，但我可以表达自己的感受。完美说到底只是一个称谓，如果从定义上本身就说明了，其不可能存在这件事，那“人无完人”也不知道有什么存在的意义了，完美还是得靠我自己来定义。嗯，不过最让我害怕的，果然还是遗忘了。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"完美","slug":"完美","permalink":"http://example.com/tags/%E5%AE%8C%E7%BE%8E/"},{"name":"余生","slug":"余生","permalink":"http://example.com/tags/%E4%BD%99%E7%94%9F/"}]},{"title":"又累又无聊的日常","slug":"又累又无聊的日常","date":"2022-07-29T13:41:09.000Z","updated":"2022-10-14T23:47:07.539Z","comments":true,"path":"archives/2022-07-29-又累又无聊的日常/","link":"","permalink":"http://example.com/archives/2022-07-29-%E5%8F%88%E7%B4%AF%E5%8F%88%E6%97%A0%E8%81%8A%E7%9A%84%E6%97%A5%E5%B8%B8/","excerpt":"","text":"这些东西好看吗？ 也不知道讲了些什么？ 也不知道有什么魅力？ 只是普普通通的日常里加了点料而已。","categories":[],"tags":[]},{"title":"AGameEnd-TimeMachine","slug":"AGameEnd-TimeMachine","date":"2022-07-20T14:44:05.000Z","updated":"2022-10-14T23:47:06.268Z","comments":true,"path":"archives/2022-07-20-AGameEnd-TimeMachine/","link":"","permalink":"http://example.com/archives/2022-07-20-AGameEnd-TimeMachine/","excerpt":"","text":"结束了，大概就这样吧 像石头门一样又勾起了我对这些似真似幻的东西的向往了。但只靠学习是不够的，要发现，现在的理论完全不够，至少我看来是这样。","categories":[],"tags":[]},{"title":"翻译那些事","slug":"翻译那些事","date":"2022-07-15T07:05:36.000Z","updated":"2022-10-14T23:47:08.858Z","comments":true,"path":"archives/2022-07-15-翻译那些事/","link":"","permalink":"http://example.com/archives/2022-07-15-%E7%BF%BB%E8%AF%91%E9%82%A3%E4%BA%9B%E4%BA%8B/","excerpt":"","text":"翻译是件很平凡的事，平凡到也不知道有什么好讲的。但是体会一下多种语言的交互也是一件很美妙的事情，最开始引起我对翻译进行思考的是下面这篇漫画 说实话，我很久，甚至没有见过，哪个翻译直接在漫画后面说翻译问题。在第一幅图有两个不太恰当的地方，看译文没什么感觉，我特地看了一下原文 把第一句单纯拷贝过来是这样的，“あいつにさ気にすなっつっといて”，机翻还真是我在意那家伙(aitu)，但考虑上下文，说话的人快要死了，说话应该是断断续续的，可以看到“あいつにさ…”少了一些东西，但看到“sa”应该是使动用法，“気にすなっ”中看到“na”应该是在“nai”加后缀的时候去掉了“i”，表示别在意，“つっといて”由“つる+おく+て”组成，意思是一个人传递给另一个人，看到“て”是“てください”的简略版，表示请求，所以整句话表达了，请求听者将别在意自己这件事给传达过去。第二句，将“名字+のこと”翻译成“XX的事”，字面好像确实是这样，但原因是日语里的名字和中文里的名字包含的分量不同，在日语里名字是单纯的一个称谓，如果要包含名字所代表的人的全部，就如同字面那样加上“のこと”，简单来说，就是习惯问题。我们再继续说说日语吧，因为我平常用日语比英语还多，而且日语更有难度一些，有人可能觉得日语里有很多汉字应该更好理解才对。理解外文真正困难的地方在于变形，变形到你基本认不出原文是什么，如果只是单纯的一个词语的话，我们可以查字典，又或者依据上下文。日语是我目前见过的变形最严重的语言，日语的谓语拥有最为丰富的变形，可以传达的意思也非常的多。其实韩语的语法也差不多，但是它后期完全不用汉字让我不是很喜欢，另一方面日语相关的资料也比较多。我们再来看一个非口语的翻译例子 歪んだ憂いが飛び交う中で 身处扭曲的忧愁交错之中失い 失い 膝をつく道化 不断经历失去 小丑跪倒在地あの蝶は，自由になれたかな 不知那只蝴蝶是否获得了自由情熱は孤独と燃える 热情就这么和孤独一同焚烧昨日の自分に興味なんかない 我对昨天的自己没有任何兴趣白黒 返す言葉 裏表 白与黑 换言之就是 表与里常識とかいう偏見を編み込み 编织名为常识的偏见明暗を分かつマジョリティ 多数派就这么划开明暗界线天才を演じてる馬鹿はお前か 扮演天才的傻瓜是你吗ないし馬鹿をやりつづけてる天才かい？ 亦或是持续装傻的天才最後に笑うのはどちらの女神だろう 不知最后露出微笑的会是谁的女神曖昧な狂気が僕の喉を乾かす 暧昧的疯狂风化了我的咽喉輪郭が定義される前に 在轮廓定型之前ロジックを覆せ！ 颠覆逻辑吧ああ，机上の空論を夢と呼ぶ 把纸上谈兵当成梦想無謀の中に光は宿った 光芒就这么寄宿在鲁莽之中鬱陶しい風 振り払って 挥开这道烦人的风力を今示そう 现在就展示自己的能力吧嘘も真実も明かせ！ 揭开谎言与真相 这虽然是一段歌词，但句子都比较书面的，我直接采用了字幕组的翻译。第一句末尾“で”表示在什么地方，这里翻译为“身处…”这是因为主语是小丑(道化)，表示人。“失い”表示失去，连续两个，它翻译成了不断失去，从上下情景来看的话，意思没什么问题。第四句，特地加了“就这么”，明明写成“热情和孤独一同焚烧”就够了。比较有趣的是第七句，串下来就是“分割明暗 多数”，有人把它翻译成了“眼中只论胜败结果的芸芸大众”，说实在，我一度以为这是不是翻译得有点过头了。但从辞书里，我发现在惯用语里“明暗”可以用来表示胜负，“分かつ”则有辨别的意思，但大多数只能辨别出胜和负两种东西的时候，换言之，他们看不到胜负之外的东西，在从整个动漫的情景来看的话，这句话确实是在表达“学院里的很多人眼里只有胜负”。剩下的就不说了，翻译这回事很大程度取决于为啥要翻译，如果想要优美完全可以靠翻译者的想象力来脑补。在我的认知里，翻译其实是件无所谓的事情，能知道句子想要传递什么就足够了，至于精确什么的？语法什么的？都是应试教育需要考虑的东西。我将翻译看成一种再创造，它在原文的基础上包含了作者自己的理解，我并不讨厌翻译，只是不想因为翻译而耽误很多事情，对于我学过的语言，机翻配合我的能力就足够理解很多东西了。拿我最近玩的一个游戏为例，机翻有很多的不足 不论是本地的机翻，还是目前我觉得机翻最好用的百度翻译，感觉翻译的都不是很好。但重要吗？不重要，因为我们很容易看出，这是在表达对别人打自己的不满。机翻对于口语，特别是那种断断续续地口语，基本就是翻译不出来的 “gomene”一拼读，我们就知道这是在说对不起 这一句就翻译得更离谱了，其实只是所长将“百元(manen)”拉长地读了一遍。在读生肉的时候还可能会遇到一些与本意不同的词语 意思是歪斜，但是这样吗？是也不是，这是在特定语境下拥有的含义的词，在这个游戏里有这个意思，但在其它地方就不同了，理解需要靠上下文 “只是，这个帝都还残留着许多歪斜”，后面还有许多提及的地方，总得来说，它指的其实就是宪兵长对这个时代的干扰，导致帝都偏离了原有轨迹的意思，而主角的目的是通过解决案件来修复帝都在历史轨迹中偏离的部分。当然很大一部分原因是这个游戏用词太不老实了 在“山々”中，“々”表示重复前一个汉字，乍看之下表示群山或很多，但这里偏偏表示想要，不过“动词+たいのは山々”也是个比较固定的句式表示很想，其实“たい”已经表示想了，我猜吧，“山々”应该只是进一步加强“想”这件事的。类似的例子还有很多 在这里用“物色”来表示寻找，它们确实都有这样的意思，但真的不是很常用。后来我仔细思考了一下，或许是作者想要表达时代背景吧，也就1920年的日本，另一个例子是这个 一开始我也没注意到，但恰巧仔细听了舞(マイ)的语音后发现，她自称的时候是(atashi)而不是(watashi)，据说前者更加谦虚，现代日本男女之间就已经自称的区别了，在那个时代还得更加谦虚。玩这部游戏的时候，机翻烂到了极点，仔细想想也对，因为现代机翻基本都是基于神经网络，而训练的样本都是现代的语料，对于比较不现代的输入出现差异是挺正常的。不过机翻有时会带来一些奇妙的惊喜，比如下面这句 后面表示赶紧前往现场毫无疑问，但前面这句的第四个翻译，最开始我以为是共享辞书里哪个小天才贡献的翻译，后来发现确实是某个在线翻译的结果，当然这句话本来是反问句“现在是下将棋的时候吗？”我说这么多其实只想表达一件事情，翻译成什么其实并不重要，知道说了件什么事就足够了，最后是下面这个例子 就算我们不特地去查“閑古鳥”是什么意思，结合上下文，它是事务所一直的状态，并且多次来的女仆都知道的事实，明显指的就是事务所没什么生意的意思，至于要不要翻译成萧条、不景气什么的也没啥必要。趁此机会说说这个游戏吧，目前在莲线实在不想推了，将我的路线固定就算了，但凭啥莲线比远子线长这么多，虽说我一直想要到所长线，但远子还是挺讨喜的。整个游戏以解决案件为主要内容，虽说都不是什么大案件，而且解决的方式也十分平凡，但我挺喜欢的。最开始寻找的绿藻，还是得与画家换，其实主角有提到过比较远的某个湖里可能有，但并没有去，这其实就是地域性，这太现实了，说走就走还真没那么简单，我们一直都在固定的地方过着固定的什么，像井底之蛙一样，不禁为自己感到怜悯。游戏里面，作者的见识有点广 比如物理的共振现象，虽然我也知道就是了 现实的潜睡，这个其实我也体验过很多次，那时你在睡觉，但感觉没有睡着，而且感觉被束缚，丝毫不想动的感觉 还有医学相关的“眼睑闭合不全” 连与数学相关的取子游戏都可以拿来说。虽说闹鬼事件是感觉解释最为牵强的一个，比如看到落魄武士，先解释这是在潜睡的梦里，再解释这是因疲劳而所做的恶梦。不过这应该是我目前最喜欢的一个 它说明了一件很朴素的事情——平凡。游戏中有些文字在图片里面 这其实是游戏中唯一难受的地方，主要还是我的文字识别引擎太拉跨了，它没有反着识别的功能，就是书写顺序问题，对于对话框的文本，通过hook可以准确地提取出来。图片可以靠文字识别，但它书写顺序又不符合目前的习惯，导致文字识别的顺序十分的乱。不过其实很多对理解上下文影响不大，所以也不是很在意。最后，我拿个英语的例子来说说我为啥比较喜欢读原文。最近，我在研究模形式，遇到一个叫“新形式”的东西，我有好几个资料，但形式的差别有点大 这是我觉得最拉跨的一个，当然可能书比较远古的原因 这是我觉得最故弄玄虚的一个，不如说整本书都在故弄玄虚，说话毫无逻辑，符号乱七八糟，我从来没见过这么拉跨的数学课本 这是表达得比较清晰的一个，但它却是从外文翻译过来的 这是目前我最认可的表达，将映射、集合和像分开表达，这里的逻辑结构我最为欣赏了，而且这也是我目前学习模形式的主要教程。如果有精力去进行仔细的研究的话，它们的本质确实一样，但教材的目的是什么呢？将复杂的东西，简单明了地表达出来，如果书的目的不是为了让你读懂，但它没有存在的必要了，还不如直接去读定义-定理全集算了。特别是有时候你说得越多，反而会让人更加模糊，就和某些论文一样，为了字数而增加字数，论文本来就应该精简地将过程和结果传达出来，但因为字数的要求，却不得不把一个简单的结论说复杂，这难道不可悲吗？崇洋媚外吗？这也是文论的说辞吧。翻译没啥好说的，也就那么一回事，翻不翻译无所谓，别被别人牵着鼻子走就行了。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"翻译","slug":"翻译","permalink":"http://example.com/tags/%E7%BF%BB%E8%AF%91/"},{"name":"体会","slug":"体会","permalink":"http://example.com/tags/%E4%BD%93%E4%BC%9A/"}]},{"title":"2022菲尔兹奖","slug":"2022菲尔兹奖","date":"2022-07-05T07:57:08.000Z","updated":"2022-10-14T23:47:06.268Z","comments":true,"path":"archives/2022-07-05-2022菲尔兹奖/","link":"","permalink":"http://example.com/archives/2022-07-05-2022%E8%8F%B2%E5%B0%94%E5%85%B9%E5%A5%96/","excerpt":"","text":"恭喜Hugo Duminil-Copin，June Huh，James Maynard和Maryna Viazovska获得今年菲尔兹奖。","categories":[],"tags":[]},{"title":"详与略","slug":"详与略","date":"2022-06-30T15:34:31.000Z","updated":"2022-10-14T23:47:10.089Z","comments":true,"path":"archives/2022-06-30-详与略/","link":"","permalink":"http://example.com/archives/2022-06-30-%E8%AF%A6%E4%B8%8E%E7%95%A5/","excerpt":"","text":"当一种东西做久以后，就会十分的无聊呢！学习也是、小说也是、游戏也是、漫画也是，热情总是周期性的，这可能是个人的原因，但拜其所赐，人只会渐渐变成只知其祥不知其略的机器了。我十分的高傲，看不起世间的许多东西，知识永远都在进行无意义重复，最明显的例子就是数学了，“区区”微积分凭什么需要这么多版本的教程，大体内容一致、本质内容同质化，难道编排与所谓的讲解真的能改变教程的本质吗？好好想想就知道，都是资本在作祟，因为还有很多深层次的知识没有任何愿意来讲的书籍，原因很简单，受众小，市场小，除非是某些基金赞助的项目。最近闲得慌，还是得干点什么，于是真正地玩起了单片机，简单来说就是更加深入地去了解计算机底层的东西，重要的是实际操作。很幸运的是正好有这样的一个机会，随便写一堆虚伪的大话，很轻松地拿到一块开发板 这是拿来做物联网的，当然我没有任何经历，它那所谓拿来考察能力的问卷真是毫无作用呢！嘛嘛，既然板子都拿来了就随便玩玩吧，实际上是有一个任务的，完不成的话就把板子寄回去而已。那么，该怎么调教这块板子呢？首先是学习资料，物联网的统一标准很少，基本都是各厂家各自为政，能依靠的只有高中学到的那些物理知识和平常反汇编所得的底层机制参考了。平常反汇编使用的CPU指令集是复杂指令集，而现在的开发板使用的是精简指令集RISC-V。而且物联网使用的操作系统与linux不同是适用于物联网场景的实时操作系统。这都是什么意思呢？最开始，我也是一脸懵逼，但挑战未知就是我最喜欢做的一件事了。我们需要发动学习能力，首先锁定我们所拥有的参考资料，只有官方提供的这些 一张开发板电路图 单片机制造商官方参考 一个实例 确定所属关系，单片机或者MCU(微控制单元)是整块开发板的一部分，为什么要称其为开发板？因为最重要的MCU只是右中的一小部分，引脚的相关接线都已经连好了，我们主要做软件开发就够了。我们该从何着手呢？就是上述的实例了，例子是最好的老师，成功运行例子是开始的第一步。但我并没这么做，因为这会产生额外成本，需要购买摄像机。我本来的目的就是白嫖学习，多一点成本都会让我难受万分。所以我们决定从工程实例开始 由于开发板与开发环境都是官方提供，高度紧密贴合，连根数据线就可以通过WCH-Link部分的硬件直接完成烧录(即把程序写入硬件)，结果如下 从结果，我们来猜代码的作用，LCD_Show，顾名思义应该是在LCD屏幕上显示文字用的，但似乎LCD_W和LCD_H之类的信息没有显示出来，为什么呢？我们又注意到while上面的一句英语，不应该运行到此处。所以我们大致可以猜出，执行tos_knl_start后，系统处于中断状态，进入tos操作系统，不再执行后面的代码。将后面代码全部删除，发现没有任何问题，故猜想得证。这些都是小意思，而且LCD的驱动是官方写好的，开发起来一点也不靠近硬件，达不到我的目的，所以我开始研究一下init的相关代码 从名字上看，应该是USART的输出初始化，那USART是什么东西呢？没事，百度就行了，通用同步异步串行接发器。我们可以从名字来猜测它是什么，接发器说明这个东西有双向的输入输出，同时有同步和异步两种模式，而输出的模式是串行。我们注意到初始化的时候有一个baudrate的参数，百度一下，它表示每秒数位的个数。这样我们基本可以猜出它是什么作用了，计算机底层传输的基本通道是电流，通过高电压和低电压来模拟二进制数据，传输的方式是一条电路，也就是串行，而每秒的电信号中，我们可以拆出baudrate个二进制数据。我们发现数据发送依赖于计时器，它来表示每一比特电信号的时长，所以发现这样一句话RCC_APB2PeriphClockCmd，虽然前面一大串不懂，但后面显然是时钟命令启动(ENABLE)的意思，那前面的参数是什么意思呢？可以猜出应该是某条线路的时钟，为什么这么猜呢？我们利用芯片商的文档 搜索APB2，我们发现了一系列代号与引脚的对应关系，而它们之间的联系就是APB2。那么启动时钟表示什么呢？显然可以猜出，相当于供电了，并且电压的变化由时钟进行控制，我们发现后面还有GPIO和USART的初始化，我们可以猜出这应该相当于开关的作用。因为APB2的每个供电源都对应着好几个引脚，所以这应该是为了区分才加上去的，后面就是对接口的调参，显然十分自然地可以理解。 显然这是初始化硬件led灯的，就是亮着的几个红灯，我们可以轻松地找到5个led灯的位置 led1表示WCH-link，led5表示电源，我们能控制的是led2-4，它们与MCU的4个GPIO引脚相连，向其写入高电平即可使其亮起来。想要成功初始化，首先计时钟启动GPIOE，其次将其对应的PE2-4端口进行打开，就像代码写的那样。实际上，这些都挺好理解的，比较有趣的是LCD屏幕的驱动，所谓驱动，其实就是将电信号的相关操作封装成我们现在使用的API的相关代码。至于怎么玩，其实和命令行画画差不多，不太想说太多。将工程深入理解后，我们可以轻易地改造原始工程 效果还是可以的 总觉的空落落的，我们来说一下，一番研究后的成功吧。首先是MCU，它相当于一个小型的电脑了，有闪存来存程序，内存来充当运行内存，但它其实就是LCD屏幕下面的一小块芯片。它周围有一圈引脚，作用实际就是输出或接收电平，GPIO是扩展接口可以随便使用，而其它引脚一般会被赋予一些特殊的意义，具体可以参考芯片的文档 这和之前的开发板图不同，GPIO处于闲置状态，开发板是MCU的进一步扩展，目的是将一些繁琐的物理工作给集成起来，在开发板上，我们可以看到许多突出了的线条，那实际上就是电路，集中到了一块板上。其实整块板的核心其实只有那个比较小的MCU，其它都相当于外设，提供非逻辑和计算的相关功能，比如显示、按钮、led灯、wifi等。另一件有趣的事是wifi固件的烧录 我们添加wifi连接代码，串口输出出现了一系列的AT+，这实际是两个系统在进行串口通信。首先，这块开发板上，实际有两个系统，前者是我们基于MCU开发的，后者则是wifi模块的，为什么wifi会需要一个系统呢？注意这里的wifi模块指的是产生一个wifi热点，而不是指具有连接wifi的功能，MCU的系统也可以直接连接wifi只不过没有相应的驱动，所以就直接使用wifi模块里的连接功能，分工明确，效率更高。主要还是因为这个MCU没有提供wifi的IO接口，而且ESP-12F提供的wifi模块在现在应用更为广泛，所以直接分工来算了，一个操作系统是完全可以即连接wifi又充当热点的。我想说的，大概就是一个学习的过程。是详与略把握的过程，MCU有如此多的引脚，有必要一个个详细去了解吗？不需要，找到我们想要的即可。电路图有必要搞清所有的过程吗？没必要，搞清主要线路即可。这并不是在偷懒，而是就算真的一点点去搞懂，如果没有用到的话，最终只会遗忘掉，和没学一样。模形式是我理解费马大定理的第一步，但我所用来学习的这本书 它给的定义实在过于详细了，后面的定理也是一样的，十分的重复，让人心生厌倦，更重要的是它定义这么多东西，实际用到的就那么几个。比如之前的一个双曲点，定义一下，给一些性质，就再也见不到了，实际用得多的就抛物点。又有的书过于直爽 一章就把人家一本书的内容给讲完了。看到挑剔的是我自己，简单来说就是，我累了，不然也不会去玩MCU来转化心情。还有让我头疼的是符号，不同书的定义有所差别 这里“权为k的α变换”和 的“S-变化”其实本质是一样的，两个自守因子j和J差一个平方，由于不存在权为奇数的模形式，所以后者直接用2k来表示权，J带着指数k，但前者为了统一，保留所有整数权k，并保存j的指数为k。后者使用S的逆变换，前者直接保留α，这是由于抛物点到i∞的变化和反变换的过程，前者在性质上看起来顺眼，后者在定义上看起来顺眼。之所以看这么多版本的书，主要还是因为与模形式相关的书不多。国内数学的研究还主要还集中于应用方面，纯数学也是研究流形及其周边。以北大最近的学术报告来代表一下 第一个我来翻译一下，单支撑集、特征圈，这两个是拓扑学的东西，平展层上的强分歧，这个是代数几何的东西，拓扑学是基本所有学科的基础，所以重点在于后半部分。古典代数几何研究的是零点集，基于希尔伯特零点定理，而现代的代数几何使用了概形和层的观点。我认为其属于流形的周边，现在主要研究解析流形，其相当于拓扑流形局部欧式化后赋予解析结构，而代数几何研究的对象是可以视为拓扑流形的。两者的关系有点像微积分和代数运算的感觉，但研究的都是数。第二个是Langlands纲领的东西，标题看不出东西，要看摘要，研究的是模空间的自守形式。这样看好像与我现在学的东西相关，但旁边的Hebrew 大学不是国内的。第三个是p进群的模表示，虽然带了一个模，但其实属于群表示论的内容，但模形式的相关证明需要用到，也属于我正在学的东西，但看名字就知道不是中国人。第四个是费马大定理以来的数论。最后一个是Fano流形上的Kähler-Ricci流，显然是微分流形的东西。从这一系列的报告也知道了一件事，费马大定理的证明到底有多重要，本来如果费马大定理2000年前没有被证明的话，应该会入选7大千禧难题的，而千禧难题有两个都是与代数几何相关的。值得注意的是模形式应该是代数几何的一种工具，就好像微积分一样。感觉越说越乱了，给数学的理论划界限也不是什么值得赞赏的事，像代数几何和微分流形基本都夹杂着很多思想和基本数学理论在里面。我一直主张，知道其实质的内容比知道其名字重要多了，我可不想成为一个名词机器。这实际引出了最近“详与略”选择的问题，对于近代数学概念实在太多，仔细阅读难免被淹没会感到乏味，抽象代数和点集拓扑是我以前学习的典型代表，比如抽象代数里的环可以引出整环、主理想整环、唯一析因子环、诺特环、戴德金环等各种玩意，点集拓扑里的紧集可以引出局部紧、可数紧、聚点紧、序列紧、仿紧等，不过说到底紧集不就是闭区间的类似物嘛，真正地理解紧性还是从复平面添加无穷原点进行紧化，又或者构造射影空间才开始渐渐理解其用途。我大概又到了重复地低迷期了，也该从细读向略读进行转化了，再在后面应用的时候回来精读，这应该是个好的选择。自己怎么想，我还是很清楚的，跳读也不是什么丢脸的事，反而有利于迅速地把握全局，有人可能会认为这样子基础不牢，但牢固的基础拿来干嘛呢，很久以前，我就已经决定了，在数学上，我只想做一个读者。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"尝鲜","slug":"尝鲜","permalink":"http://example.com/tags/%E5%B0%9D%E9%B2%9C/"}]},{"title":"如何是好呢","slug":"如何是好呢","date":"2022-06-30T08:45:27.000Z","updated":"2022-10-14T23:47:07.848Z","comments":true,"path":"archives/2022-06-30-如何是好呢/","link":"","permalink":"http://example.com/archives/2022-06-30-%E5%A6%82%E4%BD%95%E6%98%AF%E5%A5%BD%E5%91%A2/","excerpt":"","text":"检索器的任务只是更新数据库，所以检索器觉得十分的无聊。","categories":[],"tags":[]},{"title":"低廉地沉迷","slug":"低廉地沉迷","date":"2022-06-22T05:59:20.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2022-06-22-低廉地沉迷/","link":"","permalink":"http://example.com/archives/2022-06-22-%E4%BD%8E%E5%BB%89%E5%9C%B0%E6%B2%89%E8%BF%B7/","excerpt":"","text":"手机、电脑是好东西，但很多人都对其持批评的态度，说沉迷其中是不好的，注意我所说的沉迷二字。过分的舆论和周围的流言导致自己都不禁对沉迷于现代科技的自己感到羞愧。嗯，手机不离身是一种罪孽吗？这是在害我自己吗？或许我们应该考虑一下，现实之于我们的意义。现实的意义在于人类社会，以及人类之间的交流，人是社会的人，在世间孤独的活着无异于一个人活在幻想的世界里。你可能会说，衣食住行，运动健身，工作生计等又算什么呢？衣食住行属于刚需，并非现实的意义，也就是不论活着虚拟的世界里，还是活着现实的世界里，这都无法摆脱。所谓“现实的意义”在于现实与虚拟的“区别”，但所谓的“区别”已经越来越小，唯一能拿出来说的也就那些了。运动健身属于可有可无的东西，每天去食堂吃个饭都算一种运动，与此相关的是健康，说实在的，这些都算什么呢？我也不太理解，大概是现实与虚拟的必要联系，没有它们现实与虚拟都是维持不了的。对于活在虚拟中的人而言，最麻烦的还是生计问题，生计问题的本质就是我所说的社会。社会是一个整体，其中的每个个体——人，的区别之一在于“知道”的不同。人不可能什么都知道，也不可能什么都做到，人是社会的局部，社会膨胀的速度远大于人个体膨胀的速度。有位数学家曾说过，局部等同于整体就是无穷，换言之，只有当人的生命无限大时，这时我们可以将过去、现在和未来看成一个整体，从时间上，我们的知识量可以与社会形成一一对应，换言之，永生意味着全知，全知则意味着全能。有些人可能意识不到时间的宝贵，更不能理解时间的无限为何意味着全能。空余时间与空余时间的增加是对此事最好的诠释，前人利用空余时间开发出了增加空余时间的工具，以此往复，但由于人的时间有限导致空余时间只能以代代传递的方式表现其增加中的特性。回到当今世界，非空余时间的去向无法两个，工作和满足刚需。之所以不把工作放进刚需，是因为“钱”。“钱”的流入即工作，“钱”的流出即满足刚需，但此钱非彼钱，钱是联系个体，组织人称为社会的枢纽，是人在社会中的共同价值判断。而一般意义上的钱，则是其具体的物质形态。人实际可以活在自给自足的自然经济中，但人总是倾向于形成社会，因为这样社会的资源配置效率更高，这是无法改变的趋势。一个很简单的问题，就是现在，只能使用自然资源，我能徒手造一台电脑吗？不行，因为我的知识缺乏太多是第一点，第二是很多需要的自然资源我都无法得到。甚至，我连最基本的硅都不知怎么得到，知识在某种意义上是失传的，如果一辈子都在农村，没有接触到现代的传播媒介，没法到科技发达的地方去从师，那么在有限的时间内，一生都绝对不可能造出电脑。人类做为一个整体，永生的前提是知识可以传播，将自己的空闲时间分享给人类的整体，再通过人类整体的放大效应，使得空闲时间程指数增长。永生的不是人而是人类，但知识的传播断了，人类的永生也就到头了。知识的索引是知识传播中最重要的一部分，而索引的根源，即是社会与人之间的交流。一番游走之后，我们回到了最开始的话题，现实的意义在哪里？那就是获取知识的索引以保证人类的永生。个体之前存在不信任，钱则信任的担保，人类对其的核心价值判断就是保证。社会有种奇妙的现象，在很多人的眼里，玩钱的人——俗称资本家，好像是赚钱很多的存在。但是呢？风险是很多人忽略的存在。风险来源于价值判断的波动，资本家玩钱的手段无法两种，投资和投机，前者又称创业，后者又称炒股，但然我们把炒股看出一个比较泛的概念，各种金融产品，不限于债券、期货、外汇，甚至是虚拟货币，我们都可以看为炒股，其特点都是价值判断存在波动，波动越大，风险越高。这时你可能觉得应该有一个例外吧，中间商？其实它们还是存在风险的，那就是信用，只有没有人参与到它们的游戏中去，无法承担运营成本，就意味着亏损。所以它们做得最好的事情往往不是如何帮你赚钱，而是以各种有声有色的宣传来吸引你到它们的游戏中去。对于很多人而言，投机跟赌博没什么两样的，唯一的区别在于，人们对其的价值判断存在一个现实的依附，而真正懂得投机的人，则是通过现实依附来推出人们对其的价值判断。如果哪一天，我想搞投资的话，我决不会搞二级市场交易，要买就买发行股。玩钱的人，为什么能赚钱？这是显而易见的，因为钱是现实的意义所在，其组织了社会，包含人与人直接的联系。这就引出了下一个内容，为什么我们选择了将大部分的时间投身于虚拟？因为我们缺钱。不知有多少人还记得，以前电脑课的教程其实叫做信息技术。信息技术是多方面的，最重要的是信息的处理、存储和传播。在很久以前计算机是技术人员的聚集地，而如今资本的温床。虚拟产品付费，似乎很多人都觉得理所应当了，但我不认可这种看法，并非我想否认产品制造者背后的艰辛，而是有人以赚钱的目的制造虚拟产品才是很值得怀疑的东西。如果回忆岁月史书的话，其实是资本将网络给污染了，比如版权是一个很好的借口。一个人买了一本书，将其借给别人看，将其打印了给别人看，将其扫图变为电子书分享给很多人看。我觉得性质都是一样的，只是最后面的方式，传播基本零成本，而且覆盖面大，阻碍到了资本的赚钱罢了。我知道，很多人觉得我偏激，思想有问题。那我只说一个最讨厌的例子，将别人用爱发电的东西占为己有，以版权的名义将其投诉下架，在以低价进行贩卖传播，这样的情形，你喜欢吗？这样的情形还真不少，只不过它不会明显的把价格给你写出来，可能会以积分之类的东西来代替。你说发电者没有维权意识？免费发布的东西，在有些情况是确定不了归属的。我也经常感叹到，很多有趣的黑科技和实用工具都是几年前的东西了，现在也有吧，只是真的太少了，没有资本的支撑是很难活下去的。对于付费的虚拟产品，我只会下破解与盗版，对于为爱发电的产品多多少少捐助一下还是可以的。要知道，资本的产物也不见得会比为爱发电的产品好很多，QQ吧、微信吧、知网吧……反正多么不好大家都知道，但怎么也无法摆脱。你可能会说QQ啥不是免费的吗？我保持沉默。互联网在某种意义上构造了一种劫富济贫的社会，少部分人向网络注入资本，大部分人从中汲取红利，我可能不懂共产主义，但互联网必定是共产主义的必要组成部分，或许将来的存在形式可能会变，但将世界的人轻而易举地联系起来这点是不会变的。网络社会从联系的功能上是超越现实社会的，网络实现了一种人员的自织，将意气相投的人聚集到了一起，是一种熵减的现象，这不合理，所以现实中以熵增来弥补它，所以人们怨恨网络也是无可厚非的。大家应该都知道，语言是一个模糊的存在，误解是必然的，但知识传播使用的又正好是自然语言，换言之，知识的传播其实一直处于不稳定的状态。回到互联网，互联网从社会联系的功能上来说，主要传播知识，这里的知识指一切接收到的东西，因为互联网存在自织现象，而知识的传播又是不稳定的，所以沉迷网络很容易形成知识茧房，这里特别指明是网络而不是电脑或手机等设备。当然，对于由模糊文字载体传播的信息，以逻辑去思考的话是件很愚蠢的事情，重要的是感受。在网络上我看到这样一个东西，圆周率(pi)的最后一位是什么？回答是，在pi进制下是1。你有必要思考其中的逻辑含义吗？没有必要，需要做得只是感受其中的奇思妙想，因为题目本身是模糊的。会对模糊的语言进行深思熟虑的人，我喜欢称其为杠精。那么虚拟世界到底是什么呢？我称其为索引机器，或者说这才是其最重要的作用。电脑、手机等电子产品的核心用法，帮你轻松低廉地找到想要之物。其真正有毒的是资本所污染的推荐系统，这东西很久以前我就说过了，其是网络的万恶之源。沉迷于网络推荐系统和沉迷于电子设备完全是两种性质的存在。沉迷手机电脑等设备并不应该抱有罪恶感，或许正是因为我们穷，才只能有这种低廉地消遣，正是因为我们穷，才只能使用网络的低廉购物，现实是资本家的玩具，我们可玩不起，而且在虚拟世界中我们还有着将资本主义赶出去的伟大使命。言重了，沉迷虚拟世界的理由很简单，那就是低廉而又接近现实。正版的受害者，你听过吗？","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"一定要成功的决心","slug":"一定要成功的决心","date":"2022-06-15T13:02:37.000Z","updated":"2022-10-14T23:47:06.838Z","comments":true,"path":"archives/2022-06-15-一定要成功的决心/","link":"","permalink":"http://example.com/archives/2022-06-15-%E4%B8%80%E5%AE%9A%E8%A6%81%E6%88%90%E5%8A%9F%E7%9A%84%E5%86%B3%E5%BF%83/","excerpt":"","text":"我做出了一个最愚蠢的决定，读懂费马大定理的证明，预计给出的时间为一年。","categories":[],"tags":[]},{"title":"赛前整理","slug":"赛前整理","date":"2022-06-08T13:55:47.000Z","updated":"2022-10-14T23:47:10.799Z","comments":true,"path":"archives/2022-06-08-赛前整理/","link":"","permalink":"http://example.com/archives/2022-06-08-%E8%B5%9B%E5%89%8D%E6%95%B4%E7%90%86/","excerpt":"","text":"最近有许多专业课要考试，本来没太多闲功夫搞其它的东西。但没想到一个月前的比赛，我竟然要准备一下复赛了。大概一个月前，当时这个比赛初赛截止应该是15号，但不知道为什么延期到了30号。当时我提交的算法优化到了48亿的成本，排名第三，当时前面就有两个团队优化到了37亿，其它赛区也有，我估摸着37亿应该才是优化的开始，因为评分系统中，成本是大头，进行时间优化才是竞争的关键，如果没有达到基本的成本线，再怎么优化也是徒劳，因为一直到20几号都没有通知，以为黄了，所以干脆就不管了。到现在，我当初的猜想确实没错，我是以12名进复赛的，前面有十个团队都优化到了37亿甚至是36亿。因为依照惯例，复赛是在初赛基础上加限制的，如果我以现在的基础的参加复赛的话，那在起点上就已经输了，虽然已经没办法使用服务器的判分系统了，但原来的代码已经有点看不懂了，所以还是稍微总结回忆一下，并记录下来以防止忘记。 研究题目这次的题目十分精炼，连代码的基本框架也没有，所以数据读入和输出需要自己完成，上一届其实是有这部分的，当然了，我是第一次参加这种比赛，主要还是因为好多比赛都太默默无闻了，不知不觉过去了都不知道，我还是5月份看别人参加比赛，才去四处看看有什么比赛可以参加，才发现了这个比赛然后参加的。数据输入输出使用标准IO流，拿上一届题目里的框架，仿写一下就差不多了 先定义一批简单地结构体，保存原生的读入数据，因为对原生数据没必要有处理函数，所以不使用类来封装数据。封装数据的主要目的是便于管理，单纯从汇编上看的话，封不封装数据本质都是一样的 在这里，我们从标准输入流读入数据，并以原生的形态保存在结构体Data中。因为这是在一个方法内读取数据，所以要使用new使Data数据生成在堆内存上。我写代码都喜欢带上命名空间，虽然看起来麻烦，但写起来有代码提示也不会太难，而且从汇编上看本质是一样的，而且还能区分不同命名空间中同样的函数名 这框架的最后一部分，我们的主方法了，getSolve是我们的核心函数，data是输入数据，res用于保存最后的结果。框架已经搭建完成，然后一切的分析与实现都将在getSolve内完成，不过在此之前，我们再来读读题目。 题目归约文本解读一段时间后，从样例可以更加直观地读懂本次题目 我们需要两个结果，一是每个仪器放在哪个区域，二是主流水线上仪器的一个窗口匹配方案。如果真的这样去理解的话，实际上相当于被题目前面的一大段话给误导了。题目所需要的应该是所有仪器的“窗口匹配方案”，我们来详细地解读一下。首先，在车间上我们可以发现一些端倪 车间的区域数量是[N, N*5]，N是车间的个数，换句话说就是，每个车间的区域个数是1-5，为什么呢？因为能源的个数只有5种，每个车间内不存在两个区域能源相同，其实相同也没什么关系，不过这其实暗示了我们一件事，我们给仪器选区域，相当于选车间，并放到这个车间中能源费用最低的区域中去。这部归约的目的其实是为了下一步，进一步考察数据 我们发现，我们通过窗口来定位车间，而不是车间来定位窗口，其实这是在间接告诉我们，窗口到车间是映射关系，但不一定是可逆映射，即得到窗口就能得到车间，但反过来却不一定，由于映射不一定可逆，所以得到窗口在预期内会比得到车间有更多的信息。再回去读题目的话，这个信息实际就包含了主流水线的窗口匹配方案，所谓题目的误导是什么？它误导我们得到丢失了信息的区域放置方案，再让我们回去找原来的窗口匹配方案。由于映射不一定可逆，所以从区域放置方案去找窗口匹配方案是一对多的，属实是自找麻烦，还不如一开始就找“窗口匹配方案”。总结一下，我们的目的转化为了将仪器放在哪个窗口上，约束则可以通过映射关系来寻找，由或者将信息保留在窗口的实体对象上。窗口放置方案的下一个需要归约的约束是流水图和窗口回环。由于仪器在窗口间的转移是没有费用的，所以只要窗口对即可，于是我们可以对回环进行展开，比如就拿例子来说，其展开就是[0,1,0,1,2,3,3,4,4]，我们的目的就是将仪器排到这个窗口列上，原来只有0-4号窗口，现在加上回环以后有0-8号窗口，容易证明两种排布可以互相转换，且在当前的费用约束下能够保持费用的不变，这几点说明了转换的合理性。至于流水图约束，由于流水图是无环有向图，问题实际转化为了图算法中的拓扑排序算法，需要拓扑排序的节点即流水图上的仪器，顺序区间由上面的窗口展开给出。大致思路就是这样，接下来就是落实到代码上 具体内容没什么好说的，主要有两个部分，第一部分是得到一些结构化的数据，像workshop表示车间，Node表示仪器，主要Equip名字已经被前面给占用了，所以换成了这个，而且放在流水图了，称做节点也没什么问题。第二部分，则是从根节点开始对流水图进行广度优先遍历(BFS)，这里我们对节点定义了深度depth的参数，它实际就是我们之前所说的窗口展开的位置，而在BFS里，其表示对应的拓扑序。由相关定理可以知道，我们得到的是最小拓扑序，我们需要的是最小费用，每个仪器的后面都可能还存在费用更低的窗口，在云端跑一遍以后最后得分67亿。其实这只是完成题目的baseline，连最小费用的寻找都还没有实现，接下来我们以优化的思路来寻找最小费用，暴力破解我试过了，直接超时，云端的数据集比本地大几十倍，在15s内完成不了。 小优化首先依据之前的定理，可行解一定在当前解的后面，由于前面节点都是最小的，从前面调整是没有活动空间的，所以我们的调整思路是反向广度优先遍历，依据深度将每个局部节点调整到当前费用最低的点，实现比较简单，就像下面这样 其实就是将前面从根节点的遍历反过来再进行点修改而已，我们使用sumTotal来计算当前的费用，我已经试过了，费用计算并不会影响性能，就算是计算差值，其结果是一样的，至于为什么，如我之前所说，评分系统优先评估方案的最小费用，只要不超时，同样的方案是无差异的。这里有个细节，就是如果费用相等当然话，我们也选择后移，这主要是为了让前面的节点有更大的调整空间，从而使得到更优解的可能性变大。这时有没有觉得，这样应该是全局最优的吧？并不是这样的，其在云端最后得分为65亿，至少了2亿，想不到吧！我们中部赛区的人比较强，至少60亿才有进复赛的可能。我先来讲讲为什么会有这样的结果？其原因是没有考虑未来的机会成本，随便截取一条流水线，其反向的深度有限遍历，上面的每一个节点，存在时间上的先后顺序，我们总是优先调整后面的节点，并且其在未来不会发生改变。而在每次调整中，我们只是对当前节点的当前时间点调整到最优，并不能保证其在未来仍然是最优的，我们具一个最简单地例子。在非主流水线上的例子，这样我们唯一考虑的只有安置费用 仪器2在仪器1的后面，第一行表示仪器一对应窗口的安置费用，第二行表示仪器二对应窗口的安置费用，使用反向遍历时，我们优先调整仪器2，由于1的费用最低，所以仪器2会被安置到②位置，然后安排仪器一，由于顺序的限制，使得仪器一只能安排在①号位，导致最终总费用为11，但很显然仪器一安排在②号位置，仪器二安排在①号位，综合费用为3才是最优的。优化的方向其实有很多，比如当从局部最优点向右偏移得到的费用增加并不多时，引入一个预测移动机制，提前再移动下一个节点，如果能到达更优就保留这个偏移，又或者更改评估调整结果的函数，不使用综合费用，而使用期望费用，比如将预留空间与费用的变动进行相比，将这类系数最低的调整结果进行保留。至于我是怎么优化的？等复赛过了再说，我们的目的只是总结而已。 云端判定器我发现这届给的信息真是越来越少了，不仅没有基本的代码框架，连云端的判定器也不给，更过分的是云端给的反馈信息还少。还记得当时，判题死活通过不了，明明本地跑得好好的，到云端就变得莫名其妙了，其原因是，云端数据与本地数据的“巨大差异”，有哪些差异？先来讲讲，黑箱实验。 黑箱实验黑箱实验，就是提供输入，然后黑箱给你输出，你来猜测黑箱内部性质的过程。在这里，黑箱是云端的判题器，输入是我们提交的代码，输出就是判题器的得分和反馈信息，至于那个日志下载就是一个摆设。接着我们想要猜测的性质是什么？这就是与判题器斗智斗勇中产生的东西了。第一次提交的时候，我们得到的反馈信息是“编译失败”，因为CMakelists.txt都是官方写好的东西，在本地编译通过的情况下出现“编译失败”是因为你交错东西了，事实确实如此。不过这主要还是从上一届的判题器中发现的，判题器的执行过程大致是这样的，先解压缩你提交的东西，然后将“它所认为的代码部分”移动到相应位置，使用云端的CMakelists.txt配置编译。如果你提交的文件内容不符合要求，判题器不会检测，只会将一段不存在的东西进行移动，然后编译过程针对不存在的东西，结果自然是编译失败。接下来，我们应该假设提交的文件格式和代码都没有问题，因为它们不能提供云端的信息，只是用来说明你提交的东西有问题。在黑箱实验中，这些信息只会白白浪费次数，虽然一天有30次之多，但依旧有限。除去“编译失败”，“判题成功”加分数也是没用的信息，它是用来反馈你算法优劣程度的东西，是你的信息，而不是云端的信息。“分数”只有当判题成功的时候才会出现，由于我们已经排除了它，所以我们真正可用的信息只有反馈信息的有限内容了，经过实验只有五种，“运行超时”、“运行错误”、“逻辑错误-非法匹配”、“逻辑错误-非法数量”、“内存溢出”。接下来以实例来看看，如何利用这些信息吧。 黑箱实践由于我最开始写的是暴力算法，自然返回了运行超时，但是在当时我们不应该知道云端的数据集是很大的，因为人应该存在第一印象效应，我们第一次见到的是题目所给的小数据集，所以我们应该主观臆断地认为云端的数据集也是小的，我们最先想到的应该是代码的哪个语句出了问题。我确实也是如此，最开始我有两个猜想，一个是标准输入流cin卡住了，另一个是循环语句因为数据集不同而导致卡住了。代码比较复杂，直接定位比较困难，云端也不会告诉你代码在最后的时间运行到了哪里？那该怎么办呢？那就是利用判题器输出的差异性。对每一个循环语句进行注释，如果有哪一个注释导致反馈信息不是超时，则说明此注释的代码卡住了。以这样的方法确实找到了，是一个for循环卡住了，但不好的消息是，这是我们进行暴力搜索的for循环。这意味着，我们还得查找for循环的哪一步出了问题，for循环有一个指标表示我们循环到了哪一步，一个简单的方法是根据指标的不同数值进行break，看到底卡在了哪一步，结果是卡在了某个没什么特点的数值上。瞬间，我们变得百思不得其解了，睡觉吧。在新的一天，我们又看了看算法，话说回来，我们是怎么进行暴力破解的呢？与一般的线性暴力破解不同，这个问题的暴力破解需要使用回溯技术。比如，我们的仪器排布问题，基本思想是，先对第一个仪器所有的可行解进行遍历，在进行下一个仪器的遍历前，我们需要先将第一个仪器先模拟放置一下，这是因为它们之间存在先后约束。以此类推到最后一个仪器放置完毕后，记录总费用，然后回溯，将前一个仪器模拟放置到下一个可行位置。这其实还是一种稍微优化过的暴力算法，因为仪器存在约束，所以模拟放置来保证约束是必需的。这时我们突然意识到，回溯在某种意义上也是一种循环，看来单纯地考察循环节点还不够，还得考察出问题的循环节点里的回溯节点。就是因为这样，我发现了问题所在，回溯节点好像不止十来个。问题所给的例题只要十三个仪器，所以回溯节点最多是十三个，当时在验证的时候，我们发现回溯节点到了快30个都还没卡住。这其实表明了一个事实，仪器的个数不止十几个，这时我们立马看一下题目 啊，瞬间觉得自己像个小丑，仪器的数量原来最多可以达到1000个，这是我们应该立马意识到问题的所在，回溯算法的运算量是随回溯节点个数呈指数增长，底数是每个节点的可行解个数，我们拿2其实就是足以说明问题了，是个十分著名的大数字，放到这道题的意义就是，我们的每一个仪器都有两种选择，最后需要排好64个仪器。所以暴力算法是必然行不通的，于是就有了我上面所说的那个算法。深深懊恼的自己，瞬间起了报复心态，我想知道你的数据集到底有多大？这时，我们终于产生了黑箱实验的目标了，云端判题器的数据集到底长什么样？一个可行的办法是直接找到运营方让他把数据集给你，但是呢！运营方说，为了比赛的公平性，我们不应该把数据集私自泄露给任何非比赛相关方。即然他们不愿配合，那我们就自己动手丰衣足食——黑进服务器，直接抢走数据集，可是啊！为什么我们的黑客技术如此的垃圾啊！根本就无从下手好吧。冷静，冷静！只是因为气上心头而已。看来歪门邪道都是不行的，我们只能规规矩矩地利用已有的条件了，那就是提交代码。从上面的过程中，我们可以得到了一些启发，那就是相同性质的代码可以有四种不同的反馈信息。这里必需说明，什么叫相同性质？比如所有编译不通过的代码算一种性质，但在这种性质的代码中不论你做怎样的修改，最后只能返回“编译失败”的结果，这意味着我们的控制等于不存在。正常运行代码也是同理的，唯一可以控制的其实是异常代码。这里可以说一下，我搞开发的一些感受，在debug是最怕的不是一大堆报错信息，而是只有一句报错信息，它告诉你，你的代码有问题。有这样的例子吗？有，我有一次跑别人的Gradle项目的时候，不论你怎么搞，它就给你一个错误，NullPointerException。这是java的空指针异常，为什么会突然来个java，因为Gradle实际就是一个用java写的项目管理工具，而我这里的Gradle是用来管理Android项目的，gradle出错，其实就是gradle的配置文件出了问题，但gradle是多项目的，这说明它的配置文件都是好几个出现的，而且gradle有一点代码的意味在里面，并不是可以直接用json之类的格式直接包含的，所以确实存在debug问题。当然只要有心还是可以把问题找到的，问题其实都是版本，但版本跨度实在离谱。首先是编辑器AndroidStudio的版本，老版的AS会提供用于Android开发的NDK路径，但我现在用的新版没有。Gradle对版本的基本机制是双共存，电脑上使用最新的Gradle，项目中使用其所要求的gradle-wrapper版本以适应其所对应的配置文件，在旧版中gradle-wrapper会向AS索要项目需要的NDK路径，新版中则需要自己添加NDK路径到配置中。报错遵循向上传递，gradle-wrapper会认为NDK本该存在于AS中，但找不到，但本地的gradle会认为，NDK应该存在配置中，而配置中却没有写。两者的错误列表并不匹配，所以只能在公共的java中找出它们的父类NullPointerException来作为报错信息传递出来。这样有些抽象，我举个形象的例子。假设java可以认识英语和数字，并能将其区分开了，gradle-wrapper是java的子类所以不仅认识英语和数字，还认识中文，所以有关中文的错误它会以中文来写，gradle也是java的子类，所以认识英语和数字，但新版中发现认识中文没什么用，所以改成了认识日语。gradle-wrapper读取到了信息“1ab(不是中文)”，并传递给了Gadle，但是Gradle不认识中文，所以它看不懂“(不是中文)”这个报错信息，只能将其认成，“1ab(it is not a letter)”。废话讲太多了，其实我们只想说明，没有任何信息是很可怕的。实验正是因为结果不同才会有研究价值，回到我们原来的问题，我们想要的信息，即数据集的信息，实际在程序的运行内存中，想要捕获它，实际就是代码中的变量。但与我们平常Debug不同，我们不能直接通过标准输出流cout来得到结果，只能通过云端的反馈信息，所以我们来模拟cout即可，其方法就是主动引起异常 反馈的基本思想是一一对应的原则，判定器只有5种反馈结果，所以我们最多只能假设5种分类。一一对应在数学上是一个十分深刻的思想，有时间再说说吧，这里我们就简单地应用一下，使用区间估计比单存的数值估计具有更快的速度，所以我们判断我们尽可能使用不等关系。如果最终返回运行超时，则仪器的数量应该在[100,200]之间，类似的，我们还可以做更多的判断，这时你应该知道了吧，为什么最开始，我要有一个保存原始数据的结构体了。 结尾没什么好说的了，总之从期末复习中拨出点时间来研究算法吧，怎么说呢？既然进了复赛，就努力一下吧。人家运营方又提供路费，又提供午餐和晚餐，搞得我都不好意思摆烂了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"竞赛","slug":"竞赛","permalink":"http://example.com/tags/%E7%AB%9E%E8%B5%9B/"}]},{"title":"开始摆烂","slug":"开始摆烂","date":"2022-06-01T10:09:56.000Z","updated":"2022-10-14T23:47:07.909Z","comments":true,"path":"archives/2022-06-01-开始摆烂/","link":"","permalink":"http://example.com/archives/2022-06-01-%E5%BC%80%E5%A7%8B%E6%91%86%E7%83%82/","excerpt":"","text":"我抄你的，改一改，你抄我的，再改一改，抄来抄去，增增减减，真没意思。所以我决定静养一段时间，做点实际的东西，有缘再见吧。话说回来，创新真得好难啊！","categories":[],"tags":[]},{"title":"网络爬虫","slug":"网络爬虫","date":"2022-05-31T04:55:41.000Z","updated":"2022-10-14T23:47:08.588Z","comments":true,"path":"archives/2022-05-31-网络爬虫/","link":"","permalink":"http://example.com/archives/2022-05-31-%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/","excerpt":"","text":"网络爬虫，想必大多数人或多或少都有听过，但爬虫真的有那么神奇吗？真得随随便便就可以得到大量数据吗？今天，我将从开发者的角度来深入讲解爬虫的基本思想，可不是那种，一个软件加输几个参数就轻易得到数据那么简单的东西。 爬虫的基本原理做任何事前，我都会研究其原理，并探究其可能性，搞爬虫也是一样的。首先爬虫是干什么的，做了一件什么事情？在网络上自动化数据采集。我这里所给的限定词一个也不能少，比如本地的数据采集也是存在的 这里我们通过tree指令得到采集当前文件夹内所有的文件，并将结果保存到data文件内，这样我们就实现了一次自动化的数据采集。关于本地的数据采集，其实我以前特别喜欢玩，主要为了更好的辅助我进行文件管理，比如下面这个 作用是在特定的文件夹内的所有可读文件中查找相应字段，为什么会有这个玩意？主要还是因为以前没有电脑，唯一的开发工具就是手机了，手机上的IDA功能不是很强大，比如我引用了某个开源库的某个函数，但我想知道这个函数是怎么实现的，就需要找到它的实现在哪？开发都是遵循多文件管理的，一个文件一个文件点开查找的话是不太现实的，所以就自己搞了自动查找器，想想以前的说干就干的能力还真强，现在遇到问题首先想的就是有没有现成的工具，说着还真是惭愧。回到正题，本地的数据话采集与爬虫的区别在于，文件结构的可知性，在此之前我们要明确一点，互联网的本质就是数据的传输，上网实际就是下载文件，只不过格式千奇百怪罢了，比如网页其实就是一个html文件。互联网也本地的不同在于，本地资源以树的形式存储，而网络资源则以图的形式存储，说直白点就是本地文件可以很轻松地遍历，但网络却不行，必需依靠链接互相跳转，比如我们要依靠搜索引擎来跳转到其它网站，我们在不知道网址的情况下不可能随便就找到某个网站。所以爬虫有一个重要的任务就是从当前页面找到有用的链接从而进行更深一步的数据爬取。爬虫的另一个重点是自动化，其实数据爬取也可以人工完成，一页一页的浏览，一页一页的复制，这种事情也不是没有干过，比如写什么感受的时候，如果只是需求少量数据的话，其实也没必要搞什么爬虫，不仅累还要与反爬虫博弈。你说不能复制的情况？暂不论资源在本地的性质，就来说说不能复制是怎么实现的，其实就是javascript脚本的原因，在浏览器浏览网站的时候，三个部分是组成网页的基础，html、css和javascript，前两者是完全静态的，到手了就是自己的可以随便玩弄，而js脚本则对浏览器的行为进行脚本控制，从而实现一些交互功能，比如拦截你的复制操作，换句话说拦截你复制操作的不是人家网站，而是人家官网通过js脚本告诉你的浏览器拦截复制操作，即然这样就好说了。拿我比较讨厌的一个网站举例，就是下面这个 真令人不爽，我复制几个字还要我交钱，想的美啊，我自己都可以把它手动打出来，其实还有个有趣的想法就是，将内容进行截屏，然后通过文字识别系统转化为文本。当然我们可是深知原理的开发者，所以我们直接禁用javascript脚本，像这样 然后嘛！复制变成了原生的样子 也就可以轻而易举的复制到数据了，当然禁止js并不是好办法，修改js才是更牛的方法，使用浏览器的开发者工具箱就可以实现，但还有更聪明的办法就是利用油猴脚本，不过有一定风险就是了，在使用前仔细看脚本源码是有必要的，不过我并不当心安全问题，因为我一般会用两个浏览器，一个原生的，一个开发的，高风险在前一个浏览器中进行，搞技术在另一个中完成。比如CSDN上的代码，我还是利用别人的脚本实现的 保留js的运行时有必要的，因为有些网站js的话，显示可能会不完整，而且js还能实现广告过滤等更多功能，何乐不为呢！爬虫是网络上自动化的数据采集工具，而其实现的可能就是我们的网络协议了，http俗称超文本传输协议，所谓的网站浏览实际上就是将远端的超文本下载下来并在本地展示，通过浏览器的开发者工具箱，我们可以轻易看到我们下载下来的网站源码 也就是说网页实际是在本地的，网页上的文字自然可以轻易的获得了，与我们不同的是，我们看到的是网页渲染后的结果，而机器看到的是网页的源码，所以从源码中提取相关信息也是爬虫的一项重要技术。当然仅仅得到一个页面的信息还是不够的，我们还需要自动得找到下一个可爬取的页面，其包含在一些的html标签中，比如下面这些 当然跳转中还可能有许多我们可以不需要的链接，比如回到主页之类的，进行过滤也是一项重要的技术。说这么多其实，我们只想表明一点，因为文件在本地，所以爬虫是理论上一定可行的，就算单存的只是看到，我们也可以通过截屏，然后进行文字识别来达到目的。理论的东西其实并不多，只要知道网络的本质是文件传输就够了，接下来还是举几个例子，来体会一下爬虫的实在感吧。 一个旧例其实我很久以前就写过爬虫，比如下面这个例子 使用java实现的爬虫，其实现在我用java已经比较少了，但java作为我学过的第一门面向对象的语言还是值得怀念的，第一门编程语言的话应该是javascript，在以前手机版的minecraft可以通过js脚本来实现模组的功能，那可能是我第一次编程了，现在都还有存根呢 以前对开发没什么感觉，还用中文来当变量名，但不提倡这么做，因为这样会出现编码问题。java则代表了我以前的野心，以前我并没有电脑，但不知什么时候，知道了AIDE这个手机上的开发神器，它能用于安卓开发，当时安卓开发主流使用的就是java，我自然也学习了这门语言，当然如今早以不是以前那个人均极客的时代了，很多安卓神器都没人维护了，现在很多开发者也变得懒惰了，大量使用框架，不断扩大软件体积，但很多功能压根就不需要，而我又什么都改变不了。扯远了，我们还是回到正题吧，要了解爬虫爬了什么，我们要先看看这个网站有什么 这是一个轻小说网站，对于小说的每一个章节都有一个页面进行存储 我们的目的很明确，就是将小说的所有章节内容都爬取下来，并保存在一个文件里，我将依照代码，一步步将爬取的过程进行还原 1234567891011121314151617181920212223242526272829import java.io.File;import java.io.FileWriter;import java.io.IOException;import org.jsoup.Jsoup;import org.jsoup.nodes.Document; import org.jsoup.select.Elements;public class Main &#123; public static void main(String[] args) &#123; String url = &quot;http://ncode.syosetu.com/n7975cr/&quot;; String toStr = &quot;/storage/emulated/0/0cache/res.txt&quot;;//存储地址 int number = 600; System.out.println(&quot;开始&quot;); long start = System.currentTimeMillis(); try &#123; File txtFile = new File(toStr); createTxtDoc(txtFile); addContent(url,txtFile,number); &#125; catch (Exception e) &#123; e.printStackTrace(); System.out.println(&quot;完全失败&quot;); &#125; System.out.println(&quot;结束&quot;); long end = System.currentTimeMillis(); System.out.println(&quot;共使用&quot;+(end-start)/1000+&quot;秒&quot;); &#125;&#125; 首先是整体框架，url表示要爬取目标的地址，toStr表示我们存储的位置，number表示爬取的章节数，这里我们使用了一个外部库jsoup，这是一个实现http请求的无非原生依赖的java库，java原生只能实现tcp和udp请求，所以我们引用了一个简单的外部库来减少工作量。createTxtDoc创建好我们的文件，addContent则开始向文件中写爬取内容 12345678910111213141516private static void addContent(String urlT, File txtFile, int numberT) throws IOException, InterruptedException &#123; appendTxt(txtFile, getPageBase(urlT)); String url = urlT + &quot;&#123;number&#125;&quot;; for(int i = 1;i &lt;= numberT;i++) &#123; try&#123; String tmp = url.replace(&quot;&#123;number&#125;&quot;,i+&quot;/&quot;); appendTxt(txtFile, getPageContent(tmp)+NEWLINE); &#125;catch(Exception e)&#123; e.printStackTrace(); System.out.println(&quot;第&quot;+i+&quot;章下载失败&quot;); i--; continue; &#125; &#125; &#125; appendTxt向文件添加内容的封装，是io的基本操作了，实现就不讲了，这里getPageBase和getPageContent是我们的核心方法，前者负责在首页获取小说的基本信息，后者则提取小说的具体内容，在实现后者的时候，有一个ui地址替换的过程，这实际上是偷了一个懒。在对地址研究的时候，我们发现 只要在原有的地址上添上一个数字，就可以得到对应章节的地址，所以我们直接for循环遍历这些url地址即可。但实际操作的话，不应该如此，而应该利用首页中的下面这些地址 不过嘛！少费些精力总规是好的，上面都只是框架，接下来的才是重点，页面的解析部分，首先是首页信息 12345678910111213141516171819202122232425262728private static String getPageBase(String url) throws IOException &#123; String rtn = null; Document doc = Jsoup.connect(url).get();//cookie(&quot;over18&quot;,&quot;yes&quot;).get(); Elements title = doc.select(&quot;.novel_title&quot;); //Elements author = doc.select(&quot;div.novel_writername a&quot;); Elements author = doc.select(&quot;div.novel_writername&quot;); Elements introduce = doc.select(&quot;div#novel_ex&quot;); String strIntro; boolean isNeed = true; String moreIntro = introduce.select(&quot;span.hidden&quot;).text(); if(moreIntro.equals(&quot;&quot;)||moreIntro == null) isNeed = false; introduce.select(&quot;span&quot;).remove(); introduce.select(&quot;a&quot;).remove(); if(isNeed) &#123; strIntro = introduce.text()+moreIntro; &#125; else &#123; strIntro = introduce.text(); &#125; rtn = COMMON.replace(&quot;&#123;book&#125;&quot;,title.text()) .replace(&quot;&#123;author&#125;&quot;,author.text()) .replace(&quot;&#123;introduce&#125;&quot;,strIntro.replaceAll(&quot;&lt;br&gt;&quot;,NEWLINE)) +NEWLINE; System.out.println(rtn); return rtn; &#125; Jsoup.connect(url).get()很好理解，就是根据url地址，获取到相应的html数据，保存到Document对象中，并非直接的String数据，实际上因为网页的格式基本是固定的，所以Jsoup库就顺便实现了更多功能，将html内部的结构也组织起来，从而形成了document，这其实和javascript里的DOM操作是一样的，简单来说就是结构化的数据比流数据更好操作。使用结构化的数据，我们获取相应标签的内容也会简单很多，如果是非结构化数据的话，就可能需要像下面这样的模式匹配的查找算法 这是一个用python爬图片的例子，respone.txt是网页的字符数据，我们则是通过正则表达式提取里面的图片链接。doc对象的select方法是用XPath方式来寻找相应的标签，内容存储为Elements，XPath语法实际和css中标签选取是一样的，目的是定位相应的元素，当然数量不止一个，所以有s结尾。通过网站的源码 我们可以发现class=&quot;novel_title&quot;表示小说名，所以用.novel_title进行匹配，class=&quot;novel_writername&quot;表示作者名，所以用div.novel_writername匹配，值得注意的是，全页面中class等于novel_writername只有这一处，所以前面的div不要也是可以的，可能我以前懂得不多，所以就写成这样了，后面都是同理的，没什么好说的。通过Elements的text()方法即可将里面的内容提取出来，最终保存在rtn里，用于写入文件。仔细一看也没啥嘛！接下来的小说内容就更暴力了 1234567891011121314151617181920212223242526272829private static String getPageContent(String url) throws IOException &#123; String rtn = &quot;&quot;; Document doc = Jsoup.connect(url).cookie(&quot;over18&quot;,&quot;yes&quot;).get(); Elements content = doc.select(&quot;div#novel_honbun p&quot;); Elements title = doc.select(&quot;.novel_subtitle&quot;); String chapter = doc.select(&quot;.chapter_title&quot;).text(); if(!(bigChapter.equals(chapter)||chapter.equals(&quot;&quot;)||chapter==null)) &#123; bigChapter = chapter+&quot;&quot;; rtn = bigChapter+NEWLINE+NEWLINE; &#125; rtn = rtn+title.text()+NEWLINE +content.html().replaceAll(&quot;&lt;/rb&gt;&lt;rp&gt;（&lt;/rp&gt;&lt;rt&gt;&quot;, &quot;(&quot;) .replaceAll(&quot;&lt;/rt&gt;&lt;rp&gt;）&lt;/rp&gt;&lt;/ruby&gt;&quot;, &quot;)&quot;) .replaceAll(&quot;&lt;/rb&gt;&lt;rp&gt;\\\\(&lt;/rp&gt;&lt;rt&gt;&quot;,&quot;(&quot;) .replaceAll(&quot;&lt;/rt&gt;&lt;rp&gt;\\\\)&lt;/rp&gt;&lt;/ruby&gt;&quot;,&quot;)&quot;) .replaceAll(&quot;&lt;ruby&gt;\\n &lt;rb&gt;&quot;,&quot;&quot;) .replaceAll(&quot;&lt;/rb&gt;&lt;rp&gt;《&lt;/rp&gt;&lt;rt&gt;&quot;,&quot;(&quot;) .replaceAll(&quot;&lt;/rt&gt;&lt;rp&gt;》&lt;/rp&gt;&lt;/ruby&gt;&quot;,&quot;)&quot;) .replaceAll(&quot;\\\\&lt;!--(.+)--\\\\&gt;&quot;, &quot;&quot;) .replaceAll(&quot;&amp;nbsp;&quot;, &quot;&quot;) .replaceAll(&quot;&lt;br&gt;&quot;, NEWLINE) + NEWLINE; System.out.println(title.text()); return rtn; &#125; 为什么会有一堆的replace，只能说当时的自己还不够成熟吧，来看看源码怎么样 我们使用匹配式div#novel_honbun p表示id等于novel_honbun的div标签内的所有p标签，但我们注意到p标签内参杂着br标签，这是一个换行标签，如果单纯提取text()的话，会把换行给忽略掉，导致文章一行到底，但如果html()提取内容的话，br标签会以web形态保留下来，所以我们需要将br标签replace成换行。至于有关rb和rt的替换，目前我不知去哪找例子，但以前确实遇到过，这实际是给日语汉字注假名音用的，总之知道有这么一回事就行了。大体内容其实也没什么 程序也确实在稳健地运行着 至于有时候冒出一个失败，也不要紧，懂得都懂，访问外网嘛！难免会有些卡。而且在代码里我们也加了等待再请求的过程，后面也可以看到第四章还是请求成功了。我们也可以看看最后的结果 十分成功地得到了我们想要的内容。 验证问题当然实际搞爬虫的时候并不会如此的一帆风顺，有些东西是比较好解决的，比如就前面的这个例子，注意到有这么一句话Jsoup.connect(url).cookie(&quot;over18&quot;,&quot;yes&quot;).get();，多了一个cookie，实际就是给http请求添加了cookies信息，cookie以键值对的方式存储在本地，但对于普通用户而言操作cookie依赖于官网提供的js脚本，上面这个例子只是相当于添加了参数，我们举一个比较复杂的例子来理解cookie的作用。方便起见，接下来我们全程使用wget，wget是一个下载工具，依照我们之前的分析，下载页面其实已经完成了爬虫的一大半了，而cookie主要影响的也是页面请求的时候。 这是在请求一个下载页面，但是因为没有登入，导致服务器将请求重定向到了登入界面，获取到了错误的结果。这里，我们稍微补充点课外知识，所谓的http请求实际是通过tcp协议向服务器发送一段数据，我们可以通过抓包程序看到这段数据 而我们的这次请求实际有两次重定向(代码302)，一次是http协议定向到https协议，另一次是下载请求重定向到登入界面，总共请求了三次 我们知道tcp协议具有可操作性，我们看到http请求并不单单只是一个url地址，还包含了很多其它信息，服务端实际上可以通过这些信息来灵活地返回不同的信息。不过在通用的互联网http协议中，用户的输入其实只有两个部分，一个是在请求地址的末尾通过?来添加参数，百度搜索就是一个很好的例子 wd表示参数的名称，=后面表示参数的具体内容，在这里wd表示搜索的关键字参数，在这里我们传入http表示搜索http关键词。另一种用户的输入就是cookie了，不过这个东西一般由网站提供的脚本来进行控制，但我们也是有控制的权利的。回到我们之前的例子，我们在这个网站上登入，然后抓包，得到以下数据 在请求头中有Cookie的数据，Cookie也是以k-v键值对的方式存储数据并以分号进行区别，在这个例子中，cookie有globaluid、ASP.NET_SessionId、.ASPXAUTH这三组数据，可以看到服务器使用的是asp，asp是一个动态页面服务，具体内容就不说了，但这也意味着.ASPXAUTH应该是没用的cookie，属于asp自动生成的玩意。关键其实在于前两个cookie，这里可以稍微讲讲网站是如何实现用户登入的，当用户登入以后，服务器会动态生成一个id数据返回给用户，而以后用户就可以凭借此id数据来表明自己的身份，重而再次访问网站的时候就可以不用再登入，当然一般情况下，服务器会维持这张id表，表明什么时候这个id表到期，这也是网站登入一般有个一个月或一周免登入之类的，当然为了保证安全，一般情况下每一批登入生成的id可能会有所不同。总之，我们可以评价此id达到在此站点的免登访问，jsoup可以通过cookie实现添加cookie信息，wget也可以做到，像下面这样 通过--header给wget请求传入cookie参数，参数的具体值则使用我们刚才抓包到的内容，我们可以看到请求确实成功了，其实这个下载的过程也有些可圈可点的东西。在这里请求过程发生了两次重定向，经过仔细的研究，我们发现，这个网站将具体的文件存储到了阿里云的对象存储服务中，其地址是files.haolizi.net，而在中间使用了一个虚拟的文件地址file01.haolizi.net，这实际涉及浏览器跨域访问的问题，虚拟地址与原域名处于同一个地址下，当成功完成一次下载请求的时候，服务器会动态生成一组logid和token来表示你拥有权限来下载此文件，并定位到文件具体存储的位置，这显然是为了防止我们直接从文件地址来爬取相应文件数据的对策。其实还有一种可控输入是POST请求，在浏览器里基本不能构造，而在有些客户端里倒是可能出现，比如这是一个游戏登入过程的抓包数据 当然过程中其实有好几个http请求，这个是游戏更新检查请求。当然只有比较老的游戏，才会像这样直接使用http请求，还不做任何加密，与一般的GET请求其实差别也不大，就是在请求头的基础上多了一个请求数据体，而且可以是数据流的格式，灵活性比上面两者高多了，虽说POST也是http协议的一部分，但大多数网站基本用不到就是了。 动态数据爬虫还可能遇到的一个问题就是动态数据，这是个十分棘手的问题，我们还是来看一些实例吧。首先是页面的异步加载技术AJAX，即在一次请求的时候，数据没有完全的传过来，需要通过阅读更多的方式来进一步获得数据，比如下面这个 异步加载基础技术是依赖于js脚本里的XMLHttpRequest(XHR)对象，其本质相当于进行了一次http请求，并通过js脚本渲染到页面上 也就是说，我们其实可以不通过js脚本，而通过不同的http请求来近似实现阅读更多的点击事件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364import requests as reqfrom lxml import etreeimport timeurl_host = &#x27;https://www.jianshu.com&#x27;headers = &#123; &quot;accept&quot;: &quot;text/html, */*; q=0.01&quot;, &quot;accept-language&quot;: &quot;zh-CN,zh;q=0.9&quot;, &quot;sec-ch-ua&quot;: &quot;\\&quot; Not A;Brand\\&quot;;v=\\&quot;99\\&quot;, \\&quot;Chromium\\&quot;;v=\\&quot;101\\&quot;, \\&quot;Google Chrome\\&quot;;v=\\&quot;101\\&quot;&quot;, &quot;sec-ch-ua-mobile&quot;: &quot;?0&quot;, &quot;sec-ch-ua-platform&quot;: &quot;\\&quot;Linux\\&quot;&quot;, &quot;sec-fetch-dest&quot;: &quot;empty&quot;, &quot;sec-fetch-mode&quot;: &quot;cors&quot;, &quot;sec-fetch-site&quot;: &quot;same-origin&quot;, &quot;x-csrf-token&quot;: &quot;vWM1uxgqllO4bkki7clJLWk4a9AZGcOXskBd+sGDAXllU5+HJtEXdid7LzBTH8oR0RjV8j9ZWArhqmxXrzSo3w==&quot;, &quot;x-infinitescroll&quot;: &quot;true&quot;, &quot;x-requested-with&quot;: &quot;XMLHttpRequest&quot;&#125;def getFromJianshu(page): # 区分第一次进入请求和异步加载请求 if page == 0: url = url_host else: url = url_host + &#x27;/trending_notes&#x27; # 异步加载由js脚本通过POST请求来实现 if page == 0: payload = &#123;&#x27;page&#x27;:0&#125; resp = req.get(url, params=payload, headers = headers) else: payload = &#123;&#x27;page&#x27;:page&#125; resp = req.post(url, data=payload, headers = headers) # 获取文章列表 doc = etree.HTML(resp.text) li_list = doc.xpath(&#x27;//li&#x27;) # 对每个列表进行解析 for item in li_list: note_id = item.xpath(&#x27;//li/@data-note-id&#x27;)[0] seen_list.append(note_id) url = url_host + item.xpath(&#x27;div[@class=&quot;content&quot;]/a[@class=&quot;title&quot;]/@href&#x27;)[0] title = item.xpath(&#x27;div[@class=&quot;content&quot;]/a[@class=&quot;title&quot;]/text()&#x27;)[0] brief = str(item.xpath(&#x27;div[@class=&quot;content&quot;]/p[@class=&quot;abstract&quot;]/text()&#x27;)[0]) user = item.xpath(&#x27;div[@class=&quot;content&quot;]/div[@class=&quot;meta&quot;]/a[@class=&quot;nickname&quot;]/text()&#x27;)[0] user_url = url_host + item.xpath(&#x27;div[@class=&quot;content&quot;]/div[@class=&quot;meta&quot;]/a[@class=&quot;nickname&quot;]/@href&#x27;)[0] span = item.xpath(&#x27;div[@class=&quot;content&quot;]/div[@class=&quot;meta&quot;]/span/text()&#x27;) like = span[0] if len(span) == 2: like = span[1] print(&#x27;标题: &#x27; + title + &#x27;| &#x27; + &#x27;作者: &#x27; + user + &#x27; 主页: &#x27; + user_url) print(&#x27;链接: &#x27; + url) print(&#x27;作者: &#x27; + user + &#x27; 主页: &#x27; + user_url) print(&#x27;点赞: &#x27; + like) print(&#x27;摘要: &#x27; + brief.strip()) print(&#x27;*&#x27;*40) for i in range(15): getFromJianshu(i) # 防止请求过于频繁 time.sleep(3) 值得注意的是，在这个例子中，我们加了一个比较复杂的请求头，因为我们发现如果不对请求头添任何参数的话，会返回403代码表示资源不可访问，可能是服务端根据请求头信息将我们判定为机器人了，所以我们只能修改请求头，使其模拟浏览器尽可能像一些，这个请求头怎么获得呢？通过开发者工具箱即可 代码最终顺利地运行了，可喜可贺 异步加载其实属于动态资源中比较简单的一部分，我们使用模拟POST请求的方式即可解决，比较困难的其实是通过js的DOM API来实现的动态页面加载，由于网上的情况比较复杂，所以我们自己写一个例子来进行讲解会比较方便 同时我们在本地开启一个简易的服务器来模拟网站的情况，先看看一般地获取情况 你可能会说，在代码里不是有p标签吗？首先啊，我们这里只是举例子，实际开发的时候，数据肯定不会这么露骨，其次，那就是机器可没这么智能，我们可以马上模拟给你看 可以看到jsoup只匹配了确实存在的p标签。在这种情况下，我们需要进行浏览器的模拟库，htmlunit是java下的一个无渲染浏览器，实现的话并不复杂，将htmlunit执行js脚本后的页面数据传给jsoup解析即可，直接看代码，至于原理嘛！看到这里应该大概都懂了 总之，我们确实获得到了动态的数据。一般情况下，我们不推荐使用htmlunit来模拟浏览器，它只有java版本，属于静态语言，每次运行都要重新编译，对于模拟浏览器这种交互情景并不合适，现在常用的模拟器是Selenium，这是一个强有力的Web自动化工具，有各种语言的版本，我们首选python版来进行探究，因为python动态语言的特性，使我们可以十分便捷地动态监控数据和调试程序 实际使用的话，就会发现，所谓的Selenium其实就是开发者工具箱的一个脚本版本，而且Selenium在使用的时候需要相应的浏览器内核，不像htmlunit自带解析内核。selenium实际上就相当于你使用脚本来控制浏览器，通过脚本来获取页面信息，通过脚本来控制页面行为，而且还能开一个窗口来看一下当前的渲染效果。对了，如果直接向微博发送http请求，实际得到的是一个脚本 里面主要进行一些判断，并给予你用于访问的一些参数，然后重定向，实现基于js实现的而不是http，所以静态请求页面只能走到这一步，使用selenium进行浏览器模拟来执行js，则可以获得重定向后的内容。其实selenium还可以当浏览器来用，它提供的这个窗口界面有浏览器的大部分功能，当然实现靠得还是我们下载的浏览器驱动。selenium具体咋用也没什么好说的，总之，我们能清楚一点，在爬虫的数据获取上，selenium的熟练使用相当于最高境界了，有了selenium，就算数据动态存储于内存中，我们也可以轻而易举地得到，只要数据在我们手上，不论是静态页面，还是内存中的动态数据，我们总有得到它们的办法。所以，理论上对于爬虫而言，所见即所得，请记住这点。 爬虫框架爬虫框架，其实我并不是很喜欢，也不想说太多，比如比较著名的框架scrapy。它可以干啥呢？创建爬虫的工程、对爬虫进行配置、提供爬虫的流程框架、提供一些基础的请求API等等，总得来说，scrapy相当于为你提供了一整套的爬虫服务，连网页文件下载的API都包含在了里面，如果做爬虫用这种功能丰富的框架确实很方便，也无可厚非。但我的厌恶感，来自于现实应用，我不喜欢功能丰富的框架，现在许多在手机上运行的应用，基本都是用Web框架开发的，原生应用基本已经没几个了，Web开发框架好吗？确实很好，十分容易跨平台，十分容易开发(直接前后端合并)，而且还能以小程序的形态嵌入到各种应用中去。但是这些都是有代价的，比如一个流传的笑话，每个人的手机里有好几个electron，好几个node，这是因为安卓手机应用的安装机制，大多Web框架的库文件，基本都是打包在应用中，不可能进入系统中，所以如果好几个应用都基于这些框架开发，就会让手机重复持有好几个框架。当然这些都不是大问题，问题这些框架开发的应用用起来是真的不舒服，总是莫名其妙地一片空白，不知道是在请求数据，还是卡了，还是运行异常，而且我还发现，明明都是一些很简单的页面，没有很复杂的渲染，在我这个还比较新的手机上，运行竟然还会卡顿，如果用原生环境实现更复杂的渲染效果，在老的手机上运行都还可以十分流畅。Web应用还有一点是不断生孩子的库依赖，为了一个函数，需要引入一个库，一个库还不够，还得把库的依赖一起引进来，如此反复，直到原生的node，C/C++有一个强大的预处理机制，可以依照不同情况来选择性的编译代码，所有即使C/C++开发程序时中间文件内存比较大，但最后的文件反而都比较小，比如我很喜欢的一个游戏引擎cocos2dx，最后编译的库文件就20M左右，这么说来，也不知道为什么cocos2dx本来的原生环境明明挺好的，但现在维护团队也放弃掉了，开始维护基本Web的cocosCreator，想当年cocos2dx也是占据市场的一大主体。感觉说太多都偏离我们的主题了，总之，scrapy功能强大，使用方便，但我真的不太喜欢，傻傻地接受帮助，被别人拿捏。爬虫就到此为止吧。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"金融是资本家的玩具","slug":"金融是资本家的玩具","date":"2022-05-29T06:12:21.000Z","updated":"2022-10-14T23:47:10.864Z","comments":true,"path":"archives/2022-05-29-金融是资本家的玩具/","link":"","permalink":"http://example.com/archives/2022-05-29-%E9%87%91%E8%9E%8D%E6%98%AF%E8%B5%84%E6%9C%AC%E5%AE%B6%E7%9A%84%E7%8E%A9%E5%85%B7/","excerpt":"","text":"看了这个漫画，我终于下定决心撤销所有高风险的金融产品了，可谓是作者的言传身教了 在很久以前，我挺羡慕搞金融的、搞投资的？说实在的我不知该怎么定义这批人，叫成投机者或许比较合适，很多人都把自己的投机行为给误认为了投资行为，学了很多经济知识以后，就会发现，所谓的金融只是一个合法的赌场罢了，而从中赚取交易费的搞金融的是我最不想把钱送过去的人。","categories":[],"tags":[]},{"title":"如何使用陌生工具","slug":"如何使用陌生工具","date":"2022-05-25T04:54:01.000Z","updated":"2022-10-14T23:47:07.738Z","comments":true,"path":"archives/2022-05-25-如何使用陌生工具/","link":"","permalink":"http://example.com/archives/2022-05-25-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%99%8C%E7%94%9F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"连机器都会泛化能力，我们没理由不会。学习的目的是为了学习，通过学习我们应该懂的不是所学的东西，而是知道学习到底是怎么一回事。有时，我不禁思考，学习真的有必要跟着教程一步步来吗？话说回来，教程到底是什么呢？我不明白，比如一个保存文件的操作，还需要教吗？接下来，我将以几个冷门的工具为例，来讲讲我是如何用会它们的。 软件软件本身应该是一个很泛的概念，比如python的代码应该也称为软件，但在有些人的认知里，软件就是软件，代码就是代码，所以我们先从软件开始。当然我们不会选择傻瓜式的软件，而是操作复杂的工程式软件，因为这样才有学习的必要，如果对于就点几个按钮的软件都不会用的话，只能说别学了吧。 kritakrita是一款的绘图软件，不像PS之流有着烂大街的教程。但并不意味着它没有教程，官方文档及官方文档的中文翻译就是最好的教程，有的时候只有一份教程是件好事，至少不会为选择而犯难。我很喜欢一句话，“软件能达到目的就足够了，是否流行并不重要。”学习一个软件前，要明白它能做到什么，官方描述是电子绘画和一点图像处理，也就是说krita的最后目标就是一张图片而已，与PS，SAI之类的如出一辙，那为什么我要选择krita呢？理由其实很单纯，做基本相同的事，却有着更小的内存和更快的运行速度，像PS有上G的内存，但用精简版的功能却基本差不多，简单来说就是有太多不需要的功能出现在了PS内，导致大量内存的浪费，比如PS有个时间轴可以用来做动画，但有必要吗，有些人可能指望着说不定哪天就需要呢！那我们来看看，对于作图，我们需要什么，同时在与PS的对比中，学习Krita的用法，对比学习最基础的方法，学习编程语言的时候也可以应用起来，举一反三是陌生学习的基础能力。 绘图看图是绘图最基础的功能，在绘图之前，我们应当可以全方位的考察图片，而PS并不能选择看图，但像下面这样 并不是旋转看图，而是对图片进行旋转操作，真正的旋转看图是这样的 不添加选择功能也是有一定理由的，当选择后产生斜边以后就需要处理锯齿的问题来防止对观感的影响。而且在PS进行看图的操作也不是很传统，用起来不舒服。在Krita里，按住鼠标中键移动，滚轮缩放，与blender一脉相承，但在PS里，alt+滚轮进行缩放，滚轮上下移动，ctrl+滚轮左右移动，这么神奇的方案不知是怎么想出来的，你说抓手工具？这不谁都有的东西嘛，正是要操作方便才会用快捷键嘛。图层是一种辅助作画的工具，进行作画前，一定要确定你画在哪个图层上，不同图层互不干扰，将一副图拆分为多个部分，还能分配给不同的人来完成，最后组合在一起，进行修正即可。选区是在图层之上的进一步分离工具，目的是实现图层之上的不干扰操作 蒙版也是一个与选区类似的东西，总之此三者的基本目的都一样，分离操作，互不干扰。历史记录基本所有软件都该有的东西，防止误操，不知是不是盗版，还是没有设置的原因，在PS里，ctrl+z似乎会将撤销也视为一步操作，导致在一步撤销里反复横跳，只能通过历史记录框来选择具体回到哪一步。文件相关，除去各自的工程文件，krita支持比PS更多的文件格式，在画布上，PS对透明通道的支持程度不如krita，这也是为什么PS在处理三通道图片时有一个图层始终锁定的原因，而krita里，画布显示通道与图片通道是隔离的。画笔、取色是绘画最重要的两个部分，至于橡皮擦，在某种意义上它也是一种画笔，我们把对图片像素进行某种修改的工具都称为画笔，取色的目的是给画笔提供基础色，我们把调色板也视为取色的一部分。画笔的功能十分复杂，是绘画的主要部分，需要平时不断尝试，看看产生的效果，并应用于以后的绘制中，而一个个去说显然是比较蠢的行为，画笔的本质只需实现三个部分，基础色、像素大小、边缘处理，当然画笔的原生参数还是比较多的 但需要吗？不需要吧，拿几个仿真现实的预设画笔，就够用很久了。 图像处理图像处理与绘画很像，只是前者相当于批量像素处理，后者是少量像素的连续处理。首先像裁剪、抠图、拼接图等不叫做图像处理，这大概是通常所说的p图，一般不需要krita和PS这种大型图像处理，当然它们也是可以完成的。所谓的图像处理应当以OpenCV为标准，与其相比，krita和PS的功能都是不足的，krita所谓的少量图像处理指的是什么呢？比如菜单栏的滤镜就是一个 其实PS好像也提供不出更多功能的样子，如果要实现更多功能的话，其实可以通过脚本(或插件)系统，对于大型的开发型软件基本都有类似的扩展，相当于软件为你提供一些API接口，你在此之上实现更多的功能。至此，对Krita的基本框架，我们认识得差不多了，至于细枝末节，用不到也不用关心，在这个层面上，程序还能提供什么功能呢？基本没了。类比PS的办法，我们基本已经学会了Krita的用法，当然如何用好它那是另一回事了。 inkscapeinkscape是矢量图绘制工具，可以对标Adobe系列的illustrator，你可能会说对标工业标准不太合适吧，确实Adobe让自家的文件标准互通，不像我们开源软件使用的都是公共文件格式，特别在多人合作开发中，标准互通是很重要的，另一方面是Adobe的教程泛滥，便于学习，而我们的inkscape能参考的只有官网了，不过这也方便成为我们陌生学习的实例。初识软件。刚进入软件界面，我们可以得到一个类似krita一般的作图界面 中间有一个黑框，看着十分碍眼，但其实它是没有恶意的，只是告诉你导出文件限制在这里面，因为矢量图的依赖关系可能来自画布外 从作用入手。inkscape是矢量图处理工具，那么了解什么是矢量图是必需的，一般人会认为是一种不会失真，有具体规则的图片，我们从更本质上探索的话，它实际上就是一段代码，以文本格式可以打开svg标准矢量图文件 使用超文本标记语言，可以很方便的移植到Web开发中去。inkscape相当于辅助我们写矢量语言的可视化工具，从这里我们就应该能理解使用时可能出现的限制，比如没有画笔工具，其基本不具有规律性，不过它确实提供了画线的功能，不过实现嘛 就是记录大量的位置信息。绘画的基本单元是图层、选区和像素，矢量图继承图层思想的基础上，基本单位是对象，一个圆或一个线之类的。说好的陌生学习呢？首先，我们陌生学习的对象是工具，而不是矢量图，其次对于工具类的学习，我们要了解其所处理对象的基础知识，要学习一个视频处理软件，如果连视频本身有哪些操作空间都不知道，那又怎么去理解工具所提供的丰富功能呢？对于矢量图，我们还要知道一点，曲线不一定无规则的 贝塞尔曲线就是一个很好的例子。实际上，与其说我们在学习工具，不如说在学习矢量图。矢量图的创建不一定要依赖工具，我们甚至可以直接手写代码，我们使用工具的目的是更快地达成我们的目标，而不是为了完成目标那么简单。熟练掌握。当我们对矢量图了解深刻以后，使用矢量图工具实际水到渠成的事情，各种规则图形工具，相同位置的颜色混合，对象的各种参数调整，等等都是轻而易举的事情。很久以前信息技术老师就说过，软件就是点点，你需要的是软件处理对象的知识。这让我想起了R语言，我们专门拿它来套统计模型，本身R语言的处理十分数学而且自然，用着用着就熟了，难点在哪？在于套模型的时候总会弹出你可能不知道的错误，而不知道的根源在哪？在于你并不理解这个模型，而不是因为你不会用R语言。不同于上一部分的比较学习，这一部分强调的是核心学习，即学习软件所处理的对象的知识。为什么我这么喜欢用这些开源软件呢？别人用各种商业统计软件我用R，别人用adobe全家桶我用krita、inkscape、blender等，别人用知网我用scihub和arxiv，有的时候，我宁可给免费软件打赏，也不想给付费软件续费。其消费心理上来看，给免费软件打赏相当于先使用再付费，不好用的话就没有损失，但付费软件，嗯，还有试用机制呢！但不完整，先付费再使用，谁知道以后会怎么样，而且价格还是死的，不能根据使用舒适度来决定付多少。更何况，我不知在达成目的上，使用免费软件和付费软件的区别在哪里。 开发软件就随便说说，关于开发相关，我们来重点说说。在开发中，陌生工具指的一般是第三方库，分为开源和闭源两种，闭源一般涉及到某种用于商业的代码，比如fbxsdk、cubismsdk等，这种第三方库，一般都有详细的帮助文档支持，甚至还可能有多种语言。我们主要讨论开源版的库，它们一般是处在某个git仓库的代码，有些甚至连官网也要靠gitpage服务，当然如果是一些知名的库，文档和教程都是很丰富的，比如之前用的opengl，库文件的使用本身很简单，稍微有库所对应语言的开发经验的基本都会，如果是C/C++，只要头文件加链接到库即可，库文件使用的难点在于对库的理解上。 opencv我们先拿一个比较入门级的例子opencv，用于图像处理，但它并不是什么软件，而是用C/C++编写的开源库，同时提供了多种语言的接口，cv的本意是计算机视觉，我觉得直接视为图像处理也是没有问题的。opencv的基础使用十分简单，imread得到图片在内存中的形式，然后使用自带的或自己写的函数进行一番处理，最后再imwrite输出图片，整个库的使用流程就结束了。所以经过我们一番总结，opencv学习的核心其实在于各种图形处理的理解，比如滤镜，模糊，色彩空间装换等，而这些往往都是基于数学而产生的，图片在内存中的形式实际是c(通道数)×w(宽度)×h(高度)的矩阵，非标准化的数据范围是0-255，比如模糊的基本方式就是有规律地选一些区块进行算术平均的结果，具体规律和区块大小实际就是opencv所提供接口的参数，这样我们从原理上理解了opencv的一个用法。平常的许多课程都喜欢讲原理，但很多人觉得明明只要知道怎么用就行了，底层原理又不需要我们来实现，但不懂原理的后果就是，用的不三不四的。这还可以用到之前所说的opengl上，你要学的是图形学而不是图形API，否则opengl为什么画个三角形需要这么多步骤是很难理解的事。我听过这样一个论调，有的时候代码比原理好理解多了，有的时候，我学算法的时候确实如此，很多对算法做说明的书总是对一个简单的算法叽叽喳喳的一大堆，生怕你不理解，但步骤却写得模模糊糊，一点数学的严谨性也没有，算法本身应该输入输出和具体操作，一个十分明确的东西，还非得用不清不楚的伪代码和不加解释的符号，一个典型的例子就是我看的那本数值计算的书，有一个符号的说明，竟然放到了定理的证明里面去。对于算法，我确实相信这个，因为编程语言比那些书面语言更加严谨一些，但放到API使用上，我并不是很认同，在API的使用上，我们做的往往是调参，而使用的例子往往是某个具体参数，照着写，随便改改参数确实可以达到成功运行的地步，但你真的理解参数修改前后的区别吗？要理解参数终究还是得学原理。 libpnglibpng一个底层的png解码库，基本功能是读取png文件到内存中去，稍微写一下就像这样 成功读取到了图片的信息，其中row_pointers存储具体的像素信息，其功能相当于opencv的imread，但opencv可以支持更多的图片格式。对于一般的开发者，多多少少听过这个库，但基本都没有用过，因为根本没有必要，其功能往往都封装在能处理更多图像功能的库里，使用的也是这个库所提供的接口。比如当时做opengl使用的图像解码库是std_image.h，而且就一个头文件就可以解析多种图片格式，反之我们需要libpng、libjpeg等多个库来解析各种图片，但很多工具都喜欢使用libpng作为png解码库，比如cocos2d，理由其实是高效，在图片吞吐量的的游戏运行中，以尽可能少的时间将图片加载到内存中是刚需。对了，我们不是要探索如何使用陌生的库吗？换个思考角度，这个库本身的内容不是很多，但作为开源库改造的空间很大，想要开放更多的接口也不是问题，单纯就是调一下库，存储在固定的结构体内，属于库引用的基操了。libpng需要学吗？需要理解png图片压缩的基本原理吗？解读png文件的编码是必需的吗？这可能与我们之前所说的情况有所不同了，不同的关键在于控制上，opencv的api用于图像处理，拥有众多可控制参数来达到不同的效果，但libpng用于读取特别的图片，图片格式有统一标准，长宽加通道即组成图片，有什么可控的东西吗？没有，这其实跟使用一些源码隐藏的库是类似的，有些文件格式编码是不可知的，我们顶多通过官方API库读取到特定的结构体或类上。这时我们的精力应该放到结构体或类上面去，但表征图片的内存结构十分单一，和opencv一模一样，就是一个3维度的矩阵罢了。总结一下，这种库用就完事了。 manimmanim是一个制作数学动画的python库，其安装和制作过程，在早期是十分繁琐的。为什么呢？因为底层依赖过多，比如视频编码靠ffmpeg，数学公式渲染靠latex，全都是高效C/C++库，manim在此基础上利用python的便捷性实现了数学动画上的封装。现在manim的社区版，可以直接用pip进行安装，在linux是比较方便的，因为很多库可以使用linux的包管理工具安装，比如ubuntu的apt。如果想用原始的3b1b的manim的话，可以用pip安装manimgl，在官方页也是这么说的 简单说就是，要用manim，直接用社区版就够了，这里提供manimgl使用，manimgl是manim制作动画的交互环境，也可以直接渲染manim代码，算是一种扩展插件，并不是学习的重点。manim虽然以前很小众，但如今社区壮大也有了自己的文档，而3b1b也制作了自己的文档，还提供了中文翻译，两者使用的区别并不大 只不过一个导入manimlib，另一个导入manim，而3b1b版本还具有更丰富的配置文件，具有manimgl提供交互效果，如果从制作数学动画的角度，使用3b1b版其实更好，社区版比较适合于开发。而且manim比较活跃的一个中文社团manim kindergarten使用的也是3b1b版，文档的中文翻译也是这个社团提供的。至于社区版，看官方的一些例子就可以知道 它们想把它作为一个动画引擎库来用，而非数学专门型的库。差点忘了我们的主题了，我们的目的是用好manim，学会manim，但学会的意思是什么呢？把官方的例子复制一下，随便改一点东西，运行一下，成功了，耶，我学会manim的使用了。虽说可能有些草率，但事实可是这样的，manim实际属于前面所说的两种情况的结合体，对于一些简单的动画，比如像矢量图那样的动画，随便调一调软件库就足够了，但要使用manim制作复杂的动画，就需要去理解manim动画的一些原理了，可以通过读源码，也可以看mk社区里的相关解读。注意我们不是要去理解数学原理，我们的目的是做动画，而不是完成数学的内容，当然两者通常都是一体的，不过从工具利用的角度，我们要考察动画上的原理，不过很多动画的原理也依靠一些数学，比如补间动画，需要了解一些数学插值的原理。如今社会的开源精神是很普遍的，很多精美的manim动画都是开源的，通过对实例的考察和模仿，可以一定程度上加快我们的学习进程和理解能力，至于系统的学习，我一直都觉得没有必要，在实践中不断学习才是比较实在的东西，先拿到框架，看看我们需要完成什么，从文档中查到做法，进行模仿，如此反复就达到了我们的目的，在实践之中，不知不觉是可以学到很多的。不想再说什么了，就此告别吧。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"应用","slug":"应用","permalink":"http://example.com/tags/%E5%BA%94%E7%94%A8/"}]},{"title":"加密货币","slug":"加密货币","date":"2022-05-23T02:24:44.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2022-05-23-加密货币/","link":"","permalink":"http://example.com/archives/2022-05-23-%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81/","excerpt":"","text":"加密货币，比如比特币，一经了解确实挺强大安全的，不同与微信的虚拟货币和央行的电子货币，但维持系统运转的成本还是太高了。为啥我要去了解这玩意？原来又是课程论文，论文本应言简意赅，但不知为何非得有个几千的字数要求。每当想到这里我不禁想问，知识到底因何而可贵呢？","categories":[],"tags":[]},{"title":"数学探索之数其四","slug":"数学探索之数其四","date":"2022-05-20T05:04:50.000Z","updated":"2022-10-14T23:47:08.068Z","comments":true,"path":"archives/2022-05-20-数学探索之数其四/","link":"","permalink":"http://example.com/archives/2022-05-20-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%95%B0%E5%85%B6%E5%9B%9B/","excerpt":"","text":"如果实数如之前所说，是一种定义性的存在的话，那么改变定义是否就意味着一种新的可能呢？确实如此，让我们来看看这些新奇的玩意吧。 可和性无穷级数的可和性，或称收敛性，是分析中常见的东西，这里我们不说过多的东西，单纯介绍几种可和性，扩宽眼界。首先把传统的收敛拿出来遛遛。传统收敛：对无穷级数，其部分和为，若存在，则称此无穷级数收敛，其收敛值为极限的值。■它的定义和性质都是在熟悉不过了的内容，接下来进入我们的正题吧Poisson可和性：对无穷级数，若极限式存在(注：此处级数为传统和式)，就称此无穷级数Poisson可和。■这是传统无穷级数的无矛盾拓展，由Abel求和法而来，可以兼容传统收敛性，或者说兼容传统级数是可和性拓展的必要条件，否则矛盾的理论的意义并不是很大，由这种定义我们有许多有趣的结论 与此同时，这种可和性也可以解决傅里叶级数边缘收敛出现的问题，也正是我们平常所看到的那样。Frobenius可和性：对无穷级数，定义 其中，若右边极限存在，则称此级数Frobenius可和。■这种可和性来自于解析延拓，比如传统定义的黎曼函数，其收敛域是Re(z)&gt;1。对于2n&lt;0，通过此种可和性可以得到，解析延拓后得到的结果也是同样的。在这种可和性的基础上，还能进行拓展，定义 定义Holder可和性为，存在某个k使得以下极限式存在 这是Frobenius可和的拓展，k=1时Holder可和就变为Frobenius可和，所以Frobenius可和一定Holder可和，Holder可和有更多的内容。Borel可和性：对无穷级数，定义函数 如果对于下式 中间的积分有意义，且收敛到f(x)，则称级数Borel可和，其收敛到函数f(x)。■这是一个对幂级数收敛的拓展，来源于Stieltjes应用连分式对发散无穷级数的研究，比较复杂，不想说太多，知道有这么一回事就行了，基本没怎么用过。 超复数很多人或许听过四元数、八元数之类的，并认为其是复数的拓展，我们暂时称其为超复数，这或许是没错的，但并不严谨，比如你知道在复数上可以和实数一样建立分析学，但并不知道在超复数上能否建立分析学。 简介超复数的本质是代数的，分析的成分本质是实数的，在传统意义下，为了兼容复数的运算，我们能从代数上定义出四元数h=a+bi+cj+dk，a,b,c,d∈R且有运算性质 和 类似的，我们还可以得到八元数o=x₀+x₁i+x₂j+x₃k+x₄l+x₅il+x₆jl+x₇kl，x₋都是实数，il,jl,kl都是与i,j,k,l无符号关系的记号(当然也可以用其它的，只要能区分就好了)，其运算性质可由Fano(法诺)平面来记忆 进一步我们还能得到十六元数e，其项太多，而且基本没有性质，就不列出来了，我们没有继续构造下去了，其原因就是性质，从复数到四元数失去了交换性，从四元数到八元数失去了结合性，从八元数到十六元数失去了交错性，你可能没有听过交错性，确实如此，因为它实在太弱了，我们后面会介绍，到十六元数以后基本都没有性质了，所以研究的价值并不高，我们将四元数全体记为H，八元数全体为O，十六元数为E。对于超复数，你可能觉得好像可以直接看成向量，看成线性空间，本质上确实如此，只不过还应该多加一些东西。其中的“基”你可能觉得比较神秘，并不像复数一样可以简单的把i看为，因为它们其实已经超出了一般数的范畴，拿四元数为例，它是有矩阵表示的，我们先定义Pauli矩阵为 ， ， ， 其可以张成R上的一个4维线性空间，四元数也是R上的一个4维线性空间，所以两者是同构的，其对应关系为 ,,, 所以2×2特殊酉矩阵群SU(2)和四元数群H确实是同构的。但八元数并不结合，所以也不是群，自然也不能和矩阵群GL(n)的某个子群同构，所以从纯代数上考虑是必要的，为什么不考虑分析呢？因为分析的本质是实数的，当剔除实数以后，复数域C开始，本质都是代数的，所以要严谨地定义超复数必需从代数结构上考虑。 代数设A是域F上的线性空间，在A中的双线性乘法是指A×A到A的映射(a,b)→ab，满足∀a,b,c∈A,k∈F有(1)a(b+c)=ab+ac(2)(a+b)c=ab+bc(3)(ka)b=a(kb)=k(ab)■定义：定义了上述双线性乘法m:A×A→A的线性空间A称为域F上的代数，记为(A, m)。■代数实际上就是一个2对1的映射，两个输入，一个输出，计算机中就是这样定义四则运算的，而且代数本质是一个线性空间，依赖于一个基域，所以在超复数中见到实数见怪不怪了。定义：称域F上的两个代数(A,m),(B,n)是同构的，如果存在可逆映射f:A→B，使得∀x,y∈A均有f(m(x,y))=n(f(x),f(y))。■以下把代数可能出现的性质进行列举交错性：∀x,y∈A，(xx)y=x(xy)和(xy)y=x(yy)结合性：∀x,y,z∈A，(xy)z=x(yz)交换性：∀x,y∈A，xy=yx以下是几种代数的叫法零代数：∀a,b∈A，ab=0可除代数：非零代数，且∀a,b∈A，ab=0⇒a=0或b=0交错代数：满足交错性结合代数：满足结合性交换代数：满足结合性和交换性注意结合性蕴涵交错性，即结合代数一定是交错代数。再引入类似于复数共轭的概念定义：设A是实数域R上的一个代数，如果存在名为共轭的线性映射-:A→A使得，∀a,b∈A均有 则称A为一个共轭代数，称一个共轭代数是实的，如果∀a∈A都有■Cayley-Dickson扩张：设A是一个共轭代数，所谓的Cayley-Dickson扩张是指由A生成一个新的代数A’：A×A，∀a,b,c,d∈A和λ∈R，定义加法:(a,b)+(c,d)=(a+c,b+d)，标量乘法:λ(a,b)=(λa,λb)，乘法:(a,b)(c,d)=(ac-d,d+cb),共轭:=(,-b)。■于是我们有，R’=C,C’=H,H’=O,O’=E,…，在从实数到复数，定义复数(0,1)=i即可，其它的以性质类推，这是一个无限的过程，但后面的代数没什么意思，所以一般只考虑到八元数O，我们给出为什么只考虑到八元数的原因的系列定理定理(Zorn)：交错的实可除代数一定同构于R,C,H,O中的一个。定理(Frobenius)：结合的实可除代数一定同构于R,C,H中的一个。定理(Hurwitz)：赋范实可除代数一定同构于R,C,H,O中的一个。十六元数不是可除代数，所以压根没有考虑的必要，还有这里所赋予的范数就是复数模的抽象。对于超复数并不会产生什么有趣的东西，实际上以上面代数定义为基础，可以衍生出许多其它的非结合代数。设g是域F上的一个代数，记其乘法为[a,b]，a,b∈g，满足(1)∀a∈g，[a,a]=0；(2)∀a,b,c∈g，[a,[b,c]]+[b,[c,a]]+[c,[a,b]]=0，则称g为F上的一个Lie代数。这些代数的意义不在于数本身，而在于某些特殊的运算上，一般叫什么都不是很重要，知道其性质就足够了，而抽象结构的研究主要还是为了理清其中的逻辑关系。 p进数接下来我们要进入一个与无理数平行的世界p进数(p-adic)域，它与实数一样是有理数的扩张，但它们的非有理部分并不相交。 Hilbert符号我们先来看看p进数是怎么来的，对于素数p，定义有理数域Q的子环 ，不被除尽 定义的可逆元全体为=，不被除尽，它是一个域，由此所有的有理数都可以唯一表示为的形式(最约分式的p幂，在分子时m取负数，在分母取正数，没有取零)，有m和u两个参数。对于素数p和非零有理数a,b，由上述可记 令 我们定义同态为 对于整数a和p，“a mod p”表示a除以p的余数，注意这并不是同构，因为是商环，元素个数是有限的。我们将在中的像记为“r mod pⁿ”(注意与上面整数的情况进行区分)，于是可以定义希尔伯特符号了 且不全为负数且均为负数 注意到第一个式子的右边是Legendre符号，稍微介绍一下吧，设a不整除p，如果x²≡a(mod p)有解，则称a是p的二次剩余，由此定义勒让德符号 是的二次剩余不是的二次剩余 其是一个乘性函数，再通过二次互反律和一些特殊值就可以计算所有值了，这属于数论，所以我们主要来说Hilbert符号的公式 若且， 则 为奇素数，，则 若，则 其它 或其它 通过上面性质，我们就可以计算所有的Hilbert符号的值了，最后引入此符号的作用定理定理：设a,b是非零有理数，则除去有限个素数p外，且有为素数或。■定理：设a,b是非零有理数，则ax²+by²=1存在有理解的充要条件是对所有p(素数或∞)均有。■ 定义p进数的定义法有许多种，我们先从希尔伯特符号开始，由类似于上面的定理，我们实际可以得到实数的情况 有实数解 当然这个十分简单，排除非实复数即可直接解出来答案，或许我们有这样一个想法 有进数解 看到这你可能十分的疑惑，那是因为我们还没定义p进数及其运算性质，我们先放着，看看所谓的“实数与p进数的平行”。由上述我们可知，有有理数解意味着有实数解、2进数解、3进数解、5进数解…，所以有理数是实数与p进数的公共部分，而有实数解不一定有p进数解，但也可以有p进数解，两者并不矛盾，因为两者可以不同时出现，所以实数虽然与p进数有相交部分，但并不完全有包含关系，属于平行关系。接下来严格地定义p进数吧，和实数一样，我们从有理数域Q出发。设p为素数，对于有理数a≠0，有分解的，定义a的p进赋值为和。其一些性质可以简单地验证，我们直接进入下一阶段。对于有理数列{xₙ}，称其p进收敛于有理数a是指当n→∞时，→∞这里的符号，可以像在实数那里一样写成ε-δ语言，只是将绝对值替换为了p进赋值。比如说若，则按p进收敛于。为了更进一步，我们引入a的p进绝对值为，接下来就是p进收敛的完备性，对于有理数列{xₙ}，如果对任意的有理数ε&gt;0，存在自然数N，使得当m,n≥N时，均有 则称其为p进Cauchy列。剩下的没什么好说了，与实数是一样的，先定义序列的等价，然后将等价类定义为相应的p进数，再通过极限性质来证明基本运算法则，我们就得到了p进数域，并可以证明p进数域是完备的。在p进数中，级数和的性质比实数更加简单定理：若，则级数在p进数域中p进收敛的充要条件是。 构造上述的定义的直观性太差，一时难以理解，其实实数也是一样的，明明那么模糊，却能如此简单地被接受，那是因为我们可以找到一些实数的具体表现，如无限不循环小数、根式等，所以我们也试图找一些p进数的表现，并加入运算法则。对于每个素数p，我们定义p进数域具体为以下形式 其中是模p的数域，在之前篇章中介绍过(实际只是为了得到p个符号，具体是什么并不重要)，其中的级数展开，我们称为p进数的p进展开。乍看之下，你会觉得这是p进制，但仔细一看会发现无限的方向是反过来的，显然对于有限的情况，其就是有理数的p进制展开，而对于无限循环的情况就有些麻烦，但依旧表示有理数，后面我们举例子说明，而无限不循环情况就是我们的非有理p进数了。然后四则运算就可以很容易地定义出来了，按照p进制的运算法则即可，而且这还与实数不同，可以正向的进行下去，不像实数那样还会让人纠结0.999…是否等于1这样奇怪的问题。我们不打算更加深入，我们的目的只是介绍，并且说明有理数扩张的本质复杂性，以及在考察非有理数表现时可能出现的问题。拿上面的例子0.999…举例，首先确定它的定义并不属于有理数范畴(准确来说就是“小数是什么”并没有严格定义，更别说无限小数了)，其定义属于实数，必需以分析来进行定义，即0.999…实际是有理数序列aₙ=个的表现，我们可以知道这个有理序列的等价类是1，所以并不是0.999…=1，而是从实数的定义上0.999…就是1。而p进数就比较神奇了，比如非有理5进数应该类似于…14243.2这样的形式，我们拿一个有理数进行一下p进展开 我们加一个下标来区分一般的十进制小数，实际上我们还有 所以同一个有理数的不同p进展开，还是有差别的，但有理与无理的划分仍然是绝对的。 非标准分析非标准分析与传统的分析相比，其实并不会有更多的内容，实际用起来的话，和牛顿那个时代差不多，就是有一种量很小却不等于零。非标准分析更重要的部分是从数理逻辑上证明其严格性，比如这样子 里面的话都比较抽象，我来稍微说一下。一阶语言即我们平常所用的到逻辑语言，这此基础上添加相关公理，即可得到不同的一阶理论，比如添加皮亚诺公理形成一阶算术，而一阶实数传统认为要求完备有序域，“域”就是抽象代数里的那套公理，“有序”即表示顺序那套公理，而“完备”则要靠引入分析的语言来实现，其意思就是所有的柯西列都是收敛的。如果去出完备公理，有理数和实数都满足剩下的公理，即都是有序域公理的模型。也就是说，我们是为了引入实数而需要分析，而不是在实数之上建立分析，这种思考所带来的就是那套ε-δ语言。非标准分析的思想是将去除完备公理的实数理论扩大，即扩大有序域公理，注意这里公理是逻辑系统上的形式公理，而添加的公理是这个，这个意思就是在符号集中添加一个比任何常数都大的数，即无穷大，然后在数理逻辑中可以证明其有一个由实数R扩充而成的模型，通常记为。要从数理逻辑上来理解，对于数学基础差的人来说十分困难，如果从应用角度，这些底层细节并不重要，重要的是其具体表现怎么样，有有怎样的性质，如果这样想，问题就会简单很多。总之，非标准分析其实就是无穷量运算的严格化，我们来稍微说说吧。对于实数集R，我们先认为其没有完备公理，只是单纯的一个有序域，为了区分我们将其记为，由于公理减少，所以它可以比R有“更多元素”，由于它们存在于公理之上，属于模型，我们不能直接假设包含关系，而应该寻找对应关系，来使得新的体系兼容旧的实数体系。在中没有阿基米德性，即存在一个数可以大于任何数，就是我们刚刚看到的那条公理，注意了这都是逻辑上的，没把它和实际搞混了，于是我们可以定义有限和无限的概念。定义的有限集为 对某个 这里我们用了自然数，因为自然数是可以定义出来的，首先对于域，其存在0和1，运用加法，可以生成所有自然数，因为本身是有序域，自然数属于内部元素，所以自然可以比较，绝对值可以直接以0为划分，按传统定义即可。我们将F的元素称为有限的，-F的元素称为无限的。在此基础上我们再定义一个子集 或 1/x表示乘法逆元，我们将I中的元素称为无穷小。这此基础上，我们进一步定义接近的概念，如果x,y∈且x-y∈I，则记x≈y，称为x(无限)接近y。可以证明F是的子环，I是F的一个理想，而且≈是上的一个等价关系。所以我们可以建立F到F/I的自然同态，我们把x∈F对应的像记为，F/I是一个域，而且还能证明同态映射可以保持序关系，即F/I是一个有序域，而且F/I还有阿基米德性。我们说F/I这么多为了什么呢？其实是为了保证F中的分析与无穷小的运算是兼容的。如果不等于I(可以看成F/I的一个元素)，则称x为标准数。可以证明对任何有限数x∈F，存在唯一的标准数s和无穷小i∈I，使得，s称为x的标准部分，记st(x)=s，这是F到F的一个映射。可以验证st保持加法和乘法，进一步可以得到st(x)=0当且仅当x为无穷小，由此推出st(x)≈st(y)当且仅当x≈y。有了这些准备，我们来在此之上建立分析学，并将F/I与实数对应起来。设F是到的映射，称F在a点收敛于b，当且仅当，对所有的x≈a都有st(F(x))≈b，记为。我们不通过比较语言来定义，而通过无穷小的运算来定义收敛，而且是针对映射而言，当然称为函数也可以的，定义函数极限后，就能定义分析学了。这时你可能会纠结序列极限呢？这里我们再理一般之前所说的内容，传统的分析需要通过序列极限严格引出实数，在在此基础定义函数极限从而引出分析学。之所以需要序列极限是为了传统极限所需的完备性，没有完备性，定义函数极限是不严谨的。而非标准分析的目的就是绕开完备公理来建立分析学，从而使得无限变成一个实在的量。举个简单的计算例子，求f(x)=x²的导数，设h为无穷小则 注意最后变成了≈，那是因为极限的结果就是无限接近。由之前可知，无限接近的x和y在F/I的像是唯一的，如果我们将有限数F中所有无限接近的数看成一个等价类，那么它可以与F/I一一对应。F/I是一个有序域，不妨将里面的加法单位元记为0，乘法单位元记为1，很容易的我们可以构造出有理数来，由于F/I有阿基米德性，所以系统不同，它没有无限元，所以可以在这里构造出完备公理，换句话说F/I与实数R可以同构，所以实数R可以与有限数集F建立同态映射，由此可知确实相当于R添加无限数后的结果。注意这里完备公理的建立并非必要，只是为了说明R与F可以建立同态关系，也为了表明这样在建立的分析可以兼容传统在R上的分析。至此非标准分析就告一段落了，但值得注意我们这里有许多不严谨的地方，我们的目的只是为了介绍，而不是严格地证明，而且非标准分析说到底只是一种看待分析的思想，在我看来能理解就好，重要性嘛，感觉不是很大。就说这么多吧，有关数的旅途就到这里了。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"存在","slug":"存在","permalink":"http://example.com/tags/%E5%AD%98%E5%9C%A8/"}]},{"title":"童年图书系列","slug":"童年图书系列","date":"2022-05-17T12:42:25.000Z","updated":"2022-10-14T23:47:08.239Z","comments":true,"path":"archives/2022-05-17-童年图书系列/","link":"","permalink":"http://example.com/archives/2022-05-17-%E7%AB%A5%E5%B9%B4%E5%9B%BE%E4%B9%A6%E7%B3%BB%E5%88%97/","excerpt":"","text":"《查理九世》——再也回不去的童年系列，今天看书的时候想起了你，可没想到竟然绝版了，我好像才看到23册，想当初，几块钱都如此得珍贵，都是好几个同学买不同的分册，交换着看来着，我手上还有几本呢！嗯，话说回来，中间这些年，我都在干什么呢？BV1Uo4y117dh","categories":[],"tags":[]},{"title":"入梦之时","slug":"入梦之时","date":"2022-05-15T07:17:56.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2022-05-15-入梦之时/","link":"","permalink":"http://example.com/archives/2022-05-15-%E5%85%A5%E6%A2%A6%E4%B9%8B%E6%97%B6/","excerpt":"","text":"眼睛耷拉，透露着莫名地酸痛感，在如今的社会下，睡眠质量难以保证。我早睡，我早起，但临近午间之时，疲惫的感觉不断袭来。那些充分利用晚上时间的人啊！我想询问你们，你的时间是真的变多了吗？眼前除了黑色就是白色，文字在不经意之间变得无趣了许多，你知道在什么时候读书籍最为难受吗？就是在记忆力低下的时候，读书最忌讳的就是忘记前后之间的联系，当然知识灌输或许是个好办法，但我十分的讨厌。或许这些都不可怕，可怕的是时刻散发出来的厌烦感。意志再过顽强也抵不住肉体上的疲倦，在虚晃之间，一天就不知不觉的过去了，没有时间的感觉，找不到自己身处时间轴的何处。恍恍惚惚，昏昏沉沉，这么冷的天气，也有燥热的人去开启空调，披着外套感觉丝毫抵挡不住飘来的寒气，何必开这么低呢？知道外面多少度吗？19度啊，不冷不热，但风很大啊！真是的，在这种奇奇怪怪的环境下总是会生成一些乱七八糟的感觉。我到底是什么鬼玩意啊？总感觉自己的记忆十分的虚假，我怎么不知不觉就来到了大学。话说回来，生活的趣味在哪里呢？你的记忆如此的虚伪，除了学习就是学习，你确定你活在这个世上，你会不会只是一个在机械执行命令的程序呢？想啊想啊，想让我挺，连我都无动于衷，你又怎会有解决方案呢？人总会有这么一段时间，什么也不想干，就在这里胡思乱想，胡思乱想，什么也想不出来，不知自己做了什么，也不明白自己这样做的意义所在。桌子上还留着树木的年轮，一圈又一圈，但我感觉到它在流动，在扩散，这预示着树在成长，但我感到的是它在排斥我，想把我赶走，将我冲到边缘。嗯，它想冲淡的是我的记忆，记忆是个很奇妙的东西，你想不起一样东西的图像，但看到这个东西却能想起是它，想不起人的样貌，却能在看到相片想起是谁。闭眼的时候，真的会有图像吗？没有吧，绝对没有吧，有的只是轮廓。正因如此，我感到十分的害怕，这跟当今的AI技术的神经网络的区别在哪？神经元的个数和网络结构吧。参数加解释程序构成一个AI模型，AI和人的区别还是显而易见的，硅基生物和碳基生物，怎么看都不是一个东西。数学家最爱干的就是抽取无用的信息，看抽象的本质，在这种情况下，真的很难感受到两者的区别。危言耸听，杞人忧天，很久以前就有人讨论过这些事情，轮不到我来操心，我也从来不是操心，只是想一想，至少我是有想的权利的。人比较奇特的地方就是想，并不是想如何解决问题，如何完成某个任务，在这些方面，机器做的似乎更好，我的想是胡思乱想，以及胡思乱想中的自我成长。在我们的眼里，想是个有序的过程，但外部看来或许不是这样，但我们有可以进行有序传递的载体，那就是文字，通过语言来想，这才是我们的想。最令人费解的就是，人和人之间为什么可以交流，因为人与人之间的交流是十分不合理的现象。或许是因为与父母的相遇吧！没有与父母相遇的这份缘分，有怎能掌握交流的语言呢？有些想法实在太难具像化了，AI有一个很大的问题就是，神经结构不能自发的更改，但人不一样，人的神经网络会随着成长而变得更加复杂，在生物学上普遍认为，记忆其实是突触的建立，不经常使用的突触会被淘汰，也就是所谓的忘记。世界上的能量是分品质的，越低品质的能量其熵越大，能量的品质只能下降，人不能不吃不喝，机器不能不供电，基本所有稳定的系统都需要填充更高品质的能量，与其思考抽象的数学难题，遥遥无期的算法问题，不如想想如何解决能量问题，如何维持自己的长久发展，没错，有的时候，我想让自己长生，并且摆脱能量的限制，即不需要食物。这种痴心妄想，可能是小说读太多了，小说中总能发生一些现实之中不可能出现的东西，我喜欢的小说是AR(现实增强)型小说，而不是VR(虚拟现实)型小说，两种的区别在于其对现实法则改变的程度，完全现实的小说，那不叫小说，小说正是有些不一样才显得有趣，我们读小说，又不是为了阅读理解，只是为了消遣，那么简单。想想吧，对于大部分的人而言，除了刷手机是不是就没有消遣方式了，就算到了外面也一样离不开手机，也就只有像我父母那老一辈的人才能不那么依赖手机，当然别说学习是消遣。以自己的观点去看别人或者有些狭隘。比如有些人可以通过聊天度过一整天，走路聊、吃饭聊、连上课也可以聊。聊天是个很奇妙的东西，以前我也很喜欢，现在已经找不到可以谈天说地之人了，准确了说，我的内心认为其不具有与我聊天的资格，或许是高傲了点，但内心是种无法控制定位东西，就算有力也无心。谁会每天浪费时间去聊就业形式的严峻而不去将时间拿来增加自己的竞争实力而徒增自己的焦虑感，本身就不是一路人，没必要去趋炎附势。虽说社交是人的重要需求之一，但我一直在寻找一个人度日的办法，在寻找之会发现，离开社会生存基本不可能了。我对社会的唯一留恋是知识和文娱产品，后者其实并不是很重要，收藏一堆感觉也没什么时间去看，对我而言发呆其实比它们更令人放松，而且让我觉得有趣的作品也不多，很多都是看一些就不想看了。我一致都想着能不能找一块孤岛度过一生，但是却一直没有去尝试的勇气，我外婆家的农村环境都受不了，更别说野外了，而且遇上疾病就更加难受了。如果想要活着现在的社会，工作是必要的，但一直都过得比较清贫，这并不是自吹，或许是自身的懒惰因子作祟，我一点也不想去买三餐以外的食物，除了一些基本日常用品，基本没有额外的开支。买房？买车？别说这些玩意，我其实挺喜欢租个小房间，整理的干干净净，通过各种可能的食堂吃饭，通过交通工具进行移动，我不喜欢油烟的味道，吃饭靠公共食堂就行了，对我而言有个像宿舍一样的小窝就够满足了。或许有人会嘲笑我说，人的欲望是无限的，以后肯定会被迫背上房贷和车贷，有或者受到某场意外的冲击被迫负债。哎，或许你是对的，但未来什么也说不准，我对自己也感到奇怪，好像对知识的渴求已经占满了我的欲望，而且知识对于贪婪的我而言还是一个无底洞，这样真的会有尽头吗？知识付费吗？平常查文献谁会去那个知识付费的地方，除非学校要求，话说回来用校园网登陆的话好像可以免费查阅，但是啊，我想要的知识难道是那些吗？我一直在想国家不管，不会因为他没啥重要价值吧，不是我看不起文论，而是我不喜欢模糊的东西，这样看起来喜欢确定的我有些呆板？鄙视链是一种不知觉的东西，我觉得有也罢，无也罢，自己喜欢就行了。我对自己的未来漠不关心不是没理由的，因为就算像我父母那样的工作，其实我也不是很在意，我想学习并在学术上有所成就是很久以前的想法了，学得越多就会发现自己越是无能，除了空洞的想法，什么也实现不了，我已经放弃干出一番大事的想法很久了，除了学一学，了解一下先进思想，也就这样了，所以我放不下的是知识，而不是让世人知道我做了什么，在我的认知里，除非在数学上做了什么，不然连我自己都不会承认，这就是一种根深蒂固的执着。以这种平凡的想法继续思考下去，平凡度日不也是一回事吗？所以我才说与父母一样的工作也是无所谓的。我不考虑我的未来，并非对社会现状的无知，而是自身的所求也就那样了，至于以后会不会变，那也是以后的事了，脸皮厚一点，也没什么好怕的。天黑了，人生到底有不有趣，我自己也无法把握，我只是一直都做着自己想做的事而已，就是这么简单，生活到底能带来什么压力，我完全感受不到。好困，天黑了，该睡觉了。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"写实","slug":"写实","permalink":"http://example.com/tags/%E5%86%99%E5%AE%9E/"}]},{"title":"黑客，可怕吗","slug":"黑客，可怕吗","date":"2022-05-10T03:14:14.000Z","updated":"2022-10-14T23:47:11.669Z","comments":true,"path":"archives/2022-05-10-黑客，可怕吗/","link":"","permalink":"http://example.com/archives/2022-05-10-%E9%BB%91%E5%AE%A2%EF%BC%8C%E5%8F%AF%E6%80%95%E5%90%97/","excerpt":"","text":"为了玩玩服务器，前几天，我以学生价花几十块钱，租了一个轻量级云服务器一个月，是一个ubuntu系统的docker镜像，所以性能并不高，本地跑不动的代码，放上去也一样跑不动，不过它给了个公网ip(一般除了服务器云产品都不会有公网ip，准确来说是没必要)，所以有一定的价值，玩玩远程操控，做个云存储还是可以的，它有50G的内存，因为就一个月，我肯定不会把它当云盘，说到底，就是玩玩。我想说的是这样一件事，才没几天，就有这样的消息 在正式内容开始前，稍微讲讲黑客那些事。本人不是什么职业黑客，只是闲着无聊的时候喜欢逛逛像看雪之类的安全论坛，也算是道听途说而知道了一些东西，稍有不严谨也是在所难免的。 攻击对象硬件层在研究黑客行为前，我们必需有一个假设，就是硬件层的绝对安全。在OSI网络模型中，硬件层指的是物理层，数据链路层和网络层，IP协议是硬件层的顶端协议，如果使用简化后的TCP/IP模型的话，指的就是IP层和网络接口层。换成一般人能听懂的话就是，要保证给你提供网络宽带的运营商不是黑客的帮凶，因为现在网络使用的是光纤，除了宽带运营商提供的像路由器之类的网关，基本不可能进行流量劫持，嗯，除了Wifi。至于数据解密，说实在的，只要有心去做都是有可能的，除非哪天真能实现量子通信。总之，我们认为黑客最多只能从软件层面上进行攻击，在软件层面上，有两个可操作级别，操作系统和应用程序，两者应该没有本质的区别，但基于现有的操作系统构架，两者在是有区别的。它们分别是IP层和TCP层(UDP相当于扔垃圾，不存在安全问题)，两者的区别在于增加了端口的概念，在一个操作系统内，所有进程都是内核进程的子进程，内核进程主管IP层协议(window不知道，当linux内核确实是这样)，所有子进程要向网络发送信息，都要以tcp协议的方式发送给内核进程，内核进程将其包装为ip协议包，再路由到网络上去。换句话说，在已有的操作系统上开发程序的话，发送信息的目的地由ip和端口共同确定。端口是操作系统内核上的一个虚拟概念，由16位二进制数(一个unsigned short)确定，范围由0-65536。其目的其实很简单，就是为了区分不同的通信通道(一个程序可以绑定多个端口)。我们知道对于一个ip地址，我们只有一条网线通道向外部发送信息，但如果我们的电脑上，有多个程序想要互不干扰地与外部通信的话，一个有效的办法就是，在发送的信息开头加上一段信息来区分，这就是端口。 服务器服务器是黑客攻击的主要对象。在服务端，所谓的服务器就是，一个在公网下，绑定了开放端口的程序。在这里，我们只考虑linux内核的操作系统，通常桌面版的window和mac基本不可能实际用于当服务器(不是不行哦)，一方面是其桌面系统对内存和CPU资源的占用都比较大，而且就服务器本身作用而言，这桌面系统丝毫没有用处。当然window server这个系统还是有些应用的，这是个桌面简化版的window系统，只提供进行服务器管理的UI，对于比较懒的不想使用命令行管理网站的小站长。linux的程序系统比较特别，一般在window活久的人会把一个窗口认成一个程序，再加一个后台程序加以区分，但在linux的程序指的是一个进程，比如nginx 在这里，我运行了nginx但感觉啥也没发生，其实并非此，我们看到8080端口被开放了 通过浏览器，访问8080端口就可看到服务器提供的http服务了。在linux内，进程以树的结构进行管理，最顶层是内核进程，因为Termux没有root权限，显示不了，但可以那我的云服务器来做例子 nginx和php-fpm是提供http协议服务的，默认绑定的是80端口，sshd提供的是ssh服务，就是我拿来远程连接的端口，默认绑定22端口，systemd就是顶级的内核进程，所谓的后台进程，实际是将本来由当前创建的子进程，交给内核进程来处理，使不处于当前控制台下。 个人设备个人设备指的是手机，电脑之类的，不接入没有考虑安全的必要，而接入网络，我们往往又处于内网下。这说明什么？说明了，个人设备只有可能引入病毒软件，不可能放在那里就能莫名其妙地被攻击。所谓内网，指的不单单是wifi，我们连接的光纤也是一样的，主要原因是ipv4的地址不够用了，解决方法也很简单，比如NAT端口映射，在一个持有公网ip的路由器上，搭载一个小型的嵌入系统，目的是为了将当前公网的ip+端口，映射为一个内网的ip+端口，这样想要向本地写入信息，只要向公网ip+端口发送信息就可以了，而端口大部分时候都是用不完的，而且一部设备也不可能开放一堆端口来对外通信，因为宽带是有每秒的流量限制的。其实如果是固定映射，攻击是有可能的，但现在内网使用的都是动态地址分配，如果感受不到的话，可以拿wifi模拟一下。动态分配表示地址并不稳定，而且我们并不知道向这个端口的后面是什么，应该写入什么信息，很容易就会被网关视为无用信息而直接丢包。真正可能有危险的是恶意软件，比如默默地在后台大量使用CPU和网络流量来偷偷与外部通信。虽然外网找不到我们，但是我们可以找过去，在本地我们连接公网设备时，可以由系统完成握手过程，建立连接。其实，我想表明的是，这类似于黑暗森林的法则，内网的安全来源于，别人无法在互联网上找到你的地址，就没有攻击的说法，但如果你有一个本地程序，向公网说，我在这里，那么定位到你就不成问题了。熟悉网络寻址的可能知道，互联网的寻址实际是广播的方式，它向所连接的所有路由器设备寻找你连接着这个地址吗？这样反复的广播下去，路由器上有一张缓存表，记录着所连接的设备，而且是随时更新的，主要是连着内网的路由器。一般的程序没有系统管理员权限，只要一删除，它啥也干不了。比较难受的是window系统，一般人使用的时候都不会去设置管理员密码，不知运行程序的时候有没有这样一个现象，就是周围突然一黑，只有一个窗口询问你是否要运行程序，这实际是程序在寻求管理员权限，将程序安装到系统目录，这是必要的，但谁知道程序拿到权限后干什么呢？不过也没啥好怕的就是了，window的管理员权限没有linux的root厉害，顶多给你弹窗，找不到软件在哪，改改注册表之类的问题，具有一定计算机知识的人都可以自主定位排查，没什么好怕的。 局域网(Wifi)在网络安全的教育中，他们都会告述你不要乱连公共场合的wifi，这确实有一定道理。其实wifi和一般的光纤内网在通信上没有本质的区别，区别只是信息传递的方式，wifi是无线传播，光纤是有限传播。wifi的危险性来自于个人对其有操作性，相当于wifi的提供者充当了网络提供商，这里的风险与我之前所说的物理层的风险是一样的，关键在于攻击方有没有精力去解密。当我打开wifi热点的时候 实际打开了53端口，在公网下，这是用于dns域名解析服务器的端口。而在wifi内网下，用于与所连设备建立通信，再来看一个现象 我们看到53端口，使用udp和tcp两种协议，而外部扫描到tcp协议。实际上，我们连接wifi的时候，是与wifi网关建立tcp协议通信，但是我们怎么扫描到wifi呢，实际上是wifi在不断向周围投放基于udp协议的包，手机则有特殊的wifi模块来识别这些包，从而确定到这个设备。无线通信不同于有线通信，无线需要依赖于广播和过滤，我们身边其实有接近无限的广播信号，手机通过过滤找到确实是发给我们的信息并接收。无线通信其实是物理层面不安全的，而且wifi还建立在ip协议之上，所以衍生了一种十分恶心的攻击方式，arp欺骗，arp协议虽然在物理层之上，主要为了在广播信息中记录mac地址与ip的对应，可以通过指令查看 这是经常变的，并不是很稳定，这是利用物理层上的漏洞，本质和作为wifi提供者进行流量拦截是同样的行为。一旦获取端口，就可以在本地可以编写代理程序来进行流量拦截，得到的是处于ip协议层的数据，至于怎么去解析，那不是我干的事了。 攻击目的进行网络攻击的一个主要目的是获取信息，或是单纯地搞破坏。为什么要考虑目的，因为目的才能决定我们的做法，更重要的是从原理上考虑其可能性。搞破解，搞逆向，搞攻击之类的，必须时刻记住，要了解其原理，而不是胡乱套工具，人是在不断进步的，安全也是一样的，了解常用的攻防手段，可以很快地帮我们找到思路。 资源获取这里指的是公共服务器的资源，对于躲在黑暗森林里的设备，一是我们不知道它有什么资源，二是定位ip十分困难，所以真正危险的是处于公共视野下的服务器，对于我们的个人设备并不用当心这么多。想要隔着网线获取到服务器的数据，或者是服务器端设备上的数据，直接从物理上偷走硬盘是最简单粗暴的办法，不过现在的绝大多数服务器都处在比较偏远的地方，而且这是小偷的行径而不是黑客的行径，黑客应当从软件层面上进行攻击。在软件上，我们可以做什么呢？很简单就是向ip+端口写入数据，而且端口必须是开放的，对于往封闭端口写入的数据会直接被内核丢包。如果系统的运行就是这样有去无回的话，又或者服务器不存在开放端口的话，安全问题是本质不存在的。但服务器的作用却要求了，它不能像个人设备一样封闭所有端口，如果提供http服务，需开放80端口，如果提供ssh服务，需开放22端口，当然还有更多，这样就达成了一个前提。其次服务器的作用要求了端口对数据的交互性，我向你发送一个http请求，你当然得回应我一个页面吧，不然你这服务器的意义何在，这样就达成互动的前提。就算如此，你可能觉得，我们发送的信息都要求固定格式，完全受限又怎能做出大事呢？所以问题其实出在绑定在这个端口的软件上，不过嘛，其实操作系统也可能出现一些问题，不过概率比较小。比如80端口，绑定提供http的服务器，拿nginx举例，它是一个典型的反向代理服务器，这是什么意思呢？这实际上和运行权限相关，nginx一般不会以root权限运行，除非你不考虑安全问题。这样存在nginx权限无法访问的文件，但是当前页面又需要这个数据，那么怎么做呢？在本地或者内网，运行一个可以读取文件权限级别的程序，并将ip映射为内网访问，内网数据传输没有权限，这样nginx就可以获取相应的数据，而无需在相应的系统级别。但然反向代理还有其它作用，比如代理php服务，nginx无法处理php请求，于是反向交给本地的php服务来处理。由于http服务器的运行权限级较低，只能通过不同参数来实现如代码注入的事情，比如sql注入，php注入，这往往是程序员懒得做参数检验，有或者前后端不分离才可能出现的问题。漏洞的根本在于回应请求的软件，是否存在某些特殊参数的处理机制。比较可怕的端口是22，端口22提供ssl服务，即远程连接服务，对于一般架设于远处的服务器，管理员需要通过此服务远程操作，所以也没办法关掉。openssl是一个开源的软件，白客可以寻找漏洞并修补，黑客也可以寻找漏洞并攻击。有人可能会觉得自己开发一个远程连接程序不就可以了，确实，程序可以改，加密可以改，但是通信协议改不了，而且有时花大量精力开发，没有群众来寻找漏洞，反而更容易被发现漏洞，我们还是会到ssh吧。ssh的运行级别是很高的，对于linux而言，你相当于站在电脑前面，ssh的连接过程比较简单，用户加ip再输入密码就可以连接，密码以信息摘要的方式存在本地，碰撞出结果的概率很低，通信过程使用非对称加密，看起来确实很安全，简直没什么可操作的余地，但问题往往都是你想不到的，我们等下再说。 资源占用拿电脑跑高计算量的程序当然不太可能了，个人电脑的性能本身就不如服务器基本的设备，而服务器级别主管计算的往往处于服务器内网，外网一般负责交接，比较难盗取到计算资源，而且计算往往用于科研，科研一般有自己的计算资源，并非什么刚需，真正刚需的是下载服务。网盘、迅雷等之类的下载软件，都使用了一种p2p的下载技术，大家都略有耳闻，就是让下载的用户之间互相传下载进度，内网用户之间互相寻找到对方地址比较困难，特别内网用户的ip地址还是动态分配的，而且中国的运营商限制一般用户上行宽带速度，我们一般也不会做向远处传大文件，上传速度不会远超下载速度还是比较合理的，这样还省了硬件成本。用户间的寻址依赖于track服务器，主要记录连接用户地址和传输基本信息，有人可能会告诉你没有公网ip就别想用传统的p2p，更准确来说是没有静态的ip映射，公网ip早就不够了，又有那家公司会随便的给你。传统的p2p，对于不同的ip+端口，它会将其视为一个新的用户，p2p的精神是共享越多下载越快，而动态ip分配会导致共享内容随时清零，获取不到下载速度，而且运营商会妨碍不同内网直接的通信，从而保证所谓的“安全”。而新生非网盘、迅雷等的技术有所不同，通过引入用户机制，不断地追踪动态的用户地址，并且使用自己修改过的track服务器，为会员用户提供更高质量的服务，而且还通过不断扩大用户群体，来壮大p2p的阵容。你可能觉得改track服务器不就可以了吗？并不能，传统的p2p是全球性的传输，谨遵p2p精神相当于全网公约，就如同通信协议一样，乱改的话还怎么交流，当然像网盘，迅雷之类的开辟一条符合中国国情的道路也是可以的。所以系统资源的占用发生在自己将软件引入系统，不会有什么软件莫名其妙就安装到你的系统上，当然这不包括后台安装，在安装某个程序的时候，它帮你在后台安装一堆其它软件，比如××下崽器。至于本地资源的盗取嘛！对于没价值的存在，耗费那么多尽力，实在有些不值得。真正讨厌的，还是有些软件不断地在本地收集信息并发送到服务器去上，只要你还在用这个软件，它就停不下来，在国外它可能需要询问你，因为这是要打官司的，在国内嘛！不太清楚，反正跟黑客没啥关系，都是正版官方的软件，怕啥？反正，我只敢把它们安装到虚拟机上去。 浏览器安全除非你的浏览器有问题，不然浏览网站就能让设备中毒简直是无稽之谈，网站的浏览本质是在浏览器内核上运行的程序，相当于一个小型的虚拟机，处于隔离环境下。唯一有问题的是http请求中所包含的cookies信息，这是网站中记录下次免登陆的信息用的，一般情况下cookies信息会绑定相应的网站域名，不在非官方网站输入信息其实也没啥好怕的，连官网都识别不了，只能怪你自己的安全意识差到了极点。 实际看看回到我们最开始的两个东西，来源于openssl的两个漏洞，这时我们还应该意识到一点，本地可以扫描到漏洞，外部也一样可以扫描到。黑客大概存在两种级别，一种是专门利用工具和已有的研究成功，攻击那些抱侥幸心理懒得修复的站长，另一种就是在扫描不到已知漏洞的情况下，去研究程序，从原理上寻找可能可以攻击的点。 缓存区溢出漏洞我们可以看看官方的描述 为了解密 SM2 加密的数据，应用程序通常会调用 API 函数 EVP_PKEY_decrypt()。一般情况下，一个应用程序将调用这个函数两次。第一次在进入时，“out” 参数可以是 NULL，而在退出时，“outlen” 参数填充了为容纳解密明文所需的缓冲区大小。然后，应用程序可以分配一个足够大的缓冲区，并再次调用 EVP_PKEY_decrypt()，但这次为 “out” 参数传递一个非 NULL 的值。SM2 解密代码实现中的这个漏洞意味着第一次调用 EVP_PKEY_decrypt() 并计算出的容纳明文所需的缓冲区大小，可能要小于第二次调用时实际所需的大小。因此当应用程序第二次调用 EVP_PKEY_decrypt() 时，就可能导致缓冲区溢出。恶意攻击者如果能够向应用程序提供 SM2 内容进行解密，就能导致攻击者所选择的数据溢出缓冲区，最多可溢出 62 个字节，从而改变缓冲区后其他数据的内容。进一步改变应用程序行为或导致应用程序崩溃。 总结一下就是，ssl程序对缓存的处理方式不当，导致溢出的数据，占用程序占用程序的运行内存，而这段数据可以通过远程发送过来，而openssl的运行级别较高，运行内存数据中可能存在下一条运行的指令，从而改变程序的行为。这里说的只是原理，真正实现起来是挺困难的。 拒绝服务漏洞我们直接来看介绍，反正我也看不懂 该漏洞是由于证书解析时使用的 BN_mod_sqrt() 函数存在一个错误，它会导致在非质数的情况下永远循环。可通过生成包含无效的显式曲线参数的证书来触发无限循环。由于证书解析是在验证证书签名之前进行的，因此任何解析外部提供的证书的程序都可能受到拒绝服务攻击。此外，当解析特制的私钥时(包含显式椭圆曲线参数)，也可以触发无限循环。攻击者可利用该漏洞对使用服务器证书的TLS 客户端、使用客户端证书的 TLS 服务端、托管服务提供商从客户那里获得证书或私钥、证书颁发机构解析来自订阅者的认证请求、解析 ASN.1 椭圆曲线参数的任何其他内容、引起拒绝服务 (DoS) 攻击。 其实都是看不懂的，我们需要回到我们的主题，黑客到底可不可怕。首先对于已知的漏洞，升级程序是最好的解决方法，漏洞的根本其实都是程序某些处理代码让人发现了可乘之机。那未知的漏洞和风险呢？对于个人而言，不乱安装软件就是最好的办法，因为只有程序才能在本地运行，从而获取相关数据，比较难受的是有些人喜欢隐藏后缀名，通过图标来识别程序，导致将程序误认为图片，这只能说缺乏安全意识，还有就是程序的运行级别，在搞清作用前，不用乱给管理员权限。真正需要考虑安全问题是站长之类的人，但也轮不到我来操心，就我这安全水平，实在差的太远了。我想说啥呢？黑客并不可怕，一旦失去了在内部接应的程序，他们什么也做不了，可怕的是缺乏安全意识的自己，在无意识之间引狼入室。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"安全","slug":"安全","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"网络","slug":"网络","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"意想不到的成功","slug":"意想不到的成功","date":"2022-05-06T16:37:42.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2022-05-07-意想不到的成功/","link":"","permalink":"http://example.com/archives/2022-05-07-%E6%84%8F%E6%83%B3%E4%B8%8D%E5%88%B0%E7%9A%84%E6%88%90%E5%8A%9F/","excerpt":"","text":"当我觉得判定系统有问题，绝望地快要放弃的时候，突然冒出了这个 啊，终于完成了！找个时间讲讲我是如何和服务器斗智斗勇的，目前排名很低，接下来要优化算法了。","categories":[],"tags":[]},{"title":"2022华中杯数学建模A题思路代码","slug":"2022华中杯数学建模A题思路代码","date":"2022-05-05T05:36:46.000Z","updated":"2022-10-14T23:47:06.268Z","comments":true,"path":"archives/2022-05-05-2022华中杯数学建模A题思路代码/","link":"","permalink":"http://example.com/archives/2022-05-05-2022%E5%8D%8E%E4%B8%AD%E6%9D%AF%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1A%E9%A2%98%E6%80%9D%E8%B7%AF%E4%BB%A3%E7%A0%81/","excerpt":"","text":"本人没参加比赛，主要嫌写论文麻烦，本身代码就能表现算法和结果，并用于评分，硬是要一篇论文，不明其意义所在，语言使用python，其处理数据比较方便。matlib？不明白它的优势在哪，好像数学建模就一定要使用一样，难道只是为了方便抄代码？我瞎说哦，别当真。R？这需要专门写一篇文章，以后再说。我没有乱套随机算法，所以最后结果是稳定的，第一问得到67批次，第二问得到78713的总距离，第三问得到36923的总时间，下面都是比赛期间写的，不想再继续优化了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215# 读取数据import pandas as pddata = pd.read_csv(&quot;附件1：订单信息.csv&quot;)# 预处理def stringToNum(x): return int(x[1:])OrderNo = list(map(stringToNum, data[&quot;OrderNo&quot;]))ItemNo = list(map(stringToNum, data[&quot;ItemNo&quot;]))OrderObject = []index = 0for i in range(0, 20340): if OrderNo[i] &gt; index: OrderObject.append([]) index += 1 OrderObject[index-1].append(ItemNo[i]) # 第一题# 生成排列索引,越相似订单靠的越进OrderLen = []for k,v in enumerate(OrderObject): OrderLen.append([k, len(v)])OrderLen.sort(key=lambda item:item[1], reverse=True)def getFitness(i, j): item1 = OrderObject[OrderLen[i][0]] item2 = OrderObject[OrderLen[j][0]] tmp = set(item1) tmp.update(item2) return 1-(len(tmp)-len(item1))/len(item2)for i in range(len(OrderLen)-1): maxfitindex = i+1 maxfit = 0 for j in range(i+1, len(OrderLen)): fitness = getFitness(i, j) if fitness &gt; maxfit: maxfitindex = j maxfit = fitness tmp = OrderLen[i+1] OrderLen[i+1] = OrderLen[maxfitindex] OrderLen[maxfitindex] = tmplen(OrderLen)# 按给定顺序分配订单GroupNo = []for orderInf in iter(OrderLen): overIndex = -1 overDelta = orderInf[1] overSet = set() product = set(OrderObject[orderInf[0]]) cache = set() for i, j in enumerate(GroupNo): cache = product.copy() cache.update(j[0]) if len(cache) &gt; 200: continue if len(cache)-len(j[0])==0: overIndex = i overSet = cache break if len(cache)-len(j[0]) &lt;= overDelta: overIndex = i overDelta = len(cache)-len(j[0]) overSet = cache continue if overIndex == -1: GroupNo.append([product, [orderInf[0]]]) else: GroupNo[overIndex][0] = overSet GroupNo[overIndex][1].append(orderInf[0])print(len(GroupNo))# 保留一级结果res1 = []for k, v in enumerate(GroupNo): for i in iter(v[1]): res1.append([i+1,k+1])len(res1)# 生成最后结果并输出def NumToStringD(x): return [&quot;D&#123;0:0&gt;4&#125;&quot;.format(x[0]), x[1]]res1.sort(key=lambda item: item[0])result1 = list(map(NumToStringD, res1))result1 = pd.DataFrame(result1, columns=[&#x27;OrderNo&#x27;,&#x27;GroupNo&#x27;]);result1.to_csv(&quot;result1.csv&quot;, index=False)# 第二题# 保存结果列表和计算函数ProductOrderList = []DistanceList = []def sumDistance(TargetSort, NormOrder): sum = 0 for item in iter(NormOrder): if len(item) == 1: continue min, max = 0, len(TargetSort)-1 for k, v in enumerate(TargetSort): if v in item: min = k break for k, v in enumerate(reversed(TargetSort)): if v in item: max = len(TargetSort)-k-1 break sum += max-min return sum# 寻找批次最短距离for temp in GroupNo: N = len(temp[0]) NormOrder = [] ProductList = list(temp[0]) for k, v in enumerate(temp[1]): NormOrder.append([]) for i in iter(OrderObject[v]): NormOrder[k].append(ProductList.index(i)) TargetSort = list(range(0, N)) currentSum = sumDistance(TargetSort, NormOrder) for i in range(0, N): for j in range(i+1, N): tmp = TargetSort[j] TargetSort[j] = TargetSort[i] TargetSort[i] = tmp tmpSum = sumDistance(TargetSort, NormOrder) if tmpSum &lt; currentSum: currentSum = tmpSum continue elif tmpSum == currentSum: if j-i &lt; (N-i)/1: continue else: break else: tmp = TargetSort[j] TargetSort[j] = TargetSort[i] TargetSort[i] = tmp if j-i &lt; (N-i)/1: continue else: break DistanceList.append(currentSum) ProductOrderList.append(list(map(lambda ind: ProductList[ind],TargetSort)))# 一级结果res2 = []for k, v in enumerate(ProductOrderList): for i, j in enumerate(v): res2.append([j, k+1, i+1])print(len(res2))sum(DistanceList)# 最后结果def NumToStringP(x): return [&quot;P&#123;0:0&gt;4&#125;&quot;.format(x[0]), x[1], x[2]]result2 = list(map(NumToStringP, res2))result2 = pd.DataFrame(result2, columns=[&#x27;ItemNo&#x27;,&#x27;GroupNo&#x27;,&#x27;ShelfNo&#x27;]);result2.to_csv(&quot;result2.csv&quot;, index=False)# 第三题# 保存结果列表和计算函数TaskList = []TimeList = []def sumDeltaDistance(pos, Product, CurrentOrder): min, max = 0, len(Product)-1 for k, v in enumerate(Product): if v in CurrentOrder: min = k break for k, v in enumerate(reversed(Product)): if v in CurrentOrder: max = len(Product)-k-1 break if pos &lt;= min: return max-min, max elif pos &gt;= max: return max-min, min else: if pos - min &lt; max - pos: return max-min+pos-min, max else: return max-min+max-pos, min# 寻找最短分配方案for indexNum in range(len(GroupNo)): TaskList.append([]) CurrentTask = [[],[],[],[],[]] CurrentPos = [0, 0, 0, 0, 0] CurrentSum = [0, 0, 0, 0, 0] temp = GroupNo[indexNum] tempProduct = ProductOrderList[indexNum] ProductList = list(temp[0]) for v in iter(temp[1]): minIndex = 0 minPos = 0 minSum = max(CurrentSum) + len(ProductList) for i in range(0,5): delta, tmpPos = sumDeltaDistance(CurrentPos[i], ProductList, OrderObject[v]) if CurrentSum[i]+delta &lt; minSum: minSum = CurrentSum[i]+delta minIndex = i minPos = tmpPos CurrentTask[minIndex].append(v) CurrentPos[minIndex] = minPos CurrentSum[minIndex] = minSum TaskList[indexNum] = CurrentTask TimeList.append(max(CurrentSum))# 一级结果res3 = []for k, v in enumerate(TaskList): for i in range(0, 5): for tn, pi in enumerate(v[i]): res3.append([pi+1, k+1, i+1, tn+1])print(len(res3))sum(TimeList)# 最后结果def NumToString(x): return [&quot;D&#123;0:0&gt;4&#125;&quot;.format(x[0]), x[1], x[2], x[3]]result3 = list(map(NumToString, res3))result3 = pd.DataFrame(result3, columns=[&#x27;OrderNo&#x27;,&#x27;GroupNo&#x27;,&#x27;WorkerNo&#x27;, &#x27;TaskNo&#x27;]);result3.to_csv(&quot;result3.csv&quot;, index=False) 想要有所长进，就多实践吧。接下来想多做些算法，不太想写文章了。 至于数学竞赛，奈何实力不够(想参加数学类的)，没资格参加。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"建模","slug":"建模","permalink":"http://example.com/tags/%E5%BB%BA%E6%A8%A1/"}]},{"title":"Unity资源解包","slug":"Unity资源解包","date":"2022-04-30T05:08:25.000Z","updated":"2022-10-14T23:47:06.379Z","comments":true,"path":"archives/2022-04-30-Unity资源解包/","link":"","permalink":"http://example.com/archives/2022-04-30-Unity%E8%B5%84%E6%BA%90%E8%A7%A3%E5%8C%85/","excerpt":"","text":"在上一节中，我们对Unity的整体架构有了一个大致的了解，也明白了我们需要的是什么，在这一节中，我们将把解包的工作落实下来。 解包的可能性在做任何逆向工程的时候，可能性的考究是必要的，对于理论上已经证明过不可能的工作，做再多分析都是无用的，当然大部分解包基本都是理论上可能的。我们所寻求的资源无非是图片、音频、视频等媒体资源，而不是代码资源(大部分情况下)，两者的区别在哪呢？在于文件的“执行”上，媒体资源的执行即显示出来，代码的执行就如字面意思。对于静态编译的语言，特指C/C++，在执行上只需要文件所包含的机器指令即可，至于原来是什么样，丝毫不用关心，所以对于此类我们往往做的是反汇编而不是反编译，因为机器码和汇编指令是一一对应。但媒体资源不同，如图片，是有统一的标准的，在执行上本质都是依赖一个统一的库，如png的libpng，这些都不重要，重要的是这意味着一定要png的文件流才能执行，通常情况下，没有哪个企业会去自研一个图片格式，这是有一系列连锁反应的，自研一个图片格式还意味着要自研一个编辑器，等等，从产品周期上，这是十分低效的。正因这多方面的原因，就算是加密过的资源，为了“执行”它，在机器码的某处一定存在解密的代码，保存为某种文件流，在传入公共的资源解析器，这就是一切资源解包的基本思想。 AssetStudio在正式开始解包实战前，我们先来看一个有用的工具，AssetStudio。实际上，对于使用原生Unity开发的游戏，只要找到加密资源位置，就可以直接用这个工具进行解包了，而且还是图形界面，操作十分方便。但是嘛，对于许多公司而言还是要留一些后手的，就算仍有被解包的可能，但至少不能让所有的人随意就得到资源，它们一般都有Unity源码，进行各种修改算是常规操作了。对于我们而言，进行过修改的才是我们的目标对象，但肯定不可能从零开始，站在巨人的肩膀上可以减少许多无用功，所以我们将以AssetStudio为基础进行更深入的解包。 编译运行既然要以AssetStudio为基础，了解其大体构架是必需的。先尝试把程序顺利编译，以保证后续可以跟踪研读，笔者比较不幸一开始就遇到了问题 提示.net框架的SDK版本问题，笔者不常用windows自带的.net框架，所以SDK的版本一直都只有4.x，解决办法有几种，比如添加新版本的.net SDK，但笔者就直接降到自己所拥有的版本，正好作者也配了这个版本。从这我们还可以了解到这是.net项目，解决版本问题后，紧接着出现了下一个错误 这是windowSDK的版本问题，在右边，我们注意到这是一个C#与C/C++的混编项目，对于window而言两者的目标文件都是dll或exe，所以兼容编程是没啥问题的，实际上在jvm(java虚拟机)上也有类似的情形，原生的java、Kotlin和Scala都是编译为java字节码，也是可以混编的。windowSDK针对C/C++，将其改到我们的版本即可，当然保险的做法是保持与作者同样的版本。下一个错误 缺少相应的头文件“fbxsdk.h”，从名字上看就知道我们缺少fbx的sdk，fbx是3D模型的格式，此工具有3D模型的解包功能，模型的生成需要官方的解析库，自己写肯定不可能了，而且它本身还是闭源的，分析又进一步增加了难度。总之，我们缺少fbxsdk，看作者这里 作者使用的是fbxSDK2020，我们去下载相应版本，修改工程配置的相应路径即可 成功编译运行，解包也可以正常的进行，就是界面感觉有点糊，对比下载的版本 其实主要是两者的.net版本不同，虽然笔者的SDK只有4.x，但运行环境有5.x，下载的版本运行在5.x，自己编译的运行在4.x上，所以效果上有些不太一样，但核心功能都是有的，所以也不用过于在意。 程序总览我们再来想一个简单的问题，这个软件做了什么？虽然界面东西这么多，但其核心功能就只有一个，加载待解包数据，然后导出需求格式文件。对于这种类型的开发，我们需要讲一个基本开发思想，即文件在程序运行过程中以怎样的形式存在，在很久以前的网络抓包中稍微提过这个思想。面向对象的本质是一种数据的组成结构，一种对象有什么样的成分，能做些什么均声明在类的内部。文件解析也是同理的，不过在目前我们研究的问题里，我们还需要为文件专门准备一个类来讲文件转化为内存中的对象，然后再对此对象进行解析，将结果保存在对应的类对象中，也就是说文件解析的结果，最终都存在于软件的运行内存中。导出过程则是类对象的序列化过程，可以使用相应的库，如前面提到的fbxsdk，它可以将unity中解析出的模型数据，序列化为fbx文件。除了导入解析和导出，此项目还提供了预览功能，但与前两者对比就相形见绌了。此项目有如下成分 启动项是“AssetStudioGUI”，即此程序的主要界面，提供UI相关内容，“AssetStudio”是解析的主要部分，也是我们重点研究的对象，“AssetStudioFBXNative”和“AssetStudioFBXWrapper”提供fbx导出的功能，前者与sdk进行对接，后者完成C#部分的接口封装，“Texture2DDecoderNative”和“Texture2DDecoderWrapper”与前者类似用于纹理(即图片)的解析和导出，“AssetStudioUtility”提供丰富功能的工具类。在项目“AssetStudioGUI”中，找到主界面文件“AssetStudioGUIForm.cs”，查看源代码，找到文件载入的源代码(先研究与Unity密切相关的此部分内容) 这里的OpenFileDialog，上下两个稍有区别，上一个直接使用.netFramework的UI接口，下一个虽然稍微封装了一下，但功能差不多，反正最后得到用户所选的路径，在Task中，AssetsManager实现文件的载入和解析工作，最后的“BuildAssetStuctures()”则是将结果反馈到界面上，所以解析的核心类是AssetsManager，在项目“AssetStudio”中，然后这就是我们分析的主角了。 文件解析我们以文件加载为例，文件夹的话就是将里面文件遍历一般，没有本质的区别 此处仍然是一个架构式的流程，首先是预处理“MergeSplitAssets”和“ProcessingSplitFiles”，主要用于合并分割文件，比如下面这个例子 不论导入哪一个部分，最后的结果都是一样的，只能说过于智能了。有一个奇特的东西 拿前面的例子，在调试过程中，我们发现sharedassets0.assets的前些部分与sharedassets0.assets.split0的二进制文件基本相同，更进一步发现sharedassets0.assets包含了.split的所有部分内容，也就是这个游戏里放了两部分相同的资源，但这其实是有理由的，没有split部分负责索引，有split的部分负责具体的读取，这样在游戏运行过程中可以加快资源的读取。预处理完后正式进入加载(Load)的过程，首先将原文件的索引和文件摘要(Hash)都保存到全局变量中去。LoadFile读取文件的内容并根据文件的类型保存在相应的文件对象中去 从这里可以看到作者准备了许多中类型，但实际应用中笔者基本只遇到过前两种，AssetsFile是最原始的序列化数据，我们不做任何处理的开发得到的就是它，在Android平台上它有一个后缀.unity3d，BundleFile是使用AssetBundle进行数据打包后的格式，通常都是分块存储，许多游戏的实战开发中遇到的基本是这种格式。Progress好像是一个计数器，目前作用不明，assetsFileList是SerializedFile(序列化文件)的列表，包含读取后的文件对象，就算是BundleFile也是一样的 我们使用BundleFile来构建相应对象，但方法结束后，此对象的周期就结束了，关键在于bundleFile的fileList以及后面的方法LoadAssetsFromMemory，顾名思义即从内存中读取AssetsFile对象(对应SerializedFile类)，这里的内存指的是对象bundleFile，你可以这样进行类比bundleFile相当于一个压缩包zip，里面的具体文件都是assetsFile，fileList包含所有的索引，所以bundleFile最终也将数据存储于assetsFileList内。ReadAssets用于解析AssetsFile对象，将内部的object一一构建相应的对象 为了读取的方便，一个AssetsFile往往包含复数个具体的文件对象，比如这里 这是一个Live2D的AssetsFile，它包含Texture2D(贴图)、Shader(着色器)、Animator(动画)等多种数据对象。ProcessAssets用于处理object之间的关联，构建树关系 可以看到，此部分主要处理GameObject直接的树状关系和与自己的Component构建联系，其结果的表现之一就是SceneHierarchy的内容 这里是一个Live2D所拥有的结构，Drawables就是平常画图中图层的树状结构。 数据导出目前此工具主要实现了导出如图片、音频、3D模型等媒体文件的功能，我们以最简单的图片为例进行分析，其它情况类似，而且作者也写了不少导出其它格式文件的工具，一一分析太麻烦了，只要把握思想就足够了。 先把点击事件定位到，然后再一层层的向目的进发 由于软件功能较多，所以封装了许多层，先是导出的过滤器，然后是导出类型，总共有3种，Raw表示原封不动的导出，相当于文件的复制，但是针对的是Object的内容，属于原来文件的一部分，Dump相当于导出文件摘要，在预览(preview)旁边的那些数据，并非说文件只有这些数据，而是目前作者只做了这些数据的读取，其它部分的解析都没有做，比如MonoBehaviour，AnimationClip之类的，如果真的要导出的话，最好是Raw+Dump导出，这样数据比较全，Convert表示可转化数据，也是我们研究的重点，比如图片(Texture2D)就是从这里导出的 最开始item.Asset获取我们之前解析出的Texture2D对象，然后读取全局的设置，这个软件中可以找到 在这里我们可以选择导出图片的格式，你可能有些疑惑，为什么还能选择格式，我们详细解析Texture2D的时候会再提到，后面的代码就比较容易理解了，try属于检测语句，通过Texture2D内部的方法ConvertToImage实现从内存到文件流的转换，最后通过WriteToStream将文件流数据写入具体位置。 Texture2D为了更加深入了解数据的流动过程，我们拿Texture2D来跟踪一下。 我们研究一个简单的BundleFile，里面只有一个背景图片 在文件流对象FileReader创建之时就确定了文件的具体类型 我们发现Bundle内部有两个文件，一个是AssetsFile包含我们所需的数据，另一个是ResourceFile作者加了TODO表示以后再来解析，实际上它对我们意义不大，不要也罢，到目前我们只有一个AssetsFile 从这个AssetsFile我们得到3个object，其中一个是贴图(Texture2D)，另一个是用来承载图片的Sprite，属于GameObject，搞开发应该很清楚，通常情况下图片不是直接显示，而是作为Component依附于一个Object，而最后一个是对自身的引用，不在考虑的范围内 稍微研究一下即可发现，打包后的资源实际是OpenGL的Texture2D格式，意味着unity在打包图片资源的时候实际上已经进行过格式解析了，除去保留相关信息的文件头外，数据最终在image_data内，存储方式属于位图，与png之类的核心区别其实是是否压缩过，虽然与我们之前的理论有些相悖，但这也是另外一种图片显示表达，玩过OpenGL的应该知道图片数据解析以后也是配置信息加逐像素数据(是位图但不是bmp)，这也解释了为什么图片可以保持为多种格式，因为OpenGL的Texture2D本质不是文件格式而是图片在内存中的格式，最后的ProcessAssets基本没有处理。接着再来看看导出过程吧 作者将Sprite默认作为图片导出，实际导出了Texture2D，这可能是作者的见解，Sprite的内容本身是很丰富的 有众多的参数，实际开发中其相当于一个类，这里相当于将类进行重写，理论上导出dump才是合理的 我们利用工具可以轻易地看到两者之间的对应关系，具体的代码和运行的结果都表明了确实如此 我们闲着无聊再看看图片的导出过程吧 首先将位图数据buff转化为可以用于图片解析的image对象 Image是一个外部库的类，图片压缩综究得靠第三方库，但我们这里得到的对象是image是我们封装过的子类 不过封装的内容好像也不多，就加了一个内存选择，保存的最后函数还是靠第三方库SixLabors.ImageSharp，至于这个库嘛，不是我们解说的范畴。 解包实战理论和解包的核心内容已经说了很多了，投入实践才是主要的内容，与此同时还能遇到各式各样的问题，让我们来一一解决吧。 实例一先来一个最简单的情形，就一张立绘 但与一般图片不同，除了Texture2D和Sprite以外，还多了一个Mesh对象，而且Texture2D还是碎裂的图片，一个简单的方法就是手动使用ps来复原，但是既然程序可以复原，自然应该有机械的流程，其关键就是Mesh对象，已经有人开发了相关GUI程序依据Mesh来复原，但我们还是稍微解析一下。Mesh是网格对象，在OpenGL中进行模型载入的时候用的很多，主要保存顶点数据、纹理坐标、法线等，它一般情况下与obj是等价的，所以作者在这里将其导出为obj文件，其有一个显著特点，数据完全开放 而且就算是数值型数据，也以字符的形式进行存储，直接进行解析是完全可以的，平常开发中，我们通过assimp库将obj读取为Mesh对象。值得说明的是，原始存储的文件数Mesh对象的序列化，存储的数据更加紧凑，读取也会有更快的速度，因为加载的时候综究要变为Mesh对象，这似乎和之前的图片类似，主要目的都是便于读取，减少中间过程。最简单的办法是使用blender，首先导入网格数据obj文件 还需要注意的是其顶点没有使用标准化数据，所以需要修改相机的参数如上，接着导入贴图文件 最后再简单的写一个shader以完成渲染 最后再通过Imge的save即可保存渲染结果 但是这样不仅繁琐，而且渲染结果跟shader(着色器)有很大的关系，实际上我们需要做的只是依据obj的数据进行图片拼接，这样还能保持图片本身的色调，其实现过程并不难，我们拿易用的Python来实现一下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778# 基本库import refrom functools import reducefrom re import match, split# 图片处理库from PIL import Image# 基本参数texPath = &quot;biaoqiang.png&quot;meshPath = &quot;biaoqiang-mesh.obj&quot;outPath = &quot;girl.png&quot;# 文件读取imgRaw = Image.open(texPath)with open(meshPath, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file: meshRaw = file.readlines()size = imgRaw.size# 工具函数# 贴图坐标为标准化坐标，顶点为屏幕坐标# 需要函数依据图片尺寸将贴图坐标与屏幕坐标进行转化def cutPic(info): a = [round(float(info[1]) * size[0]), round((1 - float(info[2])) * size[1])] return a# Mesh数据解析# 顶点数据vecPos = filter(lambda x: match(r&#x27;^v\\s-*\\d+\\s-*\\d+\\s-*\\d+\\n$&#x27;, x), meshRaw)vecPos = map(lambda x: split(r&#x27;\\D+&#x27;, x), vecPos)vecPos = map(lambda x: [int(x[1]), int(x[2])], vecPos)vecPos = list(vecPos)# 贴图数据texPos = filter(lambda x: match(r&#x27;^vt\\s0\\.\\d+\\s0\\.\\d+\\n$&#x27;, x), meshRaw)texPos = map(lambda x: split(r&#x27;[^0-9.]+&#x27;, x), texPos)texPos = map(cutPic, texPos)texPos = list(texPos)# 渲染面数据renderPara = filter(lambda x: match(r&#x27;^f\\s\\d+/\\d+/\\d+\\s\\d+/\\d+/\\d+\\s\\d+/\\d+/\\d+\\n$&#x27;, x), meshRaw)renderPara = map(lambda x: split(r&#x27;\\D+&#x27;, x), renderPara)renderPara = map(lambda x: [int(x[1]), int(x[4]), int(x[7])], renderPara)renderPara = list(renderPara)# 计算新画布尺寸xPos, yPos = zip(*vecPos)picWidth = max(xPos)picHeight = max(yPos)# 新建一张画布picNew = Image.new(&quot;RGBA&quot;, (picWidth, picHeight), (255, 255, 255, 0))# Image数据解析# 计算切割坐标picPos = list(map(lambda x: [(x[0]), (picHeight - x[1])], vecPos))# 切割辅助函数def division(val): renderPos = [picPos[val[0] - 1], picPos[val[1] - 1], picPos[val[2] - 1]] texCut = [texPos[val[0] - 1], texPos[val[1] - 1], texPos[val[2] - 1]] renderArea = [min(renderPos[0][0], renderPos[1][0], renderPos[2][0]), min(renderPos[0][1], renderPos[1][1], renderPos[2][1])] cutX = round(min(texCut[0][0], texCut[1][0], texCut[2][0])) cutY = round(min((texCut[0][1], texCut[1][1], texCut[2][1]))) endX = round( (max(texCut[0][0], texCut[1][0], texCut[2][0]))) endY = round( (max(texCut[0][1], texCut[1][1], texCut[2][1]))) cutSize = (cutX, cutY, endX, endY) cut = imgRaw.crop(cutSize) return cut, renderArea# 施行切割cache = map(division, renderPara)# 绘制函数def draw(pic, pos): pic.paste(pos[0], pos[1]) return pic# 将贴图切片绘制到画布outImg = reduce(draw, cache, picNew)# 输出图片outImg.save(outPath) 这虽然只是一个简单的脚本，但可以依据上面的三个参数包装成一个函数，然后各种批量处理也就很好实现，来看看运行的结果吧 把图片放大看一看 效果还是可以的，至于代码的分析就在注释里，所以就到此为止吧。 实例二再来看一种情况 在这个实例中，此文件具有标准的文件头，但加载的时候出现了问题，异常是内存溢出。虽然不太明白，那我们就让程序运行到溢出的位置来看看情况吧 很容易的，我们发现了内存溢出的原因，读取头文件中的内存与文件实际的内存大小不匹配，没办法了只能再看看16进制文件进行猜测了 从地址0x50开始，出现了无压缩BundleAssets的特征，那么我们尝试改变读取的初始地址看一下是否可行 幸运的是，直接就解包成功了，这是一个spine的骨骼动画文件，作者并没支持此类导出，看来除了贴图啥也用不了。经过多次尝试，基本整个游戏的所有资源都能导出，比较麻烦的是每次初始地址都不一样。经过多次分析可以发现整个文件只有两个特征头数据，而且到0x21的内容都是相同的，所以我们可以把读取函数稍微改改即可 成功实现的复数文件的解包，批量处理自然不在话下。比较让人在意的是，开头那一段东西到底是什么，(过了许多天)，经过笔者几天的努力，终于把整个体系给扒清楚了，开头的那一段就是冗余数据，在解包的脚本中有计算的方法，就是下面这一段 其只与文件名有关，而且不包含父目录，笔者比较累了，就不复写到C#里了，就直接把拿来调用了 得到的结果完全一致，我们最初的目的达到了。由于解包十分的繁琐，接下来我将把整个思路理一遍，但并不一定泛用，只是针对这个特例的，让我们开始吧。 文件总览先看一下资源文件 经过简易地浏览，可以得知，这个游戏总共有三种资源，.unity3d结尾的是AssetsBundle文件，是我们最终的目标，bootstrap.xml一种特殊加密的xml文件，最后一种就是lxdata文件，其中“config.conf”,“script.script”,“starter/xbask.core”虽然后缀不同，但在十六进制编辑器中可以看到，文件头都是一样的，通过百度谷歌等搜索引擎，找不到这种资源的任何信息，所以它是作者自己的加密方式，所以接下来的重心落在代码的分析上了。然后再看一下动态库 注意里面只有以so结尾的才是原来的动态库，以i64结尾的是IDA动态库分析产生的数据库打包文件，global-metadata.dat是从程序资源文件中拿过来的，如果是安卓的话，应该位于解包后文件的这个位置“assets/bin/Data/Managed/Metadata”。这个文件来源于il2cpp的运行机制，il2cpp将C#的中间码往机器码转义的时候，两者的函数调用机制不同，机器码通过寻址实现，而一般面向对象语言都是基于全局函数表，说太多很复杂，笔者也没有很深入理解底层。本身来说能编译为机器码的大多都是C系的语言，C#和大多语言都是一样，依靠的是中间码和运行环境，静态分析的时候IDA不会以C#来理解机器码，而是以C系语言来分析，所以这个对照文件是必需的。当然也不需要知道多，我们直接使用已有的工具Il2cppDumper。它的依靠.dat文件和so文件，来生成对照表，对于大部分情况基本无法生成运行逻辑，它会生成这些文件 这么多对这个软件开发者可能有用，但我实际只用了两个，字符对照表“stringliteral.json”和函数对照表“dump.cs”，至于作者那些辅助脚本，没有详细的文档，实在不想浪费时间去研究了，而且目前的东西已经够了，不过“dump.cs”的逻辑结构不够清晰，只是便于进行文本搜索，所以还会再用到DummyDll里的dll文件。当然两个文件本质是一样的，只不过后者可以放到C#反编译工具中来生成逻辑结构。 从il2cpp到tolua我们先找到unity的入口函数 这是Unity最原生的资源打包，基本没办法加密，注意到两个Mono脚本，随便一猜就知道Main肯定是入口类。在“dump.cs”里面定位Main类，从而找到在动态库文件中的地址 在Unity里面，Start就相当于初始化，所以这里是我们分析的起点了，接着在IDE里定位地址进行伪代码分析 最右边是IDA生成的伪反编译代码，我们注意到有许多sub_×××形式的函数，这就是我们之前所说的由C#通过il2cpp转义来的函数，它们有一个特点就是一段加载过程，注意到右边的伪代码窗口，直到il2cpp_runtime_class_init_0之前的代码都是可以忽略的，它的逻辑来源于il2cpp，删去对理解的影响不大，以后会渐渐察觉到这点，然后就是下面的sub_1C22CBC()到底是什么函数，实际上sub后面的十六进制串就是函数的地址，我们可以通过“dump.cs”对照表找到这个函数 在分析过程中还可能遇到字符串的情况 像这样就可以直接定位到字符串了，在so文件中只能定位到全局变量。在这个阶段只要有耐心一步步下去即可，我们可以得到大致的运行流程图 在整个C#部分，XbaskEngine是最重要部分，但核心的实现并不在这层，这里的XbaskEngine实际是Xbask引擎在C#的接口 除了xbask，其它的命名空间基本都是第三方的，比如spine和live2d是做2D动画的，luainterface是lua与C#交互用的，而xbask内部的函数最终也指向那几个extern函数，也就是外部函数，不在这个动态库中。通过这个动态库的引用表可以找到，其链接的库是libtolua.so，tolua是C++与lua交互用的，原生的lua是用纯C写的，所以原生lua和C交互比较方便，tolua进以后拓展到了C++，你可能会觉得C和C++不是一体的吗？其实tolua更重要的作用是将lua的表与C++中的类对应起来，这个在原生C内是没有实现的，单纯在lua虚拟机上进行数值操作，C++确实也能完成。如果我们拿这个游戏的tolua和其它游戏对比，会发现它大了好多倍，也就是说里面实际有许多作者加进去的函数，因为这个库是由C系语言编译来的，所以我们可以用函数名定位到core_engine_init函数 通过十分漫长的一段分析时间，我看可以得到 client_x是命名空间ClientX的代理层，实际上前者处于C层，后者处于C++层，真正的实现都在ClientX里实现，为什么要这么麻烦呢？其实C#与C++是比较难交互的，两种的类对象的底层实现并不相同，但C面向函数的特性可以从函数实现交接，而C++使用面向对象的特性就很好进行数据管理了，而且还能嵌入C代码，所以一劳永逸是划算的。在ClientX的InitConfig和SetBootstrapConfig内主要完成成员变量的赋值，在Init完成初始化的任务，但其是委托给AppInstall完成的，在AppInstall的Init里基本才是整个程序的核心，包括bootstrap解析，从云端下载数据，解析脚本等。至于为什么再来一个AppInstall，一种解释是分工越细越好，另一种解释应该是移植。通过对游戏历史的考证，其原来使用的引擎是cocos2dlua，在不知什么时候改成了Unity，这可能吗？确实有可能，因为游戏的脚本全是用lua写的，而AppInstall实际就是cocos2dlua那里移植过来的残留，目的很简单就是为了实现游戏的热更新。由于剔除了cocos2d的引擎内核，ClientX实际相当于模拟cocos2d调用AppInstall的过程，当然这样并不够还有游戏内核接口的绑定，好在这个游戏公司在lua层加了一个xbask引擎，所以移植的时候只要将xbask的接口通过tolua#重新绑定到Unity内核函数即可，当然这还是得归功于lua函数的动态绑定机制。 通过流程图可以知道，在fclose后即数据已经载入内存，会更具寄存器W28的值判断是否直接进入pugixml，W28的值是我们传入的第二个参数pc_encrypt_config，从具体文件和静态分析都表明它是true，所以data_decode_to_binary就是解密的核心函数，至于前面那个，是用于获取需要多少内存的，为原内存的3/4，至于pugixml则是解析xml的C库 此函数总共有4个参数，分别是解密后数据的内存和长度，原数据的内存和长度，前面一些校验的代码可以不用管，我们直接仿写核心代码 因为IDE的类似伪代码，肯定不能直接用，但随便改改基本就可以了，其中的byte_3810F0是一个常byte数组，可以在so的常量表里找到，真正赋值解密就一句话，嵌入在if中，在if有执行语句并不奇怪，因为这是逗号表达式，只要最后一个是布尔值就可以了，不对，在C里面只有有值就行了，运行一波可以得到 其中gcc(c编译器)不是shell自带的需要安装，从输出1和2的分布就知道，为什么解密后文件内存是原来的3/4了，比较可惜的是，我们得到的只是一个配置表，实际上这是用来文件安装的，对我们没什么用，不过我们已经迈出了解密的第一步了。继续分析AppInstall，依据bootstrap.xml下载文件，安装游戏完成以后，进入script脚本的解析 这个脚本对应的是游戏目录下的是script.script，它属于lxdata数据文件，其数据的加载在packet_open里面完成，虽然这里是针对一个特例的运行，但考虑到人的惰性，我们有理由相信packet_open应该可以解析所有的lxdata数据，接着看这个函数 读取完文件以后，有进行文件头lxdata的比较，文件头总共12个字节，第7位是零，第8位是3，所以解析lxdata的函数实锤了 接着就是一个循环，先读取两个字节，通过某种运算后，得到接下来需要读取的字节数，以此类推得到多块数据，也就是说lxdata也是一种将许多文件打包的数据类型。但我们没有进行下去了，因为我们遇到了一个难点 在后续的分析中，我们发现了最开始分配的那2136字节并作为返回值的内存块的意义。它其实应该是一个结构体编译来的，用来保持解析packet后的数据的引用，解析后的数据应该存在一个可能叫table的结构体中，而packet则是在此基础上再封装一些包的其它信息，那么lxdata是什么呢？其实它大概是table结构体的序列化数据，注意这都是猜测，因为编译后本身就会丢失很多源码的信息，比如C里面的结构体直接翻译为内存块，而寻址基本是编译时期，编译器就把完成了。那么难点在哪呢？我们仿照着伪代码进行读取解密代码的编写，运行后只能得到这些 虽然数据确实一块块的提取出来了，但并不是我们想要的，想要通过伪代码推出packet和table结构体的结构有些困难，而数据又是动态处于内存中的，相应通过文件保持下来实在太困难了。但是方法总比困难多，接下来请欣赏一种另辟蹊径的方法。 利用动态库既然我们没办法仿写代码，那我们直接利用库里面的代码不就行了吗！调用没有头文件的库，确实异想天开，但原理上是有可能的。 通过对库文件的分析，我们需要三个函数，packet_open打开lxdata包，并返回packet结构体，packet_open_file打开packet中的某快文件并返回长度，packet_read_file读取packet中被open的文件。你问我为什么会知道这些？一个是通过函数名，最开始看到packet_read_file就感觉是我们需要的函数，但仔细分析参数和伪代码可以发现 在此函数的三个参数中，第一个是packet结构体，第二个是数据将要写入的内存，第三个是字节数，但我们之前的分析表明数据是分块存储的，也就是packet内有多块数据，并没有指向某个数据就取数据，显然是不可能的，于是我们试着寻找调用这个函数的代码 结果真的找到了，还告诉了你该怎么用，packet_open_file有两个参数，第一个是packet结构体，第二个是需要取出文件的名称，然后返回文件当然大小，接着以这个大小分配一块内存调用packet_read_file即可读出数据。但我们还有一个问题，packet内文件的名称都是什么？这个算是无意间发现的，笔者没有思路的时候，随便看了看其它函数，发现了packet_dump的特别之处 这是一个日志输出的函数，传入packet结构体可以把包的信息都打印出来，好家伙，正愁找不到文件名，它就直接打算给我，这算是一个小小的漏洞吧。好了，函数理解的差不多了，接下来该开始实践代码，由于库文件是arm架构的，而电脑是x86架构，所以我们只能在手机上编译运行，使用我们的神器Termux 这里有几个关键点，首先对于有参数函数一定要声明到头文件，虽然编译以后参数并不重要，汇编本身会表明参数，重要的只是函数名，但是编译器会依据进行代码优化，比如内存对其，会使得两种数据结构并不一定兼容，所以即使编译器不关注头文件，但还是得写出来。其次，我们还调用了库里面的函数filelog_create，这相当于初始化日志文件，不先执行这句函数，packet_dump不能正常输出日志文件。最后是链接到游戏的libtolua，并把当前目录添加到加载目录中，库文件可以直接从文件中拿出来。最后生成的数据在log_log里面，我们依据之前在伪代码中看到的内容即可提取所需的文件名 我们随便选一个，加载看看 我们成功了，这确实十分的神奇，接下来我们的目的是进行批量处理，我们先按照上面的方法，把config、xbask和script的日志打印出来，然后过滤为只包含文件名的list，使用命令行的grep加重定向也可以，但输出的文件包含“file name:”这段没用的信息，复杂的命令出来我不会，放到C里面解析又麻烦，所以干脆写了一个简易的python脚本来实现转化 接下来我们依据这个配置文件来写批量处理代码 这些是核心代码，里面用来两个系统命令mkdir和chdir，作用是创建目录和更换目录 我们完美的得到了所需要的全部文件，你可能注意到了程序运行过程中出现了错误，但其实是执行完我们所需代码之后的事，并不影响效果 问题出现在文件末进行getc的时候，这实际是我们所给的列表文件的问题，不是很严重就懒得管了，一番努力之后，我们把三个lxdata全部解包完成，config包含一系列json的配置文件，script是整个游戏的核心lua代码，xbask是处于lua的中间层，目的是隔离lua和内核方便代码迁移，然后接下来就简单了。先考察script里的init之类的初始化代码 我们有理由猜想gamecore的ResourceLoader就是用于加载资源的，我们定位到xbask的这个结构(称为类其实也行) 这是luajit的字节码文件，这种破解体系成熟难不倒我们，我们直接运用相关反编译工具 之所以比较混乱，是因为许多外部的全局函数，我们的反编译工具无法识别，但我们懒得添加，而且虽说乱，但看懂也是没有问题的。我们找到资源包加载的函数 在资源加载中调用了get_asset_bundle_crc_offset函数，顾名思义获得资源文件的冗余偏移，而且其结果将作为资源文件加载的参数。经过考察，这个函数是ResourceLoader的成员变量，其设置函数在script的init里可以找到 而其所调用的函数，就是我们最开始所说的那个，到此我们终于揭开了数据文件开头的东西是什么了。 小结说来也奇怪，明明使用我们最开始的方法就可以跳过这段冗余数据，完成资源的解包，但我们相信或许它包含着某些信息，想去一探究竟，但结果最后告诉我们它确实就是一段冗余数据。数据怎么生成的呢？这发生在资源打包的时候，我们很难甚至无法从结果进行推测，而且解析也是单纯的跳过，将其视为无用数据是唯一的解了。解包中还可能遇到特殊的音频文件，这是有传统的解包路线的，acb→hca→wav，虽说繁琐了点，但大概没什么人去研究，就只能这样了。这解包实战中，我们只有一个核心例子，解包是十分耗费精力的，而且方法都不泛用，有时可能还要碰碰运气。所以我们只举一个例子来说明，有什么思考方向，又该如何思考等思想性的东西，汇编分析综究还是得靠经验的积累，做多了，自然就熟了。好了，解包就先告一段落了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"引擎","slug":"引擎","permalink":"http://example.com/tags/%E5%BC%95%E6%93%8E/"},{"name":"破解","slug":"破解","permalink":"http://example.com/tags/%E7%A0%B4%E8%A7%A3/"}]},{"title":"数学探索之数其三","slug":"数学探索之数其三","date":"2022-04-25T05:31:43.000Z","updated":"2022-10-14T23:47:08.068Z","comments":true,"path":"archives/2022-04-25-数学探索之数其三/","link":"","permalink":"http://example.com/archives/2022-04-25-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%95%B0%E5%85%B6%E4%B8%89/","excerpt":"","text":"从之前对实数的定义可知，实数是有理数序列的等价收敛类，换句话说，对于一个实数而言应当有多种不同的表现形式才对，其结果基本来自于分析，我们拿我们的老朋友π来举例。 ，，，，， 在开始正式分析前，先稍微说点东西，首先表达式基本以无穷级数作为基础，目的是明了的，我们只要取部分和或部分积，就可以得到一个序列，与我们之前的讨论并不冲突，其次是目标实数π经过了某些运算，这是必需的，如果看来拉马努金(Ramanujan)的一些公式的话，就能明白其中的道理了，好像全是π的倒数，最后一个是比较特殊的逼近方式，连分数，理论比较完善，表达比较单一，没有更多需要研究的地方。最后再来说一个有理逼近的定理，来明确表明，任意实数都存在无限靠近的有理数Dirichlet逼近定理：设r和Q是任意实数，且Q&gt;1，则存在整数p和q满足 证明：先假定Q为整数，构造Q+1个实数0，{r}，{2r}，…，{(Q-1)r}，1其中{x}=x-[x]表示x的分数部分，均位于区间[0,1]内，划分[0,1]为Q个区间[,)，u=0,1,…,Q-2，[1-,1]由抽屉原理，至少有两个数落在同一区间，故存在整数r₁,r₂,s₁,s₂，其中1≤r₁,r₂≤Q-1，且r₁≠r₂，同时有 不失一般性，假设r₁&gt;r₂，因此可取q=r₁-r₂、p=s₁-s₂，则可得所求不等式。若Q非整数，则设Q₀=[Q]+1，重复上述操作，使用不等式Q₀&gt;Q即可证明一般情形。证毕由于上述不等式的Q是任意选取的，q是大于1的，因此可以进一步的到特殊情形 选取Q任意的大，则意味着任何实数都有任意逼近的有理数，具体的构造就如之前所举的例子，不断选取子级数即可，我们接下来看看一些具有普遍适用性的展开式。 连分数连分数看似是一个唯一不依赖分析的展开，但实际并非如此，除非是有规律的连分数，否则连分数的构造依赖于由其它展开所得到的值。所谓的连分数，指的如下的式子 这样的表达比较繁琐，通常情况下我们提取关键信息，用Pringsheim记法来表示连分数，选取连分数的n节，称为连分数的第n次渐近分式，简记为，对于渐近式存在递归公式，使用渐近分式可以构造无穷级数，比较简单就不加赘述了。均等于1的连分数称为普通连分数，可以证明所有的收敛连分数均存在唯一的普通连分数表示，所以以后我们均以普通连分数来表示连分数，对于其第n次渐近分式记为，由之前的讨论可以实数与普通连分数可以一一对应，且有理数对应有限连分数，无理数对应无限连分数，构造过程可以从小数开始不断取整取倒数来递归构造，所以我们重点来讨论普通连分数，连分数有比较丰富的逼近理论，但也就那些，挖掘不了更多的东西，所以我们就说说一些特殊的连分数。我们先看一些连分数的特例 我们发现有些连分数存在循环的结构，一般的，对连分数，若存在自然数N和k使得，对任意的t&gt;N，均有，其中A%B表示A除以B所得的余数，则其为循环连分数，并简记为，其中，上述例子即可如下表示 有关连分数，我们给出一个显然的定理，证明就直接跳过了循环连分数定理：实数x可以展开为循环连分数的充要条件是x是某个整系数二次方程ax²+bx+c=0的无理数根。 幂级数展开幂级数展开即通过泰勒定理实现的展开式，泰勒公式本身是比较复杂的，我们实际需要的只是其无穷级数的表达，即函数的拉格朗日(Lagrange)展开式，任何一本微积分教程都有叙述，所以我们就简单地拿出其结论来。实数情形：若f(x)在点x=x₀处有任意阶导数，则对x₀可导领域内的x有 泰勒级数有个很关键的点是，在特点点领域内有无限阶导数，这样就可以用此点导数值的有理运算来计算逼近了。通常x₀要选择便于计算的值常用的是x₀=0，这样就有一系列的公式 这里举了一些常见的例子，指数函数和正余弦函数都是全纯函数，对于x没有必要限制，ln(x)在x=0处没有定义，因此需要进行一定的平移，另一个函数同理，实际上对孤立奇点，在复数域内可以用洛朗级数来展开，在复数完备性那里提过。复数情形：设f(x)和在区域C内和C的边界上解析，a为C内的一点，存在C上的一点ξ使得使得参数t满足|tφ(ξ)|&lt;|ξ-a|，且有恒等式z=a+t，则有展开式 在这里t是一个单纯的参数，没有多余的意义，但z是受到上述方程约束的，我们拿以下例子来说明令，通过约束方程z=a+t可以得到 令f(z)=z，则有展开式 在这个例子里，虽然t看起来是参数，但与泰勒一对比就可以发现，t才是真正的自变量。不过实际上这个公式用的也不多，复变函数用的更多的是洛朗级数，所以也不过多介绍了。 分式展开此类展开主要针对半纯函数，其核心部分是Mittag-Leffler定理，我们不加证明的直接给出结论。米塔格-累夫勒定理：设半纯函数f(z)的极点为a₁,a₂,a₃,…，0&lt;|a₁|≤|a₂|≤|a₃|…，如果存在具有下列性质的简单闭曲线(以后简称为围道)列{Cₙ}:(1)当n→∞时Cₙ到原点(z=0)的最近距离Rₙ→∞，但lₙ/Rₙ有界，lₙ是Cₙ的周长(2)在Cₙ上 p为某最小非负整数，M为与n无关的正数，则f(z)有如下的展开式 其中 是f(z)在aₙ的主部， ■ 这个定理对全纯函数而言，可以看成在z=0处的泰勒级数，但其与洛朗级数是不同的，可以从条件和结论进行对比可得，而且还有许多参数都是待定计算的，我们举一个简单的分式展开例子 显然这和泰勒级数是完全不一样的形式，实际上cot有0&lt;|z|&lt;π上的幂级数(洛朗级数)展开 其中是伯努利(Bernoulli)数，其生成函数是 当然还可以通过递归来计算伯努利数 大于1的奇伯努利数均为0，其余的偶伯努利数则通过公式来计算，通过两种展开式相等的特点可以计算黎曼函数的某些值 乘式展开函数乘式展开可以用于半纯函数，可以通过Weierstrass定理得到，至于无穷乘积的收敛性质，可以通过取对数变为无穷和来讨论，我们就不过多说明了。魏尔斯特拉斯定理：设f(z)在有限区域内无本性奇点，其零点(或极点为)a₁,a₂,a₃,…，0&lt;|a₁|≤|a₂|≤|a₃|…，则f(z)有无穷乘积展开式 其中G(z)是一个整函数，G(0)=0;gₙ(z)是一个适当选取的多项式，它使得无穷乘积在任意有限区域内，除去极点以外，绝对且一致收敛;mₙ是零点(或极点)的阶，对于极点使用负数来进行区别。■与前一个定理一样，这也是一个存在性定理，具体的参量需要特别计算。有个整函数的特殊情形，可以直接计算得到定理：设整函数f(z)只有不为零的一阶零点a₁,a₂,a₃,…，，且存在围道序列{Cₙ}，在其上有，M为与n无关的正数，则f(z)有无穷乘积展开式 其中每个因子只在一点为零，可以称其为整函数f(z)的因子。■这里看起来好像条件变多，但实际上不然，比如极限式保证函数有无限个零点，对于有限零点的整函数，实际上只有多项式，注意我们考虑的是复数域，而另一个f(z)的限制条件，使得我们可以直接用f(z)来构成我们需要估计的参函数，所以实际上反而变简单了。我们举一个具体的例子 利用乘积展开和sin(z)的泰勒展开，不严谨地使用韦达定理，我们可以得到黎曼函数ζ(2)的值。 渐进展开这并非什么新的东西，渐进展开即当参数足够大时函数的近似表达式，通常都应用于积分计算之中，比如设函数 则f(x)有渐进表达式展开 ～ 其中～表示两者比值的关于n的极限趋于1，即等价的意思。这部分没有什么比较统一性的定理，所以在这里也算是提出这么一种展开思想，如我们之前所说展开式理论上是无穷的，我们寻找的往往是具有普遍适用性的，有些特例拿出来就只是为了说明可以这么展开罢了，下面说一个特例定理，主要针对Laplace积分Watson定理：若是定义在|arg t|&lt;θ内的单值解析函数，当t→∞时，b为实数，而当t→0时 ～ 则有渐进展开式 ～ |z|→∞,|arg z|≤π/2-δ,δ&gt;0其中Γ(s)为伽玛函数，为阶乘的解析延拓。■没什么好说的，值得注意的是渐进展开不一定收敛，因为余项趋于零的级数不一定收敛，调和级数是一个典例。 正交函数组展开设有一组连续的函数，a≤x≤b，定义权为ρ(x)&gt;0内积运算 其中是的共轭复数，若对所有的自然数m,n有 则称是正交归一的。最常见的一个例子就是我们在傅里叶级数中用到的，其中n为整数，其权函数为恒为1的常函数，当然这是傅里叶级数的复数情形，但与三角情形是完全等价的，可以通过欧拉公式完成转化。为了深入理解，我们多举一些正交函数列的例子，先介绍一个常用的函数，超几何函数通过幂级数来定义 其中(q)ₙ为Pochhammer符号，定义为 其中Γ(s)为伽玛函数。简便起见，我们直接将超几何函数记为F(a,b,c,z)，其中a,b,c为参数，由此我们可以定义一组函数Gₙ(α,γ,z)=F(-n,α+n,γ,z),n∈N称其为雅可比多项式，其正交性由以下积分给出 虽然没有满足归一条件，但实际上对于线性无关的基是有正交对一化手续的。那么找到正交归一化的函数列有什么用呢？学过线性空间的应该知道线性空间的一个基本定理，线性空间中的任何元素都可以用一组基来线性表达。于是有一个自然的想法，我们可以将满足特定条件的函数来构成一个函数空间，并拥有线性空间的性质，于是可以运用基来表达所有函数了，而基呢，正是我们的正交归一函数组，不过其不是一般的欧式空间(有限维)，而是其推广希尔伯特空间(无限可数维)，对于实变函数而言函数的共轭等于其本身，雅可比多项式是一个很好当然例子，我们稍微介绍一下实变函数中的函数空间定义：设f为E⊆Rⁿ上的Lebesgue可测函数(1)记 ,1≤p","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"逼近","slug":"逼近","permalink":"http://example.com/tags/%E9%80%BC%E8%BF%91/"}]},{"title":"自己的选择好累啊","slug":"自己的选择好累啊","date":"2022-04-24T15:52:24.000Z","updated":"2022-10-14T23:47:09.494Z","comments":true,"path":"archives/2022-04-24-自己的选择好累啊/","link":"","permalink":"http://example.com/archives/2022-04-24-%E8%87%AA%E5%B7%B1%E7%9A%84%E9%80%89%E6%8B%A9%E5%A5%BD%E7%B4%AF%E5%95%8A/","excerpt":"","text":"“不懂得如何选择，不懂得安排自己人生，就会有资本家来决定你的人生。”——bilibili大学 一个由cocos2dlua转为unity3D的游戏，代码构建的过程比较绕，目前已经从il2cpp研究到了tolua，但没有il2cppdumper提供对照表，阅读起来十分困难，能否成功找到加密代码并复写解密代码是一个未知数。","categories":[],"tags":[]},{"title":"认识Unity引擎","slug":"认识Unity引擎","date":"2022-04-20T04:46:24.000Z","updated":"2022-10-14T23:47:09.528Z","comments":true,"path":"archives/2022-04-20-认识Unity引擎/","link":"","permalink":"http://example.com/archives/2022-04-20-%E8%AE%A4%E8%AF%86Unity%E5%BC%95%E6%93%8E/","excerpt":"","text":"对于个人而言，在游戏开发的过程中，最缺的可能就是游戏素材了，素材的获取途径是多样的，但往往我们都是在某个游戏之中发现某个想要的素材，所以游戏解包成了我们需要的技能之一，如今大部分手游的开发引擎都是Unity(对apk拆包就可以在lib下发现libunity.so)。“知己知彼，百战不殆”，所以在拆包前，我们需要从整体上认识Unity的架构，虽然Unity对免费用户并不开源，但许多类似的思想是不会改变的，不会影响我们的理解。 从开发的视角看UnityUnityHub是一个没用的玩意，不用管它，我们重点来研究UnityEditor。Unity对我来说是一个闭源项目，所以要想研究Unity，只能从官方文档和工程目录开始研究。 官方文档Unity的文档总共有两部分，用户手册和脚本API，前者是基本属于整个UnityEditor软件的操作手册，后者则是脚本开发的API查询手册，虽然其并没有告诉我们Unity的架构，但我们可以以此作为依据了解个一二。一般的游戏引擎由软件库加头文件组成，比如我们的cocos2dx，这类引擎使用起来和一般的第三方库区别不大，但这种开发方式存在开发语言的依赖性，比如跨平台的库基本都是用C/C++写的。在我使用的Unity2020里面，只有唯一的脚本语言C#，又由于Unity的跨平台性，我们有理由猜测Unity是运行在mono上的，事实也确实如此。mono是一个开源的C#运行环境，通过对Unity程序的考察，大致可以猜出Unity的底层API基本都是C/C++写成，再通过mono(可以看成一个C/C++库)得到在C#的接口，这是Unity的核心部分。至于UnityEditor则是一种辅助进行可视化开发的工具，或者说这是Unity的核心竞争力之一，深入搞过Unity的应该都知道C#脚本拥有极大的控制权，甚至是UnityEditor的界面。 工程目录 我们直接从软件内部来看工程，是因为重要的操作部分已经被显示了出来，实际的工程目录应该长这样 大部分是配置相关，在Editor内也可以完成操作，所以作用不大，值得关注的是里面的VisualStudio工程文件sln和csproj。它实际是Unity脚本编写的核心配置文件，虽然与编译相关，但并非用于编译，编译的核心工具链在UnityEditor安装目录下，更常见的情况是依据不同平台直接使用外部的SDK。Assembly-CSharp主要管理与我们游戏相关的脚本，Assembly-CSharp-Editor管理与我们编辑器相关的脚本，后者的报错是不会影响游戏的生成，因为它就相当于Unity的插件一样，顶多插件导入失败。Packages即外置包，相当于我们平时开发使用的第三方库，Unity是面向资源(一种比喻)的开发，包就相当于资源的打包，实际就是在Unity商店里下载的unitypackage，区别在于使用unitypackage导入会让它确实的在这里，而packages里则是一种引用，要在PackagesManager里进行管理 至于包的内容就是Assets目录下的内容，可以是各种Unity型的文件，不仅可以对游戏进行各种控制，还能控制整个编辑器 导入相应包后 显然unity的功能变多了。 Unity开发理念这是我自己的理解，Unity应该属于面向资源的开发，资源是对所有Unity型与一般资源的总称，一般资源如图片的png等没什么好说的，我们主要来研究Unity型资源。.unity是场景(Scene)文件，实际就是记录整个页面信息的文件，可以用文本编辑器打开看到里面的内容，而UnityEditor就是以场景作为编辑器的一次打开单位，实时渲染当前的场景 与基本所有引擎一样，场景的组织实体的方式也是树，根节点是当前的场景，内部的实体都是GameObject，其中蓝色的代表Prefab，即一种可以反复利用的实体。对于每个GameObject可以通过右边的Inspector看到它的Component，一个实体由多个Component组成，最基本的Component是Transform，表示实体的位置、旋转和缩放。这是一种游戏资源的组织方式，正是不同的Component组成才表明了这个GameObject与其它的是不同的。在Unity中，添加GameObject有很多类型，但实际都是一样的，只是组织了不同的预设Component。想要了解游戏引擎的基础内容，我推荐这个，搜索这个作者可以找到他一步步构建这个引擎的过程，使用的是OpenGL，十分适合想要了解底层原理的人。.cs是开发的脚本文件，整个引擎最重要的部分之一，没有脚本的程序是没有生命力的，有脚本进行逻辑控制，游戏才能称之为游戏，但脚本的生命周期应该才是我们最应该关心的东西 在进行编译的时候，基本单位是Scene，最右边表示Scene的标号，游戏启动的时候会最先加载编号为0的场景，场景切换需要使用脚本，可视化界面基本找不到完成的方案。脚本最基本的用法是，挂载到GameObject上 从中我们可以看到，脚本通过Script这个Component挂载到实体上，但脚本必须是MonoBehaviour的子类(不挂载，做为引用的话自然就无所谓了)，而这个类的正好就给出了整个脚本的生命周期，看看官方文档 比如OnStart是脚本第一次被唤醒是执行的方法，OnUpdate则是每帧执行一次的方法等 Unity脚本的库看似有4个，实际常使用的只要两个，UnityEngine和UnityEditor，前者是游戏开发使用的库，后者是对编辑器的改造，主要用于开发插件，Unity里的都是渲染相关的理念如Jobs等，它与Other基本就没怎么用过，根本就没空去了解它们。除了以上两个，其它资源都没什么好说的，如.shader表示着色器，.anim表示动画等，讨论它们如同讨论图片的各种格式一样，都只是资源的在Unity里的表现形式，都可以嵌入GameObject中罢了。 从用户的视角看UnityUnity的编译配置挺复杂的，但经过多次实验，编译后文件的差距都不会太大，包括Unity2018平台(大多游戏都是这个版本)，区别较大的是mono脚本编译和il2cpp编译(我们后面讲，接下来都以mono为例) Windows在Windows平台下，我们可以得到以下这些文件(选中的) exe是我们的主程序，UnityPlayer.dll则是我们引擎的主要运行库，MonoBleedingEdge包含了mono运行的dll和相关的配置，这些基本都是我们无法控制的固定文件，Unity是面向“资源”的开发，我们的目的是找到这些“资源”，进入“_Data”，我们有 Managed存储了一系列的dll动态库文件，但你会发现Android版的也会有这些，这里就不得不提一下mono了，你可能会说后缀名代表不了什么，但对两种dll进行16进制分析 可以看到文件头是基本一致的，这足以说明它们是同一类的二进制文件。玩过linux的可能知道，mono在linux上可以作为window运行工具，不过是有限制的，只有在.net平台下开发的程序才有效，所以更多的时候用的都是wine。mono实际上就是一个模拟.net框架的东西，将它称为C#的开发工具并不合适，mono编译的结果与.net是一样的，mono真正的意义是模拟.net，使得.net可以存在于多个平台上。我们所见的这些在Managed中以UnityEngine开头的dll就是Unity的C#接口所对应的动态库，所以对于不需要的库，随手删掉也不会影响程序的运行，不过内存也不大，删不删也无所谓了 Resources并不是asset，存储的都是Unity系统自带的资源，属于不可控的部分，在Data下真正与我们开发Assets相关的，可以控制的其实只有globalgamemanagers和level，前者是资源打包，后者是我们的场景 我们打开Level0即场景SampleScene，发现它们的结构是一模一样的，排除系统的资源，我们还能找到我们的脚本文件 从整体上来看，真正需要解包的东西看样子并不多嘛？ android以笔者现有的物质基础，只能再看一个安卓了 一个中规中矩的安卓程序，如我们之前所说在Managed下确实有一系列的dll，作为mono环境下的unity库。在lib库下，与windows时一样有两个mono库，作为C#环境，libunity.so是引擎库，而main.so是程序的入口，通过对apk的反编译分析 再反向分析so文件 综合来看，main.so就是起到了入口作用的C/C++程序，类似exe文件？安卓属于嵌入式系统，有一套比较复杂的程序管理系统，mainifest用于声明文件的配置，其实如果要用C/C++作为入口的话，应该可以使用NativeActivity，但很多引擎都不会这么做，包括cocos2d，其实原因不太复杂，很多API在java层才有，主要是framework下的东西，比如安卓桌面就是运行在java层下的 比较不同的是，在安卓下资源全都打包到了.unity3d下，但实际也不复杂，它把所有的场景都包含了进去，至于为什么两个系统有两种存储方式，我不知道，也不重要。 Unity的常用工具以上都是比较理想而简单的情况，实际开发中往往会加入各种东西，使工程变得十分的复杂，而且大多商业使用的公司基本都会有unity的源码，可以进行各种修改，或加入其它的库，分析会变得无比艰巨。但我们应该想起自己的目的——资源的解包，多于无关的东西就可以无需花费精力去研究了，我们来看一看最常用的两个辅助工具，AssetBundle和Il2cpp，它们代表了Unity最重要的两部分内容。 AssetBundleAssetBundle主要用于资源的打包压缩，有助于资源的管理和热更新，开发中的使用可以参考官方处，基于我们的目的，我们主要看一看它到底对输出程序产生了什么影响，拿一个常见的游戏为例 这里面的成分比较复杂，有许多外置的东西，我们肯定实验不出来，但我们发现了一个内存的大头StreamingAssets，它包含了几乎整个游戏的内存，这个实际就是使用AssetBundle后的资源存放文件，但在大多游戏里文件夹其实叫做AssetBundle，名字不是很重要，重要的是内容，由于这个游戏比较复杂，我们挑一个其它“受害者” 实际开发中的资源是大量的，按照传统的方式资源将全挤在一个文件内，从读取效率上来看是十分慢的，AssetBundle一个显著的作用就是将资源实现在封包中的分散，这样就可以通过文件系统的快速索引来读取资源，效率大大提高。分散存储还有一个好处就是可以进行部分更新，可以在本地记录一个资源的版本号，与服务器最新版本号进行比对修改，可以不更改旧资源情况下，更新添加新资源，机制有点类似于git，这样还可以有效地实现资源的热更新。总之它的作用就这样，也不是很复杂。 Il2cppIl2cpp是不同于mono的一种对C#脚本的处理方式，在程序编译的时候可以进行选择 这里是官方的介绍，Il2cpp的作用就是将C#代码转化为不依赖虚拟机的运行更加高效的cpp代码，以下是原来mono下脚本的运行架构 使用Il2cpp后的架构如下 目前只在手游中发现这种方案，对于windows系统来说.net的代码可能本身比较原生，运行效率也不一定就低。而在输出程序上 多了一个il2cpp文件夹，但其实它只保存了配置文件，在Managed下的C#库dll文件也没有了，取而代之的是在lib下 少了mono的库，多了一个libil2cpp，但注意它不是运行库，而是我们从C#转化的cpp编译生成的原生代码。不过嘛！代码与我们目标的资源关系不大，就不过多研究了。对Unity的了解应该足够深入了吧？","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"引擎","slug":"引擎","permalink":"http://example.com/tags/%E5%BC%95%E6%93%8E/"},{"name":"游戏","slug":"游戏","permalink":"http://example.com/tags/%E6%B8%B8%E6%88%8F/"}]},{"title":"正义人士与反抗人员","slug":"正义人士与反抗人员","date":"2022-04-17T23:04:34.000Z","updated":"2022-10-14T23:47:08.084Z","comments":true,"path":"archives/2022-04-18-正义人士与反抗人员/","link":"","permalink":"http://example.com/archives/2022-04-18-%E6%AD%A3%E4%B9%89%E4%BA%BA%E5%A3%AB%E4%B8%8E%E5%8F%8D%E6%8A%97%E4%BA%BA%E5%91%98/","excerpt":"","text":"“正义人士”不可怕，可怕的是有技术的“正义人士”，但从目前来看，都只是嘴上厉害的人罢了。","categories":[],"tags":[]},{"title":"数学探索之数其二","slug":"数学探索之数其二","date":"2022-04-15T08:16:16.000Z","updated":"2022-10-14T23:47:08.068Z","comments":true,"path":"archives/2022-04-15-数学探索之数其二/","link":"","permalink":"http://example.com/archives/2022-04-15-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%95%B0%E5%85%B6%E4%BA%8C/","excerpt":"","text":"分析就是无理数的“四则运算”，级数就是无理数的“表达方式” 接下来我们将研究最常见的两个无理数e和π，并证明它们的无理性和超越性。我们引出一个问题e和π的定义是什么？当你知道这一点的时候，你就会发现接下来的证明是如此的自然。 e是无理数证明：首先e的“定义”是，使用反证法，假设e是有理数，则存在整数a和b，使得，变形得 ，∀n∈N 方程的右边是一个整数，而左边为 其中显然是一个整数，而对另一部分 所以当n充分大时，即超过确定的数b时，等式的左边非整数，矛盾，所以e是无理数。证毕类似的证明可以扩充到e的幂上，但比较繁琐，所以我们将介绍另一种证明e的幂是无理数的方法引理：对于某个确定的整数n≥1，令 则有(1)函数f(x)是一个多项式，且形如，其中均为整数(2)当0&lt;x&lt;1时，有(3)对所有的k≥0，微分取值和均是整数。上述这些性质对于确定的函数f(x)来说，是可以直接计算来证明的，所以不进行过多的赘述，我们依据这个函数的性质来完成我们的证明定理：对任意的r∈Q{0}，是无理数。证明：由于有理数的整数次幂仍然是有理数，所以我们只需要对任意正整数s，是无理数即可。假设存在正整数a，b使得，取足够大的n使得，然后定义函数 容易证明F(x)有如下的恒等式 于是我们可以得到 所以我们可以得到积分值 由引理可知N是一个整数，但另一方面 与N是整数矛盾。证毕总之，证明十分的“莫名其妙”。 π是无理数实际上证明π²是无理数，就是利用有理数的性质反证π是无理数，一举两得的事做起来效率会提高很多π²是无理数的证明：同样利用上面的函数，假设存在正整数a，b使得，构造多项式 我们可以得到恒等式 即 于是可以得到 即N为整数，另一方面有 与N是整数矛盾。证毕如果非要直接证明π是无理数的话，也可以使用类似的方法，只不过f(x)的形式要稍微改变一下，我们直接给结果，验证部分直接跳过π是无理数的证明：假设存在正整数a，b使得，构造多项式 和 积分值 为整数，但 矛盾。证毕 e是超越数在证明之前，我们同样需要构造一个特殊的函数引理：设，其中p&gt;n是一个素数，则(1)当j&lt;p-1时，(i=1,2…,n)(2)当j=p-1时，(3)当j&gt;p-1时，和(i=1,2…,n)都是p的倍数。简单的验算过程就不做了，我们直接进入超越性的证明证明：假设e是代数数，则有n次整系数方程 依据上面的f(x)，我们构造函数 则有恒等式 让b不断地乘系数求和可得 由引理可知，等式的右边为非零整数，但左边 其中除了质数p均是有限的数，因为素数有无限个，上方指数增长慢于下方阶乘增长，所以足够大的p可以使式子小于1，与式子为非零整数矛盾。证毕 π是超越数π是超越数的证明依赖于Lindemann定理、欧拉公式和e的超越性，主要因为π的分析特征不如e那么简明，我们把其中的核心部分抽取出来，就能得到π是超越数分析证明，依照惯例，我们需要构造一个函数引理：设aα₁,aα₂,…,aαₙ₋₁,aαₙ的基本对称多项式都是整数(即它们是某个整系数多项式的根)，p是一个素数 则可以得到 是一个整数，且(1)当j&lt;p-1时，和都等于0(2)当j=p-1时，是个非零整数且整除(p-1)!，但不整除p!，(3)当j&gt;p-1时，和都是p!的倍数。或许验证起来比较“简单”吧，但过程都比较机械，所以这方面的证明没什么好写的，下面进入正题证明：假设π是代数数，我们不直接以此构建多项式，记θ=iπ，则θ也是代数数，故满足多项式方程 令a=aₙ≠0，θ₁=θ,θ₂,…,θₙ₋₁,θₙ是方程的所有根，由欧拉公式可得，故有 展开后，R总共有2^n项，设有q=2^n-l项为1(即e指数为零)，设R的形式为 (e的指数均非零) 得到l后，我们可以构造f(x)了 和积分 和用于判断的数值 其中s=lp+p-1表示f(x)的次数，由引理可知J整除(p-1)!，故为非零整数，但另一方面 其中是多项式f的系数全换为绝对值时的情况，总之推出矛盾，假设不成立。证毕 相关定理在本文的最后，我想给出一些有用的定理，它们将有助于我们以后的判断。Lindemann–Weierstrass定理：是互不相等的代数数，则在代数数域上线性无关的。这个定理的证明比较长，可以在任何一本超越数论的书籍里找到，我们只简要地说明一下思路。 在代数数域上线性无关的，相当于对任意的代数数∈A，都有。 在中恰有p个数在有理数域Q上线性无关，那么它应该有p个代数数，使得对任意的均存在p个数(整数域)，有。然后开始使用反证法，假设，则有构造p元多项式设使得Q是代数数系数多项式，G是代数整数(最小多项式(在整数域Z上)是首一多项式)系数多项式。由G的系数和张成数域K，再设[K:Q]=h，G的总次数为d。选取充分大的自然数f使得。最后我们通过多项式的复杂性质推导，即可证明这个式子不成立，从而证明定理。Gelfond–Schneider定理：若α,β为代数数，α≠0,1，β不为实有理数，则为超越数。这个定理与希尔伯特第七问有密切的关系，Gelfond和Schneider分别独立地证明了这个定理，证明需要复分析，挺繁琐的，过程在这里，去底部可以找到论文。无理数和超越数的证明没有什么系统的理论，基本都是使用定义与分析的方法，推出不等式上的矛盾来证明的。因为看起来没那么“高大上”，现在也没什么人去研究了，说到底，它还是太过于“基础”了。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"无理数","slug":"无理数","permalink":"http://example.com/tags/%E6%97%A0%E7%90%86%E6%95%B0/"}]},{"title":"灯里酱与朋友","slug":"灯里酱与朋友","date":"2022-04-12T23:54:28.000Z","updated":"2022-10-14T23:47:08.085Z","comments":true,"path":"archives/2022-04-13-灯里酱与朋友/","link":"","permalink":"http://example.com/archives/2022-04-13-%E7%81%AF%E9%87%8C%E9%85%B1%E4%B8%8E%E6%9C%8B%E5%8F%8B/","excerpt":"","text":"这一季度还是有不少有趣的东西 叫“XX游戏”的感觉都不错 如果充满了心理战的话并不是很喜欢 原版作画 感觉与动画的有些细微的差异","categories":[],"tags":[]},{"title":"数学探索之数其一","slug":"数学探索之数其一","date":"2022-04-10T03:50:41.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-04-10-数学探索之数其一/","link":"","permalink":"http://example.com/archives/2022-04-10-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E6%95%B0%E5%85%B6%E4%B8%80/","excerpt":"","text":"数学从名字上来看，就是关于“数”的学问，不过英语看不出来就是了，所以对数有一个清晰的认识是十分重要的。在这一篇中，我们要说明两个事实，实数的完备性和复数的代数封闭性，我们先回忆一下几个简单的集合记号，自然数集N、整数集Z、有理数集Q、实数集R、代数数集A、复数集C。 实数的完备性实数分为有理数和无理数，对于有理数Q的基本特点，我们的认识是十分清楚的，比如可以将Q看成一个无限的素域，Q中的数有个十分良好的特性是，所有的数都可以用自然数来有限表示，而自然数的构造又有各种公理，如皮亚诺(Peano)公理，又或者用集合基数来构造。所以实数中的难点在于无理数，从有理数到无理数的过渡。实数的构造是接下来讨论的一个重点，我们还会揭示实数的性质要通过分析的性质来表现，分析之于实数就如四则运算之于有理数。 康托尔(Cantor)的实数构造法学过分析的都知道，无限序列是最基本又最重要的概念之一，所谓序列就是自然数到实数的函数映射，因为我们还没有定义实数，所以定义有理数序列(rₙ)为自然数到有理数的映射f(n)，n∈N。定义：设(rₙ)是有理数序列，如果存在有理数l，使得对任意给定的正有理数ε，都可以找到自然数N=N(ε)，当自然数n≥N时均有 则称l是序列(rₙ)的极限，或称序列(rₙ)收敛到l，记为。定义：设(rₙ)是有理数序列，如果对任意的正有理数ε，都可以找到自然数N=N(ε)，使得对一切不低于N的自然数m和n，均有 则称(rₙ)是一个有理数基本序列。学过分析的可以看出，这两个定义分别是有理数版的数列极限定义和柯西(Cauchy)收敛定理，但在有理数内，并非所有的基本序列(注意与序列的区别)都是收敛的，换句话说，在这种性质下，有理数是不完备的。为了满足柯西收敛定理，我们迫切需要扩充有理数，以达到完备的目的。 实数的定义不同的收敛序列有可能可以收敛到同一个数，所以我们有必要先引入一个等价关系定义1：设(rₙ)和(sₙ)都是有理数基本序列，如果则称(rₙ)和(sₙ)是等价的，记为(rₙ)～(sₙ)。令所有有理数基本序列组成的集合为M，则等价关系“～”可以把M分为若干个的等价类，如有理数基本序列和都收敛到0，属于M的同一个等价类。定义2：有理数基本序列的集合M，按等价关系“～”划分的每一个等价类称为一个实数。将一个等价类定义为实数，你可能会不太习惯，但实际我们之前就已经这样做过，如Z₇是模7运算的域，里面的每个元素都是模7运算的等价类。实数也是同理的，和都可以称为实数中的0，而每一个序列可以看作这个实数的代表元素。我们将收敛到有理数的等价类称为实有理数，没有收敛到有理数的等价类称为实无理数。这与传统的定义是不同的，拥有更加丰富的性质，定义上也更加严谨。 代数运算为了说明这样定义的实数确实是原来有理数的扩充，我们需要它能保持在有理数中的运算性质，即域所对应的性质。然后仔细考虑的话，不就是数列极限的性质吗？这确实都在分析中证明过了。我们先来定义域中的加法运算，但在此之前，需要证明唯一性，使它确实是一种运算引理1：如果(rₙ)和(sₙ)都是有理数基本序列，则(rₙ+sₙ)也是有理数基本序列。 引理2：设(rₙ)、、(sₙ)、都是有理数基本序列，若(rₙ)和等价，(sₙ)和等价，则(rₙ+sₙ)和等价。 极限的证明都属于比较基础的东西，记住ε加任意正系数均等价即可。加法的定义：设实数α是以有理数基本序列(rₙ)为代表的等价类，实数β是以有理数基本序列(sₙ)为代表的等价类，则称以(rₙ+sₙ)为代表的基本有理数序列为实数α和β的和，记作α+β。注意这里揭示了一个很重要的事实，实数的运算相当于等价类中一个代表的运算，但代表往往都是无限的，所以实数相关的证明可能是十分多样复杂的，最后的这个定理就不证明了加法的定理：实数的集合R关于加法是一个交换群(Abel群)。有理数与实有理数进行对应也是很简单的，设r是一个有理数，(r₍ₙ₎)表示全是r的常序列，则(r₍ₙ₎)的等价类构成有理数r在实数中的对应，显然(r₍ₙ₎)收敛于有理数r，是一个实有理数，所以有理数与实有理数是一一对应的，于是这个加法交换群的单位元就是(0₍ₙ₎)的等价类。乘法可以进行相应的定义，不过证明的时候需要用到收敛序列的有界性，详细可以参考分析的相关内容，这里我们直接给出结论。引理3：如果(rₙ)和(sₙ)都是有理数基本序列，则(rₙsₙ)也是有理数基本序列。引理4：设(rₙ)、、(sₙ)、都是有理数基本序列，若(rₙ)和等价，(sₙ)和等价，则(rₙsₙ)和等价。加法的定义：设实数α是以有理数基本序列(rₙ)为代表的等价类，实数β是以有理数基本序列(sₙ)为代表的等价类，则称以(rₙsₙ)为代表的基本有理数序列为实数α和β的积，记作αβ。乘法的定理：实数的集合R{(0₍ₙ₎)}关于乘法是一个交换群(Abel群)。为什么要排除零元，理由不过多解释，接下来很容易验证分配律，于是得到了我们最终的结论定理1：实数集合R对于上述定义的加运算和乘运算是一个域。 序有理数还有顺序的性质，在实数中，我们也可以相应的定义它，而在分析中对应的实际是保号性的证明，我们先来定义实数中的正数正有理数基本序列的定义：有理数基本序列(rₙ)称为是正的，如果存在正有理数ε₀和自然数N，使得当自然数n≥N时，均有。引理5：正有理数基本序列的等价类都是正有理数基本序列。基于这种共同的性质，我们可以完成我们的需求了正实数的定义：由正有理数基本序列的等价类确定的实数称为正实数。记所有正实数的集合为R₊，再记R₋={-α | α∈R₊}，-α是α在加法交换群中的逆元，我们以下的实数划分定理定理2：(1)(0₍₀₎)∉R₊且(0₍₀₎)∉R₋；(2)R₊∩R₋=∅；(3)R=R₊∪{(0₍₀₎)}∪R₋我们成R₋中的元素为负实数，则实数可以划分为三个互不相交的类，正数、零和负数。以此为基础很容易定义出大小关系序的定义：如果α-β是正实数，则称β小于α，记为β&lt;α。这个定义可以构成有序域，而且按照我们之前的对应关系，可以将有理数的序与实有理数的序形成一一对应。定理3：有理数域Q与实数R的实有理数子域同构，所以R是Q的扩张。 完备性对于实数，我们最后再定义一个绝对值运算 为了方便以后直接把(0₍₀₎)记为0，两者的对应关系我们已经说明过了，容易验证它与有理数绝对值有类似的性质。这样我们就有了序和绝对值，我们可以开始着手定义实数的基本序列和收敛了定义：设(ρₙ)是实数序列，如果存在实数ρ，使得对任意给定的正实数ε，都可以找到自然数N=N(ε)，当自然数n≥N时均有 则称l是序列(ρₙ)的极限，或称序列(ρₙ)收敛到l，记为。定义：设(ρₙ)是实数序列，如果对任意的正实数ε，都可以找到自然数N=N(ε)，使得对一切不低于N的自然数m和n，均有 则称(rₙ)是一个基本序列。首先我们有以下定理定理4：若有理数基本序列(rₙ)∈实数ρ，则(rₙ)收敛到ρ。这个定理说明了，在有理数和实数的两种定义是一样的，进一步说明了在收敛性质上，实数也是有理数的扩张实数的完备性(柯西准则)：实数序列极限存在的充要条件是它是一个基本序列。 戴德金(Dedekind)的实数构造法我们在实数研究中，比较偏向于上一种定义实数的办法，因为它具有丰富的分析性质。但还有许多其它的构造法，极富创造性，稍微欣赏一下也是可以的，我们在这里介绍一下Dedekind的构造法。 实数的定义定义3：设Q是全体有理数的集合，∅是空集，X是Q的一个子集，满足：(1)∅≠X≠Q；(2)若r∈X,s∈Q,s&lt;r,则s∈X；(3)若r∈X，则存在k∈X，使得r&lt;k。则称X是一个实数。这个定义看起来挺复杂的，但实际它表示的是开区间(-∞,)，只不过它的取值只能是有理数罢了。我们考虑X在Q中的补集，若Q\\X中有最小数则称X为第一类实数，若若Q\\X中没有最小数则称X为第二类实数，我们先给出一个对应定理定理：X₀是第一类实数的充要条件是：存在有理数r₀，使得X₀={r∈Q | r &lt; r₀}。这样以后，有理数和第一类实数可以形成一一对应，所以我们可以直接称第一类实数为有理数，第二类实数为无理数。 序我们很难定义出，这种实数的运算，但如果考虑完备性的话，重点在于定义极限，我们可以绕开运算，从集合来定义极限，在此之前我们先定义一下序吧偏序的定义：设X和Y是任意两个实数，若X⊆Y，则称实数X不超过实数Y，记作X≤Y。序的定义：如果X≤Y且X≠Y，则称X小于Y，记作X&lt;Y。容易验证序的一些简单性质，如自反性，传递性等。 收敛性定义：设(Xₙ)是一个实数序列，X₀是一个实数，如果同时满足(1)对任意实数A&lt;X₀，都存在自然数N=N(A)，使得当n≥N时，有A&lt;Xₙ；(2)对任意实数B&gt;X₀，都存在自然数M=M(B)，使得当n≥M时，有B&gt;Xₙ。则称(Xₙ)是以X₀为极限的收敛序列，记作 这实际是数列的迫敛性的集合表述定义：设(Xₙ)是一个实数序列，满足：对任意正有理数ε，必有有理数r=r(ε)和自然数N=N(ε)，使得当自然数n≥N时，均有 则称实现序列(Xₙ)是基本列，其中X(r)表示有理数r，在实数中的表现(-∞,r)。有了这两个类似于之前的定义，我们就可以得到我们最后的完备性定理了完备性定理：实数序列是收敛序列的充要条件是它是一个基本列。最后稍微提一下，两种实数构造之间的关系关系定理：康托尔实数集和戴德金实数集是互相同构的，满足阿基米德公理的，完备的有序域。 实数完备的等价命题从我们的第一个完备定理(柯西准则)，我们可以推出一系列有关实数完备的定理，它们从多方面说明了实数的多种性质，但它们都是等价的，均可以引出实数的定义，均可以说明实数的完备性单调有界原理：单调有界的实数序列必有极限。区间套定理：若{[aₙ, bₙ]}是一个区间套，则存在唯一实数。确界原理：非空有上(下)界实数集，必有上(下)确界。戴德金连续性定理：设A和B是实数集R的一个划分，且A中所有元素均小于B中的元素，则要么A中有最大数，要么B中有最小数。下面的定理主要从拓扑性质上来考虑Heine-Borel有限覆盖定理：若H是区间[a,b]的一个(无限)开覆盖，则可以从H中选择有限个开区间覆盖[a,b]。Weierstrass聚点定理：实数集R中的有界无限点集必有聚点。这些定理证明不麻烦，难点在于搞清它们之间的关系，公理有哪些，哪些又是要证明的，等等。有关实数，我们其实只需记住几点，实数可以由由有理数无限逼近，实数具有分析完备性，而实数的其它性质如连续，本质上也是分析的完备性，我们通过极限产生实数的基础运算体系，而整个分析的基础正是极限，这也从另一种角度表明了，分析确实是实数的基础运算法则。想要理解实数，分析是不可避免的。 复数的完备性说完了分析的完备集实数R，让我们来看一下另一种完备集复数，它代表了代数的封闭性。 代数闭包我们同样从熟知的有理数出发，如果想要只依赖域上的运算来产生函数，那么是否存在统一的表达式呢？如果是一元函数，进行一番思考后，大致可以猜出，它应该是Q上多项式域Q[x]的分式域Frac(Q[x])，简称有理函数域，记作Q(x)。在给出各种严格定义后，实际可以从域论的角度证明。考虑函数的话，我们自然的想看看反函数如何，如对于每个有理函数f(x)∈Q(x)和有理数r∈Q，是否都存在x₀∈Q使得f(x₀)=r，显然由我们的常识就知道这是不可能的。运用基本的移项和通分，上面的问题实际等价于，对任意的多项式f(x)∈Q[x]，是否都存在x₀∈Q使得f(x₀)=0，为了方便，我们把这样x₀称为多项式f(x)的根。定义4：域K称为代数闭域，如果对于每个非常数的f(x)∈K[x]在K中有根。域k的代数闭包是指k的一个代数扩张K，且K是代数闭域。定理5：任何域都存在代数闭包。这个证明需要用交换环的理想理论，比较复杂，但这看起来如此显然，我们就不证明了。我们举几个例子，有理数域Q的代数闭包是代数数域A，实数域R的代数闭包是复数域C。注意，代数数是具体的数，指的是有理系数多项式方程的根，与域上的代数元类似，但有本质的不同。而代数数的性质，如可以构成域，且是代数闭域，是可数集，不在我们讨论的范畴。 复数域C实数域R代数数域A有理数域Q 代数基本定理代数基本定理：任何复系数一元n次多项式方程，在复数域上至少有一根(n≥1)。如果从抽象代数的语言来表述的话，就是代数基本定理：复数域C是代数闭域。不论是代数闭域，还是基本定理，我们都只要求一个根，那是因为得到一个根后，可以做多项式除法，得到低一次的方程，再运用定理，如此反复，就可以说明，n次复系数多项式方程在复数域内有且只有n个根了(重根按重数计算)，所以选择最简单的形式来便于证明。因为[C : R]=2，所以复数和实数之间没有其它域。实际上，如果只证明任何实系数多项式都有复数根，也足以推出代数基本定理。设复系数多项式∈C[x]，定义共轭方程，则容易验证∈R[x]是实系数方程。若f(x)有复根z，则z也是g(x)的复根。若g(x)有复根z，则z或者是f(x)的根，又或者是的根。若z是的根，则是f(x)的根。因此f(x)有复根，当且仅当有复根。所以实系数多项式都有复数根可以推出代数基本定理。这个证明还能推出一些有意思的推论，如奇数次实系数多项式必有实根。 复分析证明复数是实数的扩域，实数离不开分析，复数也是同理的，复数只有在分析上才能看清其许多性质，但篇幅有限，我们不再反复定义极限、可导、可积之类的东西了，复数的比较性质要通过类似绝对值的模转化为实数来实现，在拥有了比较性质和绝对值性质以后，复数域就可以轻易的开始定义分析概念了，我们只讲复数特有的性质和概念。 基本分析性质我们将连通开集称为区域，没有自交点的曲线称为简单曲线，对于区域D，其边界为简单闭曲线C，记闭区域=D∪C，区域D内部的任何一条简单闭曲线的内部都属于区域D则称D为单连通区域，不是单连通区域的区域称为多连通区域，极限、可微(可导)、可积都可以很容易在区域上定义出来，我们考虑一些其它的东西。在一点解析表示在这一点的某个领域内处处可导，区域(开集)内的解析函数(或全纯函数)即在整个区域内处处解析，不解析的点称为奇点，解析是比可微更强的条件，在整个复平面上解析(全纯)的函数，称为整函数。可导(可微)：函数f(z)=u(x,y)+iv(x,y)在z=x+iy处可导的充要条件是u(x,y)、v(x,y)在点(x,y)处(实)可微，且满足柯西-黎曼(Cauchy-Riemann)方程(简称C-R方程): 解析：函数f(z)=u(x,y)+iv(x,y)在区域D内解析的充要条件是u(x,y)、v(x,y)在D内处处(实)可微，且满足C-R方程。对于这个C-R方程，有没有觉得很像，平面曲线积分与路径无关的条件，确实如此，解析也有类似的性质，我稍后一些会讲到。实际上，u和v还同时满足拉普拉斯(Laplace)方程，互相称为对方的共轭调和函数。 基本分析定理柯西积分定理：设f(x)在单连通区域D内解析，则f(x)在D内沿任意一条简单闭曲线C的积分均有 此定理有许多含义，如在解析区域内的积分与路径无关，由此可以导出复积分的牛顿-莱布尼茨(Newton-Leibniz)公式，笔者比较喜欢Leibniz的求导式。同时此定理还能推出，计算闭积分经常用到的闭路变形原理，把求一个闭积分，分解为内部每个更小的非解析闭区域的积分之和，在处理有孤立奇点的情况十分好用。更近一步我们有柯西积分公式：设函数f(z)在简单闭曲线C所围成的区域D内解析，在上连续，是D内任一点，则 从这个定理，我们可以看出复解析一个很强的性质：解析函数的导数仍然是解析的，依照这个公式，我们有，然后我们再给出复分析一系列有名字的定理最大模原理：设函数f(z)在区域D内解析，且f(z)不是常函数，则在D内|f(z)|没有最大值。最小模原理：若区域D内不恒为常数的解析函数f(z)，在D内的点z₀有f(z₀)≠0，则|f(z₀)|不可能是|f(z)|在D内的最小值。柯西不等式：设函数f(z)在|z-z₀|&lt;R内解析，又|f(z)|≤M(|z-z₀|&lt;R)，则有不等式 刘维尔(Liouville)定理：若f(z)在全平面C上解析(全纯)且有界(取模)，则f为常数。即，有界整函数必为常数。 极点和零点泰勒(Taylor)级数：设f(z)在区域D内解析，z₀为D内的一点，R为z₀到D的边界上各点距离的最小值，则当|z-z₀|&lt;R时，f(z)可以展开为幂级数 其中。由这个定理和幂级数的基本性质，我们可以导出函数在一点解析的充要条件是它在这一点的某个领域内可以展开为幂级数，这实际上也是魏尔斯特拉斯(Weierstrass)对解析函数的定义。洛朗(Laurent)级数：设函数f(z)在圆环域R₁&lt;|z-z₀|&lt;R₂内处处解析，则f(z)一定能在此圆环域中展开为 其中，C为圆环域内绕z₀的任一简单闭曲线。我们将洛朗级数的非负次幂部分称为函数的解析部分，负次幂部分称为称为函数的主要部分，函数的奇异性主要出现在函数的主要部分中。在某个去心领域内处处解析的奇点称为孤立奇点，依据在此点洛朗级数的主要部分的系数，我们可以对奇点分类可去奇点：∀n&lt;0，Cₙ=0极点：只要有限个整数(至少一个)n&lt;0，使得Cₙ≠0，其中最小整数的绝对值为极点的阶数本性奇点：有无限个整数n&lt;0，使得Cₙ≠0区域内所有奇点都是极点的函数称为区域上的亚纯函数，极点和零点存在一定程度上的对应关系z₀是f(z)的m阶极点的充要条件是 且φ(z)在z₀处非零解析， z₀是f(z)的m阶零点的充要条件是 且φ(z)在z₀处非零解析。 相互关系：如果z₀是f(z)的m阶极点，那么z₀就是的m阶零点。从这里出发，零点有一个独特的性质：不恒为零的解析函数的零点是孤立的。然后是有关留数的东西，即C₋₁，虽然很重要，但很自然，所有我们选择直接跳过。对数留数定理：如果f(z)在简单闭曲线的内部除去有限个极点外是解析的(亚纯函数)，并且在C上非零解析，则有 N为f(z)在C内零点的总个数，P为f(z)在C内极点的总个数，阶数也计算为个数。辐角原理：同前一个定理的条件，C内零点与极点个数之差等于，z沿C正向绕行一周后辐角arg f(z)的改变量除以2π。 证明我们考虑的多项式均是非常数的整函数引理(Alembert)：设f(z)是复多项式，f(z₀)≠0，则有充分接近z₀的复数z₁，使得|f(z₁)|&lt;|f(z₀)|。这个定理说明了，多项式的模有无限下降的性质 证明1： 对于|z|&gt;1的复数z有 记L=|aₙ₋₁|+…+|a₁|+2|a₀|+1，则当|z|≤L时|f(z)|≥|a₀|+1&gt;|a₀|=|f(0)|考察圆盘K={(x,y)∈R²|x²+y²≤L²}，其为R²中的有界闭集故实连续函数g(x,y)=|f(x+iy)|在K中的某点(x₀,y₀)取得K上的最小值，由于K外的值均大于|f(0,0)|，所以|f(x₀,y₀)|是R²上的最小值由Alembert引理，可知f(x₀,y₀)=0，z₀=x₀+iy₀是函数f(z)的零点。证毕实际上，这个证明与直接用最小模定理来推出是一样的证明2：因为f(x)是全纯函数，f(0)是一确定值，所以我们可以找到实数r&gt;0，使得|z|≥r时|f(z)|&gt;|f(0)|。取闭区域|z|≤r，则f(z)在区域内有最小模，不在边界上，由最小模原理，这个最小模点必是函数的零点。证毕由对数留数定理可以推出以下引理引理(Rouche)：设f(z)和g(z)在简单闭曲线C上及C内解析，且在C上满足|f(z)|&gt;|g(z)|，则在C内f(z)与f(z)+g(z)的零点个数相同。这个定理说明了，加上模更小的函数不会改变零点的个数证明3：设f(z)=zⁿ，g(z)=a₁zⁿ⁻¹+…+aₙ₋₁z+aₙ，则 所以当|z|→+∞时，→0，故存在R&gt;0，使得当|z|≥R时有&lt;1，故在|z|=R上，|g(z)|&lt;|f(z)|由f(x)和g(x)的解析性和Rouche引理可得，f(x)和f(x)+g(x)有相同个数的零点，f(x)在z=0处有一个n级零点，故f(x)+g(x)也有n个根。证毕 证明4： 仿照证明1，存在最小模点z₀和r，使得|z|≥r时|f(z)|&gt;|f(z₀)|，若f(z)无零点，则g(z)=在整个复平面上解析，且有|g(z₀)|≥|g(z)|，容易推出与最大模原理(解析函数的圆盘域内出现了最大值)或刘维尔定理(解析函数有界且非常数)矛盾，故f(z)有零点。证毕复分析的证明基本大同小异，实际还有许多类似的证明，但没有启发性的东西，所以我们就到此为止吧。 拓扑证明目前普遍的观点认为，所有代数基本定理的证明本质都是拓扑的，依赖于空间的连续性。类比于2维平面上，实变函数的零点定理。设X和Y是拓扑空间，若映射f:X→Y将X中的开集映射为Y中的开集，则称f为连续映射，将所有X和Y上的连续映射的集合记为C(X,Y)。设f,g∈C(X,Y)，若存在一个连续映射H:X×[0,1]→Y使得(1)∀x∈X,H(x,0)=f(x)(2)∀x∈X,H(x,1)=g(x)，则称f与g同伦。性质：设X为拓扑空间，Sⁿ为Rⁿ中的单位球面，若f,g∈C(X,Sⁿ)，且f(x)≠-g(x),∀x∈X，则f与g同伦。这个同伦映射函数可以直接构造出来，实际上，到凸集的任何连续映射都同伦。证明5：用反证法，假设n次复系数多项式∈C[x]没有根，则a₀≠0，否则0是多项式的根，∀r&gt;0，定义函数 再构造同伦映射H:S¹×[0,1]→S¹为 定义常值映射(H在t=0时)，则与是到S¹上的同伦(此时可以称其为零伦)。构造连续映射h:S¹→S¹为h(z)=zⁿ，由上述性质可得，h与同伦，h不可能是零伦，所以假设不成立，即n次复系数多项式必有一零点。证毕从这里我们又注意到一个事实，就是证明过程中，我们经常用到多项式h(z)=zⁿ，在复分析证明中也是在不经意间用到了。有关这方面内容，我们还可以进行更多的讨论，从而对代数基本定理有更加深刻的理解设整函数f(z)，圆盘域|z|≤r，当自变量z绕圆盘边界|z|=r一圈，f(z)绕原点旋转的圈数称为f(z)在|z|=r上的卷绕数。对于全纯函数f和g，若|g|&lt;|f|在|z|=r上恒成立，则f和f+g在此处有相同的卷绕数，在复分析中，卷绕数相当于辐角，后一个性质相当于Rouche原理。设f(z)为复系数n次多项式，由之前的分析可知，存在R使得f(z)在|z|=R上的卷绕数与xⁿ相同，均为n，而在极端情况|z|=0上的卷绕数为零，定义关于f(z)的连续变形，其中t∈[0,1]是变形参数，从t=0到t=1，函数从f(0)到，若f(z)无零点，则变形过程中的f(z)不会经过原点，即卷绕数不变，但初始卷绕数为0，结束卷绕数为n，矛盾，故f(z)必有一个零点。这段描述形象地说明了，复分析上的证明，本质使用的是复平面的拓扑性质，上述说明可以放到复分析中，用辐角定理严格地证明出来。 代数证明最后的证明过程，我们要依赖两个十分显然的事实。事实1：每个复系数2次多项式f(z)∈C[z]必有一个复根，即复数域C没有2次扩张。事实2：每个奇数次多项式f(x)∈R[x]必有一个实根，即实数域R不存在大于1的奇数次扩张。对于事实2，当x→∞时，f(x)～xⁿ，若n为奇数，则f(-∞)f(+∞)&lt;0，也可以像之前证明一样找到相应的上下界，使得|f(x)|&gt;|xⁿ|即可，由连续函数的零点存在定理，即可得到事实2，接下来我们只考虑实系数方程。(事实2的本质也是拓扑的，也用到了xⁿ)证明6：对首一n次多项式f(x)∈R[x]，设f的次数n=deg(f)=，m是奇数。我们对k进行归纳证明，当k=0时，就是事实2。假设小等k-1时命题成立，我们来证明k≥1的情况，设P是多项式f(x)的分裂域，α₁、α₂、…、αₙ₋₁、αₙ为域P中f(x)的根，任取c∈R，构造P中的元素(i&lt;j)，其个数为 ，为奇数 依据这些值，构造多项式 我们考察g(x)的系数，它是的对称多项式，再由定义式，g(x)的系数是的对称多项式，由基本对称多项式定理和韦达定理，可得g(x)的系数是基本对称多项式的有理函数，由于f(x)是实系数，所以g(x)的系数均是实数，由归纳假设，g(x)至少有一个复根由于c是任意实数，(i,j)对是有限的，所以可以得到两组式子和均是复数。更进一步可以得到，和均是复数，于是和是二次复系数方程的根，由事实1可得f(x)有复根。由归纳原理，命题对所有的自然数n均成立。证毕对于上述证明，我们可以进一步抽象，得到一个抽象代数上的证明证明7：设E/R是包含C的(x²+1)f(x)的分裂域，因为实数域R的特征为0，所以E/R是伽罗瓦扩张，故有伽罗瓦群G=Gal(E/R)，设，其中k≥0且m为奇数。由西罗(Sylow)定理，G有阶的子群H，设H的不变子域为B=Inv(H)，由伽罗瓦基本定理可知，[B:R]=[G:H]=m，由事实2可知m=1，因此G是一个2-群(p-群(阶为素数阶的幂的群))，所以E/C也为伽罗瓦扩张，Gal(E/C)≤G为2-群且非平凡，由Sylow定理可知，存在阶为2的子群K，则对其不变子域有[Inv(K):C]=2，与实数1矛盾，故[E:C]=1，即E=C，所以C是R的代数闭包。证毕读书百遍，其义自见，剩下的东西就留着去慢慢感受吧。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"完备性","slug":"完备性","permalink":"http://example.com/tags/%E5%AE%8C%E5%A4%87%E6%80%A7/"}]},{"title":"十分的劳累啊","slug":"十分的劳累啊","date":"2022-04-10T03:45:01.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2022-04-10-十分的劳累啊/","link":"","permalink":"http://example.com/archives/2022-04-10-%E5%8D%81%E5%88%86%E7%9A%84%E5%8A%B3%E7%B4%AF%E5%95%8A/","excerpt":"","text":"妹妹算是比较有担当的人，奈何总遇不到好人，大战时在公国王女前说的话，令人印象深刻 感觉越看越降智，有点受不了了 大快人心 怎么感觉更喜欢IF线呢 文库比Web的内容多太多了 只能忍耐到结尾了 最重要之物 IF线还得追一段时间。还是喜欢蜘蛛子和D的故事，什么时候文库版才能汉化完啊！！！","categories":[],"tags":[]},{"title":"喜欢这漫画","slug":"喜欢这漫画","date":"2022-04-05T10:32:05.000Z","updated":"2022-10-14T23:47:07.630Z","comments":true,"path":"archives/2022-04-05-喜欢这漫画/","link":"","permalink":"http://example.com/archives/2022-04-05-%E5%96%9C%E6%AC%A2%E8%BF%99%E6%BC%AB%E7%94%BB/","excerpt":"","text":"这个漫画意外的还不错嘛 接下来就把文库版和Web版的小说全部补上吧。","categories":[],"tags":[]},{"title":"思维导图","slug":"思维导图","date":"2022-04-05T02:31:52.000Z","updated":"2022-10-14T23:47:07.979Z","comments":true,"path":"archives/2022-04-05-思维导图/","link":"","permalink":"http://example.com/archives/2022-04-05-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/","excerpt":"","text":"思维导图这玩意，我就基本没有画过，因为我知道，画了最后也只能入库吃灰，对我而言，抄抄想想就足够了。一切要求都来自外部，现实的事情是无法摆脱的，如果不是老师强迫我们画思维导图，我都不知道低质的软件还真是多啊。付费的软件真的好吗？付费存在两种机制，买断和内购，前者流行于国外，后者广泛存于国内。白嫖本身不利于软件本身的发展，会严重将软件引入歧途，内购机制什么时候进入国内的，我不太清楚，但我只记得以前并非如此，但盗版真的太难避免了，这是国内的大环境，是没有办法的。有钱人的世界，不在我们考虑定位范畴，世界上乐于分享的人还是有许多的，开源社区绝对是一个好的选择，当然前提是你愿意去折腾。要么付钱，要么付时间，没有付出就被想奢求回报。 百度脑图百度脑图，全称kityminder-editor，是一个十分远古的Web项目，不过还跑在百度的服务器上，地址 其功能比较简陋，操作也不算复杂，拿来应付作业还是足够的。我们看一下可用的导出格式 思维导图在程序界并非什么重要的东西，没有统一的格式编码标准，但又存在一定市场，所以导致了各种不同的思维导图格式。txt和md是常见的文本格式，svg是矢量图，不会失真，png是压缩位图，有透明通道。km是此编辑器脑图引擎的解析格式，即文件格式解析的核心kityminder，加上editor即UI等部分，组成了百度脑图这个Web程序，kityminder基于百度开发的矢量图形库kity集成数据可视化部分而成的引擎。实际上，kityminder的主要功能是将数据之间的图形结构展示出来的，而思维导图这名词说到底还是起源于学校，数据关系可视化可能是更加现代的称呼，大多商业级别的软件也基本不会以思维导图自称。实际上，矢量绘图软件也可以做思维导图，关键在于你认为什么是思维导图，方不反遍的问题了，如何摆脱传统观念的束缚是关键。Freemind是个远古级别的java程序，界面有些丑陋，我不是很喜欢，但是它以开源的姿态出现，给许多后继者提供了文件编码方案，比如mindmaster的emmx和mm都是压缩包里集成了一系列用于描述属性xml文件。XMind原先是开源软件，但由于“开源困境”，已经朝商业软件发展，这是我又不得不提一个软件Typora，是我以前很喜欢的文本编辑器，以前也是免费软件，现在也变成了付费商业软件。在开源社区里，寻找一番后，百度脑图还是最合我心意，所以我选择了它。 nodejs简介上面说这么多其实都不是我主要的目的，我们的目的是基于这个开源项目，构建我们自己的思维导图工具，同时进行一定程度的扩展，此项目的源地址在这里，它是一个nodejs项目，所以有必要稍微介绍一下nodejs。我们连入互联网的方式有两种，一种是客户端，另一种是浏览器。客户端的通信通常基于TCP和UDP协议，它们属于应用层可以操作定位最基层了，再底层的IP协议属于操作系统的管理范畴，如果有root权限(非linux不存在控制关系)，想改改也是没问题的。TCP与UDP的差别是一个是我们互相发消息，另一个是单方面发消息，在这一层上，通信数据可以使用任意的文件流，所以开发者可以制作各种属于自己的通行协议，或者数据编码方式，又或者加密方式，其本质都是将数据进行转化。所以在这一层上通信，安全性有保障，所以大部分开发商，比起网站建设，更乐意开发客户端，而且网页在屏幕不大的手机上，进行适配也挺麻烦的。浏览器，则是在TCP协议之上，我们在地址框输入网址意味着什么呢？http(s)俗称超文本传输协议，顾名思义，我们本质上是在向某个服务器请求超文本数据，也就是我们的网页。从TCP简单理解的话就是，我们向服务器发送信息说“我要这个地址的东西”，然后服务器再向我们说出“整个页面的内容”，当然其中有用于保证安全“握手”过程，但我们看个整体就够了，而服务器返回的是网页文件html，也就是说网站页面的渲染实际是在本地进行的，网站基础布局使用html，样式调整使用css，脚本执行使用javascrpt(js)，后两个存在于html文件的link标签中，当然这其中的文件请求过程，浏览器全部会帮我们完成。html，css和js是Web交流的核心，即网站开发的重要部分，但是现代开发却基本都不使用了，而使用更高一层的东西，如less替代css，ts(typescript)替代js。html，css和js在Web界已经像是原生开发里汇编差不多的地位，只是地位，因为从代码可读性来看，它们和高级语言是差不多的，只是它们在很多的实战中，存在与汇编一样的开发低效性，我们不仅有不同的浏览器要适配，还要适配各种屏幕。我们一样可以给Web一个跨平台的概念，以屏幕作为不同的平台，以浏览器作为不同的平台。重复性的工作应当交给有一定逻辑处理能力的代码，在三套件中，只有js具有动态处理能力，它属于程序设计语言的一种，即有自己的内存，只不过是依赖本地的浏览器进行分配的罢了，其实浏览器就相当于js脚本的运行环境。一种使用js的方式就是，在布局文件html中引入已经集成部分功能的js，这种方式简便快捷，但是文件的分离性不高，耦合性太强，所以就引入我们的主题了——nodejs。nodejs是一个基于ChromeV8引擎的js运行环境。ChromeV8是谷歌的开源浏览器内核，我们知道浏览器有一项重要的功能就是，解析获取的html，css和js文件，并将结果渲染到屏幕上，内核是存在js的解释器的，它可以执行js代码，同时还有与原生环境的交流，当然考虑安全问题，交流是有限的。nodejs则是基于此解释器，扩张了与原生环境的交流，换言之，是js有更加丰富的本地API，比如运行在浏览器上的js不能在本地进行端口监听，但运行在nodejs上就可以做到。nodejs使得js成为了一门真正意义上的程序设计语言，但是我们可以使用熟悉的js语言。开发语言是很多的，如果不经常用的话，是十分容易忘记的，如果同一门语言可以同时用于多个领域，在多种平台上都有解释环境，是十分方便的，Java就是一个活生生的例子。nodejs提供了js的解释平台，在这个平台上有无数的东西生根发芽了，比如你常见的小程序，ts、less等超集也在这个平台上扎根了。 以kityminder为例有关工程的构建过程或许是十分简单的，直接看官方文档 首先随便找个地方，准备存放我们的工程，然后把上面所有的命令都执行一遍，最后在kityminder内，我们可以得到整个项目，和构建后的文件dist 在开发场景中的工程基本都是指文件夹加配置文件，与传统媒体文件有较大差别，如photoshop的ps，我们把所用过的指令和对应目录中的文件来一一解析吧git clone ***不依赖任何配置，主要将远程的git工程拷贝到本地，换言之就是，将工程下载下来的意思，标志一个文件夹是git工程，主要是图中.git***形式的文件，git主要用于代码管理。git submodule ***用于下载依赖工程，开发的基本思想之一是“不造重复的轮子”，所以工程的引用是十分常见的，比如搞图形我们要用glfw，在开源世界里面，有些东西不能直接放到自己工程内拿来发布，主要是发布这方面，类似于写论文中的引用文献，总不能全抄到论文里去吧。npm install ***依赖当前工程下的文件package.json，其里面的内容标志着这是一个nodejs工程，npm是nodejs的包管理工具，类似于java的maven。它们的工程特点都是，存在依赖、引用别人库的情况，install有是否为全局的选项，通常我们都不安装到全局，而是当前项目下，存储于node_modules目录下，因为不同项目可能使用不同版本的库，安装到全局的话，可能会引起冲突。bower install ***也是一个类似的包管理工具，依赖bower.json文件，但是bower是一个nodejs程序，我们需要先使用npm将其安装到全局去，才能执行这个命令。bower这东西，我不是很喜欢，因为它的引用库是git库，实现类似git submodule的作用，时常不好连接，而且有些仓库也有被废用的情况，这也是我另外几个项目成功不了的原因，连依赖都下不到了，更别谈构建了。grunt也是一个nodejs程序，依赖配置文件Gruntfile.js，属于web构建工具之一，类似的还有如gulp、webpack等等，实际上Web的构建工具在开发界最多了。什么是构建工具呢？实际上就是依赖配置文件运行的nodejs程序，它的功能是多方面的，比如我们的grunt用于构建静态页面，我们的生成目录是dist 其中的index.html就是我们的入口界面了。这个dist文件夹可以作为网站的文件夹部署到服务器上，然后在用户请求的时候，运行到用户浏览器上。我们用原生的环境来讲就是，kityminder是我们的源代码文件夹，dist是生成的可执行文件，而构建工具相当于编译器，……，等等那nodejs难道相当于操作系统？有点夸张了，有点夸张了，但是nodejs使js这门语言具备了更多与本地交流的能力，确实已经奠定了它具备开发平台的潜力。实际上，typescript(ts)也是一个类似的东西，它也有nodejs版本的程序，也可以看成构建工具的一种，它的作用是将ts代码翻译为js代码。nodejs有多强大呢？这里再提一个项目，electron，它也是nodejs程序，但它能令你用web三套件开发本地应用，我们常用的VisualStudioCode就是用它开发的，很神奇吗？其实理解原理后，不禁感叹，也不过如此。其实它并不是真的会生成机器码运行，而是和许多开发语言一样，通过虚拟机来实现。nodejs工程的文件结构一般都不是固定的，除了package.json，其中会包含各种子项目，如grunt、ts等。为什么nodejs的开发生态会如此复杂多变，确实是一个令人费解。 实际意义如果只是完成上面那些步骤，然后运行，其实是不行的，会出现登入验证、非标准API缺失等问题。不过，既然这是开源的，想改其实还是很简单的，网上已经有相关的教程了，我们实际操作一番后，Web程序已经完美的跑起来了 不过启动本地服务器的时候应该使用php，因为在静态文件中，我们看到download.php，它主管思维导图导出(即下载)的功能，当然我们可以自己用js(node中的)重写一遍就是了。如果觉得，自己构建项目，修改静态文件很复杂的话，其实已经有别人修改过的项目了——DesktopNaotu，我们只推荐下载它Release的东西，我试过去构建它，结果其中一个bower的依赖在git上已经没了，办法是找到依赖的地方，想办法用其它东西代替，但这样过于麻烦，所以就不管了，而且功能基本差不多，直接用Release就足够了。在开始项目改建前，我们来看看这个团队的其它开源产品。kityformula是数学的公式编辑器，相比与一般的latex编辑器，最大特点在于可视化比较强一些 当然强大程度肯定比不上依靠特殊语法的latex就是了。ueditor是一个富文本编辑器，类似于word的功能，但我还是想说已经哪一种富文本编辑器都比不上我们的排版神器latex。随便说说而已，从易用性角度的话，肯定是选择那些大众化的工具了 构建几次后发现，这个团队还真喜欢用grunt构建工具，基本每个项目都是。 改造思路粗略地看一下这个工程，发现构建大部分是拷贝与替换的过程，与模板语言差不多，所以我们直接关注dist，即输出文件的内容。我们稍微使用一下这个Web程序可以发现，核心的布局文件只有index.html和edit.html，前者是我们刚进入程序的欢迎界面，属于UI部分，没有什么功能性的东西，改不改其实是无所谓的，唯一有改动的就是之前那个用来绕开验证的东西 edit.html是我们编辑器的主要界面 在body内我们发现只有脚本文件，也就是界面的排布全部由脚本完成，前两个是我们添加的，后两个是无关紧要的，也就是说此程序的核心在“脑图启动”的代码里。其中jquery代码，一个用于加载外部脚本，一个用于版号输出，都不是很重要，关键的代码是中间的两句话，就两步，获得实例，绘制UI，而这些实际上是属于kitymind-core的东西，我们拿出官网的东西来看看脑图的结构 其中kity是矢量图形库，在lib里面，最好不要去修改，牵连的东西太多，kitymind-core位于目录src/core里面，加上其它部分代码组成kitymind-editor，配合其它配置和页面布局，就组成了我们的Web应用，获得引用的代码在src/core/kityminder.js里面，界面UI的布局则主要集中在ui/里面。由于没有具体的目标，所以我们仅给出修改的思路。如果需要将脑图程序嵌入页面中的话，加入两段代码到需要位置，引入相关的库即可。如果需要调整布局，则可以在ui/里面进行研究修改。如果要修改核心的话，则研究src/文件夹，不过研究难度会更大一点。就说这么多吧，这个项目实在太老了，拿来进行简单的应用，问题是不大的，但拿来进行实际开发还是不太合适的，从便利的角度，我选择DesktopNaotu。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"到底如何呢","slug":"到底如何呢","date":"2022-04-01T23:39:15.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2022-04-02-到底如何呢/","link":"","permalink":"http://example.com/archives/2022-04-02-%E5%88%B0%E5%BA%95%E5%A6%82%E4%BD%95%E5%91%A2/","excerpt":"","text":"只会向上级传话的官，不明白它存在的意义。","categories":[],"tags":[]},{"title":"数学探索之多项式与方程其五","slug":"数学探索之多项式与方程其五","date":"2022-03-30T02:22:24.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-03-30-数学探索之多项式与方程其五/","link":"","permalink":"http://example.com/archives/2022-03-30-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%8E%E6%96%B9%E7%A8%8B%E5%85%B6%E4%BA%94/","excerpt":"","text":"学了这么多抽象理论，多少感觉有些魔幻，一点实感也没有，所以在这一篇我们的目标就是消去它们。 三次方程二次方程过于简单，四次方程过于繁琐，更高次的方程没有一般解法，所以我们选取中庸，拿三次方程来试试水。 解方程一般的三次方程如下 我们先把x³-1=0的本原根添加到基域F中去，即令F含有和，令是方程的三个根，则有分裂域，由之前的分析我们有G=Gal(E/F)≌S₃。我们有可解合成群列，依据伽罗瓦对应我们得到域列，其中B=Inv(A₃)，A₃≌Gal(E/B)是一个3阶循环群，B是F的一个正规扩域，E是B的一个3次循环扩域。接下来我们要寻找根式扩域所需的数。令Δ=(α₁-α₂)(α₂-α₃)(α₃-α₁)，则Δ在偶置换A₃下不变，在S₃中奇置换下变为-Δ，故Δ∈B且Δ∉F，进一步有D=Δ²∈F，计算可得D=-4r³q-27q²+18rpq-4p³+r²p²。因为[F(Δ):F]=2和[B:F]=2，所以B=F(Δ)。因为α₁,α₂,α₃不能全属于B，所以不妨设α₁∉B，同上面类似的过程，我们可以得到E=B(α₁)，由于α₁不能确定，所以我们采用证明的方法来构造需要的数。 可以验证均属于D，更具体的是 这样我们就可以得到方程所有的解 实际上，令r=0，我们就可以得到卡尔丹公式，而上面构造根式扩张数的过程实际上就是拉格朗日预解式，实际上早在伽罗瓦(Galois)前，首先证明一般五次及以上方程没有根式解的是阿贝尔(Abel)，而且使用的是初等语言，但本质和如今的现代证明是基本一致的。 一些简单的东西我们定义D=Δ²=[(α₁-α₂)(α₂-α₃)(α₃-α₁)]²为三次方程的判别式，则方程的三个根α₁,α₂,α₃可能的情况如下：(ⅰ)D&gt;0，三个两两不等的实根(ⅱ)D=0，三个实根且至少两个相等(ⅲ)D&lt;0，一个实根和一对共轭复根。有一件比较神奇的事就是，当D&gt;0时方程三个实根计算必需经过复数的计算，实际上这是一件无法避免的事情，我们在之后会讨论。对D&gt;0，我们令K=F(Δ, α₁)，实际上由韦达定理我们可以证明，K与E互相包含，即K=E就是F的分裂域，不过前提我们要肯定这个三次方程是不可约的，不然就没什么意义了。我们写一个简单的定理然后来证明上述的事实。定理1：设是实域R上的一个素数p次多项式，则它要么在R中不可约，要么在R中有根。 三次方程根的特点定理2：设f(x)=x³+px+q∈F[x]，F=Q(p, q)⊂R，f(x)在F上不可约，且D&gt;0，那么就不存在F上的一系列实数值根式来得出f(x)的求根公式。 证明：我们采用反证法，首先先给出上述文字表述的数学意义，设α₁是方程的一个根，则α₁∈L=F(a, b, …, d)，其中a,b…d是实根式，构造K=L(Δ)，则E=F(Δ, α₁)⊆K，这样操作以后，方程的根就都在K里面了，换言之就是，分裂域可以通过添加实根式的一系列扩张得到，我们写出整个根塔，然后证明它不存在即可，为了方便我们调换添加顺序。F⊂K₁=F(Δ)⊂K₂⊂…⊂Kₙ=K⊂R其中，i=1,2…n-1，，是素数，这与我们平常所见的根塔区别在于所有的添加都不会到复数域去。因为[F(Δ):F]=2，α₁,α₂,α₃在F上都是三次的，所以α₁,α₂,α₃∉F(Δ)，设在上述塔中第一个出现根的域是，不妨设，令和，则有，由于f(x)在上仍不可约和次数的限制，只能p=3，故且。由韦达定理的构造可得，，由次数的限制，我们容易证明。在这种情况下，可以看成f(x)的基域，可以看成f(x)的分裂域，所以是的正规扩域，由于含有上不可约方程x³-a=0的一个根，所以必需含有另外的两个根和，于是就必需有，这与是实域矛盾了，定理得证。 容易看出，整个证明的矛盾点在最后一步，正规扩域的要求导致三次方程不得不把复数引进扩域中去，这也与四次方程形成了本质区别，因为x⁴-1=0在实数域上是可约的，最后剩下的也只有二次不可约多项式了，与四次没什么关系了。 再看看尺规作图在很久以前，我就说过尺规作正n边形与伽罗瓦理论有密切关系，在这一部分，我将把它一一地说一遍。 小小的先修内容定义1：设群G的阶|G|=pⁿ，其中p是素数，n是自然数，则称G为一个p群。至于这个p群是啥玩意，对我们而言其实并不重要，不过我们需要下面这个简单地定理来完成以后的证明。定理3：p群是可解群。设分圆多项式的根为，由之前的计算可得。事实上和分别可以看成的基域和根域，于是就可以得到伽罗瓦对应 由单位根相关知识可知，是循环交换群，所以是它的正规子群，所以是Q的正规扩域，所以有 所以是一个(p=2)群，从而它是一个可解群，由此可以得到一个根式扩域塔，由次数可知，每次扩张都是2型纯扩张，由此可得可尺规作图的充分条件是，存在s使得。虽说这里我们只限于正n边形尺规作图，但这样的证明是可以进行推广的，也就是说通过扩域的次数判断能否尺规作图是充要的，这也是我们之前留下的问题。 做正17边形我们的目标并非把作图步骤写出来，而是得到的根式表达，然后剩下的东西按照式子做下去即可。考虑方程x¹⁷-1=0除1以外剩下的16个解，即分圆多项式Φ₁₇(x)的根，并将它们以3的次幂模17的结果作为次数排列可得，ω、ω³、ω⁹、ω¹⁰、ω¹³、ω⁵、ω¹⁵、ω¹¹、ω¹⁶、ω¹⁴、ω⁸、ω⁷、ω⁴、ω¹²、ω²、ω⁶。然后我们将这些根进行配对，可得 用类似的方法我们再继续构造 再接再厉地构造可得 利用，可以得到上述式子的实cos表达式。通过计算可得 构造2次方程，然后计算可得 类似的也可以有 同样构造2次方程，然后计算可得 对于最后的z也是类似操作，最终有 而我们所需的值为 剩下的也没什么好说的，就是一段无聊的计算过程了。 再做正17边形接下来，我们将以伽罗瓦理论的角度再来看一遍上面的问题。设多项式x¹⁷-1的基域为Q，分裂域为E=Q(ω)，ω在Q上的最小多项式是分圆多项式Φ₁₇(x)。对任意的σ∈G=Gal(E/Q)，σ(ω)也是Φ₁₇(x)的一个根，故σ共有16种情况，记为G={σ₁,σ₂…σ₁₅,σ₁₆}，容易发现σ₃(ω)=ω³可以成为G的一个生成元，实际上(3,16)=1，即3是与16互素的最小正整数，G=&lt;σ₃&gt;，这样之前做法选择3的原因也就得到了。因为|G|=16，所以G是一个p(=2)群，所以G是一个可解群，16的因数简单，可以直接得到合成群列 这样可以得到相应的域列 Q=Q₀⊂Q₁⊂Q₂⊂Q₃⊂Q₄=E 相邻域之间的次数都是2，即都是2型纯扩张。更进一步可知，上一种方法里的数可以作为扩张的添加元素，我们有Q₁=Q₀(x₁)、Q₂=Q₁(y₁)、Q₃=Q₂(z₁)=Q(cos(θ))根据这个域列，做出相应的数值，实际上，这就是上一种做法，只不过我们从更加现代的观点来看待它罢了。我们做了一系列的工作，其实说明了一件事，抽象代数的理论不是空穴来风的，而是有许多前人经验作为基础的，我们是站在巨人的肩膀上得到这些理论的。 五次方程接下来我们将对五次方程求解的思路进行一番概述，但值得注意的是，我们用的不是根式解，而是一种特殊的函数——Theta函数，它与椭圆函数相关，但并不是椭圆函数，半纯的双周期函数称为椭圆函数，但Theta函数是全纯的。 方程化简对于五次方程 可以借由契尔恩豪森转换(Tschirnhaus transformation) 选择特别的系数可以消去相应的项，得到布灵·杰拉德正规式(Bring-Jerrard normal form) 你可能会和我一样疑惑，不论怎么看，这都是在睁眼说瞎话，带进去应该是一个十次方程怎么会莫名其妙变成五次方程。最开始，我也这么觉得的，但这个变换的做法不是表明上那么简单。①首先令在这里，简单地带入即可消去四次项 这里的其它系数直接计算即可，对所有次数的方程其实都是一样的做法。②接着令这里我们不应该简单地带入，首先我们要知道，这个变换实际上产生了增根，次数必定不止五次，但其实上我们可以以一种特殊的方法构造一个与原方程根相同的五次方程，构造式子 对于这个式子中的五次项，可以通过方程(1)来消去，由此得到 同理我们可以得到 我们将视为一组基，它显然有一组解，即方程原来的解，而上述可以构成一个系数矩阵A为 的五元齐次方程，由于存在非零解，故det|A|=0，计算可以得到一个关于z的五次方程 我们有两个未知数p和q，所以可以令P=Q=0，由此得到两个方程，由此可以解出 我们从系数矩阵可以知道，所有的项都是一次项，故行列式的每一个项都不会超过5次，所以P是一个1次方程，Q是一个2次方程(关于p和q)，故在解的过程中，方程次数不超过2。③这时聪明的小伙伴，可能会觉得，我们可以不断增加代换的次数，最高四次，由此得到一个最简单地五次方程x⁵-a=0，从而解决五次方程，更进一步想，我们不是可以用同样的方法去解更高次的方程吗？别忘了，我们还有一个定理在前面呢？Tschirnhaus(1683)当时确实是这么想的，但Leibniz指出这是不合法的。使用三次代换，按照同样的做法，我们可以得到3个方程，次数分别是1、2、3。最后需要解一个6次方程(有些文献写要解24次方程是错的，那个应该是使用拉格朗日预解式方法才会出现的)。所以使用Tschirnhaus变换，其实最多只能消去n-1和n-2两项，但是后来Bring发现使用四次代换，再预设一个条件，即可只用三次和两次方程完成变换。做代换 得到系数矩阵 计算后可得方程 令R=S=T=0即可得有四个未知数的三个方程，我们增加一个条件，则可以得到 而和来自下面两个复杂的方程(二次和三次) 说实在的，这么复杂的计算真心不是很实用，也难怪，更高次的方程基本就没人去研究了。而且我们的解方程之路还没结束呢！④经过不懈的努力，我们可以得到 如果我们再做一个简单地线性代换，还可以消去一个未知系数，最终可化为 所以5次方程需要依赖一个系数，这里必需解释一下什么叫做依赖一个系数。对于在基域F中运用根式可解，我们的解释是根域E=F(d)，满足存在某个n使得dⁿ∈F，如果仔细看定义的话，就是存在某个函数f使得f(d)∈F，也就是说根式的本质其实是幂的逆运算，f的反函数。这个f是没有参数依赖的。换一种说法就是，四次方程可以化为x⁴-1=0，三次方程可以化为x³-1=0，它们的解所使用的函数，幂函数的反函数，虽说有好几个，但函数的形式固定，与方程的系数是什么，没有任何关系。但五次方程开始，情况就有所不同了，根据上述a的不同，我们需要使用不同的函数来得到5次方程的解。希尔伯特第十三问，证明不可能用仅有两个变量的函数解一般的7次方程。一般的7次方程，总共有7个系数，通过上面的Tschirnhaus变换可以消去6,5,4次项，一个简单的线性变化，可以消去一个未知参数，最后的7次方程总共有3个未知参数，至于6次方程，到时候会说。可以看到那个时代都还停留在7次方程的问题上，更高次方程的话，难度是难以想象的。 Theta函数接下来我们需要介绍一组特殊的函数，设是复数集，，即复平面的上半部分。设参数，我们定于关于的函数 至于收敛性就不证明了，知道有这么一回事就行了，后面我们需要的也是它的性质而已，类似定义 显然后面的τ有些碍事，如果不加说明，我们就不写了，经过一些简单地探究，我们有一些简单的性质。是奇函数，是偶函数，记则有 、、、、 还可以获得四种函数之间的互相表示，就不过多赘述了，我们直接给出这些函数的基本性质分布。 都是全纯函数，且零点分别由下面式子给出，其中m,n∈Z(整数集) ①②③④对于这四个函数有两个比较优美的式子 下面式子是上面的特例，但实际我们也只需要υ=0时的函数。依据函数的根，我们可以得到函数的连乘表达式 其中，根据上面的连乘式，我们可以得到公式 因为接下来用不到自变量υ，所以我们将其看为参数τ的函数，并研究它在τ上的变化。定义函数 由此我们可以得到 使用Theta函数性质得到的东西没啥好说的，我们给出从解析式得到的公式 对于这些特殊函数，记记性质其实就够了，比如三角函数也是同样的道理。从解析式，我们有一系列关于τ的变化公式 其它的比较复杂，我们只把需要的写出来 、、、 设模变换，满足ad-bc=1。注意上述函数都不是模函数(在模变换下值保持不变的函数)，但对于每一个模变换，可以证明最后都等价于数个和的复合，所以以上两种变换已经足够了。 更深入的研究我们再定义一系列函数 我们来研究它们在模变换下的表现，这里直接以表格形式给出结论，记则 我们做变换选择的时候尽可能避免了使用和，这样可以达成f的纯变换，注意这里值有往回的趋势，实际上可以证明f是一个周期为48的函数。将、都简记为v，通过对uv和u/v的变化可以证明 进一步化简可以得到 视u和v为未知数，则把这个方程称为模方程，它的解为u=f(τ)和v=f(5τ)。注意这个方程不能拿来解一般的六次方程。 得到解我们构造一系列带参的数 使用之前的变换表，可得 则 构造方程 然后进行一系列复杂的化简，可以得到 在将后面部分进行展开可得 我们令 可以发现 令，即可得到我们最开始的方程。所以解五次方程的基本步骤是，先将其化为标准式，然后根据a计算出参数τ，计算(i=0,1,2,3,4)，计算即是方程所有的解。不过这综究只是思路，真正去实践的话是十分困难的。 后记这个系列实在太认真了，不过温故知新，也不枉此行了，只是我还不能说十分了解方程，这实在太可惜了，因为后面方程的复杂度实在是难以想象了，不过这样也足够了。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"方程","slug":"方程","permalink":"http://example.com/tags/%E6%96%B9%E7%A8%8B/"}]},{"title":"数学探索之多项式与方程其四","slug":"数学探索之多项式与方程其四","date":"2022-03-25T04:25:52.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-03-25-数学探索之多项式与方程其四/","link":"","permalink":"http://example.com/archives/2022-03-25-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%8E%E6%96%B9%E7%A8%8B%E5%85%B6%E5%9B%9B/","excerpt":"","text":"在这一篇文章中，我们将向着文章的最后目标进发，由此得到一个方程运用根式可解的判定准则。 根式可解的严格定义数学是一门严谨的学科，定义都不清不楚的情况下进行证明，理论上来说是不严谨的，不过最原始的概念还是得依靠公理的。定义1：设首一多项式f(x)∈F[x]，称f(x)=0在F上运用根式可解，如果存在F的某个扩域K满足以下条件：(1)K包含了f(x)在F上的分裂域E，即F⊆E⊆K。(2)K/F有如下根式塔F=F₁⊆F₂⊆…⊆Fₙ₋₁⊆Fₙ=K其中每个，，i=1,2,…,n，即是纯扩张，我们顺便把自然数集{n₁, n₂, … , nₙ₋₁, nₙ}称为此根塔的根次数集。这个定理看似十分的繁琐，但其实是在说明，运用根式可解等价于，方程可以化为xⁿ-a=0的形式。这符合我们的基本认知，加减乘除是域本身的基本运算，我们平方的逆运算来扩张基本域，这样分裂域中就只有加减乘除和开根号了，即根是由系数的四则运算和开根号组成。在定义中，我们并没有强制要求E=K，这是因为，分裂域E一定是F的正规扩域，但K是由条件(2)所定义的纯扩域，而纯扩域不一定是正规扩域。 单位根的地位在方程与纯扩张关系中，最纯粹的莫过于单位根方程xⁿ-1=0了，至于它的根和性质，我们之前在尺规作图中说过，现在我们将从群论的观点来看待它。定理1：设n是某个确定的自然数，域F含有n次本原根ω。(1)任取a∈F，a≠0。如果E是f(x)=xⁿ-a在F上的分裂域，则Gal(E/F)必是m阶循环群，且m | n。(2)如果E是域F的这样一个伽罗瓦扩域，使得Gal(E/F)是n阶循环群，则必定存在d∈E，使得=a∈F，且E=F(d)。 证：(1) 由之前讨论可知n次单位根群Uₙ=&lt;ω&gt;是n阶循环群，记G=Gal(E/F)，则我们可以建立G到Uₙ的同态映射来完成证明。记，则f(x)的根为r、ωr、ω²r…ωⁿ⁻¹r(注意本原根和单位根的区别)。因为ω∈F，所以f(x)在F上的分裂域是 E=F(ω,r)=F(r)，故对任意σ∈Gal(E/F)，由σ(r)的值完全确定。因为Gal(E/F)中的元素将f(x)的根映射为f(x)的根，所以每个元素σ∈Gal(E/F)，可以表示为，i=1、2…、n-1。建立映射Φ：G→Uₙ，元素对应关系为。任取元素、则， 故Φ确实是G到Uₙ同态映射，更进一步，由于在Uₙ中各不相同，所以Φ是一个单射，即G同构于Uₙ的一个子群，故G是循环群且|G|整除n。(2)因为E是F的伽罗瓦扩域(有限正规扩域)，所以可设E=F(θ)。由已知条件，不妨设G=Gal(E/F)=&lt;σ&gt;={e, σ, … , σⁿ⁻¹}，σ是G中的n阶元，再定义，0 ≤ i ≤ n-1，θ₀=e(θ)=θ，在E中构造如下的n-1个数 ，i=1、2 … 、n-1 首先d₁、d₂ … dₙ₋₁不全为0(加群中的单位元)，否则我们添加单位根方程0=1+ω+…+ωⁿ⁻¹我们可以得到一个以(1, ω, …, ωⁿ⁻¹)为非零解的n元齐次线性方程组，故其系数矩阵应该为零[一个范德蒙行列式，注意以下证明的前提都是域的特征为零] 故至少存在一对i≠j使得，这显然不可能。故至少存在某个，记为d，故有 注意 多次计算可得σ(dⁿ)=dⁿ，因为G=&lt;σ&gt;，所以dⁿ属于G的不变子域，不妨记a=dⁿ∈F=Inv(G)，我们构造出了d，接下来只需证明E=F(d)。首先，显然有F(d)⊆F(θ)=E。由于σ(d)=ω⁻¹d∈F(d)和σ∈Gal(E/F)，所以σ∈Gal(F(d)/F)，又因为G=&lt;σ&gt;， [注意这里表示子群]，故[F(d):F]=|Gal(F(d)/F)|≥|G|=[F(θ):F]所以E=F(d)=F(θ)。 这个定理主要告诉我们，根号扩域(纯扩域)与循环群之间的联系，而这个纯扩域正好又是运用根式可解定义中的一节，如果全部组合起来，可能会有意想不到的结果。定理2：这任意一域F，f(x)=xⁿ-1在F上的分裂域为E，则Gal(E/F)必是交换群。这个没什么好说的，运用之前证明的思路进行构造，即可证明。 必要条件定理3：设域F，多项式f(x)∈F[x]的伽罗瓦群为Gal(f)，如果f(x)=0运用根式可解，则Gal(f)是伽罗瓦群。 证明：由已知可以得到存在根塔F=F₁⊆F₂⊆…⊆Fₙ₋₁⊆Fₙ=K，E⊆K ，，i=1,2,…,n，E是f(x)的分裂域。我们可以构造K的正规闭包K⁺，使得K⁺满足条件的同时还是F的伽罗瓦扩域，不失一般性，我们直接将其认为是K。 取根次数集{n₁, n₂, … , nₙ₋₁, nₙ}中所有数的最小公倍数，记为n，并取n次本原根ω，我们定义新的域 i=1,2,…,n，因为 ，所以我们可以得到一个新的根塔 F=K₀⊆K₁=F₁(ω)⊆…⊆Kₙ=Fₙ(ω)=K(ω)因为K是F的伽罗瓦扩域，所以K是某个多项式g(x)∈F[x]的分裂域，因为ω是n次本原根，所以K(ω)是g(x)(xⁿ-1)在F上的分裂域。即K(ω)是F的伽罗瓦扩域，由包含关系进一步可得K(ω)是的伽罗瓦扩域，不妨记，由伽罗瓦基本定理可得，，我们有伽罗瓦对应图 因为K₁=F(ω)是xⁿ-1在F上的分裂域，所以Gal(K₁/F)是交换群，对任意i(1≤i≤n)，是纯扩张，由定理1可得，是交换群[循环群必是交换群]，是正规扩域。由伽罗瓦基本定理可得，是的正规子群，且是交换群，所以是可解群，接下来我们需要把性质引到分裂域E上面去，首先有伽罗瓦对应 因为E是F的正规扩域，所以是H₀的正规子群，且f(x)的伽罗瓦群G=Gal(E/F)≌，因为H₀是可解群，所有H₀的商群G也是可解群。 仔细一看，证明的过程实际就是，在整条链上不断应用定理1所得的结果，伽罗瓦对应保证了，整条链上的每个域与伽罗瓦群可以一一对应。虽说定理并不充分，但反过来看，已经足够进行不可运用根式解的判定了，因为一般n(≥5)次方程的伽罗瓦群同构于不可解群Sₙ，所以可以得到。Ruffini-Abel定理：五次及以上的一般多项式方程没有根式解。由于四次及以下方程，我们都已经找到了求根公式，所以我们最开始的目标已经达成，值得注意的是，Sₙ(n≥5)存在可解子群，所以特殊的五次方程是可以存在根式解的，不过这个需要充分条件来确定这个事实。最后，我们给一个有用的判定定理。定理4：设f(x)∈Q[x]是一个素数p次不可约多项式，如果f(x)有p-2个实根，这f(x)在Q上的伽罗瓦群同构于。此时若n≥5，则f(x)运用根式不可解。 充分条件定理5：设F是特征为0的域，多项式f(x)∈F[x]的伽罗瓦群为Gal(f)，如果Gal(f)是伽罗瓦群，则f(x)=0运用根式可解。 证明：设f(x)在F上的分裂域为E，G=Gal(f)=Gal(E/F)，|G|=n，则G是可解群，且[E : F] = n，选取n次本原根ω，类似之前做法将其添加到域里面F=F₁ ⊆ F(ω)=F₂ ⊆ E(ω)=K容易得到f(x)在F₂=F(ω)上的分裂域是K=E(ω)，F₂是F₁=F的纯扩张，所以我们只需找到F₂到K的根塔即可证明定理。因为G=Gal(E/F)是可解群，所以H=Gal(K/F₂)也是可解群(容易找到两个群之间的同态单射，然后利用可解群的子群也是可解群即可)，故存在H的合成群列 其中每个因子群都是素数阶循环群，1≤i≤r，且。因为K是F₂的伽罗瓦扩域，所以可以建立伽罗瓦对应 同时还可以得到和≌因为是阶循环群，由定理1可以得到，存在使得，且有。自然我们就得到了所需的根塔，根的次数分别为，且K=E(ω)包含了分裂域E，故f(x)运用根式可解。 或许看完证明的你，觉得好像也没什么新奇的东西，就是前一个定理的逆过程而已，甚至感觉不到域的特征为零有什么用。我们记特征为p的域为，其中q=pⁿ，特别n=1时，记为，则有下面定理。定理6：设p是素数，域K=，则f(x)=在K上的伽罗瓦群是p阶循环群，而f(x)在K上不是运用根式可解的。 尾声终于，我们达成了最开始的目标Ruffini-Abel定理，但是到现在全都是抽象理论，所以下一节我们将看看这个理论是否由一定的使用价值，具体尝试解一些方程，来终结这部分内容。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"方程","slug":"方程","permalink":"http://example.com/tags/%E6%96%B9%E7%A8%8B/"}]},{"title":"编程手记之Live2D","slug":"编程手记之Live2D","date":"2022-03-20T16:28:34.000Z","updated":"2022-10-14T23:47:08.298Z","comments":true,"path":"archives/2022-03-21-编程手记之Live2D/","link":"","permalink":"http://example.com/archives/2022-03-21-%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0%E4%B9%8BLive2D/","excerpt":"","text":"在2D动画制作上，方法是很多的，比如Adobe系列软件，但我们更专注于将动画嵌入到游戏和软件中去。采用直接播放媒体文件的方式可行，但可控程度不高，不是我想要的。目前有两种比较常用的可控动画，它们是骨骼动画和Live2D动画，对于前者有付费的Spine和免费的Dragonbones，而后者主要是从美术布线和基本变形实现的，也是我们接下来要讨论的主题。 文件形式在使用任何开发型工具时，了解相关的文件格式是十分必要的，这样有助于我们理解，文件存了什么，又能修改什么。我们使用的工具是Live2DCubism，其分为两部分Editor和Viewer，功能显而易见，软件3.0前后不兼容，所以我们讨论最新的版本。cmo3(Cubism Model 3)，即Live2D模型文件，包含图像数据psd、网格数据、变形器数据、参数等。这里有必要稍微讲一下Live2D实现的基本原理，先来看一个基本的动作演示(Tampermonkey配合PicviewerCE+可以方便地看图)， 也就是说Live2D动画的本质，是不同参数对应着不同的画面，当然我们不可能每一帧都有一张图片，所以我们实际使用的是补间动画，动画之间的过度是基础变化，平移、旋转、放缩等，只不过变化的基本单位不是一个图层那么简单， 从这里我们可以看到，Live2D动画变化的基本单位其实是网格上的点，从中我们还可以发现一些基础变化的变形器，这就是整个Live2D动画的全貌了。can3(Cubism Animation 3)，即Live2D动画文件，其关联一个cmo3模型文件，并在此基础上有一系列的场景(Scene)，简单来说就是一段动画，但其本质依旧是补间动画 之前在模型文件里，我们通过参数来补间图形的动画，而在动画文件里，我们则通过在关键帧之间上对参数补间来实现一个场景。cmo3和can3均属于Cubism的工程文件，不具有实用价值，我们使用的通常是它们的输出文件。can3集成的东西较多，并非核心，主要输出媒体文件视频，所以gif或mp4为主，这主要服务于美工人员。cmo3是整个Live2D构成的主体，技术核心集中于此，其输出为运行时文件，包括moc3、json和贴图png。与此同时，viewer所预览的也是这些运行时文件，开发所需的也是这些文件。类比Photoshop来思考的话，cmo3是psd，moc3是png，只不过Cubism的输出文件是好几个，其实如果用程序来思考的话，就是exe加一堆的dll。moc3和model3.json互相引用，属于等价物，都是模型输出的主体，在view中不论打开谁都是一样的，在moc3中，我们可以调节工程中所设计的参数，来达到不同的图像表现。png是模型的贴图文件，实际就是psd的许多图层集中排在少数的图里来加快读取的，其它的json都是来辅助moc3的，没啥可控性。实际上can3也可以输出motion3.json文件，相当于整个动画的配置，可以运用到模型的输出moc3文件上去，实现某个动作(眨眼、点头等)。在开发过程中，我们使用CubismSDK，所以主要读取的是模型的输出文件moc3，而我们可以控制的就是我之前所说的参数，然后来正式地看看它们吧。最后附上一张官方的工作流程图 NativeSDK要想学习CubismSDK，最好的参考当然是官方文档，语言并不是障碍，实在不行不是还有机翻嘛。官方提供了manual(手册)和tutorials(教程)两种帮助文档，后者用于入门级的基本操作，前者则是类似字典的查询手册。 整个SDK的组成如上，其中Core是闭源的，只提供了头文件和库，主要完成对模型文件moc3的解析工作。Framework和Sample开源，前者完成渲染、演算和播放等操作，后者属于使用范例，工程使用C/Cpp开发，除了渲染部分具有良好的跨平台性。渲染在Sample中提供了cocos2d、opengl和directx三种方式，directx直接pass，cocos2d本质是opengl，所以我们接下来就主要来研究这部分工程。官方提供了Core部分的API手册，不过我们是懒惰的，单纯解析出数据对我们而言还是不够的，我们将使用进一步的封装Framework，渲染演算啥都不用考虑了，直接调用就完事了，美滋滋。 源码阅读先运行一下这个程序 在Console中，我们可以看到一系列的输出，显然对应了渲染的过程，我们进入调试模式来跟踪程序的运行，看看整个流程如何 程序首先创建LAppDelegate的单例，代表着整个程序，在其中引用另外两个对象，LAppView代表我们所看到的视图，LAppTextureManager用于管理我们的贴图文件 初始化接下来进入Initialize初始化阶段，前期主要是glfw创建窗口，gl的参数配置，属于渲染的基础部分 然后是对LAppView的初始化，主要计算渲染所需的两个矩阵viewMatrix和deviceToScreen，其实对于2D渲染来说也是有必要的，主要因为渲染的标准化坐标，对不同的屏幕有不同的表现，但也没3D那么复杂，只要2D世界坐标转化加屏幕坐标转化就足够了 接下来是Cubism引擎的初始化，步骤比较多，我们重点分析此部分内容。CubismFramework是一个静态函数库，是我们开发的主要部分，类似于opengl，它也是一个状态机。_cubismOption用于存储这个状态机StartUp(启动)的参数，这属于框架内的东西，按步骤来就行 状态机的初始化也属于框架内的东西，值得注意的是下一个LAppLive2DManager，虽然获得的单例，我们没有接住，但内部肯定包含实例的创建过程，而且这也不属于框架内 确实如我们所料，创建一个视图矩阵没啥好说的，引人注目的是ChangeScene，它显然是用来切换场景的函数，在这个实例中，右上角就有一个用来切换场景的按钮，而在这里将场景切换到0，相当于加载第一个场景了 前面没什么好说的，调试信息打印，获取模型的路径，释放所有模型。不过接下来好像有些麻烦，我们新建一个模型LAppModel，进入管理器的模型栈，并执行LoadAssets加载资源，但这个操作属于自建类，需要我们再进一步探索 以后调试说明直接跳过，然后是模型的读取和设置信息的读取，在这里我们需要实现CreateBuffer和DeleteBuffer，实际上我们要实现的是文件的读取，将其读到buffer，通过框架来创建setting，即解析后的数据 setting里包含许多数据，除了模型moc3，还有各种json。值得注意的是LAppModel继承自框架内的CubismUserModel类，LoadModel正是其用来加载模型的方法，这里的加载指的是从字节数据setting变成实在的模型数据类，而这个类就是LAppModel自己，他有一系列成员变量存储着这些信息，创建渲染器CreateRenderer属于框架内方法 在贴图载入这里，需要手动写一些东西，主要是贴图载入GPU的API是平台相关的，不能全写到框架内去，不过框架内也提供了相应的函数GetRenderer的BindTexture来简化流程，这个Renderer就是我们前一个方法创建出来的 最后这些，不是太重要，基本可以无视掉 这里projection矩阵的意义不明，函数内对象在函数结束就会销毁，UpdateTime计算帧率的函数，在渲染循环比较常见 初始化Sprite(精灵)，主要指的是模型以外的控件，比如切换按钮之类的，至于这里的Shader(着色器)，只是一个非常简单的贴图渲染器，至此初始化全部完成。 渲染循环接下来就是常见的循环渲染流程 从中可以发现，view对象的Render是我们需要重点考虑的函数 这里总共渲染了四个东西，_back是背景，_gear是右上角切换的齿轮，_power是右下角结束程序的按钮，Live2DManager的OnUpdate是完成我们模型渲染的主要函数，至于下面的_renderTarget，我们之前在不重要部分那里，设置了None，所有并不会执行，如果真需要的话，主要是FrameBuffer的场景，如果2D的话，属实没必要 首先看有几个需要渲染的模型，然后放到for循环内逐个实现。对于单个模型渲染，先获取到model对象，然后计算投影矩阵projection，接着是draw部分。PreModelDraw和PostModelDraw没啥意义，重要的是Update和Draw，因为模型并非静止的，所以其动态数据在Update内计算完，然后通过Draw结束绘制，Draw可以在框架内完成，我们来看看Update到底更新了些什么数据 这里有许多东西都属于框架内，deltaTimeSeconds有于记录当前帧有多少秒，_dragX和_dragY记录鼠标点击的位置，这并不准确，如果你运行示例的话，长按鼠标并移动，模型会跟踪你移动的位置，松开后则记录此坐标并在下一次点击前都不会改变。LoadParameters即加载参数组，这就是我们之前在模型格式分析中所讲的参数，不同的参数对应不同的图形状态，事实上Live2D模型的本质其实是，多元变量到图片的连续映射。接着检验某个动作是否结束，结束的话随机再播放一个动作，未结束的话将动作更新delta时间。接着是eyeblink(眨眼)，它相当于一组特设参数，掌管特殊功能，与下面的唇语言同步同理 眨眼比较简单，直接UpdateParameters更新参数即可 expression(表情)也是一组特殊的参数 blend和value联合运算表示在默认值上进行运算，这里用UpdateMotion，就当是规定，不用管它。然后就是一组更加专一的参数更新，它们连ID名字都是固定的，其实你可以在任何一个模型上发现这一组参数，使用Add和Update更新参数的区别在于，前者直接使用绝对数值，后者相对当前数组进行变换，所以我们会发现执行UpdatePara的前后会有一个参数加载和保存的过程。breath和下面的pose一样，属于基本没怎么用过的东西，无关紧要的玩意 最后的部分，physics和pose基本不用，这里的物理演算，指的不是头发随风飘动之类的，而是提供碰撞框，但我们在开发过程中并不需要如此精细的碰撞框。lipSync则是wav语音与唇部动作同步用的，勉强还行，跟着写就完事了。一个画面分好几个部分的参数来渲染，其实这正是我们需要做的事情。至此源码的大体流程，我们了解的差不多了。 流程梳理或许读完源码后，还有些头晕，让我们稍微梳理一下正个渲染应该做些什么吧。整个程序大体上就两个部分，初始化和循环渲染。在初始化阶段，我们首先要往常OpenGL相关的初始化配置，这部分没什么好说的。LAppView只是一个参数集合体，对于我们接下来的简单实例来说，是不需要的，当然平常开发的话，多做些封装是一个好习惯。接下来是CubismFrame的StartUp(启动)和Initialize(初始化)，直接调用框架内的函数即可。然后是模型数据的读取和解析，仿照Manager的ChangeScene即可。模型的数据会存储在LAppModel内，这部分与框架内核联系过于紧密，甚至直接继承框架内的类后，直接使用内部变量，所以LAppModel只能直接照搬。在LAppModel内引用了不少东西，我们一一来看，LAppDefine是常量集，包含众多可调参数，没有依赖，可以保留，LAppPal包含了文件读取，日志输出，时间记录等常用功能，只依赖LAppDefine，也可以保留，LAppWavFileHandler是音频文件读取类，依赖于前两个东西，可以保留，LAppTextureManager包含了图片读取(使用stb_image库)，将图片载入GPU等功能，懒得写的话，值得保留。剩下两个东西没有必要，我们直接去除。在渲染阶段，就没有那么复杂了，在循环内完成OpenGL基础更新后，更新view即可，view内有四个东西更新，只有其中的model更新是我们需要的，其它的直接扔了吧。 实现案例说了这么多，我们来实际操作一下，看看如何应用于开发之中吧。 准备阶段首先创建一个空白工程，配置好OpenGL的基础环境 进入Framework，对CMakeLists添加如下图的两句话，保证我们使用OpenGL作为引擎 然后使用CMake构建VS工程，先别急着构建，进入Rendering/OpenGL，打开CubismOffscreenSurface_OpenGLES2.hpp 把你的opengl头文件添加进去(这里使用glad)，实在不行用系统也行，只要有头文件就够了，因为我们生成lib文件，没有进行链接，然后构建，即可获得Framework.lib文件。最后把Framework的头文件全部拷入我们的工程，然后再拷入Core的头文件和lib文件，这样准备工作就完成了，大体架构如下 代码实现导入之前说的一些比较实用的类，然后大体写一个基本框架代码如下 至于全局变量还有些什么，等我们需要的时候再添加进去即可。首先我们初始化Framework 12345CubismFramework::Option cubismOption; cubismOption.LogFunction = LAppPal::PrintMessage; cubismOption.LoggingLevel = LAppDefine::CubismLoggingLevel; CubismFramework::StartUp(&amp;cubismAllocator, &amp;cubismOption); CubismFramework::Initialize(); cubismAllocator是内存分配器会被应用，所以作为全局变量，防止被销毁。然后是模型数据的加载 1234std::string modelPath = &quot;res/Rice/&quot;; std::string modelJsonName = &quot;Rice.model3.json&quot;; model = new LAppModel(); model-&gt;init(modelPath.c_str(), modelJsonName.c_str()); 我们选用可爱的Rice酱来演示，这里的LAppModel与实例一样，继承自CubismUserModel，但拥用更简单的内容。之所以这样做主要是因为CubismUserModel里面许多重要的绘制函数都是protected的，所以只能用子类来实现调用 1234567891011121314model-&gt;update();CubismMatrix44 projection;if (model-&gt;GetModel()-&gt;GetCanvasWidth() &gt; 1.0f &amp;&amp; screen_width &lt; screen_height)&#123; model-&gt;GetModelMatrix()-&gt;SetWidth(2.0f); projection.Scale(1.0f, static_cast&lt;float&gt;(screen_width) / static_cast&lt;float&gt;(screen_height));&#125;else&#123; projection.Scale(static_cast&lt;float&gt;(screen_height) / static_cast&lt;float&gt;(screen_width), 1.0f);&#125;model-&gt;GetRenderer&lt;Rendering::CubismRenderer_OpenGLES2&gt;()-&gt;SetMvpMatrix(&amp;projection);model-&gt;GetRenderer&lt;Rendering::CubismRenderer_OpenGLES2&gt;()-&gt;DrawModel(); 然后是更新部分也比较简单，先模型数据update一下，然后再调用model的renderer进行绘制，我们在update里实现的比较简单，就是进行motion的轮流播放，但这样还没结束 从配置中，我们可以看到，在4个motion里，只有1个是我们调用的Idle类型，所有我们进行如下修改 至此基本可以算完成了，我们运行一下 可以看到，我们的Rice酱已经正常的运动起来了。最后附上整个文件的源码 main.cpp123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195 #include &quot;glad/glad.h&quot;#include &quot;GLFW/glfw3.h&quot;#include &quot;LAppDefine.hpp&quot;#include &quot;LAppPal.hpp&quot;#include &quot;LAppTextureManager.hpp&quot;#include &quot;LAppAllocator.hpp&quot;#include &quot;CubismModelSettingJson.hpp&quot;#include &quot;Model/CubismModel.hpp&quot;#include &quot;Model/CubismUserModel.hpp&quot;#include &quot;Utils/CubismString.hpp&quot;#include &quot;Motion/CubismMotion.hpp&quot;#include &quot;Id/CubismIdManager.hpp&quot;#include &quot;Rendering/OpenGL/CubismRenderer_OpenGLES2.hpp&quot;int screen_width = 1280;int screen_height = 720;GLFWwindow* window;using namespace Csm;using namespace Live2D::Cubism::Framework;LAppAllocator cubismAllocator;LAppTextureManager* textureManager;class LAppModel : public Csm::CubismUserModel&#123;public: LAppModel() : CubismUserModel() &#123;&#125; void init(const csmChar* dir, const csmChar* fileName) &#123; //Load Data csmSizeInt size; csmString path = csmString(dir) + fileName; csmByte* buffer = LAppPal::LoadFileAsBytes(path.GetRawString(), &amp;size); ICubismModelSetting* setting = new CubismModelSettingJson(buffer, size); modelSetting = setting; LAppPal::ReleaseBytes(buffer); //Load Model modelHomeDir = dir; Load(setting); &#125; void update() &#123; const csmFloat32 deltaTimeSeconds = LAppPal::GetDeltaTime(); csmBool motionUpdated = false; _model-&gt;LoadParameters(); if (_motionManager-&gt;IsFinished()) &#123; index = (index + 1) % modelSetting-&gt;GetMotionCount(LAppDefine::MotionGroupIdle); csmString name = Utils::CubismString::GetFormatedString(&quot;%s_%d&quot;, LAppDefine::MotionGroupIdle, index); CubismMotion* motion = static_cast&lt;CubismMotion*&gt;(motions[name.GetRawString()]); csmBool autoDelete = false; _motionManager-&gt;StartMotionPriority(motion, autoDelete, LAppDefine::PriorityIdle); &#125; else &#123; motionUpdated = _motionManager-&gt;UpdateMotion(_model, deltaTimeSeconds); &#125; _model-&gt;SaveParameters(); _model-&gt;Update(); &#125;private: csmInt32 index = -1; void Load(ICubismModelSetting* setting) &#123; csmByte* buffer; csmSizeInt size; csmString path = setting-&gt;GetModelFileName(); path = modelHomeDir + path; buffer = LAppPal::LoadFileAsBytes(path.GetRawString(), &amp;size); LoadModel(buffer, size); LAppPal::ReleaseBytes(buffer); csmMap&lt;csmString, csmFloat32&gt; layout; setting-&gt;GetLayoutMap(layout); _modelMatrix-&gt;SetupFromLayout(layout); _model-&gt;SaveParameters(); //Load Motion for (csmInt32 i = 0; i &lt; setting-&gt;GetMotionGroupCount(); i++) &#123; const csmChar* group = setting-&gt;GetMotionGroupName(i); const csmInt32 count = setting-&gt;GetMotionCount(group); for (csmInt32 i = 0; i &lt; count; i++) &#123; csmString name = Utils::CubismString::GetFormatedString(&quot;%s_%d&quot;, group, i); csmString path = setting-&gt;GetMotionFileName(group, i); path = modelHomeDir + path; LAppPal::PrintLog(&quot;[APP]load motion: %s =&gt; [%s_%d] &quot;, path.GetRawString(), group, i); csmByte* buffer; csmSizeInt size; buffer = LAppPal::LoadFileAsBytes(path.GetRawString(), &amp;size); CubismMotion* tmpMotion = static_cast&lt;CubismMotion*&gt;(LoadMotion(buffer, size, name.GetRawString())); csmFloat32 fadeTime = setting-&gt;GetMotionFadeInTimeValue(group, i); if (fadeTime &gt;= 0.0f) &#123; tmpMotion-&gt;SetFadeInTime(fadeTime); &#125; fadeTime = setting-&gt;GetMotionFadeOutTimeValue(group, i); if (fadeTime &gt;= 0.0f) &#123; tmpMotion-&gt;SetFadeOutTime(fadeTime); &#125; motions[name] = tmpMotion; LAppPal::ReleaseBytes(buffer); &#125; &#125; //Load Texture CreateRenderer(); textureManager = new LAppTextureManager(); for (csmInt32 modelTextureNumber = 0; modelTextureNumber &lt; setting-&gt;GetTextureCount(); modelTextureNumber++) &#123; csmString texturePath = setting-&gt;GetTextureFileName(modelTextureNumber); texturePath = modelHomeDir + texturePath; LAppTextureManager::TextureInfo* texture = textureManager-&gt;CreateTextureFromPngFile(texturePath.GetRawString()); const csmInt32 glTextueNumber = texture-&gt;id; GetRenderer&lt;Rendering::CubismRenderer_OpenGLES2&gt;()-&gt;BindTexture(modelTextureNumber, glTextueNumber); &#125; GetRenderer&lt;Rendering::CubismRenderer_OpenGLES2&gt;()-&gt;IsPremultipliedAlpha(false); &#125; Csm::csmString modelHomeDir; Csm::ICubismModelSetting* modelSetting; Csm::csmMap&lt;Csm::csmString, Csm::ACubismMotion*&gt; motions;&#125;;LAppModel* model;void initCubism() &#123; //Framework Init CubismFramework::Option cubismOption; cubismOption.LogFunction = LAppPal::PrintMessage; cubismOption.LoggingLevel = LAppDefine::CubismLoggingLevel; CubismFramework::StartUp(&amp;cubismAllocator, &amp;cubismOption); CubismFramework::Initialize(); //Model Init std::string modelPath = &quot;res/Rice/&quot;; std::string modelJsonName = &quot;Rice.model3.json&quot;; model = new LAppModel(); model-&gt;init(modelPath.c_str(), modelJsonName.c_str()); LAppPal::UpdateTime();&#125;;//const csmFloat32 userTimeSeconds;void updateCubism() &#123; //update model-&gt;update(); //draw CubismMatrix44 projection; if (model-&gt;GetModel()-&gt;GetCanvasWidth() &gt; 1.0f &amp;&amp; screen_width &lt; screen_height) &#123; model-&gt;GetModelMatrix()-&gt;SetWidth(2.0f); projection.Scale(1.0f, static_cast&lt;float&gt;(screen_width) / static_cast&lt;float&gt;(screen_height)); &#125; else &#123; projection.Scale(static_cast&lt;float&gt;(screen_height) / static_cast&lt;float&gt;(screen_width), 1.0f); &#125; model-&gt;GetRenderer&lt;Rendering::CubismRenderer_OpenGLES2&gt;()-&gt;SetMvpMatrix(&amp;projection); model-&gt;GetRenderer&lt;Rendering::CubismRenderer_OpenGLES2&gt;()-&gt;DrawModel();&#125;;int main()&#123; glfwInit(); window = glfwCreateWindow(screen_width, screen_height, &quot;Live2D&quot;, nullptr, nullptr); glfwMakeContextCurrent(window); gladLoadGLLoader((GLADloadproc)glfwGetProcAddress); glfwSwapInterval(1); glViewport(0, 0, screen_width, screen_height); glEnable(GL_BLEND); glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA); initCubism(); while (!glfwWindowShouldClose(window)) &#123; LAppPal::UpdateTime(); glClearColor(0.0f, 0.0f, 0.0f, 1.0f); glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); glClearDepth(1.0); updateCubism(); glfwSwapBuffers(window); glfwPollEvents(); &#125; glfwTerminate(); return 0;&#125; 其它SDK除了我们的原生环境，Live2DCubism还提供了Web环境和Unity环境。我们已经度过了原生环境这个最艰难的部分，其它的其实也就变简单了很多，我们稍微看看其它的SDK吧。 UnitySDKUnity是如果一个十分常用的游戏开发引擎，同时还基于mono集成了一强大的编辑器，与UE4想比，比较适合多端小型游戏开发，上手也比较简单，SDK则是直接包装为unitypackage，这样的话用起来也不会太过困难。先随便的创建一个空项目，找到我们的资源包 因为在Unity里面，脚本文件cs也属于资源，cs即c#，本来是window上的一门基于net的开发语言，但由于后来mono计划，使它为了一门和java类似的跨平台开发语言，拥有和C差不多的潜力 从资源内容来看，Cubism在这里下的功夫，比原生环境多太多了，除了用c#写的core和framework以外，还提供了各种适配Unity工具。但这其实是合情合理的，Live2D大部分的应用场景基本都在于游戏开发，这也可以解释为什么在原生开发的SDK中，还有一个cocos2d引擎版的在里面。 WebSDKWeb的项目是基于node.js环境，使用的开发语言是js的超集typescript(ts)，官方推荐使用的构建工具是Webpack，编辑器是visualcode，连对应的配置文件都准备好了 原生环境看了都眼馋，就我们什么都没有。我们先运行install的task，主要完成基础依赖的安装 接下来执行build的任务，我们使用的都是typescript，这里完成静态页面的生成 最后实际就是生成了一个类似于程序的js文件 比较不幸的是，我并不能成功运行 这里是因为浏览器的跨域访问政策，导致无法取到模型资源，不过这也有办法解决，比如，我使用HBuilderX开发工具自带的，用于调试的浏览器 Live2D插件最后再介绍一个网页开发常用Live2D插件，是国人基于WebSDK开发成的，live2d-widget，它的前身是hexo-helper-live2d和live2d-widget.js，最开始主要用于私人博客，旧项目不再维护，新项目可以应用于各种Web开发场景。至于使用更是便捷到了极致，引入一个js文件，再对参数进行调节即可，案例很多，网上一大堆，就不多赘述了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"编程手记","slug":"编程手记","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0/"},{"name":"渲染","slug":"渲染","permalink":"http://example.com/tags/%E6%B8%B2%E6%9F%93/"}]},{"title":"为什么要学数学","slug":"为什么要学数学","date":"2022-03-18T02:38:23.000Z","updated":"2022-10-14T23:47:06.846Z","comments":true,"path":"archives/2022-03-18-为什么要学数学/","link":"","permalink":"http://example.com/archives/2022-03-18-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E6%95%B0%E5%AD%A6/","excerpt":"","text":"除了提高学习能力，学数学还真没啥用。","categories":[],"tags":[]},{"title":"永远地活在这里","slug":"永远地活在这里","date":"2022-03-15T05:17:11.000Z","updated":"2022-10-14T23:47:08.085Z","comments":true,"path":"archives/2022-03-15-永远地活在这里/","link":"","permalink":"http://example.com/archives/2022-03-15-%E6%B0%B8%E8%BF%9C%E5%9C%B0%E6%B4%BB%E5%9C%A8%E8%BF%99%E9%87%8C/","excerpt":"","text":"曾经有这么一个人，他很喜欢学习，所以每当他看到有趣的课程，他就会去看看。这是他发现，可恶，课程为什么如此的长，竟然高达几个小时，没办法了，等哪天闲下来了再说吧，于是收藏了下来。过了以后，他又发现了一个类似的课程，但总觉得有些新东西在里面，可是时间很紧急，没办法只能再收藏了。不知不觉一天已经过去了，收藏夹里多了好多课程，长达上百个小时，今天过得十分“充实”。几天过后，终于空闲了下来，这两天可贵的假期一定要把握住，啊，有这么多小时的课程啊，时间有些不够呢？看来只能开启倍速了，加速学习走起。没过几分钟，哎呀，怎么这么慢啊，啰啰嗦嗦地讲这么多，就为了这么简单的东西，跳过跳过。两天过去了，所有课程都“学完了”，学习的日子真实充实啊！今天又看到了几天前学过的课程，随手翻了翻目录，说起来这个东西是干什么的来着，嗯嗯，确实有这个东西，但好像有点想不起来了，算了算了，收藏收藏。嘿，你学了这么多东西，做这件事情应该很简单吧。这个嘛！好像可以那么来着，但是什么来着，不不不，我还在学习的阶段呢！还有很多需要学的东西呢？还没有到实践的时候呢！你也太累了吧，一天到晚都在学习，真的学得进去吗？当然了，我学得很快的，很多课程，我几下子就能抓住它的核心，轻松地搞懂全局，至于有些具体的东西，随手一百度不就全知道了吗？比如在编程的时候，面向谷歌？对啊对啊，记那么都也没有必要啊！随便一搜不就全都知道了吗？不考虑用这么丰富的学识做些什么吗？这没有办法啊！很多现在学的东西都有人研究透了，还没有到前沿的话，我该研究什么呀？可是你想这么多分科全部都推进到前沿吗？这得学到什么时候啊？没关系，虽然时不时地需要去复习，但我依旧在稳步前进，只不过这纵向的东西越来越多，速度越来越慢了。真的需要学这么多吗？如果不能拥有全面的思想，对问题进行全面看待的话，我就无法避免偏见了。有偏见和私心不是很正常的事吗？没办法，我害怕无知啊！说话的时侯，我从来都是小心翼翼，做判断是从来都要带上模糊的词语，而且要尽可能地加更多的修饰词。犯一两个错有什么关系嘛！可是可是，我学了这么多东西还会犯错，实在是对不起努力学习的自己，对于知道这么多东西的自己却还给别人说可能错误的知识实在是不够道德。没有道德还怕什么道德绑架吗？做了不好的事情，你就不会有一点羞愧之情吗？做了错事而感到背德，难道不是每个人都有的吗？人之初，性本善，你知道吗？我大概知道了，你看太多有关伦理道德的东西才会沦落到如此地步吧！我们没什么好说的，道不同不相为谋。是的，我回你一句，你真的是在学习吗？我很讨厌那些科普书，拿着一些看似高深莫测的名词，进行一番所谓的大众化解释，却没有让读者知道始末，结果导致了许多拿着几个名词就能说一大通乱七八糟的理论的人纷纷出现，不知道的人有会受其影响，形成恶性循环。嗯…怎么觉得怪怪的，对于读了这么多书的自己，似乎…好像…也只是记得几个名词，很多东西没怎么用过，许久没见到，忘得差不多了吧！收藏夹这玩意真是奇怪，明明每天都在努力的学习，但怎么总觉得这收藏夹越来越厚了。哦…我知道了，肯定是平台官方的阴谋，它不可信，还是翻翻自己库存的东西吧。嘶…有点夸张啊！这也太多了吧，真的看得玩吗？明明花了一个月看完了一本，结果却在闲暇的时候又收集了几十本。话说回来，我真的在学习吗？信息的膨胀超乎你的想象，其实在不知不觉中你已经产生了一种错觉，把收集的过程当成了学习，把刷视频的过程当成了学习……因为它们并不能给你带来充实的感觉，导致你觉得时间飞逝，日月如梭，但如果随时来一小段学习，就会将充实的感觉进行情感上的扩充，使你有一种一直在学习的错觉，所以在实际的情况中，你实际学习的时间会比你感觉上少很多。真的有必要时刻把学习挂在嘴上吗？当然了，比起各种奇奇怪怪的现实问题，学习才是永恒的主题，他所患的信息焦虑症也是源自对学习的错误认识。不要以为学习就是拿着书本，上着课，一切自我的变化都可以称之为学习，学习是最普遍的现象，学习也是时时刻刻都在发生的事情，甚至，没有学习就没有人类，更别说社会了，人类的本质就是学习，这也是为什么如今AI的核心是深度学习，当然靠穷举和定理实现的AI严格来说只能是程序，而限制机器学习的短板其实还是精度和算力。你害怕自己的无知吗？十分的害怕。到底有多害怕呢？听到不懂的东西，就要去查；突然有一个想法，就要记录下来；说话的时候小心翼翼，让说出的话尽可能少；不看点什么，就会心烦意乱；时间总是不够，做什么都觉得在浪费时间…你不觉得是因为自己太贪婪了吗？绝对不是的，只是因为太多浪费时间的事必需要做罢了。我看到，他将在斜坡上将巨石推上去，接着石头自己滚回原地，然后他再将石头推上去…我不禁感叹到，“下一次应该要离开了吧！”。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"文集","slug":"文集","permalink":"http://example.com/tags/%E6%96%87%E9%9B%86/"}]},{"title":"可恶的娱乐时代","slug":"可恶的娱乐时代","date":"2022-03-12T10:19:28.000Z","updated":"2022-10-14T23:47:07.630Z","comments":true,"path":"archives/2022-03-12-可恶的娱乐时代/","link":"","permalink":"http://example.com/archives/2022-03-12-%E5%8F%AF%E6%81%B6%E7%9A%84%E5%A8%B1%E4%B9%90%E6%97%B6%E4%BB%A3/","excerpt":"","text":"刷视频就是毒瘤，不能再刷视频了，不能再刷视频了，不能再刷视频了。","categories":[],"tags":[]},{"title":"数学探索之多项式与方程其三","slug":"数学探索之多项式与方程其三","date":"2022-03-10T02:34:18.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2022-03-10-数学探索之多项式与方程其三/","link":"","permalink":"http://example.com/archives/2022-03-10-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%8E%E6%96%B9%E7%A8%8B%E5%85%B6%E4%B8%89/","excerpt":"","text":"伽罗瓦的成功之处在于，将群和域这两个看似无关的东西进行了联系，在这一部分，我们来稍微看看所谓的对应是什么。 域的回顾在开始正题前，我们来稍稍地回忆一些有关域的一些概念，域的内容主要集中在域扩张上。如果扩域可以基于基域形成有限线性空间，则称为有限扩张，其维数则称为扩张的次数，类似于群中的指数。在域上定义多项式，通过多项式的根定义域上的代数元，由添加一个代数元即可得到单代数扩张，多个的话直接叫做代数扩张。然后直接证明，代数扩张都是单代数扩张，单代数扩张等价于有限扩张，到这里这几种扩张的结构基本清晰。于是又开始研究其它扩域，如包含方程根的最小扩域——分裂域，要么包含所有根要么不包含根的正规扩域。前者是用来证明相关定理的有力工具，还能与正规扩域建立等价关系。我们将有限正规扩域称为伽罗瓦扩域，而这即是我们本节研究的重点了。 小小性质伽罗瓦扩域虽说定义简单，但还是有些值得讨论的东西。设E是F的有限扩域，则由定理可知，E必是F的单代数扩域，于是可以找到这个添加元的最小多项式，在此基础上，我们可以得到多项式下的分裂域E⁺，它是E的扩域，也可能是E本身，再由定理可知，它一定是F的正规扩域，我们可以把E⁺称为E的正规闭包。这样的事实可以加深对正规扩域的理解，无限正规扩域其实还是存在的，如基域是Q，将所有代数元都添加到Q中得到的域记为F，从Q到F的过程是无限次有限扩张，研究的意义不大，所以我们更关注有限正规扩域，从某种意义来说，正规扩域可以直接认成伽罗瓦扩域。在上述过程中，我们可以得到一条扩张链F⊆E⊆E⁺，其中E⁺是F的正规扩域，由定义容易得到E⁺也是E的正规扩域，但E不一定是F的正规扩域，也就是说正规扩域并没有传递性。我们的讨论主要为了，让正规扩域和正规子群产生一定的联想，这两个过程虽然是反着的，但有着极其类似的“加细”操作和非传递性。 伽罗瓦群接下来进入我们的正题，如何将群和域进行联系？它们的起点是如下定义的自同构。定义1：域E到E自身的同构满射称为E的自同构，E的自同构全体关于映射乘法成群，称为E的自同构群，记作Aut(E)。自同构群及其子群其实有很广泛的应用，比较著名的是克莱因在爱尔兰根纲领提出的通过几何变换群来区分几何的思想，而那些群其实就是几何空间域中自同构群的子群。定义2：设E是F的扩域，则以下自同构的子集Gal(E/F) = {σ | σ∈Aut(E),σ(a)=a,∀a∈F}是Aut(E)的子群，称为扩域E/F的伽罗瓦群。与上面类似，我们可以定义F上多项式f(x)的伽罗瓦群为Gal(f)=Gal(E/F)，其中E是F关于f(x)的分裂域。Gal(f)有个极其重要的性质，Gal(f)的每个元素可以将f的根映射为f的根，再加上伽罗瓦群保持基域元素不变的特性，不难猜出满足这样的映射个数应该是有限的，确实我们有如下定理。定理1：| Gal(E/F) | = [ E : F ]这个定理其实变相地告诉了我们，只要完成了E在F上线性空间中的基的变换，就可以确定整个自同构了。对于域扩张E/F，我们研究的往往都是有限维，所以决定伽罗瓦群的实际就是几个对有限基的变换，我们发现这与置换群Sₙ十分的类似，确实我们可以得到如下定理。定理2：设f(x)是F[x]中的n次无重根多项式，则f(x)在F上的伽罗瓦群Gal(f)同构于n次置换群Sₙ的某个子群。这个定理，只要找到同构映射即可，找法可以通过定理1和对根的特性来完成。数字系的方程，往往通过直接算出根来确定伽罗瓦群，而我们的目标是一般代数方程 因为都是未知元，所以f(x)不是有理数域Q上的多项式，而是上的多项式。设是f(x)的n个根，则f(x)的分裂域为，再由韦达定理可以知道 所以f(x)的伽罗瓦群是 再运用之前建立映射的方式，我们可以得到一个一般性的定理。定理3：n次一般多项式的伽罗瓦群同构于n次置换群Sₙ。一般二字其实十分的重要。 伽罗瓦对应接下来该进入最后部分了，即伽罗瓦理论的基本定理。设域E的任一子域F，则可由F唯一确定E的自同构群Aut(E)的一个子群Gal(E/F) = {σ | σ∈Aut(E), σ(a)=a, ∀a∈F}记E的子域全体为，Aut(E)的子群全体为，这样就产生了由到的一个映射σ : F → Gal(E/F)反过来，对Aut(E)的任意一个子群G，可以确定E的一个子域Inv(G) = { a | a∈E, η(a)=a, ∀η∈G }我们把Inv(G)称为G的不变子域，还可以定义到的一个映射τ : G → Inv(G)我们把σ和τ称为伽罗瓦映射。伽罗瓦映射的简单性质没什么好说的，比较有用的是特殊域扩张下的伽罗瓦映射。定理4：设E/F，E/F₁，E/F₂都是伽罗瓦扩域，则(1)Inv(Gal(E/F))=F；(2)F₁⊇F₂⇔Gal(E/F₁)⊆Gal(E/F₂)。在这个定理里，我们看到了伽罗瓦扩域与其它扩域的区别，此类扩域与不变性有着密切的关系。下一步，我们自然很想要得到逆过来的情况，但与伽罗瓦群不同，对不变子域我们还没有多少研究，所以我们需要一个引理来进行下一步的证明。Artin引理：设任一域E，G是Aut(E)的任一有限子群，F=Inv(G)，则[E : F] ≤ | G |。这与伽罗瓦群的定理1是类似的，你可能会在意为什么这里是不等号，在证明中可以发现，证明次数大小的核心是寻找线性无关的基，同时因为有限的关系，最后只能判断线性无关基不超过某个值，而得不到具体数值，最后我们终于可以证明定理4的相反情况了。定理5：设E是域，G，G₁，G₂都是Aut(E)的有限子群，则(1)Gal(E/Inv(G)))=G；(2)G₁⊇G₂⇔Inv(G₁)⊆Inv(G₂)。只要有限子群就可以了，其实不必因此感到惊讶，因为自同构本身就是倾向于映射的，不变子群也是同样的情况，所以映射所代表的群不会像域那样有很多限制。我们由此可以得到一个有用的推论，域E必是关于域E自同构群的有限子群的不变子域的伽罗瓦扩域，即∀有限群G∈Aut(E)，E必是Inv(G)的伽罗瓦扩域。选取伽罗瓦扩域E/F，记G=Gal(E/F)，定义集合S₁ = { H | H是G的子群 }S₂ = { K | K是E的包含F的子域 }这里我们一样可以看到之前所察觉不对称感，在S₁中最小的元素可以是单位元集{e}，但在S₂中最小的元素只能是F，下面是整篇文章的核心定理。定理6：设E/F是伽罗瓦扩域，G=Gal(E/F)，则有：(1) σ : K → Gal(E/K)是S₂到S₁的双射，τ : H → Inv(H)是S₁到S₂的双射。(2) S₁和S₂存在如下伽罗瓦对应：①| H | = [ E : Inv(H)], [ G : H ] = [ Inv(H) : F ]②H是G的正规子群⇔Inv(F)是F的正规扩域。我们一般采取以下图来加深理解 这个定理的(2)②和上面黑字表出的推论是有区别的，看上图，E必是Inv(H)的伽罗瓦扩域，这属于之前就说过的东西，而(2)②则解答了我们之前对传递性的疑惑，而这部分也是我们最看重的部分，而对映射的描述只是为了加深我们对它的了解。通过(2)②，我们可以得到一个强力的同构关系，≌，一个伽罗瓦群对应于一个商群，总感觉有些深意，但这是下一篇文章的内容了。 结尾有关抽象代数的东西，我们再稍微做点解释。群域环之类的东西，其实和数字123…之类的东西十分像，不论是一颗树还是一本书，从加法运算的角度，我们关心的只是1，和它的性质1+1=2，而对是树还是书其实并不感兴趣，所以从数字的角度来看，一棵树和一本书其实可以看成同一种东西，在树和书上建立的数系性质是一样的，或者可以称它们是同构的。拿群来举例，群其实是由集合和映射两部分组成，它关心的是映射有结合律，有单位元，有逆元，至于映射是加法还是乘法并不是我们关心的，我们只关心拥有上面三种性质映射的性质。同样的如果两个群在映射的表现下基本类似，可以建立一一对应的关系，我们就称两个群是同构的，而从某种意义来说，它们可以看成同一个东西。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"代数","slug":"代数","permalink":"http://example.com/tags/%E4%BB%A3%E6%95%B0/"}]},{"title":"数学探索之多项式与方程其二","slug":"数学探索之多项式与方程其二","date":"2022-03-05T07:32:11.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2022-03-05-数学探索之多项式与方程其二/","link":"","permalink":"http://example.com/archives/2022-03-05-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%8E%E6%96%B9%E7%A8%8B%E5%85%B6%E4%BA%8C/","excerpt":"","text":"伽罗瓦理论最重要的基础是群和域，通过前面的内容，我们已经了解了域的扩张和域的简单分类，所以这部分主要的内容是了解群的一些比较重要的内容。至于群是什么，子群和同构之类的简单内容就不过多赘述了。值得注意群最好的对应，不是加减法，而是集合的映射。 陪集设H是G的子群，任取，记 则称这个集合为H在G中的一个左陪集。 同样的我们有右陪集。在通常的情况下，左右陪集不一定相同，但我们可以很容易地发现，陪集互不相交且正好覆盖父集，即H在G中的所有陪集是G的一个划分，同时更近一步可以得到以下定理。拉格朗日定理：设G是n阶群，H是G的m阶子群，则m必整除n。所得的数n/m称为H在G中的指数，记为[G:H]=n/m。这个定理就是通过陪集划分的性质得出来的，从中我们还可以引出一系列的推论，如，H在G中左右陪集个数相等且均等于H在G中的指数，陪集中元素的个数与H相等。需要注意，这个定理对有限群一定成立，但无限群可能就会有很多奇怪的情况了，最后给一个十分显然的指数公式。定理1：设K≤H≤G是三个群(若不加说明，对于群来说，我们使用K≤H表示，K是H的子群)，且G是有限群，则有 循环群在群内我们定义了一种运算，为了方便不妨直接称为乘法，同时我们将同一个元素a自乘n次，称为a的n次幂，记作aⁿ。为了完善运算我们进一步定义，a⁰=e、a⁻ⁿ=(a⁻¹)ⁿ，其中e是群的单位元，a⁻¹是a的逆元。容易验证这种运算与我们平常的幂运算有类似的法则，对加法群而言，乘法就是它的幂运算。 dot { position: relative; } dot:after { position: absolute; top: 0.5em; left: 0; bottom: 0; width: 100%; content: \"・\"; } dots { position: relative; font-weight:normal; /* 清除字体加粗效果，避免加粗与着重号的视觉冲突 */ } dots:after { position: absolute; top: 0.65em; left: 0; width: 100%; overflow: hidden; white-space: nowrap; content: \"・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・\"; } 对于a∈G，使得aⁿ=e成立的最小自然数n称为a的阶，并称a是G的(有限)n阶元。若只有n=0时才有aⁿ=e，则称a是无限阶元。容易得到，单位元e一定是1阶元，整数加群中的非零数都是无限阶元，有限群的元素都是有限阶元。设G是群，如果对任意a，b∈G都有ab=ba，则称G是交换群，也可以叫做Abel群。 定义1：若群G中的每一个元素都是G中某个固定元素a的整数幂aⁿ，则称G是由a生成循环群，记为G=。此时，称a是G的一个生成元。对于n阶有限元a生成的循环群，我们很容易发现它可以同构于我们之前讲的模运算集(它必定是一个整环，所以包含了加法群的成分)上的加法群，同时还可以得到，循环群必定是交换群。最后再提醒一遍，我们称加法群和乘法群只是为了便于区分它们之间的运算，同时表明可以将它们进行类比思考。最后，再说一个循环群的重要性质。定理2：设G=是循环群，则G的任一子群H必是循环群，m是某个整数。特别地，若|G|=n，则m必整除n，且是G唯一的n/m阶子群。由这个定理可以导出许多有用的推论，如素数阶群必是循环群、n阶循环群中生成元的个数恰好是欧拉函数φ(n)的值。 正规子群对于群来说，一般的子群得不到什么有趣的性质，所以我们决定加一些性质，或许就不一样了。定义2：设H是群G的子群，如果对任意的h∈H和g∈G，都有g⁻¹hg∈H，则称H是G的正规子群，记为。为了称呼方便，我们再定义一系列东西。容易验证也是G的一个子群，记为g⁻¹Hg，并称其为H在G中的一个共轭子群，g⁻¹hg称为h在G中的一个共轭元。显然交换群的所有子群都是正规子群，而对于其它的群我们有一下的等价命题。定理：对于群，以下命题等价：；，；，。由于定理3的(2)，所以我们也称正规子群为自共轭子群。对于正规子群还需要注意的是，正规子群没有传递性，如对于置换群(在最后我们会介绍一下)的3个子群、和，我们可以得到和，但是H并不是的正规子群。再提一个简单的性质G的指数为2的子群必是正规子群。正规子群的目的是导出下面的定理，从而引出商群的重要概念。定理4：设N是群G的正规子群，定义 和陪集的运算(aN)(bN)=(ab)N，则G/N关于此运算是一个群，称其为G模N的商群。特别当G是有限群时，商群的阶 设Z是整数加群，&lt;n&gt;为由n∈Z生成的循环加群，因为Z是交换群，所以&lt;n&gt;是Z的正规子群，于是我们可以定义商群Z/&lt;n&gt;，它是n阶循环加群，实际上，我们之前的模n运算集可以由商群来定义，。最后再说明一下循环群的厉害之处，有以下定理。定理5：设是一循环群，是G的子群，其中m是N中元素的最小幂，则G/N必是m阶循环群。 单群对于任意群G，显然G和{e}不仅G的子群，还是G的正规子群，我们将其称为G的平凡正规子群。定义3：若G除了平凡正规子群外，不存在其它正规子群，则称G为单群。有关单群我们先介绍一个十分重要，且经常用到的性质。定理6：有限交换单群的必是素数阶群，素数阶群必是交换单群。换言之就是，交换单群等价于素数阶群，其实从这里可以知道，单群在群中的重要之处，如同素数在自然数中的作用，实际上有限群的分类标准就是单群，只不过那是更加深刻的一个定理，而真正指出单群可以作为比较有用的群因子的是Jordan-Holder定理，过一会我们再介绍它。 置换群Sₙ有了上面的知识储备，实际上已经可以进入我们目标所需的核心内容，可解群的学习了，通过上面的内容，我们对群的分布及子群结构有了较为深入的理解，也看了如Z和Zₙ这样的例子，但是这样的例子过于优秀了，它们不仅是加法群，还是交换群，所以我们还要认识一点其它的例子才行，比如置换群，这个群对我们以后内容的学习也有极其重要的作用。定义4：设n个元素的集合S={1,…,n}，S上的所有一一变换(即S到S的双射)构成集合Sₙ，定义映射的复合为Sₙ上的乘法，则Sₙ构成一个群，我们称其为S上的n次置换群。其实S中的元素是什么并不重要，我们用自然数只是为了书写的方便而已，容易验证|Sₙ|=n!，即Sₙ是n!阶群。Sₙ中的元素都可以写成以下的形式， 其中表示映射作用下的像，是1,2,…,n的任一排列。由于上面这种表示过于繁琐，且上面部分都是一模一样的，在不引起歧义的情况下，我们将每个置换简记为一系列轮换的积，例如在S₄中，有轮换1→2→4→1，箭头前后表示映射的对应关系，于是我们可以将这个元素简记为(1 2 4)或(1 2 4)(3)，S₄中的单位元素也可以简记为(1)或(1)(2)(3)(4)，前面一种虽然简单，但是不能区分是几次置换群的元素，虽说效果似乎差不多就是了。引入新的记号以后，置换的运算也会变得更加简单，例如在S₆中， 我们在这里采用的运算是从左到右，其它教程都爱采用从右到左的运算，主要因为他们是从映射的角度来看待置换，而我们其实只关心置换间的运算，两个方式其实是等价的。上述置换的计算过程如下，1→4→2，2→3→5，5→6→6，6→2→3，3→1→1，在置换中没有写出的即表示不变。由轮换这个叫法和其意义，我们可以得到一个简单的性质， 我们用表示映射关系： 并称为一个k-轮换，特别地，我们称2-轮换(i j)为对换。每个轮换都可以写成若干个对换之积，具体做法如下， 虽说分解并不唯一，但多次实验后可以发现，轮换个数的奇偶性不变，于是有如下定义定义5：若置换可以表示成偶数个对换之积，则称其为偶置换，否则，称为奇置换。容易发现偶置换的运算具有封闭性，且关于此运算正好构成一个群，所以n≥2时，将Sₙ中所有偶置换构成的群记为Aₙ，称为n次交错群，它总共有n!/2个元素，由于[Sₙ:Aₙ]=2，所有Aₙ一定是Sₙ的正规子群。接下来，我们具体来看一看这些群的性质吧。对于S₁只有一个元素——单位元，没有什么值得说的。S₂和S₃都只有一个非平凡正规子群A₂和A₃，这可以直接从拉格朗日定理推出，同时A₂和A₃还都是交换单群，这些都比较简单，稍微特殊的是S₄，|A₄|=12，因为A₄不是交换群，所以A₄可能有6，4，3，2元子群。验证后，我们发现两个比较重要的群，分别是克莱因四元群 不知名的群 至于三元群其实有的，和A₃一样，但保持4不变 ₃ 上面这个群不能和其它子群形成正规关系，从这里我们也能意识到正规子群的重要性，对于S₄我们可以得到 [受限于符号系统，我们规定和表达和一样的意思]但S₄以后就不太一样了，我们有以下定理定理7：当n≥5时，Aₙ是单群。也就是说当n≠4或n≠1时，都有 至于定理7的证明，主要通过两个特殊的3-轮换(ilj)和(jkm)来实现的，通过归纳证明正规子群可以不断包含Aₙ的所有3-轮换，这样就与最小正规子群{e}不包含3-轮换相矛盾，而上述两个轮换存在的话，正好要求至少要有5个不同的元素，所以5的特殊性正是来自这里。其实我们已经认识了有限单群分类中比较重要的两个：素数阶循环群(即交换单群)和Aₙ(n≥5)，而S₁、A₂、A₃和H本质上其实还是交换单群，至于非交换单群，除了Aₙ(n≥5)其实还有很多，我们以后再来说吧。 可解群从上面的各种分析可以知道，知道一个正规群列对了解群的性质有着很大的帮助，而这也是我们本篇文章最重要概念的开端了。定义6：群G的如下子群的有限长序列 称为G的一个正规群列，相邻两群的商群称为这个正规群列的因子群(i=0,1,2,…,r-1)，{e}是G的单位元群。定义7：如果群G存在某个正规群列，且它的每个因子群都是交换群，则称G是可解群。由交换群的性质，我们可以很容易地得到任意交换群都是可解群。由之前对Sₙ的分析我们可以知道，S₂、S₃和S₄必是可解群，因为它们的因子群的阶数都是素数，所以必是交换群。而对于n≥5，之前所给的群列显然不符合要求(Aₙ/{e}=Aₙ不是交换群)，由于我们不知道上面所给的正规群列是否唯一，所以我们不能轻易地下判断，我们需要更加详细的判定定理。定义8：每个因子群都是单群的正规群列称为合成群列。你可以想象正规群列相当于一个不完全的分解，而合成群列则是一个更加完全的分解，我们可以由下面两个定理来说明这件事。Schreier定理：有限群的任意一个正规群列都可以加细为合成群列。所谓的“加细”操作，就是在相邻两个群之间再插入一个群，使得新插入的群与前后形成正规关系，这样操作的存在性可以由群的同构定理得到。Jordan-Holder定理：任一有限群的所有合成群列的长度都相等，且它们的合成因子在不计顺序意义下对应同构。这两个定理合起来说明了，有限群存在唯一的合成群列，最后我们可以由此得到一个判定可解群的有效定理。定理8：有限群G是可解群存在G的某个合成群列，其每个因子群都是素数阶群。这个定理正反使用的都是存在，也就是说证明不可解群时，我们可以找一个合成群列，说明它的因子群有一个不是素数阶即可，证明过程主要结合了前两个定理和素数阶群与交换单群的等价性。直接使用我们之前所给的正规群列，它也是合成群列，可以得到。定理9：当n≥5时，Sₙ和Aₙ都不是可解群。对于合成群列中的每个，其实是包含了元素最多的正规子群，所以也称是的极大正规子群，最后我们再给一个比较有用的东西。设G是任意一群，任取a，b∈G，记[a,b]=a⁻¹b⁻¹ab，称为a与b的换位子。就如它的名字那样，我们有ba[a,b]=ab，交换了元素乘积的位置，这就是它名字的由来。在此基础上，我们进一步定义， 中有限个换位子的积 这样的D(G)可以成为群，我们称D(G)是G的换位子群(或导群)，进一步我们还能证明D(G)是G的正规子群，但值得注意的是D(G)有可能等于G，比如A₅。定理10：设G是群，D(G)是G的换位子群，则(1)G/D(G)必是交换群；(2)若N是G的使G/N是交换群的正规子群，则N⊇D(G)。这个定理说明了，群的换位子群是使得商群是正规子群的最小正规子群，换言之就是，如果一个群的换位子群是它自身的话，就不可能再找到一个正规子群，使得与它形成的商群是交换群了，我们由一下定理说明此事。先定义D¹(G)=D(G)和Dⁿ(G)=D(Dⁿ⁻¹(G))，由此得。定理11：群G是可解群存在自然数n使Dⁿ(G)={e}。由换位子群的相关性质，我们可以得到属于可解群的一些优秀性质。定理12：可解群的子群和商群必是可解群。 收尾在这一节中，后来内容中最需要的其实就只有合成群列和定理9。不过更重要的是，我们可以通过这节内容对群的组成结构有了一个清晰的认识，而且还认识了有限单群分类中比较重要的两种：素数阶循环群和次数不低于5的交错群。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"代数","slug":"代数","permalink":"http://example.com/tags/%E4%BB%A3%E6%95%B0/"}]},{"title":"装神弄鬼的家伙","slug":"装神弄鬼的家伙","date":"2022-03-05T07:31:10.000Z","updated":"2022-10-14T23:47:09.518Z","comments":true,"path":"archives/2022-03-05-装神弄鬼的家伙/","link":"","permalink":"http://example.com/archives/2022-03-05-%E8%A3%85%E7%A5%9E%E5%BC%84%E9%AC%BC%E7%9A%84%E5%AE%B6%E4%BC%99/","excerpt":"","text":"据说冯·诺依曼当年推荐香农使用“熵”这个概念，不仅因为与统计和热力中的熵类似，而且最重要的是“Nobody knows what entropy really is,so in a debate you’ll always have the advantage”。","categories":[],"tags":[]},{"title":"数学探索之多项式与方程其一","slug":"数学探索之多项式与方程其一","date":"2022-03-01T00:13:27.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2022-03-01-数学探索之多项式与方程其一/","link":"","permalink":"http://example.com/archives/2022-03-01-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%8E%E6%96%B9%E7%A8%8B%E5%85%B6%E4%B8%80/","excerpt":"","text":"从今天开始我要开一个数学新坑，我们最后的目的是证明，一般5次及以上的一元多项式方程的没有根式解。按照最开篇的理论，我只会给出证明的脉络及所需要的定理，而不会给出详细的说明。在我的观念里，需要了解证明不外乎两种情况，一是对证明存在质疑，二是证明存在奇妙的手法。而目标的核心在于伽罗瓦映射，属于伽罗瓦理论的基本定理，所以不给证明也是无关紧要的，实在想知道的话可以去找，科普的，学术的，都有很多。 素域想了解伽罗瓦理论，需要稍微有些群和域的知识，至于环其实是无所谓的，对于代数结构，组成都是两部分，集合本身和定义在集合上的二元运算，群包含一种，可以类似的称为变换，域包含两种，可以类似的称为加法和乘法。 基本内容定义1：如果一个域F不含真子域，则称F是素域(或最小域)。对于域的基本操作是扩张，反过来即是找子域，如同自然数中找素数，我们也在域中找最小的域，即素域。对于域，同时包含加法群和乘法群，我们要时刻注意，在抽象代数里，我们使用有类似性质的东西来称呼它，并不代表它们是同样的东西。对于这两个群，都有单位元，为了以后称呼的方便，我们直接记为0和1，同时把运算分别称为加法和乘法。定义2：对于域F，如果p个1相加等于0，且p是最小的，则称p为域的特征。若不存在符合条件的自然数p，则称F的特征为0。我们选取域中特殊元素的性质来作为域的特征合情合理，而我们的目的主要是为了将域进行分类，以便于我们了解域的基本分布情况。 几个素域例子设Q是有理数域，则我们有以下定理。定理1：Q是特征为0的素域。这其实是十分显然的东西，比如1怎么也加不到0，且如果要对加、乘、加逆元(减)和乘逆元(除)封闭的最小数集是有理数。对于自然数n&gt;1，我们来定义一种自然数的模n运算，设不超过n的自然数x和y，定义x+y除以n的余数为x和y的模n加法，xy除以n的余数为x和y的模n乘法，显然这样的运算是封闭的，为了将这些特殊运算的数与一般自然数进行区分，我们将它们记为，[0]、[1]……[n-1]，共n个元素。举个例子，当n=4时，[2]+[3]=[1]，[2][3]=[2]等。学过数论的可能发现这与关于n的完全剩余系十分类似，确实可以这样对应来理解，我们将其记为，但值得注意的是，它并不一定是域，比如n=6时，似乎[0]和[1]是单位元，但这样的话，[2]就找不到乘法逆元了。虽然它不一定是域，但可以组成加法群。定理2：若p是素数，则是特征为p的素域。实际上，这两个域分别代表了有无限域和有限域，已经足够对域进行分类了。 完成域的分类定理3：任意域包含且只包含一个素域，任意域都是一个素域的扩张。这个定理最重要的部分是说明，任何域所包含的素域是唯一的，所以以最小子域来代表这个域是合理的。定理4：域的特征只能是0或素数。定理5：设F是一个域，当F的特征为0时，F包含一个与Q同构的素域；当F的特征为素数p时，F包含一个与同构的素域。至此，我们成功地通过特征完成了对域的分类，与此同时还可以通过素域找到相应的同构域来进行分析。 多项式基础我们的目的是一元多项式方程，方程是函数值为0时自变量的值，多项式是特殊的一类函数，所以有必要稍微讲一些多项式的基本知识，注意，我们的多项式泛指一元多项式。对于域K和不定元x∈K，将任意x和任意K中的定元，进行一系列加运算和乘运算所得的结果称为多项式，记为f(x)，当x=x₀∈K时，将对应的结果记为f(x₀)，由域的封闭性应有f(x₀)∈K，同时我们将所有f(x)组成的集合记为K[x]。K[x]可以成为K上的一个线性空间，K[x]的运算等价于域K中的运算，容易证明K[x]同构于可数无限维线性空间，其中1、x……xⁿ、……为一组基。所以我们可以用这组基下的“坐标”来表示每一个多项式，而这组“坐标”就是我们通常所说的系数。总之把它当成我们通常所说的多项式即可，需要注意的是，多项式基于域K定义，若K的特征不是0的话，也要按模运算来计算系数。由集合论的一些基本知识可以知道，任意的K[x]与自然数集N是等势的，即K[x]是可数的，K[x]中的多项式可以与根形成对应，换句话说，K上的代数数集与N等势，是可数的。同时，我们可以像N一样，定义K[x]上的整除和“素数”，但后者我们倾向于称为K上的不可约多项式，与N不同的是，K可以通过域扩张来使得不可约多项式在新的扩张域上可约，比如分裂域。同样的，K[x]上可以定义同余运算，对于模p运算，若p是素数，则K[x]关于模运算的商域同构于相应素域上的多项式。这里提了一个商域的概念，商一般是域关于一个等价关系形成的等价类所组成的集合，如模n运算，可以把整数分为n类，它们之间组成的新域，我们就称为商域。实际上，这些东西的建立还是很自然的，如果不想自己做的话，可以看相应的抽象代数课程。 本原多项式因为标题有个多项式，所有虽然接下来的内容与我们的最后目标没太大关系，但还是得稍微说一说。注意整数集Z并不是域，但可以形成整环，即乘法不一定有逆元，更近一步，对任意的n，也是整环，实际上如果研究多项式的话，在整环上是比较方便的，如果真的要对应域的话，实际上选用分式才是完备的，不妨类似的，我们定义整环上的多项式，这样才可以靠近我们在初等代数里经常研究的整系数多项式。容易证明域上多项式K[x]可以写成整环上多项式Z[x]乘以一个有理数，所以两者实质上是等价的。定义3：若Z[x]的一多项式f(x)，满足系数的最大公因数为1，则称f(x)为本原多项式。然后就可以得到一个著名的引理。高斯引理：Z[x]中的两个本原多项式的乘积仍然是一个本原多项式。还有一个比较有用的定理，主要用于有理根的判别。爱森斯坦因判别法：设f(x)=aₙxⁿ+……+a₁x+a₀∈Z[x]，若存在素数p，使得(1)；(2)，i = 0，1，…，n-1；(3)，则f(x)在Z上不可约。这两个定理可以通过多项式的同余来简便证明，接下来，我们再讲一个联系Z[x]与Q[x]的定理。定理6：Z上不可约的多项式在Q上也不可约。这个其实十分的明显，也是我们最开始把域多项式上研究转移到整环上的原因。其实多项式运算的研究没有多大意思，所以多项式的研究主要聚焦在根上，也有许多有趣的定理，如奇数次方程必有实根、傅里叶-布当判别法、笛卡尔符号法则、斯图姆判别法、卢斯判别法、胡尔威茨判别法等，不过这些东西意义都不大，下面定理这个才比较重要。代数基本定理：C[x]中的任一非常数多项式至少有一个复根。以域的观点来讲的话就是，复数集C是代数闭域，从代数角度来看，只研究到复数域就足够了，至于所谓的超复数，我们以后也可以稍微说一说。 多元多项式类似一元多项式的定义，将未知元的个数扩充到n个就可以得到n元多项式了，并将其记为f(x₁,…,xₙ)，域K上所有n元多项式的集合记为K[x₁,…,xₙ]，然后就是一系列的类别定义，数学比较厌倦的就是做重复的劳动，对于共性我们只研究一个抽象结构即可，这是数学的核心思想之一，即等价。我们应当侧重研究多元多项式的特性。定义4：对于n元多项式f(x₁,…,xₙ)，若任意交换两个不定元均不改变f，则称f为n元对称多项式。其实还有齐次多项式、轮换多项式之类的概念，但用处都不大，所以我们就不管它了。对于n次方程f(x)=(x-x₁)…(x-xₙ)=0，展开可以得到方程xⁿ-σ₁xⁿ⁻¹+σ₂xⁿ⁻²-…+(-1)ⁿσₙ=0，于是有方程根的韦达定理：、、…、。若将x₁、x₂、…、xₙ视为不定元的话，我们称σ₁、σ₂、…、σₙ为初等对称多项式，于是可以得到一条十分有用的定理。对称多项式基本定理：对任意对称多项式f(x₁,…,xₙ)∈K[x₁,…,xₙ]，存在唯一一个多项式g(y₁,…,yₙ)∈K[y₁,…,yₙ]，使得f(x₁,…,xₙ)=g(σ₁,…,σₙ)。换言之就是，任何对称多项式可以唯一地表示为初等多项式的一个多项式。这个定理证明实际就是我们平常转化的过程用数学归纳法严格写了一边，数字使用的是次数组成的字典序，从高到低一个个转化即可，最后再提一个有趣的公式。记，，σ₀=1则， ，若； ，若。 这两个公式差别在于求和的上标，其实还可以更加的精简一些 这个公式也称为牛顿公式，其实作用不大，就是挺好看的。 结尾如果真的只讲方程与多项式的话，到这里基本可以算结束了，最开始所说的域也不会有太多用处，但是如果只停留在当前的理论上，我们总有些无法证明的东西，比如5次的多项式方程为什么没办法像低次方程那样得到根式解。要解决这样的问题，也是我们接下的主题了，它是一条比较漫长的道路了，而这一篇只是预热而已。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"方程","slug":"方程","permalink":"http://example.com/tags/%E6%96%B9%E7%A8%8B/"}]},{"title":"重大标点bug","slug":"重大标点bug","date":"2022-02-27T07:05:03.000Z","updated":"2022-10-14T23:47:10.864Z","comments":true,"path":"archives/2022-02-27-重大标点bug/","link":"","permalink":"http://example.com/archives/2022-02-27-%E9%87%8D%E5%A4%A7%E6%A0%87%E7%82%B9bug/","excerpt":"","text":"目前发现文章标点符号存在严重问题，原因是Markdown渲染引擎，修复较为困难，只能临时限制只使用中文标点。","categories":[],"tags":[]},{"title":"非欧几何渲染的可能性探究","slug":"非欧几何渲染的可能性探究","date":"2022-02-24T12:07:32.000Z","updated":"2022-10-14T23:47:11.549Z","comments":true,"path":"archives/2022-02-24-非欧几何渲染的可能性探究/","link":"","permalink":"http://example.com/archives/2022-02-24-%E9%9D%9E%E6%AC%A7%E5%87%A0%E4%BD%95%E6%B8%B2%E6%9F%93%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7%E6%8E%A2%E7%A9%B6/","excerpt":"","text":"渲染这东西，学得真的简直不要太无聊，重复的东西学一遍，再仿写一遍代码，最后呢？还是得用别人封装好的东西来应用于实际的开发，我一直很疑惑，渲染这玩意除了硬件上升一个层数，算法真的有优化的余地吗？当然我认为的实际的情况是，如今的渲染已经基本满足需求了，不过事实如何，那就不得而知了。 非欧几何今天想讨论的主题是非欧几何的渲染问题，注意我们不会提及光照相关的东西，因为笔者都还在学习呢！而我们现在的目标是弄清非欧几何是什么？泛泛地来讲，不是欧式几何的都是非欧几何。稍微学过几何的人会认为，依欧几里得第五公理的不同，而产生的双曲几何(又称罗巴切夫基几何)，球面几何(狭义黎曼几何)，称为非欧几何。其实都不能算错，关键在于怎么看待它，我们需要提两个要点，首先单纯从公理的角度，欧几里得的五条公理并不完备，大多证明依旧依赖直观，而完备的公理体系应该是希尔伯特在几何基础里所给的五组公理。其次，黎曼几何是微分几何里十分重要的部分，不单只是球面或者椭圆上的几何。相信许多了解非欧几何的人，都喜欢在球面或伪球面上进行思考。确实如此，这也是如今对非欧几何的一个统一看法，那为什么常被讨论的非欧几何只有两种呢？符合直觉的一个很重要的点就是性质不随位置改变，比如三角形不论放在哪里内角和都是固定的，170、180、又或者190之类的。注意我们只在2维的平面上，所以考虑模型的时候则是3维空间中的曲面，要求各点性质不变其实很复杂，关键在于什么样的性质，比如Gauss-Bonnet公式表明了角度和与测地曲率和高斯曲率的关系，由于我们通常将曲面上测地线选取为直线，所以内角和实际只要求高斯曲率为定值。在通常认知下，区分非欧几何的平行公理，实际也与角度相关，所以我们一般认知的非欧几何就正好对应高斯曲率为正定值和负定值的情况，而高斯曲率为零就要注意了，不单只有平面，还包括柱面锥面等可展曲面，依据是否有脐点还有进一步的区分，就不讲了。数学很神奇，也很复杂，你只要考虑十分理想的情况就行了，常高斯曲率我们就分三种情况，平面、球面和伪球面。对于一些拥有奇特性质的几何可以放在高维欧式空间来理解这一事实，其实是有数学定理支持的，Whitney浸入定理和Whitney嵌入定理，通俗来讲就是，能计量的几何(局部欧式化的流形)可以对应到更高维欧式空间的图形上。比如，二维的罗氏几何可以对应到三维欧式空间的伪球面(也称双曲面，本质是高斯曲率为负常数的旋转面)上的几何。说了这么多，总结就两句话，非欧几何十分多样不只两种，一般的非欧几何都可以在更高维的欧式空间中表现出来。 两个项目实例在Github上，我随手搜了一下NonEuclidean，然后挑选了比较有代表的两个来讲讲吧，当然项目太老，OpenGL版本太低，我的电脑运行不了，只能看他们的演示和源码了，项目1和项目2。 项目1直接给结论，这大概和非欧几何没有关系。这个项目的关键部分是下面这个Portal类， 我们来详细讲讲它到底能做些什么，它是Object类的子类，Object是所有渲染对象的父类，提供了它们所需的共有属性，如位置、旋转和缩放，包括绘制，而Portal则拥有着独特的绘制函数，也因此使它成为了整个项目的核心。这里稍微提一下，这个项目的渲染循环， 我们可以看到关键在于两个函数Update和Render，前者将当前的参数计算好，后者将实际画面绘制到屏幕上。从下面的Render代码， 我们可以知道，它完成了两件事碰撞处理和Portal相关处理，对于前者主要是下面这个情形， 即玩家体积过大，进不了小洞口，而Portal的处理则与Portal的功能相关。所谓Portal实际上是一个传送门，而这个传送门可以看到对面的景象，我们拿第一个例子来说明，演示如下 代码如下 我们可以看到，它安排了两个Tunnel(隧道)和四个Portal。隧道可以设置两个Portal，两个Portal之间可以Connect，仔细看代码，我们可以发现隧道的两个Portal并没有连接，而是与另一个隧道的Portal连接。什么是连接(Connect)，Portal又是什么，我们还是得看它的源码。Portal有两个面front和back，使用Warp进行封装，而Warp保存这个面的所指向的两个Portal，表示从哪里来又到哪里去。总的来说一个Portal可以连接两个Portal，分别放在两个面上，至于它对应的模型“double_quad.obj”，在blender里打开可以得到， 其实就是一个矩形，没有厚度，有两个面，符合类的需求。我们稍微看一下Draw的代码， 在42行，我们可以看到一个关键的技术——帧缓存，这个功能很好理解，可以把它理解成一个可以放在任何位置的实时照片，代码层面就是渲染某个场景后将它保存为贴图，放到另一个渲染场景中去，这也是实现Portal的关键。首先是测量我们处于Portal的前面还是后面，接着到相应的目标地来建立相机，然后渲染场景保存到帧缓存中，最后完成当前Portal的渲染。所以，我们在front面可以看到toPortal所在位置的画面，在back面可以看到fromPortal所在位置的画面。其实进入Portal的时候，也是会实现传送功能的，就是改一下Player的位置就行了，而检测发生在我们之前提到的Update里面， 方法是比较常规的遍历，首先遍历所有的Object，前提它是Physical，目前只有玩家具有物理性，然后对每个Portal进行碰撞检测，不算优秀但也不差。到现在，我们也可以还原第一个场景到底做了些什么了，如下图 也就是空间本质上没有增减，只是内部空间从视觉上换位了，至于后面的几个场景本质都一样，只不过有时它会将多余的空间放到较远的地方，比如第二个Level2——将6个房间藏于4个房间内。其实Portal的原理在××门之类的mod里就有，也不是什么新奇的东西，只是帧缓存的一个用法，其实在演示的最后， 作者也提了一下Portal的原理，但讲得不是很深就是了。至此项目分析的差不多了，从纯数学的角度，它不是非欧几何，因为物质影响空间的性质并不合理，而应当是更纯粹的几何才对，当然你要和我说广义相对论的话，我只能说我了解的不够深入。 项目2接下来的这个项目就的确有非欧几何的样子了，我们来详细地研读一番吧。因为涉及很多定量的东西，我们稍微回顾一下OpenGL的渲染流程和思想，然后再谈如何进行非欧的改造。 OpenGL渲染流程现代的OpenGL渲染管线如下图 当然它并没有说清，如何渲染，又如何与代码产生联系的，只是单纯说明了渲染在GPU内的流程，其中蓝色表示可以控制的部分。拿出我之前在渲染游记中提到的例子，GPU渲染包含两部分代码，一是在CPU上的我们所运行的可以可以与GPU交互的程序，另一个是运行在GPU上的有输入和输出的程序，即着色器。OpenGL渲染就两步，设置状态参数和执行渲染命令，设置步骤拥有着最多部分的代码，如设置渲染的顶点数据VertexBuffer，设置渲染的Shader，由CPU向GPU传递Uniform等。有关渲染我们需要注意几点，点的数据只使用规范化坐标，限制在正负一内；基本图只有点和线，并没有如圆一样的曲线；点或点组或片段是并行处理的，相互之间不太容易交流。在OpenGL由CPU传入的一个点可以存储不止3个数据，最大值由显卡决定，而最后确定顶点位置的实际是顶点着色器的输出，是一个4维向量，也就是说传入顶点的实际作用是确定有几个点，执行了当前顶点着色器多少次，而传入的顶点用于区分是哪一次。为了说明这件事，我来举个简单的例子，如下， 红色是原来例子的修改部分，可以看到VertexBuffer并没有提供完整的数据，而是顶点着色器中进行补全的，当然我们不推荐这样的做法，主要因为通常情况下，从模型中读取的顶点数据是在CPU中，不能直接传到GPU里去，而且在GPU中进行逻辑运算不是明智之举，这个实例主要用于说明顶点最终在顶点着色器中以四维向量确定。gl_Position的寿命应该维持到了光栅化阶段，当然这是猜的，因为在几何着色器我们任可以操作gl_Position完成图元的绘制，不过依旧限制在正负一内就是了，而到片段着色器的时候只能使用gl_FragCoord变量确定位置，并且只有2个分量x和y，坐标是窗口坐标。实际上gl_FragCoord有个z分量，但主要用于深度测试，表示将什么绘制在前面。gl_Position到gl_FragCoord到底发生了什么呢？首先是，前三个分量分别除以第四个分量，z作为深度，而规范化的x和y则对应到屏幕上去，对应代码中的glViewport的区域。这里其实有说明了一个事实，OpenGL并没有3维识别的能力，而是将z作为谁在前面的指标，当然也可以对深度测试进行调参，这对以后透视视图的理解有一定帮助。至于为什么使用四维向量来表示位置，实际主要是便于运算，我们接下来会讲。 坐标系统如果直接使用OpenGL的坐标系统是十分不方便的，比如坐标限制在正负一，随不同的屏幕会得到不同的效果，而且原生的绘制流程是平行投影，不能达到符合现实的效果。我们也很容易发现，单纯绘制二维图形流程也太复杂了，实际上这样的流程本来就是为3维图形服务的，而现在你拥有了修改源代码的权利罢了。而我接下来说的这套坐标系统，其实可能就是OpenGL1.x版本的源码，不过确定就是了，但这流程在哪里基本都是不变的。我们知道顶点最终是在顶点着色器中确定的，所以我们最终的目的就是将我们的坐标系统变换到gl_Position所需要的规范化坐标去，输出结果是一个点，一个四维向量，输入存储在VertexBuffer里是一个不定维的向量，一般情况下我们只取前三位，其它部分用于保存如纹理坐标，法向量之类的数据，当前用不到就不管了，输入坐标我们经常会这么写vec4(aPos, 1.0)，aPos输入的坐标数据，这其实是渲染中的习惯，以第四个分量为1表示点，以第四个分量为0表示向量。相信搞过游戏开发的都知道对于一个实体，都有一个叫锚点(anchor)的东西，也称局部坐标，而我们传入的点集所处的坐标系正是这个局部坐标，这样对于绘制有许多便利之处。学过线性代数的同学应该知道，我们要将这个初始的四维向量变化到目标的四维向量是，如果要充分利用GPU的计算力，使用4*4矩阵进行乘法是比较便利的。大量的实践表明，使用下面的变化式是较为合适的 其中V表示向量，M表示矩阵。至于矩阵如何完成点的平移、旋转、缩放和坐标系变化，就真的没讲的必要了。矩阵从左到右我们依次称为投影矩阵、视图矩阵和模型矩阵，而这些矩阵通过Uniform由CPU传入GPU，首先，我们假想一个世界坐标，它单单只是数据，并不存在于OpenGL中，模型矩阵就是用于确定数据点集在这个世界坐标中的位置旋转和缩放的，也就是通过模型矩阵运算后，这个模型才真正确定，这样有一个明显的好处，如果绘制相同模型的图形时，我们只要一套点集数据，通过变化模型矩阵即可，这样可以极大的节约数据所占用的内存。视图矩阵则将世界坐标变化到视图所在的坐标(俗称相机)，通过对这个矩阵的调整，我们可以模拟在这个看似3维却不是3维的空间中自由移动。最后一个矩阵主要用于在这个视图坐标中圈一块空间，并映射到规范化坐标中去，平行投影与透视投影也是在这里实现的，也包括长宽比的确定，透视实现的方式并不难，只要将视线上的点的x和y坐标变化到相同即可，实际操作中用到了第四个分量，这样便于将视线上的点平分到正负一内用于深度测试，不过通常只用了正数部分，这样也符合常识。值得一提的是，裁剪其实是在几何着色器之后执行的，方法也很简单判断坐标是否在正负一内即可。 项目浅析终于回到了这个项目，我要提前说一点，我对这个项目的光相关内容存在质疑，所以我们不考虑这部分，至于原因，先看看我对几何部分的说明。几何部分内容主要集中在顶点着色器上，我们来稍微看一眼， 与传统算法相同，使用了3个矩阵来实现变化，也就是说这个项目主要是使用的矩阵与传统不同，来实现与传统不同的效果，我们可以在项目找到作者对此的解释 从中我们可以知道，作者只改变了视图矩阵和模型矩阵，这点也可以从代码中得到证实 我们没有看到模型矩阵的传入，它实际是在Object的绘制中确定，Mesh的绘制中传入GPU的 实际上，Object包含的是点集，表示一个模型，Mesh才是实际完成每个点绘制的，其实在这里就已经发现了一个项目问题，我们先推后一下，回到怎么确定矩阵的问题上来。传统的模型矩阵主要包含位置(平移)、旋转和缩放的信息，并且在矩阵上也有一定的规律，平移信息位于矩阵右上3×1里面，如上图的p(vert)，旋转和缩放位于左上3×3里面，如上图的R(obj)，从如下代码 我们可以知道，这个项目其实就是让R多乘了一个3×3的矩阵S，而这个S被作者称为度规，对每点通过不同世界的metric来得到，值得注意作者的这个项目有好几个不同的世界。理论上来说，每点的S矩阵应该是不同的，但作者让每个Object的所有点都使用center点所对应的S，这就是我之前所说的可能问题。对于视图矩阵，一般只有平移和旋转，分别表示相机的位置和朝向，由于朝向产生的方式有几种，所以一般分开进行相乘，下面是欧式空间下的生成方法 其中P是相机的位置，R、U、D分别表示右向量、上向量和朝向向量，它们可以组成一个正交标架，即坐标系，由线性代数的知识可以知道，只要像上面一样一排列，就可以实现世界坐标向相机坐标的转化了，而平常对相机的移动，可以通过位置向量加上相应的向量来实现，十分方便，如果要实现旋转的话，先看看这个项目 在UpdateDirection里面，我们看到一个矩阵Rotation，直接拿出来就可以实现我们平常的旋转了。而在这个项目了，我们发现，与Object类似，相机也同样是在旋转部分乘上这点的S矩阵。而在这个项目中，视图矩阵并不是作者所展示的那样有三个部分，在上面的getView可以看到，最右边矩阵m1是相机位置，不过多进行了一个叫regulariaze的不明操作，这个等下讲，而m2显然不是作者图给出的那样，在getView中可以看到结果是T*G在3×3部分的转置，在UpdateDirection可以看到T是S矩阵与旋转矩阵R乘积后的转置，而S与G的差别只是是否进行了施密特正交化，化简后是G的转置乘R乘T，所以此项目视图矩阵的差别就是旋转矩阵进行了一次相和变换，而且两个矩阵还差了个正交化，下面是作者在另一篇文章中的设想 这倒是符合代码中所写的那样，当然乱七八糟的，我看不懂，大致是前半将如何实现lookat，后部分说明为啥需要S和G，总之不明前后关系和内容。要不我们先来看看这个相机的移动吧，这是代码 首先它取出前后两个不同位置的矩阵S1和S2，一系列复杂操作得到Rotation，更新paraPos和T，但是这都不重要，虽然在Engine里先更新方向在更新位置，但是对于位置长期传入的是零，移动后占主导的仍然是方向更新，所以这里面真正起作用的就paraPos的更新，移动du然后regularize一次。 项目总结至此我们将整个项目的结构看完了，有几个疑点，首先最开始的物品坐标指的是什么，是曲纹坐标，还是参数坐标，还是欧式坐标。我们稍微解释这三个坐标的区别，4维空间中的3维流形，有可以由三个参数确定，无任何限制时，这三个参数就是所决定点的参数坐标，而参数如果正好是测地线的弧长参数，就称为曲纹坐标，而在4维空间中的坐标就称为欧式坐标。显然坐标只有三个参数，不可能是最后一种，从WorldExample里计算度规(我喜欢叫做度量张量)的方法可以看到，并没有选择弧长参数，只是直接拿常见的一般方程来进行计算，其实这样选择的坐标是不符合要求的。而regularize只是单纯执行取余，比如在球面上绕一圈回到原点，在视频演示里也说了一种所谓的循环空间，就是这么来的。回到渲染流程上来，让模型矩阵莫名地乘以一个度量，实在不知道有什么用处，度量张量的核心作用是确定微分长度的，要乘也是要乘以位置的变化，这么说起来，它给的错误局部渲染图确实是这么写的，但代码里却又和这没什么关系，相机部分也懒得继续说了。总得来讲，我认为它只是玩了一些数字魔法，随便乱乘得出了一些奇妙的效果，再配上非欧几何之类的公式计算，使它看起来是如此的合理。 非欧几何渲染从我的角度来看，非欧几何渲染是否可能取决你到底怎么看待它。如果只是要反直觉的话，前面两个项目其实都是可以的，而且后面一个项目还会更加的真实一些。渲染的核心几何元素是点和线，几何的核心元素也是点和线，如果单纯看着我们的屏幕，把很直的线当直线，我们永远只能看到欧式几何，如果你愿意把曲线当直线，当然就可以看到符合非欧几何的现象了，但是从OpenGL的渲染流程来看，直线变曲线并非可能的事，除非每条直线你都愿意给足够多的点，这主要是针对一些不太均匀的空间，每点有着不同的度量张量。要知道我们只能看到欧式空间，除非高一些维度做投影，这里我要提一下Whitney浸入定理，它其实是有定量关系的2维流形可以浸入3维欧式空间，而3维流形则最少要浸入5维欧式空间，对于只使用4个分量的OpenGL其实是不够的，但是浸入这回事，与单纯将4维欧式空间中的3维流形与3维欧式空间做对应，还是有所不同的，不过它们是否能形成对应，我目前没有看到定理可以表明这件事情。总结一下就是，我并不相信非欧几何渲染的存在，因为你无法改变看到的空间的欧几里得性，这时你会不会又要和我扯广义相对论，我也不知道怎么反驳，其实比起这个，我更相信非欧几何可视化这件事，确实有人做过这件事，详细可以看这个。而且在微分几何的道路上，还有好多需要学的东西，流形一个重要的部分就是局部欧式化，为什么欧式空间如此重要，其实我认为的实情是只有通过欧式空间才能认识这些非欧空间，因为计算怎么看都是来自欧式空间中的R，太复杂了，我永远也不会想明白的。非欧几何渲染的可能性即是数字魔法。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"渲染","slug":"渲染","permalink":"http://example.com/tags/%E6%B8%B2%E6%9F%93/"},{"name":"几何","slug":"几何","permalink":"http://example.com/tags/%E5%87%A0%E4%BD%95/"}]},{"title":"何处而来的迷茫","slug":"何处而来的迷茫","date":"2022-02-21T04:19:12.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2022-02-21-何处而来的迷茫/","link":"","permalink":"http://example.com/archives/2022-02-21-%E4%BD%95%E5%A4%84%E8%80%8C%E6%9D%A5%E7%9A%84%E8%BF%B7%E8%8C%AB/","excerpt":"","text":"如果你是真的在学习的话，那么实际的情况应该是，你会变得越来越无知，越来越迷茫。而已经有一个人进入了学习的迷茫期，随着学习的渐入佳境，你会变得愈发贪婪，虽然你仍在自己的道理上坚定不移，但是呢？你的道路是学习啊！自以为是的他，以为可以通过大局来将书越读越薄，但事实却是只记住了书的标题，书从来都是越读越厚的。如果读书从未产生疑问，永远都在解决问题的道路上，这可能不是书的问题，而是人的问题。所谓的书难道只是文字的集合吗？并非如此，不然为何他不会直接拿字典来学习呢？知识是字的排列组合？不是的，知识的意义在于联系，文字间的联系，文字与自然的联系，自然间的联系则藏于文字之间，始于人的理解，本质是文字与自然的联系。那么文字又是什么呢？只是一个个汉字，又或者是一个个单词，但这些都是不够的，世界上最神奇的文字是数学。文字的核心意义是记录与交流，传统的自然文字是模糊的，只有通过学习与拟合才能逐渐的理解其中的意义。但理解又是什么，你可否知道呢？数学是最为精确的语言，本应是最好理解的语言，但为何又会折磨着无数的人呢？因为我们没有记忆的理由。自然语言依靠与自然的联系来确定意义并逐渐逼近，而数学则是从自然中抽取核心内容后，可以自我成长的存在，它真正可怕之处在于自我的成长，也应如此它并不亲近于我们的自然，忘记当然也是必然的。知识是对联系的记忆，这或许并不严谨，但一定程度上说明了一个事实，学习的结果必然是变得无知，因为联系另一头只会越来越多。这里我想提一个特殊的存在——计算机，我把他称为数学的孩子也并不过分。学习上有件奇怪的事，与数学相关的学习最容易产生满足感与成就感，这并非偶然，而是数学联系本质的必然。你可能会觉得，数学联系的相对独立，是否意味着尽头的存在。情况可能恰恰相反，微弱的联系使得数学有了它存在的意义，而相对独立却使得它有了无限发展的可能，这实际就是数学的自我成长能力，自然科学永远只能在自然中寻找规律，但数学却可以在各种思想造物上寻找规律，自然可以通过事实来否定物理的某些理论，价值观可以否定文论的思想，但只要逻辑自洽，数学就永远是正确的。选择了它，已经接受了它的洗礼，已经逃不掉了，看不到出路在哪，永远追求着无法达到的目标，这已经是无法摆脱的事实了。我已经无法放弃它了，这就是它的魅力。不过这些无伤大雅，真正令人痛苦的是，高投入下的低回报，永远活着学习里，始终走不上创作的道路。或许曾经找过它的孩子们？看一看是否有容身之处，又或者能否找到一隅来立足。孩子或许已经长大，但曾经高傲的藐视还是难以消除，它还是太过平凡了，自以为与基建中体力劳动无异，外部看来果真如此，但事实确实，对自己所知甚潜的不满，是害怕，害怕大家都与自己并肩，害怕自己无法超过他们。他其实更多的是迷茫，同样的东西千千万万，却有着不同的表现形态，拥有着不同的学习成本，却到达近乎相同的目标，他恐惧着因哪部分的缺失而被淘汰，他当心着别人知道的东西他却不懂，迷茫带来的恐惧就是如此。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"心情","slug":"心情","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85/"}]},{"title":"娱乐至死","slug":"娱乐至死","date":"2022-02-15T08:51:49.000Z","updated":"2022-10-14T23:47:07.848Z","comments":true,"path":"archives/2022-02-15-娱乐至死/","link":"","permalink":"http://example.com/archives/2022-02-15-%E5%A8%B1%E4%B9%90%E8%87%B3%E6%AD%BB/","excerpt":"","text":"Amusing myself to death，すべてを忘れさせた。","categories":[],"tags":[]},{"title":"网中人","slug":"网中人","date":"2022-02-15T08:42:41.000Z","updated":"2022-10-14T23:47:08.579Z","comments":true,"path":"archives/2022-02-15-网中人/","link":"","permalink":"http://example.com/archives/2022-02-15-%E7%BD%91%E4%B8%AD%E4%BA%BA/","excerpt":"","text":"无法消解的依赖，在喧嚣世间寻得静谧之处后，又望向那五彩斑斓的世界，不断渴求着，一页又一页，新鲜感随时间消散，只留下无尽的空虚。 无法摆脱的沉溺，在一遍又一遍的重复过程后，厌恶与疲倦之感席卷全身，不断地翻阅，点进又退出，看似光怪陆离之景，却是平淡无奇之常。 若不是心怀期待，又为何常驻于此，若不是有所向往，又为何难以割舍。 在千篇一律之中寻找共鸣，却忽略了隐匿于背后的沉默，请记住，它没有灵性，复杂逻辑的结果来自简单的推演，这是推荐的空虚，没有纷繁复杂的光彩，如同鸡肋，永远找不到认同，因为从来都不是一路人。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"文集","slug":"文集","permalink":"http://example.com/tags/%E6%96%87%E9%9B%86/"}]},{"title":"评论区心态管理","slug":"评论区心态管理","date":"2022-02-01T09:16:32.000Z","updated":"2022-10-14T23:47:10.087Z","comments":true,"path":"archives/2022-02-01-评论区心态管理/","link":"","permalink":"http://example.com/archives/2022-02-01-%E8%AF%84%E8%AE%BA%E5%8C%BA%E5%BF%83%E6%80%81%E7%AE%A1%E7%90%86/","excerpt":"","text":"在很久以前，我是不怎么接触网络社区的，就算是QQ微信之类的除了收通知，就根本没有用过。在去年，我被同学安利了原神这个游戏，当然我对数值战斗之类的游戏并不感兴趣，主要因为我本身就是一个开发者，除了剧情游戏和沙盒游戏，我基本都不感冒，原神真正让我感兴趣的是分散的叙事手法和开发的技术力。至于技术力有哪些，我不说也说不明白，就拿一句话概括——你会感到莫名的惊艳感。原神的PV、前瞻和幕后等的首发都在Bilibili，正因如此，我真正地接触了B站，接触了所谓的网络舆论环境。有些人将原神当成一个巨大的培养皿和社会的显微镜，虽说有些过于夸张，但终究有几分道理，在其中你几乎可以知道大部分的网络“流行语”，嗯，说到底就是一些缩写。其实，我觉得还是有点过头了，说到底，它终究只是一个游戏，上升到有些层面，实在有些捧杀的意味。甚至，我觉得原神其实热度没有大部分人所说的那么夸张，至少我家里基本就没人知道，许多人甚至只知道个名字。在我眼里，还是如王者，吃鸡之类的竞技游戏热度更大，不过我都不是很喜欢就是了，因为太容易上瘾了。在我眼里，真实的情况是，喜欢讨论的人大多都聚集在这里，原神的评论区是我见过的最丰富的评论区，不仅是简单的几句点评，还包含了各种辩论和长篇大论，更包含了各种经典片段和名句。你要理解数量并不代表丰富，单纯地像写论文一样进行同义词转化，刷上上亿条都不能算上丰富，有的人喜欢把这称为饭圈，我就可以引用我曾见过的评论，“不要知道了几个词就拿来乱用，这样显得你很无知”。原神评论区的一个重要特色是成分复杂，有人拿提纯说事实在不妥，就算你不玩你却在讨论，这样你能也算圈子的一部分。有句话说的好，“游戏线上几分钟，游戏线下几小时。”前一段时间，就有个有关像素画通过叠图判断抄袭的讨论花了我一些时间去研究。原神讨论区包含不少思想十分尖锐的人，也包含纯粹为了拱火带动情绪的人，很多人都喜欢听他们爱说的话，包括我自己也一样，看到某些阴谋论之类的话语，简直就是不断让人血压升高，搞得自己十分地想去对线，当然你永远无法叫醒一个装睡的人，更怕地是他们还有非常丰富的智慧，有时自己都会莫名地被拐进去，甚至开始怀疑自己是不是有问题。比如有名的虚空对线，意思就是树立一个不存在的敌人，给他加上某些设定，并开始自己的辩论，我必需得承认一点这评论真得可以让人越读越犀利，前提是你必须只是一个见证的旅人，不然有时真就是会被带动情绪，中了人家的激将法，一个评论区都搞起来阴谋论，这不，连我自己都被影响了。前面我也将评论区上升到它所没有的高度，确实是我的不对，想为自己所爱之物发声可谓合情合理，当感到无力时就放弃了，大家都懂争议是正常的，要辩证的看问题，但又奈何自己的那无法捉摸的私心作祟，永远也无法摆脱偏见。看着别人对自己心爱之物的谩骂，看着别人对自己所捧之物的嘲讽，看着别人那得意洋洋的嘴脸，我引用评论区的经典，“一个游戏而已，哪里来的那么多优越感”。久经沙场的战士早以磨损，只得看新兵在那里挥斥方遒。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"心态","slug":"心态","permalink":"http://example.com/tags/%E5%BF%83%E6%80%81/"}]},{"title":"我想画画","slug":"我要画画","date":"2022-01-31T15:36:56.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2022-01-31-我要画画/","link":"","permalink":"http://example.com/archives/2022-01-31-%E6%88%91%E8%A6%81%E7%94%BB%E7%94%BB/","excerpt":"","text":"传统光照看完了，但PBR真的不想学了，因为我根本没有素材来实践，所以我有点想做点其它的了。","categories":[],"tags":[]},{"title":"讨厌过年","slug":"讨厌过年","date":"2022-01-27T14:23:20.000Z","updated":"2022-10-14T23:47:09.658Z","comments":true,"path":"archives/2022-01-27-讨厌过年/","link":"","permalink":"http://example.com/archives/2022-01-27-%E8%AE%A8%E5%8E%8C%E8%BF%87%E5%B9%B4/","excerpt":"","text":"过年实在太耽误学习了。","categories":[],"tags":[]},{"title":"数学探索之尺规作图其五","slug":"数学探索之尺规作图其五","date":"2022-01-27T09:34:18.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-01-27-数学探索之尺规作图其五/","link":"","permalink":"http://example.com/archives/2022-01-27-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE%E5%85%B6%E4%BA%94/","excerpt":"","text":"实在没什么可写的了，但还是水一下这部分的最后一篇文章吧。在这里，我们稍微介绍一下一些特殊的欧式作图问题。 结构欧式作图问题的主要结构有三个部分，初始图，作图工具和作图目标。求出所有的作图范围显然比单纯的作图目标更吸引人，所以说真正重要的只有前两部分，有关初始图形我们之前讨论过，它似乎用处不大，因此欧式作图的变形基本在于工具的不同，接下来我们就从这个角度来稍微看看吧。 单规作图 只用一把圆规作图。 结论是，除了连线可以做出所有尺规作图可以完成的图。虽然看起来有些不可思议，但如果仔细品读之前抽象的过程，就会发现尺子就是划线的，对于数域的扩张基本起不到作用。我们需要注意的是，点才是核心，而圆和线实际是可有可无的，除了产生交点，但直线能产生的交点都可以由圆产生。比如角平分线，我们可以只通过圆规来得到平分线上的点，但线的实体还是做不出来。 松规作图 用无刻度直尺和离开纸面就无法保持长度的圆规作图。 结论是，与尺规作图完全等价，实际上，长度迁移并非很重要的功能，在进行抽象化的过程中我们甚至没有使用过这个功能作为公理。我们可以更加明确的说，迁线可以直接通过圆的标点来实现，具体来说，就是通过过圆心的圆来实现长度迁移的功能。总之，可以想象一下，一个个圆互相推进的样子，我们只需圆心与圆上的点互换即可。 锈规作图 只使用半径固定的圆规和已知两个点作图。 我们不管直线之类作图的，首先两个点，我就认为它没有太大意义，就算没有，再做两个点也没啥区别。那篇论文可以找到，实际上，它删去了相似的情形，以两个点作为单位一，其实单纯圆规就能完成作图，但固定的半径不能为这个单位一，否则度量是无法谈及的，当然随便取两点，说它是单位一也没什么问题。总之，就是尺规作图也能只用圆规作图，我们并没有固定半径，实际上，固定半径圆规加两个点和单纯圆规是一模一样的。 单尺作图 只用一把没有刻度尺子和一个已知圆心的圆作图。 圆是必须的，不然对于一把尺子的话，是基本没有用处的，需要知道没有刻度的尺子等于没用，没有圆规等于没有度量信息，如我之前所说体现度量的不是直尺而是圆规，因为直尺是没有刻度的。而真正重要的其实是圆的圆心，有了它我们才能真正的只要直尺来，控制圆来模拟圆规的行为，因为圆规实际就是做圆，原来是圆找线，现在则是线找圆，这与锈规作图实际上是有一定的对偶性的。 结尾这篇文章没有什么干货，只是稍微陈述一些事实，对尺规作图进行证明，关键在于你将尺规作图看做什么，又如何去定义它，而我并不认为它存在纯正的证明，因为它本身就是不纯正的。我一直将数学视为信仰，就如我之前相信尺规作图等价于域扩张一样，又或者是在射影空间里，将圆锥曲线视为同一东西，将点和直线视为等价。这是这系列的尺规作图部分的最后了，而这又是这个系列的开始，也是从实际到理论的过度，接下来的我将只活在数学的虚拟世界里，研究抽象的理论，实际问题即是我害怕的，也是我不想讨论的，不为其它，只因太累，我喜欢的是数学纯正的抽象，仅此而已。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"尺规作图","slug":"尺规作图","permalink":"http://example.com/tags/%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE/"}]},{"title":"数学探索之尺规作图其四","slug":"数学探索之尺规作图其四","date":"2022-01-24T09:51:11.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-01-24-数学探索之尺规作图其四/","link":"","permalink":"http://example.com/archives/2022-01-24-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE%E5%85%B6%E5%9B%9B/","excerpt":"","text":"这们在这里打算做一次特别的尝试，有些人可能会认为将一个操作性的问题转化为数的问题总感觉怪怪的，似乎是纸上谈兵但还有几分道理。所以我们打算改变初始图形，不能让它只是空白。 导入一道经典的题目是，已知一个椭圆，尺规做出所有的椭圆信息(如焦点等)。这道题网上有许多解答，可以去参考，这里说一下大体思路，首先我们需要了解一下椭圆的基本几何性质，大多人对椭圆的印象来源于解析几何，其也可以看出许多性质，如对称性之类的，但比较实际的几乎研究来源于射影几何，虽说在射影空间里也存在解析的研究，但核心在于挖掘几何性质。废话说多了，问题的开始就是先找出中心，可以利用对称作图和中点的性质，然后再通过做长短轴就能得到几乎所有的对称性质了，对称优先性，这应该是几何中的一个常识吧。一旦到这一步，后面其实都简单了，准确来说是思路打开了，比如通过勾股定理做出焦点之类的，通过切线做准线之类的。总之，你稍微了解一下这个题目就行了，接下来开始咱们的形式化之旅，这才是重点。 椭圆作图的初始条件我们注意到这样一个事实，不论是否存在椭圆，原来能做的现在一样能做，如我们之前所说，可做数的本质来源于相似所产生的比值，也就是说，我们首先要挖出椭圆上的单位一在哪里。实际上，我想了很多天后的结论就是，暂时没有办法，进行多次尝试后，容易发现一个椭圆实际上只是提供了一个数——任意两条轴(总共3条轴a,b,c，但自由度只有2)的比。那椭圆上的其它点如何？能用，但几乎没用，它不能提供更多有效的信息，这里依据老规矩我来进行一下形象的说明。提供椭圆，但实际上只能做圆和直线，这与能做椭圆是存在本质区别的，当我们做出长轴和短轴时，它提供了椭圆上点对应参数的依据，根据椭圆的参数方程可以发现在长度提供上没有任何新的东西，放缩行为有没有椭圆，都是可以完成的，而差别在于我之前所说的比。有人可能会说，它难道不能提供后续作图上的帮助吗？能，但不可控，而不可控的点几乎等价于不可做，比如凭空截一条弦，最多只能当成单位一，但与其它的比是未知的。总结一句话就是，椭圆只提供了长短轴的比。 对导入的回答那么最开始的那道作图题，是否能从形式上说明可作图性呢？结论是不能，更进一步说没有必要。椭圆的参数并不能简单的抽象为一个数，它与直线和圆这类简单图形不同，光轴就有两条，或许多元数可能有些用处，但不在我们的讨论之中。你可能会觉得椭圆只是圆做变化就能得到的，但只有度量空间才能区分出椭圆和圆，而在射影空间中两者是一回事，尺规作图就是限定在度量空间的，所以它赋予椭圆的使命就是提供一个数，仅此而已。 草草了结有些东西，我都不知道该如何分类了，有那种感觉，但就是写不出来，结果就是搞像一篇文论一样。这篇文章本身就是来说明之前的方法并非万能，同时印证尺规作图不能过度形式化的观点，它终究还是灵活的。但奈何都不能从数学上严格来定义这些概念，只能模糊地说明了。拖了这么久，只有这么点东西，充分说明了我以前的观点——我只适合学数学，而不适合研究数学。这就是研究的一个失败例子，不过还是有发出来的必要，以此来警示自己。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"尺规作图","slug":"尺规作图","permalink":"http://example.com/tags/%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE/"}]},{"title":"数学探索之尺规作图其三","slug":"数学探索之尺规作图其三","date":"2022-01-20T04:49:42.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-01-20-数学探索之尺规作图其三/","link":"","permalink":"http://example.com/archives/2022-01-20-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE%E5%85%B6%E4%B8%89/","excerpt":"","text":"尺规作图的路还有很长，接下来我们来讨论一下正n边形的作图问题，因为这个作图存在可作图的情况，如2ⁿ边形，所以我们要使用充要条件，不过这个充要条件不是很好用，所以我们要加点限制，引入一些新的概念。这时你可能会说为什么不先来排除一些简单的情况呢？然后转化为奇数的情况，我只不过想展示一下域论大法，又没想过要教人。 正规扩域由之前的分析可以得知，我们依赖代数扩域(需要定义多项式)来导出作图问题，但作图问题的充要条件依赖的是纯扩域(只要域自身的运算)，为了联系两者我们需要伟大的伽罗瓦理论了，先来一些定义吧。定义1：设有限扩张E/F，F(x)是F上的多项式，E是所有包含F(x)所有根的域的交(即最小)，则称E是F关于F(x)的分裂域。定义2：设域扩张E/F，对于任意F上的多项式f(x)，若E要么包含f(x)所有根，要么不包含f(x)任何根，则称E是F的正规扩域。定理1：设域扩张E/F，E是F的正规扩域当且仅当E是F上某一多项式的分裂域。与代数扩张相关的是分裂域，通过此定理我们将火力转移到了正规扩域上，正规扩域依赖根的特性来定义，而对非根不变的特性有利于我们导出伽罗瓦群，正规扩域可以让其扩张的伽罗瓦群为可解群，由伽罗瓦理论中的一个定理可知，可解群对应域扩张中的运用根式可解，运用根式可解的定义是来源于纯扩张的(这部分与解方程相关，我们以后再谈)，这样我们就将纯扩张与代数扩张联系了起来，总结就是我们可以得到以下定理。定理2：k∈R可由1尺规做出当且仅当存在正规扩张F/Q，满足[F:Q]=2ⁿ且k∈F，其中Q为有理数集。注意这个定理，没有什么启发性的作用，它只用于告诉你一个事实，通过方程根导出的扩张，通过看次数来判断能否尺规做出的这个条件是充要的。 正n边形作图问题导出初始集如往常一样是1，而目标数应该是边之间的关系，即角度，边本身都是等同的，所以做出角等价于做出正n边形，所以我们的问题是cos(2π/n)或sin(2π/n)能否由1尺规做出。当然这样直接看的话，是得不到结果的，转化为方程的根，才有利于使用我们之前的理论。这里我们稍微用一下复数吧，因为[C:R]=2且C/R是正规扩张，所以复数对作图判定基本没有影响，复数z可由1尺规做出当且仅当z的实部和虚部可由1尺规做出。令，再由欧拉公式，我们可以推出z₀是zⁿ-1=0的一个根，于是我们的问题转化为，zⁿ-1=0的所有根能否由1尺规做出。我们强调所有，因为1也是它的根，而我们需要的其实是单位根ωₙ=z₀，而做出ωₙ则相当做出了所有根。 对单位根的研究在解决问题前我们有必要研究一下方程zⁿ-1=0，学过复数的应该是否清楚，它的n个根其实就是1,ωₙ,…,ωₙⁿ⁻¹。在复数域上，分布于一个等分单位圆上，当然这些意义都不大，我们主要研究的是这个方程的分解问题。接下来的东西，我也不知为什么会这样，为什么要这么做，但它就是这么证明出来的。 本原根接下来我们我们需要看每个根的循环群的阶是否为n，即每个根进行自乘，看能否遍历所有的根，比如ωₙ可以通过自乘遍历所有的根，但n=4时ω₄²=-1就不能通过自乘遍历所有的根，我们将zⁿ-1=0中能通过自乘遍历所有根的根称为n次本原根。我们容易得到n次本原根的个数为φ(n)，φ(n)是欧拉函数，表示与n互素的且不超过n的自然数的个数，在数论里我们有一些简单的性质。性质1：若s与t互素，则φ(st)=φ(s)φ(t)。性质2：若p是素数，则φ(pⁿ)=pⁿ-pⁿ⁻¹。这样我们将n进行质因数分解后就能计算φ(n)了。 分圆多项式设φ(n)个n次本原根分别为，则称 为n次分圆多项式。然后这个有几个分圆多项式的重要性质，它们可以通过伽罗瓦理论的相关性质来严格证明，当然也可以进行非抽象的证明，不过在这里我们就简单的表述一下定理。性质3：。性质4：分圆多项式是整系数多项式且在Q上不可约。由上面的两条性质就能完全掌握zⁿ-1=0的分解情况了，我们知道ωₙ是一个n次本原根，由上面的性质可以得知，是ωₙ的极小多项式，它的次数为φ(n)，故对于单代数扩张Q(ωₙ)/Q，有[Q(ωₙ):Q]=φ(n)。 问题的解决终于进入最后的步骤了，通过对单位根的研究，我们可以将原问题转化为ωₙ能否由1尺规做出，即在n满足什么条件下，存在r使得。首先对n进行质数分解，，其中为两两不同的奇素数，则 ，显然不可能是2的幂，则只能为0或1，故关键在于为2的幂。这里有个简单的性质，若为2的幂，则为费马素数。所谓费马素数n，应满足n是素数且存在i有。综上所述，我们可以得到最后的定理。定理：正n边形可以尺规作图当且仅当且为两两不同的费马素数。 尾声最后还要说明一点，就是我们的问题还没解决，目前已知前5个费马数(3,5,17,257,65537)是素数，虽然验证了大部分费马数不是素数，但仍然没有相关的证明来说明所有的情况，而这个必定超过了笔者的能力范围了，所以无法继续了，不过只要知道这些就足够了。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"尺规作图","slug":"尺规作图","permalink":"http://example.com/tags/%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE/"}]},{"title":"编程手记之渲染游记","slug":"编程手记之渲染游记","date":"2022-01-17T14:34:46.000Z","updated":"2022-10-14T23:47:08.564Z","comments":true,"path":"archives/2022-01-17-编程手记之渲染游记/","link":"","permalink":"http://example.com/archives/2022-01-17-%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0%E4%B9%8B%E6%B8%B2%E6%9F%93%E6%B8%B8%E8%AE%B0/","excerpt":"","text":"“铁打的图形，流水的API。”最近闲来无事，想去学习一下各种底层的渲染API，这一学就是好几天，而且我只画出了一个三角形。我感慨颇多故有以下这篇文章，我不会讲图形，只是从开发者的角度说说感受。 OpenGL源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include &lt;glad/glad.h&gt;#include &lt;GLFW/glfw3.h&gt;#include &lt;iostream&gt;int width = 1280;int height = 720;#pragma comment(lib, &quot;glfw3.lib&quot;)int main() &#123; //window glfwInit(); auto window = glfwCreateWindow(width, height, &quot;window&quot;, nullptr, nullptr); glfwMakeContextCurrent(window); gladLoadGLLoader((GLADloadproc)glfwGetProcAddress); glViewport(0, 0, width, height); //data GLuint vertex_array_object; glGenVertexArrays(1, &amp;vertex_array_object); glBindVertexArray(vertex_array_object); const float triangle[] = &#123; -0.5f, -0.5f, 0.0f, 0.5f, -0.5f, 0.0f, 0.0f, 0.5f, 0.0f &#125;; GLuint vertex_buffer_object; glGenBuffers(1, &amp;vertex_buffer_object); glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer_object); glBufferData(GL_ARRAY_BUFFER, sizeof(triangle), triangle, GL_STATIC_DRAW); unsigned int indices[] = &#123; 0, 1, 2 &#125;; GLuint element_buffer_object; glGenBuffers(1, &amp;element_buffer_object); glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, element_buffer_object); glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW); glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); glEnableVertexAttribArray(0); //shader const char* vertex_shader_source = &quot;#version 330 core\\n&quot; &quot;layout (location = 0) in vec3 aPos;\\n&quot; &quot;void main()\\n&quot; &quot;&#123;\\n&quot; &quot; gl_Position = vec4(aPos, 1.0);\\n&quot; &quot;&#125;\\n\\0&quot;; const char* fragment_shader_source = &quot;#version 330 core\\n&quot; &quot;out vec4 FragColor;\\n&quot; &quot;void main()\\n&quot; &quot;&#123;\\n&quot; &quot; FragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\\n&quot; &quot;&#125;\\n\\0&quot;; int vertex_shader = glCreateShader(GL_VERTEX_SHADER); glShaderSource(vertex_shader, 1, &amp;vertex_shader_source, NULL); glCompileShader(vertex_shader); int fragment_shader = glCreateShader(GL_FRAGMENT_SHADER); glShaderSource(fragment_shader, 1, &amp;fragment_shader_source, NULL); glCompileShader(fragment_shader); int shader_program = glCreateProgram(); glAttachShader(shader_program, vertex_shader); glAttachShader(shader_program, fragment_shader); glLinkProgram(shader_program); glDeleteShader(vertex_shader); glDeleteShader(fragment_shader); //draw glClearColor(0.0f, 0.0f, 0.0f, 1.0f); glClear(GL_COLOR_BUFFER_BIT); glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0); glfwSwapBuffers(window); //event while (!glfwWindowShouldClose(window)) &#123; glfwPollEvents(); &#125; glfwTerminate(); return 0;&#125; 运行结果 这里的OpenGL是现代版的，包含Buffer和Shader，并不是那种老式的glBegin和glEnd。注意我们写得API都是极度简化的，比如没有包含调试相关代码，所以千万别学啊，不然会难受的要死，特别是后面讲的更现代的API。OpenGL有点像第三方API，代码实现是在显卡驱动里面，但我们的Windows系统更偏爱的是它自己的DirectX，所以系统提供的gl库和接口都太老了，似乎还停留在1.X。所以我们需要一些辅助库来从驱动中拉出相关函数，当然也可以通过名称手动拉出函数指针，不过我们还是使用已经写好的工具比较好，这就是我们的glad。glfw主要提供窗口上下文，至于window自带的窗口API其实能用，就是十分麻烦，还没有跨平台性。还有一件值得说的是，比较新的glfw里已经集成了glad的功能，只不过初始化使用的是gladLoadGL而不是原来的gladLoadGLLoader，还有头文件是glad/gl.h，从目前的实际开发来看，两者的功能基本一样。值得注意的是我这里链接库的时候使用了#pragma，这可别用上瘾了，它没有跨平台性，如果不跨平台还不如用DirectX，我这里用这个主要是防止链接出问题，32位和64位需要链接两个不同的库，干脆直接在代码里链接算了。 DirectX11源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157#include &lt;Windows.h&gt;#include &lt;wrl.h&gt;#include &lt;d3d11.h&gt;#include &lt;d3dcompiler.h&gt;#include &lt;iostream&gt;#pragma comment(lib,&quot;d3d11.lib&quot;)#pragma comment(lib, &quot;D3DCompiler.lib&quot;)int width = 720;int height = 540;int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR lpCmdLine, int nCmdShow)&#123; // window WNDCLASSEX wc = &#123; 0 &#125;; wc.cbSize = sizeof(wc); wc.style = CS_OWNDC; wc.lpfnWndProc = DefWindowProc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hInstance; wc.hIcon = nullptr; wc.hCursor = nullptr; wc.hbrBackground = nullptr; wc.lpszMenuName = nullptr; wc.lpszClassName = TEXT(&quot;dx11Win&quot;); wc.hIconSm = nullptr; RegisterClassEx(&amp;wc); HWND hWnd = CreateWindow(L&quot;dx11Win&quot;, L&quot;DirectX11Window&quot;, WS_CAPTION | WS_MINIMIZEBOX | WS_SYSMENU, CW_USEDEFAULT, CW_USEDEFAULT, width, height, nullptr, nullptr, hInstance, nullptr); ShowWindow(hWnd, SW_SHOWDEFAULT); //init DXGI_SWAP_CHAIN_DESC sd = &#123;&#125;; sd.BufferDesc.Width = width; sd.BufferDesc.Height = height; sd.BufferDesc.Format = DXGI_FORMAT_B8G8R8A8_UNORM; sd.BufferDesc.RefreshRate.Numerator = 0; sd.BufferDesc.RefreshRate.Denominator = 0; sd.BufferDesc.Scaling = DXGI_MODE_SCALING_UNSPECIFIED; sd.BufferDesc.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED; sd.SampleDesc.Count = 1; sd.SampleDesc.Quality = 0; sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT; sd.BufferCount = 1; sd.OutputWindow = hWnd; sd.Windowed = TRUE; sd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD; sd.Flags = 0; Microsoft::WRL::ComPtr&lt;ID3D11Device&gt; pDevice; Microsoft::WRL::ComPtr&lt;IDXGISwapChain&gt; pSwap; Microsoft::WRL::ComPtr&lt;ID3D11DeviceContext&gt; pContext; D3D11CreateDeviceAndSwapChain(nullptr, D3D_DRIVER_TYPE_HARDWARE, nullptr, 0, nullptr, 0, D3D11_SDK_VERSION, &amp;sd, &amp;pSwap, &amp;pDevice, nullptr, &amp;pContext); Microsoft::WRL::ComPtr&lt;ID3D11RenderTargetView&gt; pTarget; Microsoft::WRL::ComPtr&lt;ID3D11Resource&gt; pBackBuffer; pSwap-&gt;GetBuffer(0, __uuidof(ID3D11Resource), &amp;pBackBuffer); pDevice-&gt;CreateRenderTargetView(pBackBuffer.Get(), nullptr, &amp;pTarget); //data const float vertices[] = &#123; 0.0f, 0.5f, 0.5f, -0.5f, -0.5f, -0.5f &#125;; Microsoft::WRL::ComPtr&lt;ID3D11Buffer&gt; pVertexBuffer; D3D11_BUFFER_DESC bd = &#123;&#125;; bd.BindFlags = D3D11_BIND_VERTEX_BUFFER; bd.Usage = D3D11_USAGE_DEFAULT; bd.CPUAccessFlags = 0u; bd.MiscFlags = 0u; bd.ByteWidth = sizeof(vertices); bd.StructureByteStride = 2 * sizeof(float); D3D11_SUBRESOURCE_DATA pData = &#123;&#125;; pData.pSysMem = vertices; pDevice-&gt;CreateBuffer(&amp;bd, &amp;pData, &amp;pVertexBuffer); const UINT stride = 2 * sizeof(float); const UINT offset = 0u; pContext-&gt;IASetVertexBuffers(0u, 1u, pVertexBuffer.GetAddressOf(), &amp;stride, &amp;offset); const unsigned short indices[] = &#123; 0, 1, 2 &#125;; Microsoft::WRL::ComPtr&lt;ID3D11Buffer&gt; pIndexBuffer; D3D11_BUFFER_DESC ibd = &#123;&#125;; ibd.BindFlags = D3D11_BIND_INDEX_BUFFER; ibd.Usage = D3D11_USAGE_DEFAULT; ibd.CPUAccessFlags = 0u; ibd.MiscFlags = 0u; ibd.ByteWidth = sizeof(indices); ibd.StructureByteStride = sizeof(unsigned short); D3D11_SUBRESOURCE_DATA isd = &#123;&#125;; isd.pSysMem = indices; pDevice-&gt;CreateBuffer(&amp;ibd, &amp;isd, &amp;pIndexBuffer); pContext-&gt;IASetIndexBuffer(pIndexBuffer.Get(), DXGI_FORMAT_R16_UINT, 0u); //shader Microsoft::WRL::ComPtr&lt;ID3DBlob&gt; pBlob; Microsoft::WRL::ComPtr&lt;ID3D11PixelShader&gt; pPixelShader; D3DReadFileToBlob(L&quot;PixelShader.cso&quot;, &amp;pBlob); pDevice-&gt;CreatePixelShader(pBlob-&gt;GetBufferPointer(), pBlob-&gt;GetBufferSize(), nullptr, &amp;pPixelShader); pContext-&gt;PSSetShader(pPixelShader.Get(), nullptr, 0u); Microsoft::WRL::ComPtr&lt;ID3D11VertexShader&gt; pVertexShader; D3DReadFileToBlob(L&quot;VertexShader.cso&quot;, &amp;pBlob); pDevice-&gt;CreateVertexShader(pBlob-&gt;GetBufferPointer(), pBlob-&gt;GetBufferSize(), nullptr, &amp;pVertexShader); pContext-&gt;VSSetShader(pVertexShader.Get(), nullptr, 0u); Microsoft::WRL::ComPtr&lt;ID3D11InputLayout&gt; pInputLayout; const D3D11_INPUT_ELEMENT_DESC ied[] = &#123; &#123;&quot;POSITION&quot;, 0, DXGI_FORMAT_R32G32_FLOAT, 0, 0, D3D11_INPUT_PER_VERTEX_DATA, 0&#125; &#125;; pDevice-&gt;CreateInputLayout(ied, 1u, pBlob-&gt;GetBufferPointer(), pBlob-&gt;GetBufferSize(), &amp;pInputLayout ); pContext-&gt;IASetInputLayout(pInputLayout.Get()); pContext-&gt;OMSetRenderTargets(1u, pTarget.GetAddressOf(), nullptr); pContext-&gt;IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST); D3D11_VIEWPORT vp; vp.Width = width; vp.Height = height; vp.MinDepth = 0; vp.MaxDepth = 1; vp.TopLeftX = 0; vp.TopLeftY = 0; pContext-&gt;RSSetViewports(1u, &amp;vp); //draw const float color[] = &#123; 0.0f, 0.0f, 0.0f, 1.0f &#125;; pContext-&gt;ClearRenderTargetView(pTarget.Get(), color); pContext-&gt;DrawIndexed(3u, 0u, 0u); pSwap-&gt;Present(1u, 0u); //event while (true) &#123; MSG msg; while (PeekMessage(&amp;msg, nullptr, 0, 0, PM_REMOVE)) &#123; TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); &#125; &#125; return 0;&#125; 顶点着色器 1234float4 main(float3 pos : POSITION) : SV_POSITION&#123; return float4(pos.x, pos.y, pos.z, 1.0f);&#125; 像素(片段)着色器 1234float4 main() : SV_TARGET&#123; return float4(1.0f, 1.0f, 1.0f, 1.0f);&#125; 运行结果 我使用DirectX的第一感受就是，都是什么奇葩的API，都什么时代了，还用大写的函数，而且还非得给基本变量类型大写重新命名一遍，真的有必要吗？可能是我基本没接触过C++版的WinAPI的原因吧，因为大部分用的都是C#和.Net。还有就是这离谱的配置系统，使用结构体保存配置就算了，有些本身没配置必要的就不能给一个默认值嘛，不配置还会运行异常，说到这个，我使用的时候遇到的最多错误的就是，指针访问冲突，当然其实不算啥，主要这个配置系统牵一发而动全身，某处配置了，另一处就得和它对应。还有这离谱的事件管理，果然老就是老，一个窗口关闭，结束程序都那么麻烦，当然我没写就是了。其实啊，窗口系统是可以使用glfw的，不过对于窗口系统最后我们要完成的就是封装而已，何必再多一层glfw来封装，而且DirectX只能在windows上，跨平台也没有必要吧，嗯，总之，这只是一种思路而已。虽然看起来DirectX似乎不太比得上OpenGL，当然我不想说效率之类的，这没有比较的意义，单纯从开发者来看，DirectX提供提供了更加丰富的组件，但opengl还得依赖外部库，如数学运算的glm，同时对内存管理上，DirectX有自己的智能指针来管理COM对象，而对opengl则必需封装对应对象以后，写了对应析构函数之后，才能使用C++标准提供的智能指针来管理内存。OpenGL嘛，跨平台，写起来简单又优美，这就足够了。 metal源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115@import simd;@import MetalKit;@interface AAPLRenderer : NSObject&lt;MTKViewDelegate&gt;- (nonnull instancetype)initWithMetalKitView:(nonnull MTKView *)mtkView;@endtypedef enum AAPLVertexInputIndex&#123; AAPLVertexInputIndexVertices = 0, AAPLVertexInputIndexViewportSize = 1,&#125; AAPLVertexInputIndex;typedef struct&#123; vector_float2 position; vector_float4 color;&#125; AAPLVertex;@implementation AAPLRenderer&#123; id&lt;MTLDevice&gt; _device; id&lt;MTLRenderPipelineState&gt; _pipelineState; id&lt;MTLCommandQueue&gt; _commandQueue; vector_uint2 _viewportSize;&#125;- (nonnull instancetype)initWithMetalKitView:(nonnull MTKView *)mtkView&#123; self = [super init]; if(self) &#123; NSError *error; _device = mtkView.device; id&lt;MTLLibrary&gt; defaultLibrary = [_device newDefaultLibrary]; id&lt;MTLFunction&gt; vertexFunction = [defaultLibrary newFunctionWithName:@&quot;vertexShader&quot;]; id&lt;MTLFunction&gt; fragmentFunction = [defaultLibrary newFunctionWithName:@&quot;fragmentShader&quot;]; MTLRenderPipelineDescriptor *pipelineStateDescriptor = [[MTLRenderPipelineDescriptor alloc] init]; pipelineStateDescriptor.label = @&quot;Simple Pipeline&quot;; pipelineStateDescriptor.vertexFunction = vertexFunction; pipelineStateDescriptor.fragmentFunction = fragmentFunction; pipelineStateDescriptor.colorAttachments[0].pixelFormat = mtkView.colorPixelFormat; _pipelineState = [_device newRenderPipelineStateWithDescriptor:pipelineStateDescriptor error:&amp;error]; NSAssert(_pipelineState, @&quot;Failed to create pipeline state: %@&quot;, error); _commandQueue = [_device newCommandQueue]; &#125; return self;&#125;- (void)mtkView:(nonnull MTKView *)view drawableSizeWillChange:(CGSize)size&#123; _viewportSize.x = size.width; _viewportSize.y = size.height;&#125;- (void)drawInMTKView:(nonnull MTKView *)view&#123; static const AAPLVertex triangleVertices[] = &#123; // 2D positions, RGBA colors &#123; &#123; 250, -250 &#125;, &#123; 1, 0, 0, 1 &#125; &#125;, &#123; &#123; -250, -250 &#125;, &#123; 0, 1, 0, 1 &#125; &#125;, &#123; &#123; 0, 250 &#125;, &#123; 0, 0, 1, 1 &#125; &#125;, &#125;; id&lt;MTLCommandBuffer&gt; commandBuffer = [_commandQueue commandBuffer]; commandBuffer.label = @&quot;MyCommand&quot;; MTLRenderPassDescriptor *renderPassDescriptor = view.currentRenderPassDescriptor; if(renderPassDescriptor != nil) &#123; id&lt;MTLRenderCommandEncoder&gt; renderEncoder = [commandBuffer renderCommandEncoderWithDescriptor:renderPassDescriptor]; renderEncoder.label = @&quot;MyRenderEncoder&quot;; [renderEncoder setViewport:(MTLViewport)&#123;0.0, 0.0, _viewportSize.x, _viewportSize.y, 0.0, 1.0 &#125;]; [renderEncoder setRenderPipelineState:_pipelineState]; [renderEncoder setVertexBytes:triangleVertices length:sizeof(triangleVertices) atIndex:AAPLVertexInputIndexVertices]; [renderEncoder setVertexBytes:&amp;_viewportSize length:sizeof(_viewportSize) atIndex:AAPLVertexInputIndexViewportSize]; [renderEncoder drawPrimitives:MTLPrimitiveTypeTriangle vertexStart:0 vertexCount:3]; [renderEncoder endEncoding]; [commandBuffer presentDrawable:view.currentDrawable]; &#125; [commandBuffer commit];&#125;@end 着色器 123456789101112131415161718192021222324252627282930313233343536#include &lt;metal_stdlib&gt;using namespace metal;#include &quot;AAPLShaderTypes.h&quot;struct RasterizerData&#123; float4 position [[position]]; float4 color;&#125;;vertex RasterizerDatavertexShader(uint vertexID [[vertex_id]], constant AAPLVertex *vertices [[buffer(AAPLVertexInputIndexVertices)]], constant vector_uint2 *viewportSizePointer [[buffer(AAPLVertexInputIndexViewportSize)]])&#123; RasterizerData out; float2 pixelSpacePosition = vertices[vertexID].position.xy; vector_float2 viewportSize = vector_float2(*viewportSizePointer); out.position = vector_float4(0.0, 0.0, 0.0, 1.0); out.position.xy = pixelSpacePosition / (viewportSize / 2.0); out.color = vertices[vertexID].color; return out;&#125;fragment float4 fragmentShader(RasterizerData in [[stage_in]])&#123; return in.color;&#125; 我们没有苹果的设备，所以没有运行结果，因为虚拟机上运行Xcode效率太差了，所以我直接把官方那的例子拿了过来，是的，唯有这个实在没办法实践，不过我们看看还是可以的。这里使用的语言是Object-C，不过别被这不习惯的写法搞害怕了，其实就是类型和名称倒过来而已，习惯go和kotlin的话应该不难，还有这“[]”，里面东西按顺序读的话，其实就是对象调用方法再加参数，总之习惯就好。metal这里已经开始使用一些现代的一些API思维了，如命令队列之类的，这里的上下文是直接由metal提供的view。其实，metal最让我觉得羡慕的是没有繁琐的配置过程，应该是它提供了大量默认值，与此同时，它还能在提供较为底层的API情况下写得如OpenGL差不多的简洁。在这里说可能没什么感受，大的要来了。 directX12源代码include &lt;Windows.h&gt;#include &lt;wrl.h&gt;#include &lt;d3d12.h&gt;#include &lt;dxgi.h&gt;#include &lt;d3dcompiler.h&gt;#pragma comment(lib,&quot;d3d12.lib&quot;)#pragma comment(lib, &quot;dxgi.lib&quot;)#pragma comment(lib, &quot;D3DCompiler.lib&quot;)int width = 720;int height = 540;int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR lpCmdLine, int nCmdShow)&#123; // window WNDCLASSEX wc = &#123; 0 &#125;; wc.cbSize = sizeof(wc); wc.style = CS_OWNDC; wc.lpfnWndProc = DefWindowProc; wc.cbClsExtra = 0; wc.cbWndExtra = 0; wc.hInstance = hInstance; wc.hIcon = nullptr; wc.hCursor = nullptr; wc.hbrBackground = nullptr; wc.lpszMenuName = nullptr; wc.lpszClassName = TEXT(&quot;dx12Win&quot;); wc.hIconSm = nullptr; RegisterClassEx(&amp;wc); HWND hWnd = CreateWindow(L&quot;dx12Win&quot;, L&quot;DirectX12Window&quot;, WS_CAPTION | WS_MINIMIZEBOX | WS_SYSMENU, CW_USEDEFAULT, CW_USEDEFAULT, width, height, nullptr, nullptr, hInstance, nullptr); ShowWindow(hWnd, SW_SHOWDEFAULT); //init Microsoft::WRL::ComPtr&lt;IDXGIFactory&gt; dxgiFactory; CreateDXGIFactory(IID_PPV_ARGS(&amp;dxgiFactory)); Microsoft::WRL::ComPtr&lt;ID3D12Device&gt; device; Microsoft::WRL::ComPtr&lt;IDXGIAdapter&gt; dxgiAdapter; for (UINT adapterIndex = 0; DXGI_ERROR_NOT_FOUND != dxgiFactory-&gt;EnumAdapters(adapterIndex, &amp;dxgiAdapter); ++adapterIndex) &#123; if (SUCCEEDED(D3D12CreateDevice(dxgiAdapter.Get(), D3D_FEATURE_LEVEL_11_0, _uuidof(ID3D12Device), nullptr))) break; &#125; D3D12CreateDevice(dxgiAdapter.Get(), D3D_FEATURE_LEVEL_11_0, IID_PPV_ARGS(&amp;device)); Microsoft::WRL::ComPtr&lt;ID3D12CommandQueue&gt; commandQueue; D3D12_COMMAND_QUEUE_DESC cqDesc = &#123;&#125;; cqDesc.Flags = D3D12_COMMAND_QUEUE_FLAG_NONE; cqDesc.Type = D3D12_COMMAND_LIST_TYPE_DIRECT; device-&gt;CreateCommandQueue(&amp;cqDesc, IID_PPV_ARGS(&amp;commandQueue)); Microsoft::WRL::ComPtr&lt;IDXGISwapChain&gt; swapChain; DXGI_SWAP_CHAIN_DESC swapChainDesc = &#123;&#125;; swapChainDesc.BufferCount = 2; swapChainDesc.BufferDesc.Width = width; swapChainDesc.BufferDesc.Height = height; swapChainDesc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM; swapChainDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT; swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_DISCARD; swapChainDesc.OutputWindow = hWnd; swapChainDesc.SampleDesc.Count = 1; swapChainDesc.Windowed = TRUE; dxgiFactory-&gt;CreateSwapChain(commandQueue.Get(), &amp;swapChainDesc, &amp;swapChain); int currentFrameIndex = 0; Microsoft::WRL::ComPtr&lt;ID3D12DescriptorHeap&gt; rtvDescriptorHeap; Microsoft::WRL::ComPtr&lt;ID3D12Resource&gt; pBackBuffer[2]; D3D12_DESCRIPTOR_HEAP_DESC rtvDesc = &#123;&#125;; rtvDesc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_RTV; rtvDesc.NumDescriptors = 2; rtvDesc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_NONE; device-&gt;CreateDescriptorHeap(&amp;rtvDesc, IID_PPV_ARGS(&amp;rtvDescriptorHeap)); D3D12_CPU_DESCRIPTOR_HANDLE rtvHandle = rtvDescriptorHeap-&gt;GetCPUDescriptorHandleForHeapStart(); int rtvDescriptorSize = device-&gt;GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_RTV); for (int i = 0; i &lt; 2; i++) &#123; swapChain-&gt;GetBuffer(i, IID_PPV_ARGS(&amp;pBackBuffer[i])); device-&gt;CreateRenderTargetView(pBackBuffer[i].Get(), nullptr, rtvHandle); rtvHandle.ptr += rtvDescriptorSize; &#125; Microsoft::WRL::ComPtr&lt;ID3D12CommandAllocator&gt; commandAllocator; device-&gt;CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE_DIRECT, IID_PPV_ARGS(&amp;commandAllocator)); Microsoft::WRL::ComPtr&lt;ID3D12GraphicsCommandList&gt; commandList; Microsoft::WRL::ComPtr&lt;ID3D12Fence&gt; fence; device-&gt;CreateFence(0, D3D12_FENCE_FLAG_NONE, IID_PPV_ARGS(&amp;fence)); int fenceValue = 0; HANDLE fenceEvent = CreateEvent(nullptr, FALSE, FALSE, nullptr); //shader Microsoft::WRL::ComPtr&lt;ID3D12RootSignature&gt; rootSignature; D3D12_ROOT_SIGNATURE_DESC rsDesc = &#123; 0, nullptr, 0, nullptr, D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT &#125;; Microsoft::WRL::ComPtr&lt;ID3DBlob&gt; signatureBlob; D3D12SerializeRootSignature(&amp;rsDesc, D3D_ROOT_SIGNATURE_VERSION_1_0, &amp;signatureBlob, nullptr); device-&gt;CreateRootSignature(0, signatureBlob-&gt;GetBufferPointer(), signatureBlob-&gt;GetBufferSize(), IID_PPV_ARGS(&amp;rootSignature)); Microsoft::WRL::ComPtr&lt;ID3DBlob&gt; vertexShaderBlob; D3DCompileFromFile(L&quot;VertexShader.hlsl&quot;, nullptr, nullptr, &quot;main&quot;, &quot;vs_5_0&quot;, D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, 0, &amp;vertexShaderBlob, nullptr); Microsoft::WRL::ComPtr&lt;ID3DBlob&gt; pixelShaderBlob; D3DCompileFromFile(L&quot;PixelShader.hlsl&quot;, nullptr, nullptr, &quot;main&quot;, &quot;ps_5_0&quot;, D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, 0, &amp;pixelShaderBlob, nullptr); const D3D12_INPUT_ELEMENT_DESC vertexLayout[] = &#123; &#123; &quot;POSITION&quot;, 0, DXGI_FORMAT_R32G32B32_FLOAT, 0, 0, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 &#125; &#125;; Microsoft::WRL::ComPtr&lt;ID3D12PipelineState&gt; pso; D3D12_GRAPHICS_PIPELINE_STATE_DESC psoDesc = &#123;&#125;; psoDesc.pRootSignature = rootSignature.Get(); psoDesc.VS = &#123; vertexShaderBlob-&gt;GetBufferPointer(), vertexShaderBlob-&gt;GetBufferSize() &#125;; psoDesc.PS = &#123; pixelShaderBlob-&gt;GetBufferPointer(), pixelShaderBlob-&gt;GetBufferSize() &#125;; psoDesc.SampleMask = 0xffffffff; const D3D12_RENDER_TARGET_BLEND_DESC defaultRenderTargetBlendDesc = &#123; FALSE,FALSE, D3D12_BLEND_ONE, D3D12_BLEND_ZERO, D3D12_BLEND_OP_ADD, D3D12_BLEND_ONE, D3D12_BLEND_ZERO, D3D12_BLEND_OP_ADD, D3D12_LOGIC_OP_NOOP, D3D12_COLOR_WRITE_ENABLE_ALL, &#125;; psoDesc.BlendState.AlphaToCoverageEnable = FALSE; psoDesc.BlendState.IndependentBlendEnable = FALSE; psoDesc.BlendState.RenderTarget[0] = defaultRenderTargetBlendDesc; psoDesc.RasterizerState.FillMode = D3D12_FILL_MODE_SOLID; psoDesc.RasterizerState.CullMode = D3D12_CULL_MODE_BACK; psoDesc.DepthStencilState.DepthEnable = FALSE; psoDesc.DepthStencilState.StencilEnable = FALSE; psoDesc.InputLayout.pInputElementDescs = vertexLayout; psoDesc.InputLayout.NumElements = sizeof(vertexLayout) / sizeof(D3D12_INPUT_ELEMENT_DESC); psoDesc.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE; psoDesc.NumRenderTargets = 1; psoDesc.RTVFormats[0] = DXGI_FORMAT_R8G8B8A8_UNORM; psoDesc.DSVFormat = DXGI_FORMAT_D32_FLOAT; psoDesc.SampleDesc = &#123; 1, 0 &#125;; device-&gt;CreateGraphicsPipelineState(&amp;psoDesc, IID_PPV_ARGS(&amp;pso)); device-&gt;CreateCommandList(0, D3D12_COMMAND_LIST_TYPE_DIRECT, commandAllocator.Get(), pso.Get(), IID_PPV_ARGS(&amp;commandList)); commandList-&gt;Close(); //data const float vertices[] = &#123; 0.0f, 0.5f, 0.5f, 0.3f, -0.0f, 0.5f, -0.3f, -0.0f, 0.5f &#125;; Microsoft::WRL::ComPtr&lt;ID3D12Resource&gt; vertexBuffer; D3D12_VERTEX_BUFFER_VIEW vertexBufferView; D3D12_HEAP_PROPERTIES hp = &#123;&#125;; hp.Type = D3D12_HEAP_TYPE_UPLOAD; D3D12_RESOURCE_DESC rd = &#123;&#125;; rd.Dimension = D3D12_RESOURCE_DIMENSION_BUFFER; rd.Width = sizeof(vertices); rd.Height = 1; rd.DepthOrArraySize = 1; rd.MipLevels = 1; rd.Flags = D3D12_RESOURCE_FLAG_NONE; rd.Format = DXGI_FORMAT_UNKNOWN; rd.SampleDesc = &#123;1, 0&#125;; rd.Layout = D3D12_TEXTURE_LAYOUT_ROW_MAJOR; device-&gt;CreateCommittedResource(&amp;hp, D3D12_HEAP_FLAG_NONE, &amp;rd, D3D12_RESOURCE_STATE_GENERIC_READ, nullptr, IID_PPV_ARGS(&amp;vertexBuffer)); void* pVertexDataBegin; const D3D12_RANGE readRange = &#123; 0, 0 &#125;; vertexBuffer-&gt;Map(0, &amp;readRange, &amp;pVertexDataBegin); memcpy(pVertexDataBegin, vertices, sizeof(vertices)); vertexBuffer-&gt;Unmap(0, nullptr); vertexBufferView.BufferLocation = vertexBuffer-&gt;GetGPUVirtualAddress(); vertexBufferView.StrideInBytes = 3 * sizeof(float); vertexBufferView.SizeInBytes = sizeof(vertices); D3D12_VIEWPORT viewport; viewport.TopLeftX = 0; viewport.TopLeftY = 0; viewport.Width = (float)width; viewport.Height = (float)height; viewport.MinDepth = 0.0f; viewport.MaxDepth = 1.0f; D3D12_RECT scissorRect; scissorRect.left = 0; scissorRect.top = 0; scissorRect.right = width; scissorRect.bottom = height; commandQueue-&gt;Signal(fence.Get(), 1); //render const float clearColor[] = &#123; 0.0f, 0.0f, 0.0f, 1.0f &#125;; rtvHandle = rtvDescriptorHeap-&gt;GetCPUDescriptorHandleForHeapStart(); D3D12_RESOURCE_BARRIER barrierB = &#123;&#125;; barrierB.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION; barrierB.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE; barrierB.Transition.pResource = pBackBuffer[0].Get(); barrierB.Transition.StateBefore = D3D12_RESOURCE_STATE_PRESENT; barrierB.Transition.StateAfter = D3D12_RESOURCE_STATE_RENDER_TARGET; barrierB.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES; D3D12_RESOURCE_BARRIER barrierA = &#123;&#125;; barrierA.Type = D3D12_RESOURCE_BARRIER_TYPE_TRANSITION; barrierA.Flags = D3D12_RESOURCE_BARRIER_FLAG_NONE; barrierA.Transition.pResource = pBackBuffer[0].Get(); barrierA.Transition.StateBefore = D3D12_RESOURCE_STATE_RENDER_TARGET; barrierA.Transition.StateAfter = D3D12_RESOURCE_STATE_PRESENT; barrierA.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES; commandAllocator-&gt;Reset(); commandList-&gt;Reset(commandAllocator.Get(), pso.Get()); commandList-&gt;SetGraphicsRootSignature(rootSignature.Get()); commandList-&gt;RSSetViewports(1, &amp;viewport); commandList-&gt;RSSetScissorRects(1, &amp;scissorRect); commandList-&gt;ResourceBarrier(1, &amp;barrierB); commandList-&gt;OMSetRenderTargets(1, &amp;rtvHandle, FALSE, nullptr); commandList-&gt;ClearRenderTargetView(rtvHandle, clearColor, 0, nullptr); commandList-&gt;IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST); commandList-&gt;IASetVertexBuffers(0, 1, &amp;vertexBufferView); commandList-&gt;DrawInstanced(3, 1, 0, 0); commandList-&gt;ResourceBarrier(1, &amp;barrierA); commandList-&gt;Close(); ID3D12CommandList* ppCommandLists[] = &#123; commandList.Get() &#125;; commandQueue-&gt;ExecuteCommandLists(_countof(ppCommandLists), ppCommandLists); swapChain-&gt;Present(1, 0); commandQueue-&gt;Signal(fence.Get(), 2); //event while (true) &#123; MSG msg; while (PeekMessage(&amp;msg, nullptr, 0, 0, PM_REMOVE)) &#123; TranslateMessage(&amp;msg); DispatchMessage(&amp;msg); &#125; &#125; return 0;&#125; 着色器与DierctX11相同，代码量差距如下 其实并没网上那么夸张，运行结果如下 网上大多例子，包括官方的，基本都是类的封装，使用的设备是dgxi1_4.h，而引入dx12用的都是辅助头d3dx12.h，这是官方推荐的，也是基本所有人的做法，不过我嘛，可是技术宅啊，当然要用更底层的东西了，而且我本身就不喜欢windows这种十分古老的API写法，却还得在类名称后面加数字什么的，这不得气死我这个强迫症啊。辅助头提供了什么？我们先说点其它的吧，依据官方的意思与理想，在这种API下，开发者可以更加的接近底层，拥有更多的控制权，这样就能更好得优化游戏了。但我对此提出了质疑，这好比什么，给你车让你开和给你车的部件让你造车再开一样，开发者做了更多的事情，但开发者真得有精力去思考更底层的优化吗？给我设备选择，给我命令队列，来进行优化选择吗？但就目前来看，做的事基本都是封装，然后退化到上一个时代，这是十分讽刺的一件事，甚至连官方的例子都是贴脸的告诉你，给我封装起来。或许是我见识短浅吧，但是如此多的配置不都是copy来的嘛，那些东西基本没啥好改的吧，却还非得再写一遍，开发者致力于上一层调优，又哪有时间来管这一层呢？API的目的本身就是来节约开发的，但却在图形方面往反方向发展，这绝对知道思考。d3dx12.h头文件其实就是在说明这件事情，它实际就是拿来简化配置用的，其实越是底层配置关联性就越大，出错概率就越大，虽说有调试层，但对开发者来说综究还是会厌烦的，而且我们都知道这到底有啥好优化的？最后，我想说一句话，你的那个d3dx12.h能不能好好封装，我已经出现好多次右值不能取地址的情况了。 vulkan源代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424#define GLFW_INCLUDE_VULKAN#include &lt;GLFW/glfw3.h&gt;#include &lt;fstream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;#include &lt;optional&gt;#include &lt;set&gt;#include &lt;array&gt;#pragma comment(lib, &quot;glfw3-x64.lib&quot;)#pragma comment(lib, &quot;vulkan-1.lib&quot;)const uint32_t WIDTH = 800;const uint32_t HEIGHT = 600;int main() &#123; //window glfwInit(); glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API); GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, &quot;Vulkan&quot;, nullptr, nullptr); //init VkApplicationInfo appInfo&#123;&#125;; appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO; appInfo.pApplicationName = &quot;Hello Triangle&quot;; appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0); appInfo.pEngineName = &quot;No Engine&quot;; appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0); appInfo.apiVersion = VK_API_VERSION_1_0; VkInstanceCreateInfo instanceInfo&#123;&#125;; instanceInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO; instanceInfo.pApplicationInfo = &amp;appInfo; uint32_t glfwExtensionCount = 0; const char** glfwExtensions = glfwGetRequiredInstanceExtensions(&amp;glfwExtensionCount); std::vector&lt;const char*&gt; extensions(glfwExtensions, glfwExtensions + glfwExtensionCount); instanceInfo.enabledExtensionCount = static_cast&lt;uint32_t&gt;(extensions.size()); instanceInfo.ppEnabledExtensionNames = extensions.data(); instanceInfo.enabledLayerCount = 0; instanceInfo.pNext = nullptr; VkInstance instance; vkCreateInstance(&amp;instanceInfo, nullptr, &amp;instance); VkSurfaceKHR surface; glfwCreateWindowSurface(instance, window, nullptr, &amp;surface); uint32_t deviceCount = 0; vkEnumeratePhysicalDevices(instance, &amp;deviceCount, nullptr); std::vector&lt;VkPhysicalDevice&gt; devices(deviceCount); vkEnumeratePhysicalDevices(instance, &amp;deviceCount, devices.data()); VkPhysicalDevice physicalDevice = devices[0]; std::vector&lt;VkDeviceQueueCreateInfo&gt; queueCreateInfos; std::set&lt;uint32_t&gt; uniqueQueueFamilies = &#123; 0, 0 &#125;; float queuePriority = 1.0f; for (uint32_t queueFamily : uniqueQueueFamilies) &#123; VkDeviceQueueCreateInfo queueCreateInfo&#123;&#125;; queueCreateInfo.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO; queueCreateInfo.queueFamilyIndex = queueFamily; queueCreateInfo.queueCount = 1; queueCreateInfo.pQueuePriorities = &amp;queuePriority; queueCreateInfos.push_back(queueCreateInfo); &#125; VkPhysicalDeviceFeatures deviceFeatures&#123;&#125;; VkDeviceCreateInfo deviceInfo&#123;&#125;; deviceInfo.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO; deviceInfo.queueCreateInfoCount = static_cast&lt;uint32_t&gt;(queueCreateInfos.size()); deviceInfo.pQueueCreateInfos = queueCreateInfos.data(); deviceInfo.pEnabledFeatures = &amp;deviceFeatures; const std::vector&lt;const char*&gt; deviceExtensions = &#123; VK_KHR_SWAPCHAIN_EXTENSION_NAME &#125;; deviceInfo.enabledExtensionCount = static_cast&lt;uint32_t&gt;(deviceExtensions.size()); deviceInfo.ppEnabledExtensionNames = deviceExtensions.data(); deviceInfo.enabledLayerCount = 0; VkDevice device; vkCreateDevice(physicalDevice, &amp;deviceInfo, nullptr, &amp;device); VkQueue graphicsQueue; VkQueue presentQueue; vkGetDeviceQueue(device, 0, 0, &amp;graphicsQueue); vkGetDeviceQueue(device, 0, 0, &amp;presentQueue); VkSurfaceCapabilitiesKHR capabilities; vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, &amp;capabilities); uint32_t imageCount = capabilities.minImageCount + 1; VkSwapchainCreateInfoKHR swapchainInfo&#123;&#125;; swapchainInfo.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR; swapchainInfo.surface = surface; swapchainInfo.minImageCount = imageCount; swapchainInfo.imageFormat = VK_FORMAT_B8G8R8A8_SRGB; swapchainInfo.imageColorSpace = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR; swapchainInfo.imageExtent = capabilities.currentExtent; swapchainInfo.imageArrayLayers = 1; swapchainInfo.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT; swapchainInfo.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE; swapchainInfo.preTransform = capabilities.currentTransform; swapchainInfo.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR; swapchainInfo.presentMode = VK_PRESENT_MODE_MAILBOX_KHR; swapchainInfo.clipped = VK_TRUE; VkSwapchainKHR swapChain; vkCreateSwapchainKHR(device, &amp;swapchainInfo, nullptr, &amp;swapChain); vkGetSwapchainImagesKHR(device, swapChain, &amp;imageCount, nullptr); std::vector&lt;VkImage&gt; swapChainImages(imageCount); vkGetSwapchainImagesKHR(device, swapChain, &amp;imageCount, swapChainImages.data()); std::vector&lt;VkImageView&gt; swapChainImageViews(swapChainImages.size()); for (size_t i = 0; i &lt; swapChainImages.size(); i++) &#123; VkImageViewCreateInfo createInfo&#123;&#125;; createInfo.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO; createInfo.image = swapChainImages[i]; createInfo.viewType = VK_IMAGE_VIEW_TYPE_2D; createInfo.format = VK_FORMAT_B8G8R8A8_SRGB; createInfo.components.r = VK_COMPONENT_SWIZZLE_IDENTITY; createInfo.components.g = VK_COMPONENT_SWIZZLE_IDENTITY; createInfo.components.b = VK_COMPONENT_SWIZZLE_IDENTITY; createInfo.components.a = VK_COMPONENT_SWIZZLE_IDENTITY; createInfo.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT; createInfo.subresourceRange.baseMipLevel = 0; createInfo.subresourceRange.levelCount = 1; createInfo.subresourceRange.baseArrayLayer = 0; createInfo.subresourceRange.layerCount = 1; vkCreateImageView(device, &amp;createInfo, nullptr, &amp;swapChainImageViews[i]); &#125; VkAttachmentDescription colorAttachment&#123;&#125;; colorAttachment.format = VK_FORMAT_B8G8R8A8_SRGB; colorAttachment.samples = VK_SAMPLE_COUNT_1_BIT; colorAttachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR; colorAttachment.storeOp = VK_ATTACHMENT_STORE_OP_STORE; colorAttachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE; colorAttachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE; colorAttachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED; colorAttachment.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR; VkAttachmentReference colorAttachmentRef&#123;&#125;; colorAttachmentRef.attachment = 0; colorAttachmentRef.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL; VkSubpassDescription subpass&#123;&#125;; subpass.pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS; subpass.colorAttachmentCount = 1; subpass.pColorAttachments = &amp;colorAttachmentRef; VkSubpassDependency dependency&#123;&#125;; dependency.srcSubpass = VK_SUBPASS_EXTERNAL; dependency.dstSubpass = 0; dependency.srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT; dependency.srcAccessMask = 0; dependency.dstStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT; dependency.dstAccessMask = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT; VkRenderPassCreateInfo renderPassInfo&#123;&#125;; renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO; renderPassInfo.attachmentCount = 1; renderPassInfo.pAttachments = &amp;colorAttachment; renderPassInfo.subpassCount = 1; renderPassInfo.pSubpasses = &amp;subpass; renderPassInfo.dependencyCount = 1; renderPassInfo.pDependencies = &amp;dependency; VkRenderPass renderPass; vkCreateRenderPass(device, &amp;renderPassInfo, nullptr, &amp;renderPass); //data VkBufferCreateInfo bufferInfo&#123;&#125;; bufferInfo.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO; bufferInfo.size = 3 * 2 * sizeof(float); bufferInfo.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT; bufferInfo.sharingMode = VK_SHARING_MODE_EXCLUSIVE; VkBuffer vertexBuffer; vkCreateBuffer(device, &amp;bufferInfo, nullptr, &amp;vertexBuffer); VkMemoryRequirements memRequirements; vkGetBufferMemoryRequirements(device, vertexBuffer, &amp;memRequirements); VkMemoryAllocateInfo vbAllocInfo&#123;&#125;; vbAllocInfo.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO; vbAllocInfo.allocationSize = memRequirements.size; VkPhysicalDeviceMemoryProperties memProperties; vkGetPhysicalDeviceMemoryProperties(physicalDevice, &amp;memProperties); for (uint32_t i = 0; i &lt; memProperties.memoryTypeCount; i++) &#123; if ((memRequirements.memoryTypeBits &amp; (1 &lt;&lt; i)) &amp;&amp; (memProperties.memoryTypes[i].propertyFlags &amp; (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)) == (VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT)) &#123; vbAllocInfo.memoryTypeIndex = i; break; &#125; &#125; VkDeviceMemory vertexBufferMemory; vkAllocateMemory(device, &amp;vbAllocInfo, nullptr, &amp;vertexBufferMemory); vkBindBufferMemory(device, vertexBuffer, vertexBufferMemory, 0); const float vertices[6] = &#123; 0.0f, -0.5f, 0.5f, 0.5f, -0.5f, 0.5f &#125;; void* data; vkMapMemory(device, vertexBufferMemory, 0, bufferInfo.size, 0, &amp;data); memcpy(data, vertices, (size_t)bufferInfo.size); vkUnmapMemory(device, vertexBufferMemory); //shader std::ifstream file(&quot;vert.spv&quot;, std::ios::ate | std::ios::binary); size_t fileSize = (size_t)file.tellg(); std::vector&lt;char&gt; vertShaderCode(fileSize); file.seekg(0); file.read(vertShaderCode.data(), fileSize); file.close(); VkShaderModuleCreateInfo vertCreateInfo&#123;&#125;; vertCreateInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO; vertCreateInfo.codeSize = vertShaderCode.size(); vertCreateInfo.pCode = reinterpret_cast&lt;const uint32_t*&gt;(vertShaderCode.data()); VkShaderModule vertShaderModule; vkCreateShaderModule(device, &amp;vertCreateInfo, nullptr, &amp;vertShaderModule); file.open(&quot;frag.spv&quot;, std::ios::ate | std::ios::binary); fileSize = (size_t)file.tellg(); std::vector&lt;char&gt; fragShaderCode(fileSize); file.seekg(0); file.read(fragShaderCode.data(), fileSize); file.close(); VkShaderModuleCreateInfo fragCreateInfo&#123;&#125;; fragCreateInfo.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO; fragCreateInfo.codeSize = fragShaderCode.size(); fragCreateInfo.pCode = reinterpret_cast&lt;const uint32_t*&gt;(fragShaderCode.data()); VkShaderModule fragShaderModule; vkCreateShaderModule(device, &amp;fragCreateInfo, nullptr, &amp;fragShaderModule); VkPipelineShaderStageCreateInfo vertShaderStageInfo&#123;&#125;; vertShaderStageInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO; vertShaderStageInfo.stage = VK_SHADER_STAGE_VERTEX_BIT; vertShaderStageInfo.module = vertShaderModule; vertShaderStageInfo.pName = &quot;main&quot;; VkPipelineShaderStageCreateInfo fragShaderStageInfo&#123;&#125;; fragShaderStageInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO; fragShaderStageInfo.stage = VK_SHADER_STAGE_FRAGMENT_BIT; fragShaderStageInfo.module = fragShaderModule; fragShaderStageInfo.pName = &quot;main&quot;; VkPipelineShaderStageCreateInfo shaderStages[] = &#123; vertShaderStageInfo, fragShaderStageInfo &#125;; VkPipelineVertexInputStateCreateInfo vertexInputInfo&#123;&#125;; vertexInputInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO; VkVertexInputBindingDescription bindingDescription&#123;&#125;; bindingDescription.binding = 0; bindingDescription.stride = 2 * sizeof(float); bindingDescription.inputRate = VK_VERTEX_INPUT_RATE_VERTEX; std::array&lt;VkVertexInputAttributeDescription, 1&gt; attributeDescriptions&#123;&#125;; attributeDescriptions[0].binding = 0; attributeDescriptions[0].location = 0; attributeDescriptions[0].format = VK_FORMAT_R32G32_SFLOAT; attributeDescriptions[0].offset = (uint32_t)0; vertexInputInfo.vertexBindingDescriptionCount = 1; vertexInputInfo.vertexAttributeDescriptionCount = static_cast&lt;uint32_t&gt;(attributeDescriptions.size()); vertexInputInfo.pVertexBindingDescriptions = &amp;bindingDescription; vertexInputInfo.pVertexAttributeDescriptions = attributeDescriptions.data(); VkPipelineInputAssemblyStateCreateInfo inputAssembly&#123;&#125;; inputAssembly.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO; inputAssembly.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST; inputAssembly.primitiveRestartEnable = VK_FALSE; VkViewport viewport&#123;&#125;; viewport.x = 0.0f; viewport.y = 0.0f; viewport.width = WIDTH; viewport.height = HEIGHT; viewport.minDepth = 0.0f; viewport.maxDepth = 1.0f; VkRect2D scissor&#123;&#125;; scissor.offset = &#123; 0, 0 &#125;; scissor.extent = capabilities.currentExtent; VkPipelineViewportStateCreateInfo viewportState&#123;&#125;; viewportState.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO; viewportState.viewportCount = 1; viewportState.pViewports = &amp;viewport; viewportState.scissorCount = 1; viewportState.pScissors = &amp;scissor; VkPipelineRasterizationStateCreateInfo rasterizer&#123;&#125;; rasterizer.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO; rasterizer.depthClampEnable = VK_FALSE; rasterizer.rasterizerDiscardEnable = VK_FALSE; rasterizer.polygonMode = VK_POLYGON_MODE_FILL; rasterizer.lineWidth = 1.0f; rasterizer.cullMode = VK_CULL_MODE_BACK_BIT; rasterizer.frontFace = VK_FRONT_FACE_CLOCKWISE; rasterizer.depthBiasEnable = VK_FALSE; VkPipelineMultisampleStateCreateInfo multisampling&#123;&#125;; multisampling.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO; multisampling.sampleShadingEnable = VK_FALSE; multisampling.rasterizationSamples = VK_SAMPLE_COUNT_1_BIT; VkPipelineColorBlendAttachmentState colorBlendAttachment&#123;&#125;; colorBlendAttachment.colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT; colorBlendAttachment.blendEnable = VK_FALSE; VkPipelineColorBlendStateCreateInfo colorBlending&#123;&#125;; colorBlending.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO; colorBlending.logicOpEnable = VK_FALSE; colorBlending.logicOp = VK_LOGIC_OP_COPY; colorBlending.attachmentCount = 1; colorBlending.pAttachments = &amp;colorBlendAttachment; colorBlending.blendConstants[0] = 0.0f; colorBlending.blendConstants[1] = 0.0f; colorBlending.blendConstants[2] = 0.0f; colorBlending.blendConstants[3] = 0.0f; VkPipelineLayoutCreateInfo pipelineLayoutInfo&#123;&#125;; pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO; pipelineLayoutInfo.setLayoutCount = 0; pipelineLayoutInfo.pushConstantRangeCount = 0; VkPipelineLayout pipelineLayout; vkCreatePipelineLayout(device, &amp;pipelineLayoutInfo, nullptr, &amp;pipelineLayout); VkGraphicsPipelineCreateInfo pipelineInfo&#123;&#125;; pipelineInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO; pipelineInfo.stageCount = 2; pipelineInfo.pStages = shaderStages; pipelineInfo.pVertexInputState = &amp;vertexInputInfo; pipelineInfo.pInputAssemblyState = &amp;inputAssembly; pipelineInfo.pViewportState = &amp;viewportState; pipelineInfo.pRasterizationState = &amp;rasterizer; pipelineInfo.pMultisampleState = &amp;multisampling; pipelineInfo.pColorBlendState = &amp;colorBlending; pipelineInfo.layout = pipelineLayout; pipelineInfo.renderPass = renderPass; pipelineInfo.subpass = 0; pipelineInfo.basePipelineHandle = VK_NULL_HANDLE; VkPipeline graphicsPipeline; vkCreateGraphicsPipelines(device, VK_NULL_HANDLE, 1, &amp;pipelineInfo, nullptr, &amp;graphicsPipeline); vkDestroyShaderModule(device, fragShaderModule, nullptr); vkDestroyShaderModule(device, vertShaderModule, nullptr); std::vector&lt;VkFramebuffer&gt; swapChainFramebuffers(swapChainImageViews.size()); for (size_t i = 0; i &lt; swapChainImageViews.size(); i++) &#123; VkImageView attachments[] = &#123; swapChainImageViews[i] &#125;; VkFramebufferCreateInfo framebufferInfo&#123;&#125;; framebufferInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO; framebufferInfo.renderPass = renderPass; framebufferInfo.attachmentCount = 1; framebufferInfo.pAttachments = attachments; framebufferInfo.width = WIDTH; framebufferInfo.height = HEIGHT; framebufferInfo.layers = 1; vkCreateFramebuffer(device, &amp;framebufferInfo, nullptr, &amp;swapChainFramebuffers[i]); &#125; VkCommandPoolCreateInfo poolInfo&#123;&#125;; poolInfo.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO; poolInfo.queueFamilyIndex = 0; VkCommandPool commandPool; vkCreateCommandPool(device, &amp;poolInfo, nullptr, &amp;commandPool); std::vector&lt;VkCommandBuffer&gt; commandBuffers(swapChainFramebuffers.size()); VkCommandBufferAllocateInfo allocInfo&#123;&#125;; allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO; allocInfo.commandPool = commandPool; allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY; allocInfo.commandBufferCount = (uint32_t)commandBuffers.size(); vkAllocateCommandBuffers(device, &amp;allocInfo, commandBuffers.data()); for (size_t i = 0; i &lt; commandBuffers.size(); i++) &#123; VkCommandBufferBeginInfo beginInfo&#123;&#125;; beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO; vkBeginCommandBuffer(commandBuffers[i], &amp;beginInfo); VkRenderPassBeginInfo renderPassInfo&#123;&#125;; renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO; renderPassInfo.renderPass = renderPass; renderPassInfo.framebuffer = swapChainFramebuffers[i]; renderPassInfo.renderArea.offset = &#123; 0, 0 &#125;; renderPassInfo.renderArea.extent = capabilities.currentExtent; VkClearValue clearColor = &#123; &#123;&#123;0.0f, 0.0f, 0.0f, 1.0f&#125;&#125; &#125;; renderPassInfo.clearValueCount = 1; renderPassInfo.pClearValues = &amp;clearColor; vkCmdBeginRenderPass(commandBuffers[i], &amp;renderPassInfo, VK_SUBPASS_CONTENTS_INLINE); vkCmdBindPipeline(commandBuffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, graphicsPipeline); VkBuffer vertexBuffers[] = &#123; vertexBuffer &#125;; VkDeviceSize offsets[] = &#123; 0 &#125;; vkCmdBindVertexBuffers(commandBuffers[i], 0, 1, vertexBuffers, offsets); vkCmdDraw(commandBuffers[i], 3, 1, 0, 0); vkCmdEndRenderPass(commandBuffers[i]); vkEndCommandBuffer(commandBuffers[i]); &#125; std::vector&lt;VkSemaphore&gt; imageAvailableSemaphores(2); std::vector&lt;VkSemaphore&gt; renderFinishedSemaphores(2); std::vector&lt;VkFence&gt; inFlightFences(2); std::vector&lt;VkFence&gt; imagesInFlight(swapChainImages.size(), VK_NULL_HANDLE); VkSemaphoreCreateInfo semaphoreInfo&#123;&#125;; semaphoreInfo.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO; VkFenceCreateInfo fenceInfo&#123;&#125;; fenceInfo.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO; fenceInfo.flags = VK_FENCE_CREATE_SIGNALED_BIT; for (size_t i = 0; i &lt; 2; i++) &#123; vkCreateSemaphore(device, &amp;semaphoreInfo, nullptr, &amp;imageAvailableSemaphores[i]); vkCreateSemaphore(device, &amp;semaphoreInfo, nullptr, &amp;renderFinishedSemaphores[i]); vkCreateFence(device, &amp;fenceInfo, nullptr, &amp;inFlightFences[i]); &#125; //draw uint32_t imageIndex = 0; vkWaitForFences(device, 1, &amp;inFlightFences[0], VK_TRUE, UINT64_MAX); VkSubmitInfo submitInfo&#123;&#125;; submitInfo.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO; VkSemaphore waitSemaphores[] = &#123; imageAvailableSemaphores[0] &#125;; VkPipelineStageFlags waitStages[] = &#123; VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT &#125;; submitInfo.waitSemaphoreCount = 1; submitInfo.pWaitSemaphores = waitSemaphores; submitInfo.pWaitDstStageMask = waitStages; submitInfo.commandBufferCount = 1; submitInfo.pCommandBuffers = &amp;commandBuffers[0]; VkSemaphore signalSemaphores[] = &#123; renderFinishedSemaphores[0] &#125;; submitInfo.signalSemaphoreCount = 1; submitInfo.pSignalSemaphores = signalSemaphores; vkResetFences(device, 1, &amp;inFlightFences[0]); vkQueueSubmit(graphicsQueue, 1, &amp;submitInfo, inFlightFences[0]); VkPresentInfoKHR presentInfo&#123;&#125;; presentInfo.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR; presentInfo.waitSemaphoreCount = 1; presentInfo.pWaitSemaphores = signalSemaphores; VkSwapchainKHR swapChains[] = &#123; swapChain &#125;; presentInfo.swapchainCount = 1; presentInfo.pSwapchains = swapChains; presentInfo.pImageIndices = &amp;imageIndex; vkQueuePresentKHR(presentQueue, &amp;presentInfo); //event while (!glfwWindowShouldClose(window)) &#123; glfwPollEvents(); &#125; //clear //大量清除代码，实在不行写了 glfwDestroyWindow(window); glfwTerminate(); return 0;&#125; 顶点着色器 1234567#version 450layout(location = 0) in vec2 inPosition;void main() &#123; gl_Position = vec4(inPosition, 0.0, 1.0);&#125; 片段着色器 1234567#version 450layout(location = 0) out vec4 outColor;void main() &#123; outColor = vec4(1.0, 1.0, 1.0, 1.0);&#125; 运行结果 接近400多行，而且还没写相关的清除代码，说实在的与其用这个，还不如dx12，错了，应该是OpenGL。对于OpenGL，目前我觉得缺少的一个功能就是提前对着色器的编译，而其它的功能，真得太够了。vulkan感觉就是跨平台版dx12的复刻，学啥不好，非得把这离谱的配置系统给学过来。vulkan需要依赖glfw这没得说，但清除真得太繁琐了，这是跨平台的劣势，还有一个就是这里对着色器代码的读取，文件管理属于平台相关的东西，所以并不能直接像dx12一样直接从文件获得着色器对象，而要通过C++标准库来读取文件，然后再转化为着色器对象。我们还要说一个事，官方的例子同样是封装过的，我是通过学习解剖才得到上面这些代码的，但千万别和我学，因为相关检测和调试代码全被我删了，也就是说硬件与我不同的话，极有可能出问题，我想表达什么呢？跨平台的本质应该是与硬件无关的，但现在的API却还要我们去自己进行相关的平台检测，自己选择相应设备，自己构造渲染队列，但是我们真得会去思考其中的优化处吗？就像之前所说，我只会把封装直接拿来，然后回到上一个时代。 结尾到这里，这场旅行也该告一段落了，至于更老的API就算了吧。最后我需要找出适合自己开发研究的API了，一些低耗能的那必定是OpenGL了，跨平台和易用性这就够了，而高性能的嘛，当然是游戏引擎了，除了游戏难道有什么App会需要如此多的性能呢？不过有点值得肯定，我对新API并不看好，除非计算机的底层体系发生改变。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"编程手记","slug":"编程手记","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0/"},{"name":"渲染","slug":"渲染","permalink":"http://example.com/tags/%E6%B8%B2%E6%9F%93/"}]},{"title":"长见识了","slug":"长见识了","date":"2022-01-17T04:30:02.000Z","updated":"2022-10-14T23:47:10.899Z","comments":true,"path":"archives/2022-01-17-长见识了/","link":"","permalink":"http://example.com/archives/2022-01-17-%E9%95%BF%E8%A7%81%E8%AF%86%E4%BA%86/","excerpt":"","text":"幸存者偏差、信息茧房……原来我以前对推荐系统的质疑早就有人思考过了，而且还思考得更广，孤陋寡闻属实是了，不过知其实也比知其表好上许多。","categories":[],"tags":[]},{"title":"编程手记之临时对象","slug":"编程手记之临时对象","date":"2022-01-11T06:47:31.000Z","updated":"2022-10-14T23:47:08.549Z","comments":true,"path":"archives/2022-01-11-编程手记之临时对象/","link":"","permalink":"http://example.com/archives/2022-01-11-%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0%E4%B9%8B%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"“这充分证明了C++代码和VC++代码是不同的。”这事发生在我引用一个老开源项目的时候，那个作者还在用win7和使用vs2013，出问题的代码，我大致模拟了一下，就是如下这样 内容比较简单，就是一个函数返回一个结构体，我们将它返回值的引用传给另一个函数来输出。我的环境是win10和vs2019，原来作者当然是没有报错的，而我这里报了“取地址操作必需作用于左值”。所谓“左值”指的是可以寻址的值，如果认为返回的值是一个结构体，那它确实应该是一个左值，因为它们之间传递的是引用。如果我稍微加一个缓存变量，如下 则一切运行正常。当时我一直被这个左值纠结，也秉着面向浏览器编程的理念，围绕这方面找了许多例子，错误代码搜索，相似代码查询，却怎么也找不到原因，我甚至怀疑返回结构体这个操作是否有问题，但最终还是无果。后来，我怀疑是不是vs的编译器取地址面向的是函数而不是函数的返回值，所以我决定用GUN套件来编译一下，结果 果然GUN套件才是真正的神啊，它旳意思是临时变量不能取地址，所谓临时变量指的是它值的作用范围只有当前这一行，而函数的返回值就是典型的临时变量，嗯，其实这和编译器的优化有关，从汇编角度来看的话就是值是放在寄存器里的，没有放在内存里，所以不能取地址。简单来说临时变量是右值，当然右值还包括其它的，如立即数等。其实，遇到这个还是挺开心的，这些东西在有些善于写代码的人手里基本不会出现，一般我们写函数返回值只有两种情况，传值的直接写，传引用的时候要特别地写成指针，比如好的习惯应当这样写 看，这不就正常运行了嘛，不过也有人指出可能是vs2013版本太老，还在使用较老的C标准的原因，比如C++11，而我的电脑最低只有C++14标准。不过追根究底的话，还是因为我太久没有遇到这些错误，搞得这些细节基本都忘记了。不过，最后我是想吐槽一下，这vs好像不是很好用，特别是报错能力，比如我用模板写代码的时候，用vs也太难找错误了吧。哦，还有那个资源管理实在太垃圾了吧。总之，就这样吧，我并不打算开个新系列，只是有些想抱怨的东西，就随便记录一下吧，这些就整合成编程手记吧。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"调试","slug":"调试","permalink":"http://example.com/tags/%E8%B0%83%E8%AF%95/"},{"name":"编程手记","slug":"编程手记","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0/"}]},{"title":"学习心累","slug":"学习心累","date":"2022-01-09T10:12:50.000Z","updated":"2022-10-14T23:47:07.848Z","comments":true,"path":"archives/2022-01-09-学习心累/","link":"","permalink":"http://example.com/archives/2022-01-09-%E5%AD%A6%E4%B9%A0%E5%BF%83%E7%B4%AF/","excerpt":"","text":"“与其将精力放在问题的定义上，不如将精力放在问题的解决上。”我也一直这么认为的，也因此学习过许多不同的东西，但为什么总能将对自我推崇解释为对他人鄙视呢？难道对自己所学的东西感到骄傲，就是在炫耀吗？","categories":[],"tags":[]},{"title":"数学探索之尺规作图其二","slug":"数学探索之尺规作图其二","date":"2022-01-09T08:18:18.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-01-09-数学探索之尺规作图其二/","link":"","permalink":"http://example.com/archives/2022-01-09-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE%E5%85%B6%E4%BA%8C/","excerpt":"","text":"这一篇文章，承接上一篇，为证明部分，只包含少量讲解，可选择性跳过。 域扩张有关域的定义，我们不多讲，就记住它是定义了加法和乘法且单位元不等的数集即可。哦，还有域上可以定义线性空间和多项式。欧式做图问题的抽象核心是域扩张问题，我就点到为止不在多说了。为了能从理论角度考虑作图问题，我们需要稍微复习一下相关的域扩张理论。 有限扩张所谓扩域原始定义是子域的反向称呼，但这样的性质太少，所以我们需要进一步约束。在域扩张E/F中，可以定义E为F上的线性空间。线性空间有三个要素：对于基域，我们可以定义为域F；对于加法，我们可以定义为域E上的加法；对于乘法，我们可以定义为域E上的乘法同时限制一个乘数在F中。定义1：设域扩张E/F，若E作为F上的线性空间是有限n维的，则称E为F的一个n次有限扩域，并记[E:F]=n，否则称E为F的一个无限扩域。有限扩域有一个比较重要的定理，我们直接给出，至于怎么证明，这不是我们讨论的重点。定理1：若K为E的有限扩域，E为F的有限扩域，则K为F的有限扩域，且[K:F]=[K:E][E:F]。这个定理说明了一个事实，有限扩域关系具有传递性，且可以计算维数。 代数扩张前一种扩张考虑的是线性空间，那么这一次我们应该考虑多项式了。定义2：设域扩张E/F，且a∈E，如果a是F上多项式的根，则称a在F上是代数的，否则称a在F上是超越的。定义3：设域扩张E/F，若E中的每一个元在F上都是代数的，则称E是F的一个代数扩域。第一个联系两种扩域的定理，但反过来还需要考虑。定理2：若域E是域F的一个有限扩域，则E是F的一个代数扩域。 单代数扩张我们先考虑代数扩张的一个简单情形，设域扩张E/F，且a∈E在F上是代数的，E中所有包含a和F的子域的交集称为F添加a得到的单代数扩域，记做F(a)。单代数扩域与有限扩域的关系如下。定理3：设F(a)是F的一个单代数扩域，且a在F上的最小多项式是n次的，则F(a)是F的一个n次有限扩域，且1,a¹,a²,…,aⁿ⁻¹是F(a)在F上的一组基。定理4：F上的任意有限扩域E都是F的单代数扩域。因为我们的多项式并不考虑次数为无限的情况，也就是说代数扩域与有限扩域存在着对应关系，这基本就能构成我们以后研究的重点了。最后我们可以提一下，单代数扩域的一个特例，即我们上一节提到的二次扩张，严格叫法为2型纯扩张。定义4：设域扩张E/F，若E=F(a)，a∈E且aⁿ∈F，则称E为F的一个n型纯扩域。你可能注意到了一件事就是扩域与扩张的叫法问题，扩张是一种行为涉及两个对象故写E/F，而扩域则是针对某个域故单独写出如E。不过懂就好，叫法不是那么重要。 尺规作图公理注意有些人喜欢把这个称为定理，但那也是基于尺规作图操作的一些公理，在解析几何情况下推出来的，从抽象意义来说将其作为公理会更加合适。公理：设初始数k∈域K，目标数d∈域D，则d可由k尺规做出则存在n使得[D:K]=2ⁿ。在我们平常的欧式作图里，我们还应该添上条件K和D都是实数集R的子集。而实数集R中的最小域为有理数集Q，所以对于没有初始图形的问题，我们仍可以假定公理中的域K为有理数集Q。最后，我们还应注意一点，K是抽象结构中的域，而Q则是具体存在的有理数集。 三大作图问题探讨有了上述的充分准备，我们终于可以来探讨所谓的三大几何问题的证明了。 倍立方倍立方的初始集提供了单位长度和90度角，本质就是只提供了1，所以倍立方问题的形式表述为³√2能否由1尺规做出。³√2的最小多项式是3次的，所以[Q(³√3):Q]=3，所以³√2不能由1尺规做出。从这里我们可以知道，明明有限扩张就能定义尺规作图问题，但为什么我们还要研究代数扩张。这是因为我们想要做的无理数是从多项式的根里推出了的，在此之上才能定义根式，所以自然就会关联到代数扩张。其实还有一方面是因为作图公理的推导，涉及多项式，且有代数扩张导出，只不过使用有限扩张定位表述更简洁罢了，这时可能有人会觉得这是否有放循环论证的错误。有关扩域的理论在抽象代数里就已经建立了，而我们只是将尺规作图问题绑定到特定的某些域扩张问题上而已，绑定之间的转化依赖的是域扩张理论自己就有的定理，所以问题是不大的。 三等分角这个问题，依据提供的角不同，所提供的初始数是不同的，如90⁰和60⁰之类的，就相当于提供了1，但20⁰之类的就不是了，但是对于假命题，只要一个违例即可，所以我们证明60⁰不可三等分即可，进一步讲(之前的推导)即是8x³-6x-1=0的根能否由1尺规做出，尽管我们可以解出根，求最小多项式，最后算次数即可，但比较麻烦，所以我们尽量抽象出一个定理比较方便。引理：若三次多项式没有有理根，则它的三个根都不能由1尺规做出。有理根的判定等价于多项式在有理数域Q上是否可约的判定，而这个判断可以使用Eisenstein(艾森斯坦因)判别法。容易得出8x³-6x-1=0在Q上不可约，即没有有理根，所以8x³-6x-1=0的根不能由1尺规做出。你可能觉得我写得也太简单了吧，但你需要记住数学探索这个系列的意义，只是记录我的所学，具体的证明都是可以百度查询到的，再写一遍真没啥意思，而我的目的则是整理思路，寻找可学习的地方。 化圆为方对于这个问题，大多数人认为也是只给了个1，但如果将圆抽象为只有半径来说，确实如此，其实还因为有圆规工具的存在，使得只有半径可以单向的等价为只有一个圆，这个问题我们以后来讨论，总之我们问题的抽象形式为π能否由1尺规做出，我们不加根号的原因之前也解释过，以现在的话来说，两个扩域之间只差一个次数2而已。这问的关键在于证明π不是有限次多项式的根，即证明π是超越数。更实际的说法是，π不能由多项式定义出，需要讨论的是实数域和实分析，这里可以找到π较原始的定义。π证明超越性的方法很多，但我可以肯定无法避免实分析，总之π是超越数，所以不能由1尺规做出。最后，我们给出两个比较常用的超越数判定定理，以供使用，至于怎么证明，自己找吧，记得先巩固实分析就行。首先是联系三角函数和两个重要常数的欧拉公式：，估计很多人都见过无数遍了，没啥好说的。Lindemann–Weierstrass定理：是互不相等的代数数，则在代数数域上线性无关的。 假设π为代数数，因为，与定理线性无关矛盾，所以π为超越数。 Gelfond–Schneider定理：若α,β为代数数，α≠0,1，β不为实有理数，则为超越数。注意上述定理都是建立在实分析的基础上，代数数和超越数界限明确，无需如代数的和超越的之类的抽象代数的名词。 尺规作图的充要条件最后我们再说明一件事，我们所给的尺规作图公理，并非充要条件，但对于不可能问题，那个公理已经足够了，所以就没讲太多。不过作为严谨的数学爱好者有必要了解一下完整的作图公理，如下严格作图公理：k∈R可由1尺规做出当且仅当存在域扩张列Qₙ/Qₙ₋₁,…,Q₁/Q都是2型纯扩张且k∈Qₙ，其中Q和R分别为有理数集和实数集。这个充要条件实际说明了一个事实，次数为2的单代数扩域不一定是2型纯扩域。其实很容易发现一个事实，纯扩域的定义不依赖多项式，但可以通过定义多项式来说明纯扩域属于单代数扩域，至于反例嘛！我在实数域R里面没有找到就是了，不过从定义的角度来说两者其实还是有本质上的区别的。","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"尺规作图","slug":"尺规作图","permalink":"http://example.com/tags/%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE/"}]},{"title":"开源的讽刺","slug":"开源的讽刺","date":"2022-01-07T15:05:04.000Z","updated":"2022-10-14T23:47:07.909Z","comments":true,"path":"archives/2022-01-07-开源的讽刺/","link":"","permalink":"http://example.com/archives/2022-01-07-%E5%BC%80%E6%BA%90%E7%9A%84%E8%AE%BD%E5%88%BA/","excerpt":"","text":"恃才傲物，这是他们对开源社区的讽刺。一旦入门这个领域简单了，他们就越会觉得自己有多了不起。所以我果然不应该推荐身边的人去用linux或开源产品，除非他们愿意学习，愿意折腾，愿意为自己的行为负责。","categories":[],"tags":[]},{"title":"数学探索之导言与尺规作图其一","slug":"数学探索之导言与尺规作图其一","date":"2022-01-04T03:11:02.000Z","updated":"2022-10-14T23:47:08.059Z","comments":true,"path":"archives/2022-01-04-数学探索之导言与尺规作图其一/","link":"","permalink":"http://example.com/archives/2022-01-04-%E6%95%B0%E5%AD%A6%E6%8E%A2%E7%B4%A2%E4%B9%8B%E5%AF%BC%E8%A8%80%E4%B8%8E%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE%E5%85%B6%E4%B8%80/","excerpt":"","text":"导言我想记录自己所学的数学并进行整理，其过程是以某一问题或定理为主线进行的。但是，我并不想单纯地去抄书，因为实在太无聊了。我的大致计划是这样的，对于任何一个模块，我都会梳理其证明的主线，对于关键的步骤我也不会给出证明，而是试着以形象的方式去说明它，至于详细的证明其实到处都可以找到。我自己就有这样的体会，一本单纯由定义和定理组成的书，虽然内容丰富，体系严谨，但是对于一般人而言，真的只是从头读到尾的话，本质上除了记住几个名词，却什么也不懂。我的理想是让所有有一定数学水平的人都理解，不一定要知道完全严谨的证明，因为我们是数学爱好者而不是数学研究者。至少可以百度到的东西都可以当做常识吧。再者，我一定会写出符号，认识符号是真正理解数学的必须路径，一味的以科普为由而舍弃符号都是错误的普及方式。最后，我想说一点，所谓的解释与形象说明都是一些主观的存在，其不一定十分准确，但如果能让人理解的话，目的就已经达到了。然后开始我们美妙的数学探索之旅吧。 尺规作图我想先以一个最简单的问题开始我们的旅途——尺规作图。我们先要排除中学那些单纯的作图问题，如画个角平分线，画垂直平分线啥的，主要是它们真的没什么好讲的。我们会将尺规作图的重心放在以下几个方面，1.三大作图，2.正n边形作图，3.特殊作图。这篇文章我们先讲一下第一个问题吧，首先我们给出答案，三大尺规作图问题(倍立方，三等分角，化圆为方)在通常意义下是不可能的。这里我们需要强调通常意义，数学是追求严谨的学科，尺规作图是什么，什么才叫不可能其实都比较模糊的，所以开篇就要把这个模糊的作图概念讲清楚才行。 作图问题分析尺规作图可能性的条件其实一直都有，且为大众所知的：当且仅当确定所求元素的数能由已知元素做有限次有理运算与求平方根得出时，用无刻度的直尺与圆规作图才是可能的。我们都知道尺规应该能做出三种元素，点、线和圆，但那个当且仅当的条件却都抽象为了数，所以我们需要考虑的第一点是如何将图形与数进行等价看待。 点在尺规作图中，点主要来自于已知点和取点和交点。首先取点具有随机性，比如我们不可能随便就在直线上取出一个e吧，随机取点固然有其作用，如画角平分线，但是它并非必要的，同时对理论研究作用并不大，其实它的核心矛盾点在于定性与定量的区别，在定性画图上，只要能得一部分即可，在这里即时选择，比如角平分线，实际上只要得到线上的任意一个点就足够了，这里的点有随机选择性，反应到作图中就是边上点的随机选择性了，但是我们发现因为最终点的自由度在一条线上，所以最初边上选点是我们也只有一个线上的自由度，即一边选了，另一边就只能由圆直接确定了。而已知点呢？如果只是孤零零的一个点，其实有没有似乎都没有区别，因为我们也可以随便取一个点，作用好像一样，点的作用需要依赖于坐标，或与其它点之间的依存，所谓坐标本质其实也能视为互相垂直的两条线加一个单位一标记点。交点其实才是点中的大头部分，首先它具有确定性，这就意味着它具有可计算性，在理论研究中，确定的东西往往都是比较方便的。 线线其实在尺规作图中并非那么重要，两个点确定一条直线，也就是说，一条线实际是等价于两个点的，注意这里只是从生成的角度来考虑的，比如将现有图中的所有线都只取两个点，那么我们是可以复原所有线的。其实这正是无刻度直尺的作用，他将线与两个点画上了等号。其实我思考了一下等价的含义，点到线和线到点似乎不符合等价的定义，不过尺规作图是一个正向的过程，前者可以生成后者，我们把后者等价与前者其实问题不大。 圆圆与线是同理的，两个点就可以生成一个圆，其中重要的工具是圆规。至此我们都在强调点的重要性，目的就是想说，在尺规作图里所有的作图问题归根究底都是点的作图问题，而直尺和圆规的作用在于生成某些具有特性的点。如直尺可以保持新点与原点的定斜率，圆规可以保持新点与原点的定距离。 点的刻画既然点如此的重要，接下来就必需讲讲点的刻画问题，即点应该与什么等价。我这里多次用等价一词，但很多人可能会误解这个词，等价准确来说是某种意义上的等价，如白马黑马黄马之类的，如果我们不关心颜色，只关心物种的话，那么在这种意义上他们就是等价的。在数学上更倾向于将等价刻画为一种保持关系的映射，如群的同构。 回到我们的点，大部分人估计会将它和坐标进行等价，这其实确实是一种可观的方法，关键在于坐标系的建立问题，这里我们稍微提一个问题，就是我们的画图是在二维平面上的，再怎么说作图都是在纸上的。坐标系的建立，核心就两个部分，确定原点和单位一，其它部分都可以直接尺规生成，在坐标系中终于盼到了我们的数字了。实际上，原始的作图存在相似不变性，不论是做正N变形还是圆，它们都存在一个相似自由度，它的取值范围是整个实轴，这个自由度没有消除时，作图是有无限可能的，单位一实际上随便取的，如同我们之前讲的角平分线，坐标的意义正在于此。也正因如此我们就可以将点与数字进行等价映射了，研究的起点也由此展开。 点的可控性一条直线上实际包含了所有实数，但并非说我们可以做出所有实数，这里需要考虑点是否在我们的控制内，可控点主要是已知点和交点，取点并不包含可控性，取点的主要作用在缩减自由度，比如单独是不能给出√3的，除非我们给出了单位一，取点则确定了一个新的单位一，并不能保证与原始点系的关系，所以它只能起缩减自由度的作用。从已知点和交点，实际上已经可以给出尺规作图的充要条件了，在其它书上的具体思路是这样的。尺规作图有如下三种步骤，1.已知两点做一条直线，2.已知两点(相当于圆心和半径)做一个圆，3.求两直线交点或两圆交点或一直线与一圆交点。然后通过坐标(建立坐标在于减少白纸的自由度提供一个基础的单位一)运算(即求交点)可以生成所有有理数和开方数，最后再实现几个基本例子加以说明，故得到最开始的定理。虽然对于大众来说这样好理解，也没有太大的错误，目的已经达到了，但是我们是专业的怎能止步于此。 角度问题在严格定义尺规作图问题前，我们最后再讨论一个问题，就是关于角度的问题，角如果单存从表现上来看的话，就只是三个点而已，不过对于角我们还是得关心它的度量问题，有之前对点建坐标我们就可以知道度量在尺规作图里是很重要的，既然我们都知道了角可以用点表示，也就是说角的度量是可以转为点的度量的，其实也没什么好说的就是平面直角坐标系与极坐标的转化罢了，其核心正是我们的三角函数，也就是说角度可做等价于它三角函数所对应的数可做，至于sin还是cos就不是很重要了，因为它们是可以有理转化的。最后你可能想和我讲其它图形，那种不能有点线圆构成的图形，如椭圆，嗯，我只能说不在考虑范围内。 尺规作图公理 虽然严格定义尺规作图问题有点傻，但我还是想这么做，这就是我对数学的爱。 设Eⁿ为n维欧式空间(Euclid Space)，P⊆Eⁿ为初始点集，设直线影射F₁:Eⁿ×Eⁿ-&gt;Eⁿ满足(v₁,v₂)-&gt;k(v₁-v₂)，k为参数且v₁≠v₂；圆映射F₂:Eⁿ×Eⁿ-&gt;Eⁿ满足(v₁,v₂)-&gt;(v₃sinθ+(v₁-v₂)cosθ)，其中v₁≠kv₂且v₃与(v₁-v₂)正交且等模长，设D⊆Eⁿ为目标点集，若P可通过F₁和F₂扩充为D，则称D在P下可尺规作图。吧啦吧啦……好了，以上就是所有的公理和定理了，愣住了吗？确实，这里其实我就想说一件事，尺规作图并不适合形式化，虽然近代数学上有许多进行形式化的行为，典型代表是抽象代数和数理逻辑。回到尺规作图上，最好的形式化不过就是解析几何，但解析几何又涉及数，但有些作图问题又不可数化，典型的如角平分线，还有一道竞赛题，给一个椭圆，做出如焦点的各种几何元素，与此同时圆则必需在度量空间里才能定义，就是必需定义在欧式空间里，但欧式空间的形式化基本等同于解析几何。或许你觉得我在这里胡说八道吧，但事实就是，过了几百年，我也没有见过合适的形式化出现。目前对尺规作图的一个比较好的判断定理就是我写在很前面的那个，而其中的关键在于两个，初始集的数化和目标集的数化。我提了”数化”这个词好多次，但意思的话应该很容易知道就是将目标转化为数。 三大问题转化与解答接下来我们将三大几何问题，转化为数的问题，以此来适应之前我们说的那个定理。你问我那个定理怎么证明的？我可以把它当成尺规作图的公理吗？不然连公理都没有哪来的证明概念。 倍立方此问题的初始集是一个立方体，目标集是原立方体积两倍的立方体，它们都只有一个参数，那就是棱长，在作图问题里面度量依赖于相对，即我们的目标数应该是目标棱长与初始棱长的比。容易列方程解出目标比为³√2，接下来就是证明³√2不能由1做有限次有理运算与求平方根得出，需要证明，的确需要但我们不证明。因为你可以自己去寻找或感受，这难道不是民间的常见操作吗？易得³√2不能由1做有限次有理运算与求平方根得出，所以倍立方不能尺规作图。 三等分角如我们之前所说，三角函数即可，我们可以直接拿出三倍角公式，sin(3θ)=3sinθ-4sin³θ，与之前不同的是，角自身就包含了比的性质，即角的问题自身不存在度量，也就是说角包含了一个内在自由度参数。我说的有点云里雾里的哈，举个实在的例子就是角是可以只接做出来的，比如90⁰的三等分，我们都不需要原始角，直接做出30⁰角就行了，因为30⁰角即是k/2(从sin方向，实际上尺规作图的核心就是勾股定理所带来的根号)，包含k这个自由度。而不能三等分所有角的核心有两个关键点，一是初始角提供无用信息，二是目标角不能完成，一个常用的例子就是初始角为60⁰(k/2从cos角度)，目标角为20⁰(8x³-6x-1=0的解)，而20⁰的那个解与上一例一样有³√且不能由1做有限次有理运算与求平方根得出，不过嘛，一般文章给的证明是证明一个三次方程的引理来完成的，不过核心还是不变的。这时你可能会想起二等分角的问题，但你会神奇地发现目标角不能完成的时候，初始角就可以提供有用的信息，当然也可以直接抛出二倍角公式，变成一个二次方程，得到根式解，就结束了，你难道觉得二次方程的解不能由1做有限次有理运算与求平方根得出吗？ 化圆为方这个嘛！性质和第一个其实是差不多的，初始集的参数是圆的半径，目标集的参数是正方形的边长，约束条件是面积相等，然后列一个方程，就得到两参数比为√π，不过根号可以生成，所以目标就是π能否由1做有限次有理运算与求平方根得出？这个的核心在于证明π为超越数，而不是证明π是无理数，那个证明有些复杂，我们以后说说吧。为什么会如此呢？这在于π能否由1尺规表出(定义一个术语吧，不能老是说那么长吧——由1做有限次有理运算与求平方根得出)不是一个π的分界性质(即不等号取不到等号)，不过一样可以进行放缩证明，证明π更泛的一个性质——超越性。我知道你觉得我在胡说八道，简单来说在尺规作图系统里π与√是定义平行的，没有圆规所包含的π实际上是做不出根号的。我举个简单的例子，连续统假设，它允许两种系统的存在(即可数无穷和实无穷之间既可以有其它无穷也可以没有)，注意我是从定义体系来说的，Eⁿ与π生的体系，当然如果从一个更广的体系Rⁿ来说的话，是不存在平行性的，也正因如此我们才能从π的超越性来说明尺规作图的不可能性。 尺规作图的不可形式化性？承接上一问，尺规作图之所以不能形式化的原因，正在于这个圆和π，但圆和π却是使尺规作图能发展的关键所在，它能创建根号。如果你和我说分析都可以形式化的，但是你要注意它是依赖于R的，也就是我们的实数集，从有理数过度到实数的形式化，也是有些理论的，可以从极限角度也可以从分割角度，但是我们需要理解形式化的本质在于集合论，直接使用R，其实主要还是避免过长的定义链。算了，你就当我在瞎说吧！主要还是因为我的说明都过于文学化了，一点也不数学。你知道我为什么写这篇文章吗？其实我只是为了开始我的这个系列，我一直在数学与宇宙间挣扎，数学在我这个时代，从面的角度上来看，十分的广阔，但还有好多好多的细节需要去补充，数学能否有一次新的思想上的变革，至少我是不看好的，因为这实在太好高骛远了，自从有那些不可能系列的定理开始，数学的核心已经变成了对题目的解答，注意别把它和考试题联系哦！最近我还被一个宇宙时间演变的视频给吸引了，虽然它挺老的，但终究还是让我感叹人之渺小，我们终究无法逃过时间的逝去，一切成就或许就会在十分遥远的未来消失，得不到想知道的知识真的太难受了。面对题目毫无进展的感觉实在太难受了，所以我决定学习，学习题目的解答，所谓的数学探索，实际就是探索题目解答的路径与思想。所以一切定义和定理自己去学吧，如果不是太有趣，我可能就把它直接当常识了。 尺规作图可做的另一种表述我们经过之前三个问题的分析可以知道，尺规作图从形式上，可以等价为能否从初始数做有限次有理运算与求平方根得出目标数，而这个在抽象代数上是可以有一个等价表述的。先给个定义吧，设∀a∈域F₂，都有a*a∈域F₁，F₁是F₂的真子集，则称F₂是F₁的二次扩张。容易得到，目标数可以由初始数尺规表出等价于目标数可以包含在初始数的有限次二次扩张的域里，接下来我们都会以这个做为尺规作图的初始公理。 结尾这篇文章拖得有点久，有许多原因，如期末复习考试，一不小心沉迷于3Blue1Brown数学科普视频，游戏版本更新等等。但这只是开始，请记住这一点，尺规作图还远远没有结束呢！","categories":[{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"尺规作图","slug":"尺规作图","permalink":"http://example.com/tags/%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE/"}]},{"title":"代理技术简介","slug":"代理技术简介","date":"2021-12-29T08:12:45.000Z","updated":"2022-10-14T23:47:06.846Z","comments":true,"path":"archives/2021-12-29-代理技术简介/","link":"","permalink":"http://example.com/archives/2021-12-29-%E4%BB%A3%E7%90%86%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/","excerpt":"","text":"今天来水一篇文章，简单介绍一下代理的基础知识吧。 需求所谓代理，其实就是代理执行，在网络通信里指的是使用目标ip来进行流量的代发，我们可以在本地配置代理，也可以对浏览器进行特别的代理，这些大多用处不大。我们代理的目的一般有流量拦截和加密通信。流量拦截可以检测本地发出去的包和过滤网络输入的包，这就是俗称的抓包，抓包是基于本地代理实现的，但是需要管理员权限，可以侵犯其它进程的网络数据怎么想都是要权限的吧，对于桌面系统获得权限就完事了，但我们的手机就有点麻烦了，所以接下来我们会以安卓手机为例。不过先说说加密通信吧，我们平时访问网页的时候，所有的信息都会是明文(http)，很容易被某墙丢包，就算使用(https)也要传入域名信息，也容易被某墙丢包，所以我们与我们的代理外服通信的时候如果不进行加密的话，是越不过某墙的，因此本地代理还有一个用处就是抓取流量以后进行包装加密，防止被中间人攻击者发现而进行恶意篡改，这样我们就能成功与代理外服通信了。其实关于代理，我们只是讲本地代理的东西，服务器代理嘛，成本高就不说了，而且思想也差不多，而且我们以安卓为主。 学习项目安卓实现主动代理的基本手段是使用系统提供的vpn服务，安卓的防火墙软件，加速器软件，抓包软件等都是基于此来实现的，其基本用处是拦截所有发送至互联网的数据，其核心类为android.net.VpnService。我们从github上，发现一个简单的项目LocalVpn，它没什么特别的功能就是基于vpn服务实现了一个转发器，我们接下来就以此来深入了解一下VpnService的用法吧。 项目结构使用此服务的基础权限是android.permission.INTERNET，即与网络相关的权限。然后此项目，有一个主界面和一个基本服务 主界面运行效果如下 就一个按钮，点一下即可启用我们的服务，显然像这种不断运行拦截流量的要通过Service来实现。 这里注册了一个广播，它与此主界面绑定，用于Service与主界面的通信，如果Service的状态改变，就会传信息到主界面通知它改变按钮的状态。 由上述官方文档可知，首先我们要调用静态方法VpnService.prepare(this)来确定是否有权限启动VPN，有的话就会返回请求启动VPN的intent，这个intent主要给用户来确定是否启动vpn。然后在onActivityResult里面确定返回结果，一切正常的话则启动我们的LocalVPNService服务。LocalVPNService继承于VpnService，用于实现流量拦截的核心类，他们都是Service的子类，可以一直运行在后台。然后就是通过VpnService.Builder来构建vpn接口的文件描述符，读此描述符读写来完成流量转发。我们能否直接使用VpnService而不继承呢？重实现的功能角度和适配上有些不太现实。我们来通览一下这个项目的基本结构吧 123ByteBufferPool.java LocalVPNService.java TCPInput.java UDPOutput.javaLRUCache.java Packet.java TCPOutput.javaLocalVPN.java TCB.java UDPInput.java UDP，和TCP是分别用来分析两种常见协议TCP/UDP的类，Packet是发送包的Java抽象，ByteBufferPool就是一段反复利用的内存而已，LocalVPNService是主要服务，LocalVPN是主界面，TCB主要用于完成TCP握手，LRUCache只是一个类似k-v的数据结构。由这些我们多少可以知道，vpn是运行在ip协议上的，官方文档确实有这么一句话The interface is running on Internet Protocol (IP), so packets are always started with IP headers.。所以使用的时候还是得小心点，不止UDP/TCP，很多协议都运行在ip协议之上，不过嘛，我们抓包就只要这两个协议就差不多够了，其它的可以直接放行，比如常用的socket就是基于UDP协议的。 多线程我们先来看一下最开始的创建函数 首先使isRunning为true表示运行，然后在setupVPN初始化我们的vpnservice，至于那些参数基本都是拿来判断是否通过vpn的，比如 这个就是表示可以通过vpn路由的地址族，至于像setSession这类设置名字的就没什么好说的了。哦，还有一个setConfigureIntent可以讲一讲，它可以得到一个PendingIntent对象，这个主要是系统配置传入的intent，如下 注意到每个软件的最右边有一个设置一样的按钮，点击它就可以触发PendingIntent，不用的话就是系统自带的了，本案例里没有用到，我们就这样一笔带过吧。接下来对数据的处理值得我们好好研究一下。在executorService = Executors.newFixedThreadPool(5);里，我们创建了一个容量为5的线程池，5个线程分别处理不同事务，其中VPNRunnable是与vpn直接对接的线程，UDPInput和UDPOutput处理UDP相关事务，TCPInput和TCPOutput处理TCP相关事务，这里我们可能会疑惑为什么UDP和TCP需要特别拿来处理，其实我猜大概是用来分担线程压力的，另一方面的话，这部分也是我们想重点偷窥拦截的对象，所以单独来处理也不为过。对于tcp和udp，我们发现它使用了Selector和ConcurrentLinkedQueue，具体我们不关心，我们可以容易知道这是实现nio(无阻塞io)的一种基本方法，为什么会需要这个？其实也与我们的目的相关，比如tcp是有握手过程的，对于每个tcp连接，我们可以通过nio来回避多线程阻塞的麻烦。至于nio嘛，简单讲其实就是一个线程对一个事务队列进行循环执行，自己去补吧。最后注册了一个我们之前提到的广播，至于一些清理操作，没啥好说的。我们去看看主线程吧 首先依据文件描述符创建相应的文件输入输出流，这里是linux万物皆文件的思想，对于网络接口我们也视为一个文件，发送数据即写入，接受数据即读取。虽说它转化为了FileChannel对象，但并没有用到特有的传输方法transferTo和transferFrom，所有与原始的输入输出流差别不大，只不过数据的载体是byteBuffer罢了。然后循环保活线程，如果曾发出过数据，那么从ByteBufferPool取出ByteBuffer数据，否则清空数据，至于数据哪来的，当然是其它线程给的，我们后面会看的。然后是read，根据文档Each read from the descriptor retrieves an outgoing packet which was routed to the interface.意思就是拦截其它程序发出去的包，并保存到bufferToNetwork，接下来构造Packet对象来封装我们的包，至于Packet的实现属于计算机网络系统的基础内容了，总之就是解析IP协议啦。接下来就是依据TCP和UDP协议分别将数据送入相应队列，至于其它类型没有任何处理，不过ip协议上真的就这两部分吗？确实有其它的协议，如ICMP和IGMP协议，我最喜欢下面这张模型图了 这样容易看出，除了TCP和UDP外的其它依赖IP协议的基本都处理不到，所以不管其实也无所谓了。接下来从networkToDeviceQueue队列了取得接收回来的数据，然后write，同样我们来看官方文档Each write to the descriptor injects an incoming packet just like it was received from the interface.，这里就是将接受的数据回传给应用。最后稍微让线程休息一下，防止耗电过度，至此我们的主线程结束了。到这里我们可能会发现了一个比较神奇的问题，我们拦截的都是IP协议上的包，但我们的程序好像只能发送TCP和UDP的包，比如通过Socket发送TCP的包，有没有觉得头脑炸裂，竟然不能简单的read和write来实现转发，还必须自己解析包来模拟实现。 TCP转发我们先从较为复杂的TCP协议看起吧，一样先直接看主线程吧，你问为什么不看看其它的函数，如构造方法？这不都是想要什么传什么嘛，也没什么好说的 这里有两个队列inputQueue和outputQueue，对于TCPOutput来说，inputQueue就是设备发向网络的数据队列，在之前的那个线程里的deviceToNetworkTCPQueue.offer(packet);里面传入了数据，我们在这里取出来，一旦成功取出将进入下一阶段。Packet里的backingBuffer即是除了报头以外的数据，也就是传输的核心内容，后面则是取出一些报头的基本内容如目标ip和端口之类的。TCB是tcp连接的正体封装，主要是用来区别下面的一些握手过程，它们会分别调用process*来处理，RST是通信终结标志，所以调用的是closeCleanly。这里我们需要注意，握手是相对与ip协议那一端，而我们在发出数据这一方是不需要握手的，我们可以直接使用Socket来实现数据传输。我们继续看吧 我们看到vpnService.protect(outputChannel.socket());方法，这主要为了保证我们程序向外发送的数据不会被vpn拦截，不然会发生无限循环，这挺好理解的吧。outputChannel.connect(new InetSocketAddress(destinationAddress, destinationPort));我们与数据发送的最后目标连接，tcb.selectionKey = outputChannel.register(selector, SelectionKey.OP_CONNECT, tcb);往我们的selector里面注册事件，我们注意到currentPacket.updateTCPBuffer(responseBuffer,)之类的方法，其实主要是为了让其它应用接受包里面的ip和端口之类的看起来确实是自己发出数据的回应，最后outputQueue.offer(responseBuffer);将我们收到的修改包传入接受队列outputQueue。那么啥时候发数据呢？实际在标志位为ACK的时候表示我们正在相互传输数据，我们来看processACK，我们再次说明一下，这里的ACK是相对于发出包的其它应用，而与远程目标的连接并没有这个概念 从下面这段代码 1234try &#123; while (payloadBuffer.hasRemaining()) outputChannel.write(payloadBuffer);&#125; 我们可以知道，应用只把payloadBuffer的数据发送到远端，即我们之前的backingBuffer，也就是说不包含报头信息，就像我们之前说的那样。数据接收的话在TCPInput里，我们去看看吧 你和我说看不懂这些操作，去复习nio的基本内容吧，nio的基本操作是遍历select，寻找我们需要的操作来处理，而操作的依据是我们获取的SelectionKey，这里主要处理连接和读取，我们去看一下如何读取的 我们看到语句readBytes = inputChannel.read(receiveBuffer);，它将接收的数据存入receiveBuffer，结果的话最终放入outputQueue队列。我们发现两个TCP都有将数据包放入output队列，似乎有点反直觉，但其实，往其它应用传入数据就如我们之前所说还包含握手过程，TCPOutput传入握手包，TCPInput则传入实际的数据包。 总结这样好像结束了？UDP的话其实更加简单粗暴，直接扔包和接包就行了，连对接都不需要。然后好像就没内容了，可是怎么觉得什么都没有讲的感觉，所以嘛，我才会在开头说这是水文章。其实这个应用的大部分实现都在于协议包的解析，如从IP包中解析出TCP包和UDP包，然后是通过nio来与目标完成通信的过程，TCP使用Socket，UDP使用Datagram，也就是说大部分内容都是对协议的理解，感觉枯燥又无聊。哎呀，不说了，我们直接画个总结图结束我们的文章吧 这应该是今年最后的一篇文章了，以这样的形式结束，感觉也不错。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"代理","slug":"代理","permalink":"http://example.com/tags/%E4%BB%A3%E7%90%86/"},{"name":"VPN","slug":"VPN","permalink":"http://example.com/tags/VPN/"}]},{"title":"迈入数学时代","slug":"迈入数学时代","date":"2021-12-28T14:39:25.000Z","updated":"2022-10-14T23:47:10.864Z","comments":true,"path":"archives/2021-12-28-迈入数学时代/","link":"","permalink":"http://example.com/archives/2021-12-28-%E8%BF%88%E5%85%A5%E6%95%B0%E5%AD%A6%E6%97%B6%E4%BB%A3/","excerpt":"","text":"过了这么久，终于可以进入我日思夜想的数学时代了。","categories":[],"tags":[]},{"title":"垃圾选课","slug":"垃圾选课","date":"2021-12-27T13:11:22.000Z","updated":"2022-10-14T23:47:07.730Z","comments":true,"path":"archives/2021-12-27-垃圾选课/","link":"","permalink":"http://example.com/archives/2021-12-27-%E5%9E%83%E5%9C%BE%E9%80%89%E8%AF%BE/","excerpt":"","text":"我真是快被学校这垃圾的选课体系给气死了。","categories":[],"tags":[]},{"title":"懂---还真是复杂","slug":"懂---还真是复杂","date":"2021-12-26T03:39:48.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2021-12-26-懂---还真是复杂/","link":"","permalink":"http://example.com/archives/2021-12-26-%E6%87%82---%E8%BF%98%E7%9C%9F%E6%98%AF%E5%A4%8D%E6%9D%82/","excerpt":"","text":"当发表一些观点，分享一些知识的时候，总有被质疑的时候。“这难道不是网上东拼西凑出来的吗？”“这难道不是谣言吗？怎么还有人信？”“一点干货都没有，净在说大话！”……反正很多就是了，比如我说我自己学过操作系统原理，就会有人来反驳你怎么不自己写一个来证明啊！不写一个又怎么知道你真的学过没？但你知道没？这东西已经有好多相关的教程了，比如30天操作系统之类的，我当然可以假装地看一般，然后在代码批量的拷贝，做些改动，比如路径结构，变量名之类的，但这样有啥用啊？最后这系统真能比自己手上的系统好用？重走一边别人的路再扔掉，有什么意义呢？问出“意义在哪”我不想被抬杠了，非得说一个意义不大吗？操作系统在目前没有什么革新，底层大概只能拿来学习，直到新的理论出现。说实在的，怎么说我，我也不应该在意的，这让我想起一个经典的言论“你不断强调自己佛系的时候，或许这就只是你的一厢情愿了”。虽然我也不断地说着，很多东西都是老生常谈了，实在没什么好说的，然后在回忆以前我可以做到“一字而得万言”之类的事，不过现在累了，不想说啥了，不想浪费精力，但是我却还是不住的想说些什么。比起辩论，我更喜欢美文，我一直都希望着这是最后一篇进行观点输出的文章，以后应该要表现地更加含蓄一点，不能想这样说大白话。你知道吗？有关原神的争议，真的复杂到离谱了，我已经跟不上他们的思维了，各种钻牛角尖，钻漏洞。我得到的结论是，少说几句当沉默的大多数吧。但一旦缺少言论的支撑，就会有人说你在这说大话，确实有些东西引起我的思考，比如我就在自己的梦里做过很多伟大的设想，但终究只是书面上的，我说一段你可能就会懂我的意思。“首先，我们需要构造一直纯逻辑上的大统一语言，它可以实现任何语言的无损转译，包括自然语言和编程语言，接着将目前的所有理论以这种语言重新书写一遍，在从数学中去证明它具有大统一的性质……”，这样的东西，我还在许多科普的文章视频里看到过，我一直都不喜欢这种科普方式，规避公式的方式，就拿数学来说，公式可是数学的灵魂所在，科普的工作应该是以合适的方式让别人来理解公式，而不是让他们永远止步在公式面前，无法前进。说着虚无缥缈的话，又想让观众懂，哪有这么简单的事。又让我想起了原神，有人说，心海做为军师尽然完全没有发觉邪眼的存在，但正是因为她不知道有邪眼这种东西的存在才发觉不到吧，她不是预言家而是巫女。我以前很喜欢说这样一句话“知道一件东西很简单，但知道一件东西的存在却很困难”。如果科普的目的真的只是为了告知存在的话，哪里需要这么多废话来解释吗？懂—这种东西是真的说不清的，比如有时还存在业内和业外都觉得自己比对方懂的情况，一人说我懂细节，一人说我懂全局，老懂哥了是吧。最近我看到一个感觉很有道理的话，“游戏为何这么喜欢花大量的性能来做大家都不怎么关注的光线渲染部分”，其实在图形渲染方面，虽说我专研不深，但我也真的觉得确实感觉把性能放到其它物理检测方面不更好嘛，而且硬件也好像快到极限了，又该怎么提呢，而且再提的话，好像也不会有太明显的变化。有时你真的去理性思考的话，就会发现自己永远是对的，看来所谓的“懂”综究还只是依赖于个人的观点和立场。“对对对，你说的对”，总之，迷茫就对了，由衷地希望这是最后一篇文论了。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"文论","slug":"文论","permalink":"http://example.com/tags/%E6%96%87%E8%AE%BA/"}]},{"title":"无意义的文字","slug":"无意义的文字","date":"2021-12-26T03:39:16.000Z","updated":"2022-10-14T23:47:08.068Z","comments":true,"path":"archives/2021-12-26-无意义的文字/","link":"","permalink":"http://example.com/archives/2021-12-26-%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E6%96%87%E5%AD%97/","excerpt":"","text":"讲个笑话，在论文里，一个数学公式的推导可以抵一篇文论几千字的篇幅。","categories":[],"tags":[]},{"title":"Termux原理","slug":"Termux原理","date":"2021-12-22T01:01:58.000Z","updated":"2022-10-14T23:47:06.308Z","comments":true,"path":"archives/2021-12-22-Termux原理/","link":"","permalink":"http://example.com/archives/2021-12-22-Termux%E5%8E%9F%E7%90%86/","excerpt":"","text":"寻思了很久，我还是决定写下这篇文章，但这篇文章可能有点杂，看的话希望忍一忍。Termux是一个终端模拟器，让安卓有如同linux一般强大，但“安卓天生是linux”，真正的实现或许并没想象中那么复杂。我们先做一些铺垫吧。 软件是什么在最开始我想说清软件到底是什么？你可能会觉得不就是，windows的exe，安卓的apk，苹果的ipa，linux的(…)…。这样讲好像也没太大问题，exe确实是可执行文件，但apk和ipa可是安装包，大部分认识的exe也是安装包所以把它与apk和ipa归为一类也是可以理解的。软件本质上分为两种原生软件和虚拟机上软件，我们稍微来介绍一下吧。 虚拟机上软件这种称呼只是作者自己这样叫的，你可别信了。java软件就是这类软件的典型代表，如logisim和java版minecraft。它们的典型特点是我们还必须下载一个运行环境(java的jre)，这实际就是一种虚拟机的思想，通过一层java虚拟机达到在不同平台运行同一软件的效果，实际上基本所有语言都是这样运行的，不限于java，python，lua，C#等，除了少数的C/C++，go，rust等，实际上远古的语言都是后者类型，但后来发现java这种虚拟机上的语言有极大的遍历，流行的就都变成了前者类型。我们讲讲python，py和pyc其实本质上没有太大的区别，就和java的java和class，lua的lua和luac一样，没有解释器就不能运行。你可能会说，我也看到它们可以打包成exe和apk，确实但这是有代商榷的，究竟是把虚拟环境和程序一起打包进去(如cocos2dlua)，还是真的有静态编译技术就不得而知了。 原生软件与虚拟机上的软件“一次编译(编写)处处允许”不同，原生软件的特点是“一次编写处处编译”，这是从开发者角度，我们先跳过，如果从用户的角度的话，还真就是各种后缀的不同了，而且不同平台还得下不同版本，还得分32位和64位等等。大部分用户对应用的印象还停留在“下载然后安装”，所以有时jar程序和py程序都得来一个exe才行，如minecraft就需要一个exe的启动器。不过这也没错，这才是原生软件。虚拟机上软件面向虚拟机运行，而原生软件则是面向操作系统运行的，注意不是硬件，后面我们会讲。我们举几个常见的系统说明一下，为什么不说苹果，才不是因为我没有苹果呢？ windows我们平常下载的exe安装包其实就是一个程序，只不过它将真正的程序打包以后，再加了一些用于配置的代码，如配置安装路径，修改注册表，创建快捷方式等，最重要的还是解压数据到指定路径。当然作者其实并不喜欢这种程序，而喜欢portable版，俗称绿色版或免安装版，至少这样可以对软件污染的范围有所控制，像有些软件拿管理员身份安装，谁知道它干了什么。一个标准的windows原生程序包括可执行文件，动态库和资源文件，其实基本所有软件都是这样的模式，目前看来是不可取代的。资源文件是一种统称，包括配置文件，媒体资源和软件自带的一些格式资源，因为它们多而杂，而且不是我们需要关注的，所以统称为一类就行了。在windows上，动态库是dll，可执行文件是exe，exe和dll才是我们的程序，exe是程序的入口。 linux在linux上，依据不同的发行版本安装包的种类确实还挺多的，如ubuntu的deb(本质来自于debian发行版)，不过作为linux爱好者，更喜欢apt install *来安装软件，软件之所以有一个安装过程最大原因还是省去了用户繁琐配置的过程。linux程序只有一种，有可执行权限和elf文件头的文件，这是可执行文件，动态库则是so为后缀，放在“/usr/lib”之类路径下，当然还能通过配置来修改增加动态库路径就是了。在ubuntu下有一个应用列表，它实际就是一个可被桌面识别的配置文件，指向安装过的某个可执行文件，它路径配置比较自由。 安卓最后再说一说安卓吧，安卓的可执行文件是安装包(本质zip)里面的dex，这是一种类似jar的文件，但它运行在google自己研究的dalvik虚拟机上，可以兼容大部分javaAPI，对于引用的库，除了androidframework，都会被打包进dex，而桌面则是通过软件的配置来构造Intent(用于androidActivity跳转的类)，来执行相应的程序。安卓天生是linux，所以安卓提供native技术(实际上与java的jni无异)，可以在dex里调用动态库so的函数。所以对于安卓，软件=dex(可执行文件)+so(动态库)。对于linux，软件=有可执行权限的文件+so。对于windows，软件=exe+dll。有关动态库，还得提一嘴的是，它并非必需是在程序的，此时软件使用的是系统的动态库。为什么要说原生软件是面向系统的，就是因为它们离不开系统动态库。 跨平台的难处对于虚拟机上软件，只要官方虚拟机哪里有，哪里就能运行，并没有考虑跨平台的必要，这是提供方需考虑的，当然不排除第三方移植就是了。而对于原生软件，难点主要有俩，一是系统SDK(开发工具包)，二是硬件差异。 系统SDK原生软件是面向系统的，而非面向硬件，如果和我说汇编，我笑而不语。特别是对于闭源系统，我们离不开官方提供的SDK，就算开源也没谁会闲着开发再开发一套工具，嗯，话说GUN套件到底算什么。对于Windows，我们需要WindowsSDK，不过它基本是直接和Visual系列绑定的就是了，windows官方提供了不少编程语言如Basic，C/C++，C#，F#等，不过用得多的都是C系列就是了，谁让基本好多系统都支持C系列语言，至于为什么，我也不知道。这里还需要指出C#编译出的软件本质也属于虚拟机上程序，它依赖于.net运行时环境，只不过在windows里正好有，就好像原生环境一样。对于Android，我们需要AndroidSDK，早期没有AndroidStudio的时候，靠的是有扩展能力的编辑器(如eclipse)或者直接使用SDK中的命令程序，反正挺麻烦的，所以集成开发环境(IDE)则么也比命令行舒服太多了。对于苹果系列(包括mac和iphone)使用的是Xcode，因为没用过，所有不知道，直接跳过。最惨的或许是我们的linux了，没有IDE，只有GUN套件的gcc和g++，不过也正应如此我们才能更加深入的理解操作系统原理。接下来，我们的平台都是安卓和linux了，可别在意哦。 硬件差异对于SDK差异，克服其实并不是很困难，如linux，window和mac有着不同的窗口创建API，但可以通过glfw框架简单的统一起来，它们主要表现在媒体方面，而基础操作的话，即标准C/C++库，则都是一样的，注意只是提供的API相同，编译后的结果是不同的。所以我们可以发现跨平台的C库基本都是媒体库如Qt，SDL，GTK等，我们需要注意跨平台C库和C库的区别，后者基于标准C/C++库实现，基本无平台差异性。这部分用于区分不同的桌面平台，而真正的难题在于硬件的差异，而其中问题最大的是显示，对于声音键盘等都比较同质化，而CPU的话虽然架构有所差异，但还是离不开冯诺依曼结构，显示才是最大的问题，这也是平台端与手机端较难对接的原因。你觉得只是屏幕变小那么简单？桌面端有窗口系统得益于巨大的屏幕，所以比例的问题并不是很大，但手机因为屏幕小，只能全屏，不同手机分辨率不同，或许这个开源安卓太多发行版有关吧，显示问题就出来了，如果是等比放缩的话其实观感影响不大，但拉伸还是看得挺难受的，所以以前安卓开发准备drawable是时候有好多分辨率，属实难受，不过现在大多基于框架(如游戏引擎)，提供分辨率适配功能。但难以跨平台终究还是两方面原因，一是确实硬件不行，二是懒和利益问题。对于前者主要表现在手机与桌面端的高端游戏上(有光追，体积雾等需要高端显卡的游戏)，低端游戏移植还是挺多的，这就涉及第二方面中的懒了，如懒得在安卓再设计一套UI，如果是逻辑控制，数据处理等方面可以靠C系语言的强大跨平台编译性，而UI才是最麻烦的东西，涉及流程复杂，像没有键盘的安卓还需要虚拟键盘，还有很强的平台相关性，这也是为什么MVC设计如此重要，如果单纯看绘图的话，勉强还有opengl，但原始积累的控件才是很麻烦的事。为什么大部分商业软件并没在linux上发行，这就与利益问题相关了，比如linux的开源协议，所以我们使用的linux软件基本都是开源免费的。 一个软件的运行过程在linux下可以通过strace *来查看软件的运行过程 这里的每一行都是一个系统调用(如execve,mmap)等，括号内是参数，等号后是执行状态，0表示正常，不过实际上这是有问题的，mkdir本身是系统调用，是在linux内核里面的，安卓确实有，但Termux只是个模拟软件没有权限调用，实际只能模拟一个类似的实现 这里的time也是一个系统调用，strace无法跟踪，所以我们还是举一个简单的helloworld比较合适 输出太长了，关键的其实就只要下面的这一句write(1, &quot;Hello world!&quot;, 12Hello world!)作者虽然学过操作系统原理，但真的实践的话还是差距太大了。我们看到execve感觉这样程序应该已经执行完了才对，但linux的程序实际都要依赖于我们当前的shell来运行，我们的a.out虽说是程序，但对于CPU而言是有杂质的，其次它并不在内存里(通俗讲是运行内存)，而在外存里CPU不能直接运行。mmap是内存映射，主要将代码拷贝到内存里，这就可以理解execve实际是用来解析可执行文件的，mprotect则是给程序分配内存用的防止内存溢出，prctl进程操作等等，我们直接说结论吧，其实只有纯正的命令行，它是显卡的一个运行状态(linux下Ctrl+Alt+F1切换)(除非你知道在做什么否则别这样)，我们才能看到一个程序真正的运行过程，我们实际使用的shell都是桌面进程的子进程，内部有许多封装和状态的模拟，早就离教材里的情况有十万八千里了，C程序的运行我之前在lua分析里讲过，进程实际是就是一段内存，有四个部分堆内存，代码段，栈内存，全局变量。而这些东西的建立与运行过程都是通过系统调用来实现的，所以我说过编程都是面向系统的。这时你或许要和我理论汇编了，确实我得讲一下这个东西了，C程序的编译阶段就包括汇编的过程，比如我们Helloworld的汇编代码如下 一句代码比较显眼bl printf，也就是这里并没有完全实现输出，还是得靠其它函数实现，我们看看它的源码吧(来自glibc)…额，太复杂了，不过总之就是它依赖于系统调用实现的[说实话，有点破防了，以前学了操作系统原理，就想着这自己写一个操作系统，也曾跟着教程一步步来，但到后面我都不知道这样做的意义在哪，花费如此多的时间，完成度还不如很久以前的dos系统，有些时候要考虑很多东西，而这些东西都是历史积累的结果，短时间内想要把这些全部理解实在太困难了，而且跟着做完以后，你会发现它仍然无法适应如今的情况，也就是它真的只能用来学习，除非能摆脱如今的计算机架构有所创新，否则再写一个与如今系统差不多有又许多问题的系统，根本没有意义，就是兼容C也毫无意义，那时我才明白基于linux内核并非什么丢脸的事，以前我还十分看不起那些基于linux的手机系统呢，唉，过去的事，提提就过去吧]。这时或许你会说，我用汇编实现helloworld的代码应该是这样 1234567891011121314data SEGMENT msg DB &#x27;Hello, world.$&#x27; data ENDScode SEGMENT ASSUME CS:code,DS:data start:MOV AX,data MOV DS,AX lea dx,msg mov ah,9h int 21h MOV AX,4C00h INT 21h code ENDS END start 其中重要的部分是int 21h，有些人也喜欢用int 0x80，后者是纯粹的系统调用的写法，编译器会”理解性”的帮你解释，而前者则是真正的中断服务，中断是CPU与其它设备交流的核心指令，int 21h是dos提供的字符中断例程，与之类似的还有int 10h是dos提供的图形中断例程，有没有发现即使汇编你还是离不开系统，如果你让它在你的系统上编译肯定是这样的，dosbox综究还只是个模拟器。不过int指令确实是CPU与其它硬件交流的核心，好了直接跳到重点吧，CPU的大多指令都是逻辑控制与计算和对内存的控制，这与C的基本语句都是类似的，而复杂的与硬件交流的指令如int,in,out等，我们则会通过封装在系统调用里的库来实现的，操作系统真正重要的其实就是这一部分，而封装的过程则是驱动的编写，linux内核就是宏内核，它把许多与硬件交流的部分全封装起来，如进程管理(本质就是内存管理)，并将系统调用外露出来，当然还要封装一层C/C++接口来方便编程就是了，最后套个shell就可以形成一个操作系统了。操作系统重要的作用就是保护硬件，所以特别关注int指令还是可以理解的。最后我们应该可以理解一个软件真正的运行过程了，看看下面这个图吧。 演不下去了，这还是最简单的shell，实际的系统更加复杂，不过比我们需要的超出太多了，所以不讲了，笔者在底层虽说有一定理解，但还是离实际差太远了，希望谅解作者的水平。 重识C语言或许你会疑惑一个问题，操作系统是用C写的，但C又是在操作系统上编译的，好像是个死循环，实际上C语言的GUN套件包括编译器也是C写的。实际上这都是历史积累的结果，这个从python就很好理解，python的原始解释器是CPython，但后来又有一个用python写的解释器PyPy，与python不同C是可以编译为二进制文件的，它的运行依赖于CPU而不是解释器，所以一旦有了一个原始的程序，比如通过烧录，它有编译C的功能，这样在通过C写一个新的编译器，编译为CPU上程序即可，这样以后都用这个就行了，不过这不是重点。我们都知道C语言的编译分四部:预处理，编译，汇编和链接。其中的枢纽是函数，函数始终贯穿四个步骤，我们并没有提C++并非说它没有讨论的必要，只是C++终究只是为了引入一些现代思想(面向对象，内存保护等)而形成的C的超集，理解底层还是得靠C。在预处理中，主要有两大作用，一是选择需要编译的代码(主要用于跨平台编译)，二是声明需要的函数和结构体，编译则是将C语言转化为适应于相应系统的汇编代码，汇编将汇编代码转为二进制文件，链接则是将申明的函数连接到相应的实现位置。这些都挺好理解，但为什么说枢纽是函数，在我们开发过程中，很容易发现对于逻辑控制和数据处理这类CPU擅长的事，不会用到任何函数，它们是可以直接汇编为机器指令。而函数封装的则是一些本身非CPU的直接性指令，如输出语句，这时就需要引入外部的库。在linux里，无特别配置的话，头文件的默认路径是/usr/include或/usr/local/include，里面除了C标准库，我们发现还有一些比较注目的如linux和sys，如果安装过桌面系统的就还有gl、x11之类的图形框架。前面这两个一般的开发者(如我)基本估计都没有用过，实际上系统调用就申明在linux/syscalls.h里面，只是一些名称对应数字的宏，实际上许多驱动的相关函数也在这个目录里面，这类东西其实与我差距还是太远了。我们再来认识一下C语言吧，C其实只是汇编语言上的一层不太复杂的抽象，汇编嘛，只不过是机器指令的映射罢了，对于无危险性的行为直接编译即可，而较危险(主要是与硬件的交互)则主要封装在系统里，然后通过向外提供的接口来调用。至此其实对所谓的操作系统应该有大概的理解了，那就是硬件管理，通俗讲就是驱动程序。不过嘛，除了咱们的linux，准确来说是内核吧，上层还是封装了许多东西才有我们的操作系统，想想我们曾学过的操作系统原理，不知为何总是对不上windows之类的系统。说太多了，其实我觉得C之所以一直占据底层，估计是很多人懒得写编译器罢了，要么就是原始的软件生态太难超过了，比如go之类的语言，编译结果一样是可以依赖CPU运行的。其实用过GUN套件编译C的人大多对这样应该都是很了解的了，要不就当我水点字数吧。 从安卓开发看安卓开发者在一部安卓手机上有多大的控制权，实际的意思是软件的控制权有多大，不过我们得考虑一种叫root的东西，默认没有就行了。这要从安卓的框架说起，从下到上分为为4层，linux内核层，系统运行层，应用框架层，应用层。一般的用户只是使用软件，停留在应用层，而安卓的开发者可在应用框架层使用java，在系统运行层使用C/C++再通过回调返回结果到应用层。这些其实都不重要，重要的是它是linux内核的，重要的是我们可以通过NDK使用内核外露的C库，没法控制的大头在于权限管理。在linux里面一个程序(如ls)要运行必需要有可执行权限，但是安卓应用并没有权限管理的功能，准确来说是linux层的那种权限管理，不过这是针对一般应用，如果是系统应用或root应用就别考虑了，这除了找漏洞还真没啥办法，已经超出了我的能力范围。回到正题，其实对于一个应用它能完全控制的路径如下(不过依据不同的发行系统可能稍有偏差) dex+lib属于程序的核心部分，然后还有apk的备份和缓存区，外部的嘛没什么好说的，重点来了，那个文件夹就是6.71GB的那个，不过这里应该是存在软链接的，比如在Termux下的路径是这样的 我猜/data/data和/data/user/0应该是链接，没root我也不能肯定啊。这时我们还有一个值得注意的是u0_a166这个用户和用户组，这个实际就是系统分配给软件的，看来终究还是得适应linux内核。这里面的文件，shared_prefs是安卓在java层有一个SharedPreferences存储的位置，databases虽然这里没有但它也是java层提供的sqlite存储的位置，cache缓存对于这种东西我都是保持沉默的，files是软件随便存储的私人空间通过“openFile*”即可获得相应的流，而这也就是我们实现一个类linux的核心据点了。有人觉得外存不行吗？确实不行，你看 除了root用户，我们没有任何权限，你可能会说不对啊，只要在Manifest.xml里申明permission的话可以写入文件啊。其实我们可能需要稍微讲讲权限管理定位本质是什么，安卓层的咱不讲，我们讲linux层，你有没有发现关于权限的操作往往于硬件相关，这意味着我们需要通过函数调用来实现相关操作，最简单的实现权限管理的方法就是这这个函数里加上权限的判断，实际上我们可能还得讲进程管理的问题，实际上在linux里一个用户对应一个进程或者说一个shell，我们通过shell实现相应操作这个shell实际已经通过登陆的用户拥有着权限标识，但是要行使权限还是得靠系统调用，系统自然就可以根据你的权限标识来判断操作是否继续执行，简单的权限管理就可以实现了。这也解释了，我们之前为什么要这么关心文件和权限的问题，因为linux系统权限管理的核心就在这里，这也确立了files文件的重要性。对于更加细致的就不讲了吧，本来就有很多相关作品，再讲一遍就太浪费时间了。文件为何如此重要，这来源于liunx万物皆文件的思想，比如/dev，/tmp，/run等文件，linux实际上还可以通过修改/proc下的文件来对进程中的变量操作，不过都是root才有的权限就是了。为什么会认为Termux是伪终端，因为Termux只实现了/home和/usr目录，而内核实际上还是依赖安卓自身的内核，同时useradd之类的用户管理命令Termux也是做不到的，真的学linux的话，Termux并不是一个好的工具，但它对开发者而言却是一个手机利器(比如我)。 Termux实现的可能性讲了这么就底层与安卓的东西，终于可以来讲Termux该怎么实现了，首先我们要明确到底实现哪些功能，比如用户管理显然不行，超应用范围的文件操作也是不行的，其实有些是没必要的，在files文件下Termux自己其实就像一个root用户可以任意修改读写权限，虽然范围有所限制，但子树还是能和原来的树有相似功能的，我们要完成的事情实际只要一个，在files里执行C编译后的程序，实际得使用NDK来编译，但我们可以使用Termux的GCC来近似达到目的，一旦说明了上述功能的可能性，实际上就可以让许多C程序在Termux上运行了，只要利用安卓的界面，图形界面其实也是可以实现的，比如国改的UTermux或Aidlearning，它们的实现都是类似的，不过我们先从基础的开始。光说不练假本事，接下来我们写一个小项目，执行flies下的HelloWorld并把结果输出到界面上。先随便写一个界面 然后将我们的可执行文件拷贝到软件目录下(这里是外置内存卡，别忘了加权限) 123456789101112131415161718192021222324252627282930313233343536public void onClick1(View view) &#123; String fromFile = &quot;a.out&quot;; String toFile = &quot;a.out&quot;; String fromFullPath = Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/&quot; + fromFile; String toFullPath = getFilesDir() + &quot;/&quot; + toFile; try &#123; //输入流 FileInputStream fis = new FileInputStream(fromFullPath); //输出流 FileOutputStream fos = openFileOutput(toFile, MODE_WORLD_WRITEABLE); byte data[] = new byte[1024]; int length; while((length = fis.read(data))!=-1) &#123; fos.write(data, 0, length); &#125; fis.close(); fos.close(); log.append(&quot;成功将&quot; + fromFullPath + &quot;拷贝至&quot; + toFullPath + &quot;\\n&quot;); return; &#125; catch (FileNotFoundException e) &#123; log.append(&quot;未找到文件!\\n&quot;); log.append(e.toString()); &#125; catch(IOException e) &#123; log.append(&quot;IO异常!\\n&quot;); log.append(e.toString()); &#125; &#125; 然后是执行的核心代码(其实挺简单的) 123456789101112131415161718192021222324252627282930313233343536public void onClick2(View view) &#123; String toFile = &quot;a.out&quot;; String toFullPath = getFilesDir() + &quot;/&quot; + toFile; File file = new File(toFullPath); boolean success = file.setExecutable(true); if(!success) log.append(&quot;Permission Denied!\\n&quot;); Runtime runtime = Runtime.getRuntime(); try &#123; //保存输出 InputStream is; Process proc = runtime.exec(file.getAbsolutePath()); if(proc.waitFor() != 0) &#123; log.append(&quot;运行错误 exit code=&quot;+proc.exitValue()+&quot;\\n&quot;); is = proc.getErrorStream(); &#125; else &#123; is = proc.getInputStream(); &#125; byte data[] = new byte[1024]; int length; while((length = is.read(data))!=-1) &#123; log.append(new String(data, 0, length)); &#125; log.append(&quot;\\n&quot;); &#125; catch (IOException e) &#123; log.append(&quot;IO异常!\\n&quot;); log.append(e.toString()); &#125; catch(InterruptedException e) &#123; log.append(&quot;执行中断!\\n&quot;); log.append(e.toString()); &#125; &#125; 最后编译测试一下(a.out已经用Termux编译后提前准备好了) 嗯，完美执行了……感觉有点不够，真的有这么简单嘛？是的确实就是这么简单，安卓实际已经封装了不少方法，只不过这种API一般用得比较少，开发者就没怎么注意过。实际上，runtime除了exec执行命令外还有许多方法，如loadLibrary可以载入动态库，traceInstructions进行跟踪等。实际上，内核这东西安卓已经有了，我们做的不过是一层封装罢了。你问我，我前面讲这么多的意义在哪？当然是更好的理解API啦，有时API用起来难，实际难在不理解背后的原理。 看看Termux源码最后我们稍微速览一下Termux的源码吧，这里是地址。嗯，才4M左右的内存，不对啊记得明明安装包都有80M左右，赶快拆包看看。 好家伙，bootstrap不是个Web框架吗？开玩笑啦，其实这个只是Termux运行基本库，主要是用来兼容安卓下没有的linux的一些库，还有一些基本命令。Termux编译了四个不同的架构，加起来正好80M左右，好了回到正题 我们看到源码分三部分来写，emulator应该是核心部分，view应该是界面，app的话应该是用来整合成一个应用的。在app的Manifest里面我们看到了三个Activity，至于还有一个别名Activity就别管了，TermuxActivity即是主界面，(注意View是界面不是Activity，两者有一定区别，所以Activity在app里而不在view里)。另外两个TermuxHelpActivity和TermuxFileReceiverActivity，这是啥，算了没见过不懂，还是先看看源码吧。嗯嗯，在TermuxActivity里可以看到这个 1234567891011@Overridepublic void onCreate(Bundle bundle) &#123; *** mTerminalView = findViewById(R.id.terminal_view); mTerminalView.setOnKeyListener(new TermuxViewClient(this)); mTerminalView.setTextSize(mSettings.getFontSize()); mTerminalView.setKeepScreenOn(mSettings.isScreenAlwaysOn()); mTerminalView.requestFocus(); ***&#125; mTermuxView是TermuxView的实例对象，它定义在view里面，是Termux的主要界面shell部分的内容。我们继续看，在TermuxView里 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283public final class TerminalView extends View &#123; *** @Override public boolean onCheckIsTextEditor() &#123; return true; &#125; *** @Override public InputConnection onCreateInputConnection(EditorInfo outAttrs) &#123; *** return new BaseInputConnection(this, true) &#123; @Override public boolean finishComposingText() &#123; *** sendTextToTerminal(getEditable()); getEditable().clear(); return true; &#125; @Override public boolean commitText(CharSequence text, int newCursorPosition) &#123; *** Editable content = getEditable(); sendTextToTerminal(content); content.clear(); return true; &#125; *** void sendTextToTerminal(CharSequence text) &#123; stopTextSelectionMode(); final int textLengthInChars = text.length(); for (int i = 0; i &lt; textLengthInChars; i++) &#123; char firstChar = text.charAt(i); int codePoint; if (Character.isHighSurrogate(firstChar)) &#123; if (++i &lt; textLengthInChars) &#123; codePoint = Character.toCodePoint(firstChar, text.charAt(i)); &#125; else &#123; // At end of string, with no low surrogate following the high: codePoint = TerminalEmulator.UNICODE_REPLACEMENT_CHAR; &#125; &#125; else &#123; codePoint = firstChar; &#125; boolean ctrlHeld = false; if (codePoint &lt;= 31 &amp;&amp; codePoint != 27) &#123; if (codePoint == &#x27;\\n&#x27;) &#123; // The AOSP keyboard and descendants seems to send \\n as text when the enter key is pressed, // instead of a key event like most other keyboard apps. A terminal expects \\r for the enter // key (although when icrnl is enabled this doesn&#x27;t make a difference - run &#x27;stty -icrnl&#x27; to // check the behaviour). codePoint = &#x27;\\r&#x27;; &#125; // E.g. penti keyboard for ctrl input. ctrlHeld = true; switch (codePoint) &#123; case 31: codePoint = &#x27;_&#x27;; break; case 30: codePoint = &#x27;^&#x27;; break; case 29: codePoint = &#x27;]&#x27;; break; case 28: codePoint = &#x27;\\\\&#x27;; break; default: codePoint += 96; break; &#125; &#125; inputCodePoint(codePoint, ctrlHeld, false); &#125; &#125; &#125;; &#125;&#125; 这部分是用来监听输入法输入的代码，void sendTextToTerminal(CharSequence text) &#123;里面的text即是我们一次输入的内容，对于有些字符稍作处理后，再把任务交给inputCodePoint(codePoint, ctrlHeld, false); 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAltDownFromEvent) &#123; if (LOG_KEY_EVENTS) &#123; Log.i(EmulatorDebug.LOG_TAG, &quot;inputCodePoint(codePoint=&quot; + codePoint + &quot;, controlDownFromEvent=&quot; + controlDownFromEvent + &quot;, leftAltDownFromEvent=&quot; + leftAltDownFromEvent + &quot;)&quot;); &#125; if (mTermSession == null) return; final boolean controlDown = controlDownFromEvent || mClient.readControlKey(); final boolean altDown = leftAltDownFromEvent || mClient.readAltKey(); if (mClient.onCodePoint(codePoint, controlDown, mTermSession)) return; if (controlDown) &#123; if (codePoint &gt;= &#x27;a&#x27; &amp;&amp; codePoint &lt;= &#x27;z&#x27;) &#123; codePoint = codePoint - &#x27;a&#x27; + 1; &#125; else if (codePoint &gt;= &#x27;A&#x27; &amp;&amp; codePoint &lt;= &#x27;Z&#x27;) &#123; codePoint = codePoint - &#x27;A&#x27; + 1; &#125; else if (codePoint == &#x27; &#x27; || codePoint == &#x27;2&#x27;) &#123; codePoint = 0; &#125; else if (codePoint == &#x27;[&#x27; || codePoint == &#x27;3&#x27;) &#123; codePoint = 27; // ^[ (Esc) &#125; else if (codePoint == &#x27;\\\\&#x27; || codePoint == &#x27;4&#x27;) &#123; codePoint = 28; &#125; else if (codePoint == &#x27;]&#x27; || codePoint == &#x27;5&#x27;) &#123; codePoint = 29; &#125; else if (codePoint == &#x27;^&#x27; || codePoint == &#x27;6&#x27;) &#123; codePoint = 30; // control-^ &#125; else if (codePoint == &#x27;_&#x27; || codePoint == &#x27;7&#x27; || codePoint == &#x27;/&#x27;) &#123; // &quot;Ctrl-/ sends 0x1f which is equivalent of Ctrl-_ since the days of VT102&quot; // - http://apple.stackexchange.com/questions/24261/how-do-i-send-c-that-is-control-slash-to-the-terminal codePoint = 31; &#125; else if (codePoint == &#x27;8&#x27;) &#123; codePoint = 127; // DEL &#125; &#125; if (codePoint &gt; -1) &#123; // Work around bluetooth keyboards sending funny unicode characters instead // of the more normal ones from ASCII that terminal programs expect - the // desire to input the original characters should be low. switch (codePoint) &#123; case 0x02DC: // SMALL TILDE. codePoint = 0x007E; // TILDE (~). break; case 0x02CB: // MODIFIER LETTER GRAVE ACCENT. codePoint = 0x0060; // GRAVE ACCENT (`). break; case 0x02C6: // MODIFIER LETTER CIRCUMFLEX ACCENT. codePoint = 0x005E; // CIRCUMFLEX ACCENT (^). break; &#125; // If left alt, send escape before the code point to make e.g. Alt+B and Alt+F work in readline: mTermSession.writeCodePoint(altDown, codePoint); &#125; &#125; 显然这个方法处理完ctrl就交给mTermSession来处理alt了，它是TerminalSession的实例对象，但它是在TermuxActivity里面实例化的，并通过view的attackSession来绑定，总之知道它是处理层的东西就行了，我们去看看吧，它在emulator模块里 12345678910111213141516171819202122232425262728293031323334353637383940414243public final class TerminalSession extends TerminalOutput &#123;@Override public void write(byte[] data, int offset, int count) &#123; if (mShellPid &gt; 0) mTerminalToProcessIOQueue.write(data, offset, count); &#125; /** Write the Unicode code point to the terminal encoded in UTF-8. */ public void writeCodePoint(boolean prependEscape, int codePoint) &#123; if (codePoint &gt; 1114111 || (codePoint &gt;= 0xD800 &amp;&amp; codePoint &lt;= 0xDFFF)) &#123; // 1114111 (= 2**16 + 1024**2 - 1) is the highest code point, [0xD800,0xDFFF] is the surrogate range. throw new IllegalArgumentException(&quot;Invalid code point: &quot; + codePoint); &#125; int bufferPosition = 0; if (prependEscape) mUtf8InputBuffer[bufferPosition++] = 27; if (codePoint &lt;= /* 7 bits */0b1111111) &#123; mUtf8InputBuffer[bufferPosition++] = (byte) codePoint; &#125; else if (codePoint &lt;= /* 11 bits */0b11111111111) &#123; /* 110xxxxx leading byte with leading 5 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b11000000 | (codePoint &gt;&gt; 6)); /* 10xxxxxx continuation byte with following 6 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b10000000 | (codePoint &amp; 0b111111)); &#125; else if (codePoint &lt;= /* 16 bits */0b1111111111111111) &#123; /* 1110xxxx leading byte with leading 4 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b11100000 | (codePoint &gt;&gt; 12)); /* 10xxxxxx continuation byte with following 6 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b10000000 | ((codePoint &gt;&gt; 6) &amp; 0b111111)); /* 10xxxxxx continuation byte with following 6 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b10000000 | (codePoint &amp; 0b111111)); &#125; else &#123; /* We have checked codePoint &lt;= 1114111 above, so we have max 21 bits = 0b111111111111111111111 */ /* 11110xxx leading byte with leading 3 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b11110000 | (codePoint &gt;&gt; 18)); /* 10xxxxxx continuation byte with following 6 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b10000000 | ((codePoint &gt;&gt; 12) &amp; 0b111111)); /* 10xxxxxx continuation byte with following 6 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b10000000 | ((codePoint &gt;&gt; 6) &amp; 0b111111)); /* 10xxxxxx continuation byte with following 6 bits */ mUtf8InputBuffer[bufferPosition++] = (byte) (0b10000000 | (codePoint &amp; 0b111111)); &#125; write(mUtf8InputBuffer, 0, bufferPosition); &#125;&#125; 最终会传入mTerminalToProcessIOQueue来处理相关事务，它是一个byte队列，用来将terminal数据传入我们进程的数据结构，然后我们的读取线程在这里 1234567891011121314151617181920212223242526public void initializeEmulator(int columns, int rows) &#123; mEmulator = new TerminalEmulator(this, columns, rows, /* transcript= */2000); int[] processId = new int[1]; mTerminalFileDescriptor = JNI.createSubprocess(mShellPath, mCwd, mArgs, mEnv, processId, rows, columns); mShellPid = processId[0]; final FileDescriptor terminalFileDescriptorWrapped = wrapFileDescriptor(mTerminalFileDescriptor); *** new Thread(&quot;TermSessionOutputWriter[pid=&quot; + mShellPid + &quot;]&quot;) &#123; @Override public void run() &#123; final byte[] buffer = new byte[4096]; try (FileOutputStream termOut = new FileOutputStream(terminalFileDescriptorWrapped)) &#123; while (true) &#123; int bytesToWrite = mTerminalToProcessIOQueue.read(buffer, true); if (bytesToWrite == -1) return; termOut.write(buffer, 0, bytesToWrite); &#125; &#125; catch (IOException e) &#123; // Ignore. &#125; &#125; &#125;.start(); *** &#125; JNI是native方法的封装类，对应我们之前看到的libtermux.so，看样子它最终是用C来实现的，不过对于安卓java与C没太大差别。我们换到jni，看看termux.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869static int create_subprocess(JNIEnv* env, char const* cmd, char const* cwd, char* const argv[], char** envp, int* pProcessId, jint rows, jint columns)&#123; int ptm = open(&quot;/dev/ptmx&quot;, O_RDWR | O_CLOEXEC); if (ptm &lt; 0) return throw_runtime_exception(env, &quot;Cannot open /dev/ptmx&quot;);#ifdef LACKS_PTSNAME_R char* devname;#else char devname[64];#endif if (grantpt(ptm) || unlockpt(ptm) ||#ifdef LACKS_PTSNAME_R (devname = ptsname(ptm)) == NULL#else ptsname_r(ptm, devname, sizeof(devname))#endif ) &#123; return throw_runtime_exception(env, &quot;Cannot grantpt()/unlockpt()/ptsname_r() on /dev/ptmx&quot;); &#125; // Enable UTF-8 mode and disable flow control to prevent Ctrl+S from locking up the display. struct termios tios; tcgetattr(ptm, &amp;tios); tios.c_iflag |= IUTF8; tios.c_iflag &amp;= ~(IXON | IXOFF); tcsetattr(ptm, TCSANOW, &amp;tios); /** Set initial winsize. */ struct winsize sz = &#123; .ws_row = (unsigned short) rows, .ws_col = (unsigned short) columns &#125;; ioctl(ptm, TIOCSWINSZ, &amp;sz); pid_t pid = fork(); if (pid &lt; 0) &#123; return throw_runtime_exception(env, &quot;Fork failed&quot;); &#125; else if (pid &gt; 0) &#123; *pProcessId = (int) pid; return ptm; &#125; else &#123; *** &#125;&#125;JNIEXPORT jint JNICALL Java_com_termux_terminal_JNI_createSubprocess( JNIEnv* env, jclass TERMUX_UNUSED(clazz), jstring cmd, jstring cwd, jobjectArray args, jobjectArray envVars, jintArray processIdArray, jint rows, jint columns)&#123; *** int procId = 0; char const* cmd_cwd = (*env)-&gt;GetStringUTFChars(env, cwd, NULL); char const* cmd_utf8 = (*env)-&gt;GetStringUTFChars(env, cmd, NULL); int ptm = create_subprocess(env, cmd_utf8, cmd_cwd, argv, envp, &amp;procId, rows, columns); (*env)-&gt;ReleaseStringUTFChars(env, cmd, cmd_utf8); (*env)-&gt;ReleaseStringUTFChars(env, cmd, cmd_cwd); *** return ptm;&#125; 当我看到int ptm = open(&quot;/dev/ptmx&quot;, O_RDWR | O_CLOEXEC);的时候，算了，我们实现的方式看来存在根本上的区别，我就说为什么每次运行Termux的时候通知栏有一个消不掉的东西(手机截不到屏)，这原来是系统的东西，我还以为是程序的东西。欸欸，有没有觉得很惊讶，是我孤陋寡闻了？嘿嘿，看我为什么做了这么多铺垫，意义不就来了嘛！至于“/dev/ptmx”嘛，它是linux内核自带的伪终端设备，看来android果然天生就是linux，好了，我们说过就是速览一下，看来也该结束了，你问我怎么实现的好像没说？我只能说补一补linux的知识吧。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://example.com/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"终端","slug":"终端","permalink":"http://example.com/tags/%E7%BB%88%E7%AB%AF/"}]},{"title":"处理","slug":"处理","date":"2021-12-19T03:34:01.000Z","updated":"2022-10-14T23:47:07.730Z","comments":true,"path":"archives/2021-12-19-处理/","link":"","permalink":"http://example.com/archives/2021-12-19-%E5%A4%84%E7%90%86/","excerpt":"","text":"我喜欢道家和存在主义不是没有道理的，大家都互相看不起，真没必要去讲理。能沉默就沉默，这样真没什么坏处。b188abf3","categories":[],"tags":[]},{"title":"编码的理解","slug":"编码的理解","date":"2021-12-15T11:23:42.000Z","updated":"2022-10-14T23:47:08.239Z","comments":true,"path":"archives/2021-12-15-编码的理解/","link":"","permalink":"http://example.com/archives/2021-12-15-%E7%BC%96%E7%A0%81%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"简介编码本身其实不是什么难以理解的东西，就是将想要编码的东西与自然数形成一一对应的过程。编码本身没什么可学的东西，但是我们却总会别乱码所困扰，理解原理是解决乱码的前提，所以开始我们的学习之旅吧。 几种编码目前常见的编码有三种，ASCII、ANSI(扩展ASCII)和Unicode。ASCII是几乎所有编码都兼容的存在，ANSI多用于Window和Mac系统，Unicode则多用于类Unix系统如linux和安卓。 ASCII编码ASCII码共有128个字符，0～31和127(注意从0开始的话127就是最后一个)为控制字符，如换行(\\n)，回车(\\r)等，32～126为打印字符，包括空格(32)，数字0-9(48～57)，大写字母A-Z(65～90)，小写字母a-z(97～122)等，实际上ASCII对应了电脑键盘上几乎所有的字符(比较特别的如F1~F14)，可以近似认为ASCII即是键盘的编码。编码最终都是要存储到计算机里，计算机里面只要二进制，不过十进制与二进制有天生的对应关系，这并非我们需要考虑的。因为二进制的特性，2^n比较适合当计算机中的“整数”，而比较巧的是128正好等于2^7，实际可能是反过来，于是可以通过7个二进制位来存储这些数据。不过伟大的编码人员好像考虑到了扩展性，决定在之前加一个二进制位以备不时之需，这样就可以以8个二进制位来存储ASCII编码的字符，其中最高位为0。这样做有许多好处，首先二进制可以很容易的转化为8(2^3)进制和16(2^4)进制，如2进制转为16进制可以每四个的进行转化，其次可以在最高位填1来进行ASCII的扩展，这也有助于让基本所有的编码都兼容ASCII编码。最后总结一下ASCII编码方式，控制字符(0x00-0x1F和0x7F，000-037和0177)和打印字符(0x20-0x7E，0040-0176)，可以看到十分优良的性质，8个二进制位对应3个八进制位对应2个十六进制位。 ANSI编码ANSI是ASCII的扩展，但并不是具体的编码方式，而是依据不同的国家语言有不同的实现，主要存在于Windows等系统里，如简体中文用GBK，日语用Shift_JIS，繁体中文用Big5等，其主要是因为字符的差异，还包括标点。但它们还有一些共性，如都与ASCII兼容，此部分占一个字节，其余字符最多两个字节，占的编码区为0x80~0xFFFF，且不同ANSI编码间互不兼容。有一点十分不友好的是，VisualStudio的默认编码是ANSI，我们可以做个实验来验证它，如下： 我们可以看到字符“你好”占了5个字节，一个中文两字节，加上字符串结尾的“\\0” 我们打开nodepad++， 修改编码为UTF-8后再输入“你好”，注意看上面“\\x”开头的是原始编码的“你好”，转回我们的VS编辑器 字符已经发生了改变，不包括结尾占用6个字节，实际上我们可以通过命令行来改变输出的编码 确定原始的输出，确实存在乱码 我们通过chcp来改变命令行的编码(注意这是Windows才有的，linux要通过改变环境变量来实现)，最终输出了正确结果。还有如我们有时玩的日语小黄游，部分是在Windows上开发的，默认使用的都是ANSI编码，在日本即是Shift_JIS，我们平常使用的Windows也一样，但因为在中国，所以使用的是GBK编码，又因为两者不兼容，因此我们的许多黄油都是乱码的，当然一般是在UI层面，如果基于有些引擎的话，一般会内置语言模块，使用通用编码Unicode，所有一般不会出现问题。你问我为什么英语软件不会乱码？它们可是万物兼容的ASCII，当然不会乱码了。对于我而言微软的Windows系统还是有许多槽点的，如使用BOM编码来标记文本，说难听一点Windows把用户当“傻子”，提供无微不至的关爱。实际上，Windows后来也妥协使用了Unicode字符集，但因为原始的积累终究还是没能与UTF-8这种常用编码对接，实属可惜。 如果我把系统语言改为日语，就会像下面这样 为什么对话框有中文，是因为VS安装时使用的是中文，注意nodepad++顶部的路径使用¥代替\\是日语的特色 进一步从十六进制编辑器我们可以看到，底层文本的存储内容其实是相同的。 Unicode编码身为开发者，考虑国际化的话，记住一定要使用Unicode编码。Unicode基于通用字符集几乎将所有国家的字符都进行了统一编码，范围覆盖0-0x10FFFF，总之要想在文本里混合各种语言不使用Unicode基本做不到。“0-0x7F”对于ASCII码，“0x600-0x6FF”阿拉伯文，“0x1100-0x11FF”朝鲜字母，“0x3040-0x30FF”日文假名，“0x4E00-0x9FFF”CJK表意文字包括中文，等等，实际上到“0xFFF0-0xFFFF”特殊就基本算完结了，后面的扩充平面到现在也没用过。但Unicode只是一个字符集到自然数的映射方案，并非具体实现，因为我们还要考虑程序读取的问题，到底要读取几个字节作为一个字符。 UTF-8编码这种编码是使用最频繁的一种，主要是此种编码与ASCII兼容使用了ASCII的预留位，同时还是可变长度，如同样的ASCII字符用UTF-16编码占两个字节，用UTF-8则占一个字节，但一个中文字符在UTF-8里却占三个字节，在UTF-16里则占两个字节，希腊字母在UTF-8和UTF-16里都是两个字节，但是两者存储内容并不相同。UTF-8所占字节从1-4不等，如下，00-7F(1字节)，C2-DF 80-BF(2字节)等，实际第一个十六进制位的范围即可确定字节数，0-7(0000-0011)，8-D(0100-1101)，E(1110)，F(1111)。 UTF-16编码UTF-16的所有编码内容都是2字节，所以与ASCII并不兼容，不过在java内部使用的就是这种编码，所以java可以使用丰富的语言，同时每个char都是两个字节。与UTF-8不同，UTF-8实际上有些内容并没有编码而用于方便程序识别长度，所以虽然灵活，但内容利用不充分，UTF-16则不同，与此同时UTF-16还得考虑字节序的问题，由此得到UTF-16BE(大端)和UTF-16LE(小端)，以下是大小端存储的例子 然后是大端读取(这一般是默认的) 小端读取 至于其它的编码都不怎么用，就不讲了。 程序设计中的编码C/C++C/C++使用的是原生字节存储字符，即C/C++在识别到“”时，会将内部的内容直接以字节保存，所有C/C++并没有byte类型，同时char也只有1个字节，注意从存储字符的意义上来讲unsigned char和char本质是相同的，因为符号位在最高二进制位，字符所处区间的最高二进制位都为0，所以两者是一样的。我们可以更进一步的理解，我们把中文的每个字节抠出来再输出，结果如下 javajava对于字符的内部存储使用的是UTF-16，与C/C++不同java基于这种方式提供了丰富的字符功能，C/C++里面的char对应java的应该是byte而不是java里面的char。但是如果你真的用UTF-16来写代码编译是无法通过的 java编译读取默认使用的UTF-8，虽然我们可以通过调节参数来实现正常编译，但我们并不推荐这样做 如何证明java内部存储使用的是UTF-16，可以使用一个序列化输入流实现，代码如下 结果如下 java对字符处理大致如此，在编译时对源文件中的字符串默认使用UTF-8读取，并使用UTF-16存储，注意我们并没有使用System.out.println来输出，因为它会将内部存储的内容转为UTF-8再输出，注意这是在linux系统上，实际上如果是Windows两者的默认都是ANSI，对我们而言就是GBK，Windows命令行默认就是GBK 这样的好处是我们只需要考虑源文件的编码格式即可得到正常的调试结果。同时得益于此，我们可以实现简单的编码转化，使用char作为中间形式，new String(inData, sourceEncoding).getBytes(targetEncoding);我们强调输入的数据inData为byte数组数据，实际上对于读入数据java提供了字节流和字符流，字符流输入数据是需要编码的，虽说有时没写，但那是因为系统已经加了一个默认读入编码，同时字符流本质还是通过字节流来读数据的，就像C那样，FileReader继承至我们的转化流InputStreamReader，它是两者流的过度可以传入一个编码。java存储的本质是byte而不是char，不过C/C++里确实是char就是了，而对于源文件里写的字符，与之相关的应是编译时的编码，而非内部的编码转化。 结尾由上面许多的分析，我有理由认为中文编程语言属实有点造作，中文并不像属于ASCII的英文具有强大的字符兼容性，还只占一个字节。同时与键盘对应的也是ASCII码，从输入效率英语还是比较高。为什么变量命名也推荐英语，大概也是如此，国际化大概就是使用英语做占位符，根据不同的语言集输出不同的内容。最后对编码的分析，我们只需要注意两点，如何编码决定存储方式和如何读出决定显示结果。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"编码","slug":"编码","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"信息","slug":"信息","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF/"}]},{"title":"Log4j2漏洞后的反思","slug":"Log4j2漏洞后的反思","date":"2021-12-13T01:38:35.000Z","updated":"2022-10-14T23:47:06.298Z","comments":true,"path":"archives/2021-12-13-Log4j2漏洞后的反思/","link":"","permalink":"http://example.com/archives/2021-12-13-Log4j2%E6%BC%8F%E6%B4%9E%E5%90%8E%E7%9A%84%E5%8F%8D%E6%80%9D/","excerpt":"","text":"我并不是专门搞安全的，这里的安全泛指网络安全，不自作孽的话，离线情况一般不存在安全问题，而我知道这件事还是因为学校对信管部的通知，不知为何我就想了解一下，真就这么离谱，一个日志都可以被骇入。我先简单整理一下这个漏洞是怎么产生的，这个漏洞产生在使用了Log4j2日志的服务器，但影响版本有一定范围，有log4j2版本和JDK版本，依据攻击方式各不相同。其中常见的攻击方式是，针对log4j2提供的Lookups模块，该模块可以执行“${}”对应的符合一定格式的语句，一般对于信息输出，无关紧要，更致命的是它内部没有对参数分开处理的情况下还提供了Jndi的功能，一般情况下我们采用占位符输出，像这样Log.info(&quot;name:&#123;&#125;&quot;,username)，为了输出能力更强，log4j2提供了可执行输出username=&quot;$&#123;java:os&#125;&quot;这是lookups的java模块 真正危险的是下面这个功能 虽说官方说使用在配置文件里，但从底层实现可以发现，使用如上的Log.info也会执行相应代码，而且对于jndi此库是基于javaapi的相应库实现的，而这个jndi库很久以前就被曝存在jndi注入漏洞，主要存在jdk较低版本里，我们应该理解为什么很多公司都停留在jdk7和jdk8，因为更新有时会使维护变得困难。jndi注入，虽说与sql注入和js注入相似，但有本质的区别，java不是脚本语言，代码是需要编译的，与此齐名的是java反序列化漏洞，比如Fastjson就存在这个漏洞。在java的jndi里本质只是一个接口，用于定位网络上资源，可以是局域网也可以是广域网，与url类似，jndi底层协议中比较危险的是rmi和ldap，我们以前者为例，rmi用于远程执行代码，但是必须要服务端提供相应的继承于Remote的接口，但是从实现上来看，服务端需要使用类加载器来加载远程端的class代码，而类加载中会执行类中存在static代码块，就算没有服务端的接口函数来执行，也可以注入相应代码。这过程其实还是挺复杂的，但本质还是注入漏洞，只不过比一般脚本注入有更高的权限，而这种漏洞主要还是过于相信用户输入，还有就是没有完全将后端封闭在安全的空间里，只要后端在局域网里也没什么好怕的。当然还有局域网渗透，但门都没锁好又能怪谁。当然安全漏洞牵扯的相关方还是挺多的，如log4j2方对于参数判断不过完善却还提供jndi模块，使用的开发者可能挺无辜，不知道一个日志库还有这种功能，但相信用户输入也是不对的，更何况这还是在后端，jdk一直在低版本也不太对，但jdk方提供远程执行功能本身也存在风险的。不过纠结谁对谁错是没有意义的，而是对我们今后的启示。首先是库的开源问题，开源库有助于大家一起学习发现漏洞，但取决于谁发现漏洞了，实际上大部分人都倾向于使用而非研究源码，反而是安全人员或骇客比较乐于此。此时开源反而成了弊端，对于还需要反编译或读汇编的闭源库，开源反而更容易被研究，这时或许就能理解为什么公司乐于使用商业软件了，供应方不仅能提供指导服务还能背锅，从经济和资本家的角度考虑，这样的投资确实是值得的。然后是库自身的问题，本身作为一个日志库，却提供超过日志库的功能，功能越复杂就越有可能出问题，但过于细分化也是有可能出问题的，如nodejs的leftpad事件，这虽然与安全无关，但也说明了使用轮子的弊端。但终究我们还是得用库的，主要在于对库的选择和了解，依赖当然是越少越好，有时还是得看看底层，在学习源码的同时，还有助于发现潜在风险。最后是本身属于服务端应考虑的问题了，既然将自己暴露于公网，那一些常见的风险怎能不考虑呢，如用户输入可能产生的注入问题。不过像我这样的静态网页，也没什么有用的数据库的，还依赖于其它服务器的小网页，其实也没什么考虑的必要就是了。还记得我之前对自己不喜欢用轮子的批评，现在看来有必要重新考虑了，并在两者间稍微做些权衡了。“一切网络风险都是自己引入的”这句话可一点也不假。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"漏洞","slug":"漏洞","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"安全","slug":"安全","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8/"}]},{"title":"洗礼","slug":"洗礼","date":"2021-12-11T05:02:03.000Z","updated":"2022-10-14T23:47:08.085Z","comments":true,"path":"archives/2021-12-11-洗礼/","link":"","permalink":"http://example.com/archives/2021-12-11-%E6%B4%97%E7%A4%BC/","excerpt":"","text":"以前我挺看不起那些只会用轮子的人，但经过底层的洗礼后，我发现愚蠢的竟是我自己，没有任何创造，却一直在做意义不大的事。","categories":[],"tags":[]},{"title":"失去","slug":"失去","date":"2021-12-09T11:53:36.000Z","updated":"2022-10-14T23:47:07.738Z","comments":true,"path":"archives/2021-12-09-失去/","link":"","permalink":"http://example.com/archives/2021-12-09-%E5%A4%B1%E5%8E%BB/","excerpt":"","text":"我因“没必要”，“有什么用”而失去了创造力和想象力，我到底该怎么办呢？","categories":[],"tags":[]},{"title":"lua通读之杂项","slug":"lua通读之杂项","date":"2021-12-08T00:14:53.000Z","updated":"2022-10-14T23:47:06.819Z","comments":true,"path":"archives/2021-12-08-lua通读之杂项/","link":"","permalink":"http://example.com/archives/2021-12-08-lua%E9%80%9A%E8%AF%BB%E4%B9%8B%E6%9D%82%E9%A1%B9/","excerpt":"","text":"经历了一番波折，我们终于来到了lua的最后阶段——杂项总结了，lua的整个体系我们已经有了一个较为详细的了解，本来可以讲讲与lua相关的库，但这样的东西几乎在哪门语言都是近乎无限的，而且优秀的工具往往介绍的人多，官方文档又好，再说一遍有点过于累赘了，而对于比较冷门的，如果没必要，还真没有学习的必要。那么我到底要说些什么呢？听我一一道来吧。 lua反汇编反编译是一个十分庞大的体系，一般都是建立在对编译器了解十分深刻的情况下，但进行黑箱实验也是可以的。所谓的反编译实际有两个部分，首先是反汇编，即将二进制文件转换为汇编代码，其次是还原源代码，即将汇编代码转换为高级语言代码。理论上来说，前半部分是绝对精准的，而后半部分是部分不可能的，这部分主要指的是源代码完全一致，这和编译器优化和两种语言的体系不同有关，比如在C语言下，宏基本不可能还原，还有在函数内部的局部变量，即栈变量，名称是会被优化掉的，而且可以编译为二进制可执行文件的还不止是C语言，go也是可以的。而反汇编实际是将序列化的数据反序列化的过程，故绝对精准的。lua本身有解释性语言的特性，程序就是源码，对于这种没有任何反编译的需要，我们主要针对luac产生的文件。之前我们提到luac本质就是通过luaU_dump函数将Proto对象序列化然后存储。那么我们有必要分析ldump.c下的所有代码并编制相关反汇编代码吗？实际上lua自身就提供了反汇编代码在lundump.c里面，同时在命令行里可以加-l参数输出反汇编代码，如下我们写一个简单的例子 不过luac的调用有些特别，它是通过luaL_loadfile先将文件转化为proto，之前我们说过它也可以载入字节码文件，然后再通过luaU_print将Proto以如上这种样式输出。而luaL_loadfile则是则会调用以下函数，实现不同文件的读取 1234567891011121314151617//ldo.cstatic void f_parser (lua_State *L, void *ud) &#123; int i; Proto *tf; Closure *cl; struct SParser *p = cast(struct SParser *, ud); int c = luaZ_lookahead(p-&gt;z); luaC_checkGC(L); tf = ((c == LUA_SIGNATURE[0]) ? luaU_undump : luaY_parser)(L, p-&gt;z, &amp;p-&gt;buff, p-&gt;name); cl = luaF_newLclosure(L, tf-&gt;nups, hvalue(gt(L))); cl-&gt;l.p = tf; for (i = 0; i &lt; tf-&gt;nups; i++) /* initialize eventual upvalues */ cl-&gt;l.upvals[i] = luaF_newupval(L); setclvalue(L, L-&gt;top, cl); incr_top(L);&#125; 我们看到第七行，luaU_undump即是反汇编函数，luaY_parser则是用来解释脚本的函数。实际上我们是不满足于此的，我们想要直接得到Proto并以我们喜欢的方式自由操纵，lua是开源软件，这有助于我们做到这样的事，接下来我们来实践一下。实际上，我们也可以分析luac序列化后的文件，以自己喜欢的方式读取，然后构造相应结构，但对我们来说太麻烦了，我们应该充分利用已有的东西。因为我们需要使用Proto结构体和luaU_undump函数，在lua嵌入开发中并没有提供，所以我们必需使用源码来构建我们的工程，拿到源码后，先删到没用的东西如lua.c和luac.c，再加入我们的main.c，同时修改Makefile文件，最后再编译，总览如下： 首先将我们需要的头文件先导入 1234//提供函数#include &quot;lundump.h&quot;//提供结构体#include &quot;lobject.h&quot; 我们稍微解析一下luaU_undump的相关参数吧，一个lua虚拟机，一个ZIO文件流，一个缓存区，最后是名称。对于这些我们再导入两个头文件 1234//实际上可以导入lua.h//里面有typedef struct lua_State lua_State;#include &quot;lstate.h&quot;#include &quot;lzio.h&quot; 创建一个lua虚拟机并不难，之前讲过，而创建一个缓存区，则可以使用lzio提供的初始化函数，如下 12Mbuffer buff;luaZ_initbuffer(L, &amp;buff); 后面的名称我们随便填一个就是了，不会有太大问题。最后是创建一个ZIO，这个稍微有些复杂，我们可以通过void luaZ_init(lua_State *L, ZIO *z, lua_Reader reader, void *data)函数来创建。有两个重要参数reader和data，这两个与我们之前分析lua_load的参数实际是相同的，我们把它搬过来就组成了我们下面的代码 1234567891011121314151617181920//lua_Reader对象static const char* getFile(lua_State* L, void* data, size_t* size) &#123; FILE* f = (FILE*) data; if(feof(f)) return NULL; char* buff[LUAL_BUFFERSIZE]; *size = fread(buff, 1, sizeof(buff), f); return (*size &gt; 0) ? buff : NULL;&#125;int main(int argc, char** argv) &#123; *** //获得文件描述符 FILE* f = fopen(argv[1], &quot;r&quot;); //创建一个ZIO ZIO z; luaZ_init(L, &amp;z, getFile, &amp;f); *** fclose(f); lua_close(L); return 0;&#125; 至此，我们的准备工作都已经完成了，最后就是得到我们的Proto对象了 1234//创建一个ProtoProto* p;//反汇编核心部分p = luaU_undump(L, &amp;z, &amp;buff, &quot;test&quot;); 我们得到了p已经可以做许多事了，为了验证我们获取的proto没有问题，我们使用undump里面的luaU_print来显示 1luaU_print(p, 1); 我们的所有工作都完成了，我们来验证一下程序是否正常运行吧。 注意我们发现一个奇怪的bug，必需在我们的头文件加入#include &quot;lauxlib.h&quot;才能解决，完整代码在下面以供参考。 luajitluajit是lua解释器的一个非官方版本，兼容lua5.1的版本，很久没有更新，已经属于历史产物了，同时luajit的CAPI也与lua的基本相同。luajit编译后的产物，少了lua和luac可执行文件，变成了luajit可执行文件，还多了一个luajit.h的头文件记录luajit的相关信息。luajit与lua的一个巨大区别是字节码的不同，量多了几倍，在lj_bc.h里面我们可以看到有关比较的字节码IS*系列有16个，而lua里只有5个。所以luajit的字节码(bytecode)与lua的字节码(opcode)是不兼容的，以下是我们的例子的展示 同时luajit还提供了更多的初始lua库函数，我们可以在lualib.h里面找到 12345***#define LUA_BITLIBNAME &quot;bit&quot;#define LUA_JITLIBNAME &quot;jit&quot;#define LUA_FFILIBNAME &quot;ffi&quot;*** 其中bit库用于提供位运算，如band按位与，bor按位或，lua5.1并没有提供相关的为运算，我们可以在llex.c看到所有的token 12//lua5.1const char *const luaX_tokens [] = &#123; &quot;and&quot;, &quot;break&quot;, &quot;do&quot;, &quot;else&quot;, &quot;elseif&quot;, &quot;end&quot;, &quot;false&quot;, &quot;for&quot;, &quot;function&quot;, &quot;if&quot;, &quot;in&quot;, &quot;local&quot;, &quot;nil&quot;, &quot;not&quot;, &quot;or&quot;, &quot;repeat&quot;, &quot;return&quot;, &quot;then&quot;, &quot;true&quot;, &quot;until&quot;, &quot;while&quot;, &quot;..&quot;, &quot;...&quot;, &quot;==&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, &quot;~=&quot;, &quot;&lt;number&gt;&quot;, &quot;&lt;name&gt;&quot;, &quot;&lt;string&gt;&quot;, &quot;&lt;eof&gt;&quot;, NULL &#125;; 但是在lua5.3及以后已经开始提供位运算了 12345678910//lua5.3static const char *const luaX_tokens [] = &#123; &quot;and&quot;, &quot;break&quot;, &quot;do&quot;, &quot;else&quot;, &quot;elseif&quot;, &quot;end&quot;, &quot;false&quot;, &quot;for&quot;, &quot;function&quot;, &quot;goto&quot;, &quot;if&quot;, &quot;in&quot;, &quot;local&quot;, &quot;nil&quot;, &quot;not&quot;, &quot;or&quot;, &quot;repeat&quot;, &quot;return&quot;, &quot;then&quot;, &quot;true&quot;, &quot;until&quot;, &quot;while&quot;, &quot;//&quot;, &quot;..&quot;, &quot;...&quot;, &quot;==&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, &quot;~=&quot;, &quot;&lt;&lt;&quot;, &quot;&gt;&gt;&quot;, &quot;::&quot;, &quot;&lt;eof&gt;&quot;, &quot;&lt;number&gt;&quot;, &quot;&lt;integer&gt;&quot;, &quot;&lt;name&gt;&quot;, &quot;&lt;string&gt;&quot;&#125;; jit库与大家对luajit熟知的特性–即时编译有关，主要用于调控即时编译的状态，如jit.off()关闭即时编译，实际上luajit正是为了适应即时编译的特点才会有如此多的字节码，而底层则是通过手写汇编宏替换字节码来实现即时汇编，如果要深入了解的话，作者还是有点力不从心。总之要知道一点就够了，这样的效率很高。ffi应该是一个用的比较频繁的库了，使我们可以在lua里直接使用C的数据结构和函数，比如可以通过ffi.cdef[[**]]来直接申明C的数据结构和函数，如 12345ffi.cdef[[typedef struct foo &#123; int a, b; &#125; foo_t;int dofoo(foo_t *f, int n);]] 虽说看起来没什么，但可以大幅度提供运行效率，别问我为什么？我也不知道。luajit还有许多对底层的优化，比如对于可变长度的数据使用uleb128格式进行存储，proto以栈来组织而不是lua里的树，不一样的coroutine实现(Coco)等，总之还是一句话运行得更快，而且连动态汇编器都有(DynASM)，属实离谱。虽然luajit的内容确实很多，但实际都属于运行效率优化的东西，所有讲起来真心没有太多的意思，只要知道IOS系统不支持动态编译就行了，虽然我没有没办法验证就是了。连大部分的CAPI都类似，真的没必再深入了。 tolua有些东西似乎被淘汰用处又不大，但总想插上两脚来说一说，不过有些东西连机会都没有，比如那些用C语言写一些库函数再注册到lua上的包。tolua是我在读cocos2d源码的时候发现的，注意tolua可能代指不同的东西，我将以cocos2d里的作为标准，以下是官方介绍 tolua is a tool that greatly simplifies the integration of C/C++ code with Lua. Based on a cleaned header file, tolua automatically generates the binding code to access C/C++ features from Lua. Using Lua API and tag method facilities, tolua maps C/C++ constants, external variables, functions, classes, and methods to Lua.There is also a manual for tolua-3.2 that is also valid for other versions, despite some undocumented features. 一句话总结就是快速构建C/C++相对于lua的接口，主要用于lua使用CAPI的开发，比如写一个类，就可以依据写的.pkg(相当于配置文件)文件来生成接口绑定的类，在lua里我们就可以直接使用了，不过会稍有区别，比如lua没有构造函数，tolua就会生成new函数来实现相同功能，还有delete实现析构函数，当然还能通过修改.pkg文件来修改规则。不过在cocos2d里只保留了一些关键函数，作为cocos2d的依赖库来使用，用户不能直接调用它的相关函数，而是cocos2d使用其中的一些函数实现的一些其它函数。比如cocos2d在实现C/C++接口与lua进行绑定的时候，原生方法便于C但不利于C++，其中有两个tolua_fix和LuaBasicConversions就是用来实现绑定转化的，虽然这看起来与tolua的功能大相径庭，但cocos2d实际只是取了其中的某个步骤的方法。还记得我们讲反汇编的时候如何取出proto的吗？这实际与cocos2d的做法是一样的。 luajava我们之前所讲的，都是lua与C语言的交互，tolua可以一定程度使实现lua与C++的交互，C/C++是基本所有高级语言之母。理论上能与C交互相当于能于基本所有语言交互，我们选取使用最频繁的java来举个例子。java有一项技术叫做jni，是一个中间转接层，可以辅助调用自己写的C/C++库函数，类似于Runtime.getRuntime().exec();，但有更大的自由性。这样我们就可以有个想法了，直接拿lua的源码，建一个C中间类按照jni的写法实现虚拟机创建，数据入栈和执行lua脚本等，再让java加载动态库即可，我就不写了，因为已经有实现的项目了，就是基于这个想法，它就是luajava，有了这个工具我们就能轻易的实现lua与java的交互了。由这个工具衍生了一个有趣的软件androlua，它的功能是使用lua来开发android应用，实际上它只是提供了一个虚拟运行环境并将安卓的javaapi通过luajava实现绑定使得这个环境可以调用安卓函数，最后通过安卓SDK提供的打包工具得到应用的，理解原理后看来也没什么神奇的嘛。其实还有我们开发大佬改编的Androlua+拥有更加丰富的api和图形环境。哎，又不禁想起了以前安卓”群魔乱舞”的时代了，C4droid似乎没有动静，AIDE早已被抛弃，倒是Termux至今还在维护，qemu和bochs之类的模拟器如何了呢？算了算了，大佬还是有的，我的mt管理器都还在更新呢，只不过已经被商业化就是了，好了，快点结束文章吧。 结尾这应该是lua通读的最后一篇文章了，这个系列也该告结了，虽说比计划晚了点，但终究还是写完了，这样就值得了。谨以此系列纪念我曾爱过的lua，好了，是时候说再见了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"库","slug":"库","permalink":"http://example.com/tags/%E5%BA%93/"}]},{"title":"lua通读之Debug机制","slug":"lua通读之Debug机制","date":"2021-12-07T01:30:07.000Z","updated":"2022-10-14T23:47:06.788Z","comments":true,"path":"archives/2021-12-07-lua通读之Debug机制/","link":"","permalink":"http://example.com/archives/2021-12-07-lua%E9%80%9A%E8%AF%BB%E4%B9%8BDebug%E6%9C%BA%E5%88%B6/","excerpt":"","text":"简介调试(Debug)对于大部分程序员来说并不陌生，我们接下来主要要讲的是动态调试。当然我们大多时候，使用的调试工具都是基于我们图形界面的IED，但实际上调试的一些关键的东西也是可以在命令行下完成，这就是我们要讲的lua调试机制。 lua的基本调试apilua有关调试的接口都在debug库里，但我们不会全都讲，因为有些特性繁琐又用处不大，比如debug.getfenv，所谓的函数环境。 断点功能lua的原生环境没有图形界面，所以我们不可能直接在脚本的某行直接打断点。但我们应该了解断点的本质是什么，实际上是hook，俗称钩子。我们从C语言的动态库链接简单地来理解一下。 1234567891011121314//test.cint add(int a,int b) &#123; return a+b;&#125;//hook.c#include &lt;stdio.h&gt; int add(int,int); int main() &#123; int res = add(1,3); printf(&quot;%d\\n&quot;,res);&#125; 对于上述两个文件，我们用不同的编译参数，我们在Termux下运行，如下： 注意我们使用了export LD_LIBRARY_PATH=./，这是因为调用动态库时并不会查找当前路径。接下来，我们修改test.c文件，如下 12345#include &lt;stdio.h&gt;int add(int a,int b) &#123; printf(&quot;I am a hook.&quot;); return a+b;&#125; 我们加了一句打印来说明hook思想的源头。 我们发现虽然我们没有改变主程序hook，但前后两次的打印结构却不同了，知道程序的运行机制的话是很好理解的。这有许多方面的应用，比如安卓的xposed框架和root权限管理，这都是在linux内核下的系统。实际上，对window来说也是类似的，比如烂大街的破解软件本质都是反编译dll文件并修改来实现的。对于运行在虚拟机上的软件也有例子，java版minecraft的forge框架。当然，实际的hook工作是很复杂的，现在有许多的反反编译的技术，比如代码混淆。所以，我们要考虑的是本身就提供hook功能的软件，这样也没有违法，比如我们的lua和IDE的debug。lua对hook提供了两个函数，debug.gethook ([thread])和debug.sethook ([thread,] hook, mask [, count])。thread表示需要hook的协程，默认是我们当前运行的协程；hook表示一个函数，表示hook到节点后执行的函数；mask是一个字符串，表示hook的时机，如“c”表示每次调用一个函数时，“r”表示从一个函数返回时，“l”表示每次进入新的一行时；“count”表示执行hook的最小代码量间隔，防止过于频繁的hook。一个简单的例子如下： 12345local function printLine(event, line) print(&quot;Line:&quot;..line)enddebug.sethook(printLine, &quot;l&quot;)debug.gethook() hook函数有两个参数，第一个是事件(字符串类型)，对于“line”事件则还有line参数表示行号，具体看官方文档。不过有一点要注意，有关line的hook只能在运行脚本的时候有用，交互环境下是没用的。 逐行运行实际上对于交互式语言来说，本身就是逐行运行的，将脚本一行行复制进去即可。意义不大，但是对于脚本文件而言lua提供了debug.debug()，当然交互环境也可以有但意义不大。但文件运行到这里时，会触发断点进入交互模式，此时我们可以执行相应的lua语句，比如查看变量之类的，这好像和hook是一回事，的却如此因为debug的各项操作都是离不开hook的，或者说它是debug之源，我们写个简单的例子体会一下。 1234--main.luaa = 3debug.debug()print(a) 效果如下： 有几点值得我们注意，这里的交互环境不能直接输出变量a，而要通过可执行语句print(a)来查看，这是因为底层的原理与我们原生的交互环境有所不同，其次我们可以通过执行cont结束交互环境，继续执行语句，由两次结果的不同我们可以看到，这与hook实际有些类似，但我们可以在脚本中实现。实际上依据这个功能，我们可以类似实现一个对脚本逐行执行的功能，例如运行前使用其它脚本对每行插入debug.debug()语句。已经有许多相关的工具了，我就不过多说明了，可以自己去探究一下源码。 变量跟踪这部分对于lua虽然占了debug大部分函数，但实际上没有太多可说的东西，通过debug.get*系列函数获取需要的参数，通过debug.set*系列调整相应参数，比较特别的有：debug.traceback可以打印调用栈信息，debug.getregistry()获取注册表，在很久以前，我们讲过下面这个 123#define LUA_REGISTRYINDEX (-10000)#define LUA_ENVIRONINDEX (-10001)#define LUA_GLOBALSINDEX (-10002) 我们获取的就是其中的第一个，最后一个可以通过_G获得，第二个通过getfenv获得，最后一个比较特别的是debug.getinfo，返回一个函数信息表，参数可以表示调用级别，如0是当前函数，1是调用此函数的函数，以此类推。最后我们摘录一个烂大街的例子结尾吧。 123456789101112131415161718192021222324function newCounter () local n = 0 local k = 0 return function () k = n n = n + 1 return n endendcounter = newCounter ()print(counter())print(counter())local i = 1repeat name, val = debug.getupvalue(counter, i) if name then print (&quot;index&quot;, i, name, &quot;=&quot;, val) if(name == &quot;n&quot;) then debug.setupvalue (counter,2,10) end i = i + 1 end -- ifuntil not nameprint(counter()) 输出结果如下： 1234512index 1 k = 1index 2 n = 211 这是一个与upval有关的例子，因为upval本身就是函数的局部变量，即栈上的变量，对debug而言这就称为upval，而第二个参数本质就是栈上的索引，接下来从源码我们就能看到这点。 源码浏览最后我们来稍微浏览一下lua中与debug相关的源码，与之前类似我们从注册部分开始。 123456789101112131415161718192021static const luaL_Reg dblib[] = &#123; &#123;&quot;debug&quot;, db_debug&#125;, &#123;&quot;getfenv&quot;, db_getfenv&#125;, &#123;&quot;gethook&quot;, db_gethook&#125;, &#123;&quot;getinfo&quot;, db_getinfo&#125;, &#123;&quot;getlocal&quot;, db_getlocal&#125;, &#123;&quot;getregistry&quot;, db_getregistry&#125;, &#123;&quot;getmetatable&quot;, db_getmetatable&#125;, &#123;&quot;getupvalue&quot;, db_getupvalue&#125;, &#123;&quot;setfenv&quot;, db_setfenv&#125;, &#123;&quot;sethook&quot;, db_sethook&#125;, &#123;&quot;setlocal&quot;, db_setlocal&#125;, &#123;&quot;setmetatable&quot;, db_setmetatable&#125;, &#123;&quot;setupvalue&quot;, db_setupvalue&#125;, &#123;&quot;traceback&quot;, db_errorfb&#125;, &#123;NULL, NULL&#125;&#125;;LUALIB_API int luaopen_debug (lua_State *L) &#123; luaL_register(L, LUA_DBLIBNAME, dblib); return 1;&#125; 由于相似的部分比较多，我们接下来就选取几个比较有代表的来看看。同时对于lua函数在执行时都有对lua虚拟栈的操作，大多比较重复，我们就直接跳过，转而看它的核心函数。 hook系列函数首先是我们的debug.sethook函数 1234567891011LUA_API int lua_sethook (lua_State *L, lua_Hook func, int mask, int count) &#123; if (func == NULL || mask == 0) &#123; /* turn off hooks? */ mask = 0; func = NULL; &#125; L-&gt;hook = func; L-&gt;basehookcount = count; resethookcount(L); L-&gt;hookmask = cast_byte(mask); return 1;&#125; 该函数的参数与我们调用时是一样的，仔细一看该函数就是改变了协程上的4个参数而已。如果就这样结束，我们显然是不满足的，我们想要更加深入，通过函数的作用，我们可以猜想在某些字节码执行上应该有相关函数，实际上之前我们就看到了，不过被我们跳过了。 12345678910111213141516171819int luaD_precall (lua_State *L, StkId func, int nresults) &#123; *** if (!cl-&gt;isC) &#123; /* Lua function? prepare its call */ *** if (L-&gt;hookmask &amp; LUA_MASKCALL) &#123; L-&gt;savedpc++; /* hooks assume &#x27;pc&#x27; is already incremented */ luaD_callhook(L, LUA_HOOKCALL, -1); L-&gt;savedpc--; /* correct &#x27;pc&#x27; */ &#125; *** &#125; else &#123; /* if is a C function, call it */ *** if (L-&gt;hookmask &amp; LUA_MASKCALL) luaD_callhook(L, LUA_HOOKCALL, -1); *** &#125; &#125;&#125; 这是调用前，对应“c”参数。 123456789101112131415161718192021222324//lvm.ccase OP_RETURN: &#123; *** b = luaD_poscall(L, ra); *** &#125; &#125;//ldo.cint luaD_poscall (lua_State *L, StkId firstResult) &#123; *** if (L-&gt;hookmask &amp; LUA_MASKRET) firstResult = callrethooks(L, firstResult); ***&#125;static StkId callrethooks (lua_State *L, StkId firstResult) &#123; *** luaD_callhook(L, LUA_HOOKRET, -1); if (f_isLua(L-&gt;ci)) &#123; /* Lua function? */ while ((L-&gt;hookmask &amp; LUA_MASKRET) &amp;&amp; L-&gt;ci-&gt;tailcalls--) /* tail calls */ luaD_callhook(L, LUA_HOOKTAILRET, -1); &#125; ***&#125; 这个是函数返回时，藏得稍微深了点，对应“r”。 1234567891011121314151617181920212223242526272829void luaV_execute (lua_State *L, int nexeccalls) &#123; *** /* main loop of interpreter */ for (;;) &#123; *** if ((L-&gt;hookmask &amp; (LUA_MASKLINE | LUA_MASKCOUNT)) &amp;&amp; (--L-&gt;hookcount == 0 || L-&gt;hookmask &amp; LUA_MASKLINE)) &#123; traceexec(L, pc); if (L-&gt;status == LUA_YIELD) &#123; /* did hook yield? */ L-&gt;savedpc = pc - 1; return; &#125; ***&#125;static void traceexec (lua_State *L, const Instruction *pc) &#123; *** if ((mask &amp; LUA_MASKCOUNT) &amp;&amp; L-&gt;hookcount == 0) &#123; resethookcount(L); luaD_callhook(L, LUA_HOOKCOUNT, -1); &#125; if (mask &amp; LUA_MASKLINE) &#123; Proto *p = ci_func(L-&gt;ci)-&gt;l.p; int npc = pcRel(pc, p); int newline = getline(p, npc); if (npc == 0 || pc &lt;= oldpc || newline != getline(p, pcRel(oldpc, p))) luaD_callhook(L, LUA_HOOKLINE, newline); &#125;&#125; 对于有关行的处理是稍微有些复杂的，首先每个字节码并不对应于一行，所以虽然每个字节码执行前虽然都设置了断点，但并没有直接执行hook，实际上我们的proto存储了有关的行号信息 1234567typedef struct Proto &#123; *** int *lineinfo; /* map from opcodes to source lines */ int linedefined; int lastlinedefined; ***&#125; Proto; 我们的hook就是依据此来决定是否执行hook的，上面我保留了这个关键部分，可以看看。到此我们发现了执行hook的关键函数是luaD_callhook我们来看看吧。 12345678910111213141516171819202122232425void luaD_callhook (lua_State *L, int event, int line) &#123; lua_Hook hook = L-&gt;hook; if (hook &amp;&amp; L-&gt;allowhook) &#123; ptrdiff_t top = savestack(L, L-&gt;top); ptrdiff_t ci_top = savestack(L, L-&gt;ci-&gt;top); lua_Debug ar; ar.event = event; ar.currentline = line; if (event == LUA_HOOKTAILRET) ar.i_ci = 0; /* tail call; no debug information about it */ else ar.i_ci = cast_int(L-&gt;ci - L-&gt;base_ci); luaD_checkstack(L, LUA_MINSTACK); /* ensure minimum stack size */ L-&gt;ci-&gt;top = L-&gt;top + LUA_MINSTACK; lua_assert(L-&gt;ci-&gt;top &lt;= L-&gt;stack_last); L-&gt;allowhook = 0; /* cannot call hooks inside a hook */ lua_unlock(L); (*hook)(L, &amp;ar); lua_lock(L); lua_assert(!L-&gt;allowhook); L-&gt;allowhook = 1; L-&gt;ci-&gt;top = restorestack(L, ci_top); L-&gt;top = restorestack(L, top); &#125;&#125; lua_Hook是一个函数指针，即我们在lua里传入的函数，lua_Debug是一个用来保存相关调试信息的结构体，如上面的ar.event = event和ar.currentline = line就是传给我们函数的两个参数。其它就没啥好说了，就是准备调用函数前的一些基本操作罢了，(*hook)(L, &amp;ar);用来执行我们的hook函数。然后是我们的debug.gethook函数 123456789101112131415161718static int db_gethook (lua_State *L) &#123; int arg; lua_State *L1 = getthread(L, &amp;arg); char buff[5]; int mask = lua_gethookmask(L1); lua_Hook hook = lua_gethook(L1); if (hook != NULL &amp;&amp; hook != hookf) /* external hook? */ lua_pushliteral(L, &quot;external hook&quot;); else &#123; gethooktable(L); lua_pushlightuserdata(L, L1); lua_rawget(L, -2); /* get hook */ lua_remove(L, -2); /* remove hook table */ &#125; lua_pushstring(L, unmakemask(mask, buff)); lua_pushinteger(L, lua_gethookcount(L1)); return 3;&#125; 我们没有看lua_gethook(L1);函数，是因为它属于一般的变量返回函数，就一句return返回L1的hook参数，在面向对象里封装私有变量的基本方法，没什么好讲的。gethooktable函数也比较重要，代码如下： 1234567891011static void gethooktable (lua_State *L) &#123; lua_pushlightuserdata(L, (void *)&amp;KEY_HOOK); lua_rawget(L, LUA_REGISTRYINDEX); if (!lua_istable(L, -1)) &#123; lua_pop(L, 1); lua_createtable(L, 0, 1); lua_pushlightuserdata(L, (void *)&amp;KEY_HOOK); lua_pushvalue(L, -2); lua_rawset(L, LUA_REGISTRYINDEX); &#125;&#125; 整体都是通过lua的CAPI实现的，我们稍做总结就是，先构造一个表存储有关hook的信息，放在栈上，再从栈上获取hook的名字和总个数，放到栈上。总之就是输出hook的名字([crl])和个数([0-3])。 debug函数其实它的原理很简单，如下： 123456789101112131415static int db_debug (lua_State *L) &#123; for (;;) &#123; char buffer[250]; fputs(&quot;lua_debug&gt; &quot;, stderr); if (fgets(buffer, sizeof(buffer), stdin) == 0 || strcmp(buffer, &quot;cont\\n&quot;) == 0) return 0; if (luaL_loadbuffer(L, buffer, strlen(buffer), &quot;=(debug command)&quot;) || lua_pcall(L, 0, 0, 0)) &#123; fputs(lua_tostring(L, -1), stderr); fputs(&quot;\\n&quot;, stderr); &#125; lua_settop(L, 0); /* remove eventual returns */ &#125;&#125; 通过fgets(buffer, sizeof(buffer), stdin) == 0获取一行字符到buffer，由strcmp(buffer, &quot;cont\\n&quot;) == 0检测输入是否为cont，是则进入return 0结束函数，否则通过luaL_loadbuffer编译源码，lua_pcall(L, 0, 0, 0)来执行，出问题则调用fputs(lua_tostring(L, -1), stderr);输出报错信息，否则lua_settop(L, 0);后进入下一个循环。比较神器的或许是它将获取和比较、加载和执行都放到一个if的条件里面去，这样的句子实际见的也比较多，比如读取文件的while循环里有while((line=fread(f))!=NULL)这样的句子，少见多怪了。 变量相关这里我们就选取upval的部分来看看，以便完结我们之前的坑。 123456789101112131415161718static int auxupvalue (lua_State *L, int get) &#123; const char *name; int n = luaL_checkint(L, 2); luaL_checktype(L, 1, LUA_TFUNCTION); if (lua_iscfunction(L, 1)) return 0; /* cannot touch C upvalues from Lua */ name = get ? lua_getupvalue(L, 1, n) : lua_setupvalue(L, 1, n); if (name == NULL) return 0; lua_pushstring(L, name); lua_insert(L, -(get+1)); return get + 1;&#125;static int db_getupvalue (lua_State *L) &#123; return auxupvalue(L, 1);&#125;static int db_setupvalue (lua_State *L) &#123; luaL_checkany(L, 3); return auxupvalue(L, 0);&#125; 容易看出，本质是通过调用lua的CAPI中的lua_getupvalue和lua_setupvalue实现的，而这个函数的索引则是当前运行函数闭包的upval栈上的索引，注意我们之前有从栈上取出函数，这正是我们调用时传入的参数，这也提醒我们upval是相对于函数而言的。 getinfo函数最后我们再来看一下这个函数吧 12345678910111213141516171819202122232425262728293031323334353637383940414243static int db_getinfo (lua_State *L) &#123; lua_Debug ar; int arg; lua_State *L1 = getthread(L, &amp;arg); const char *options = luaL_optstring(L, arg+2, &quot;flnSu&quot;); if (lua_isnumber(L, arg+1)) &#123; if (!lua_getstack(L1, (int)lua_tointeger(L, arg+1), &amp;ar)) &#123; lua_pushnil(L); /* level out of range */ return 1; &#125; &#125; else if (lua_isfunction(L, arg+1)) &#123; lua_pushfstring(L, &quot;&gt;%s&quot;, options); options = lua_tostring(L, -1); lua_pushvalue(L, arg+1); lua_xmove(L, L1, 1); &#125; else return luaL_argerror(L, arg+1, &quot;function or level expected&quot;); if (!lua_getinfo(L1, options, &amp;ar)) return luaL_argerror(L, arg+2, &quot;invalid option&quot;); lua_createtable(L, 0, 2); if (strchr(options, &#x27;S&#x27;)) &#123; settabss(L, &quot;source&quot;, ar.source); settabss(L, &quot;short_src&quot;, ar.short_src); settabsi(L, &quot;linedefined&quot;, ar.linedefined); settabsi(L, &quot;lastlinedefined&quot;, ar.lastlinedefined); settabss(L, &quot;what&quot;, ar.what); &#125; if (strchr(options, &#x27;l&#x27;)) settabsi(L, &quot;currentline&quot;, ar.currentline); if (strchr(options, &#x27;u&#x27;)) settabsi(L, &quot;nups&quot;, ar.nups); if (strchr(options, &#x27;n&#x27;)) &#123; settabss(L, &quot;name&quot;, ar.name); settabss(L, &quot;namewhat&quot;, ar.namewhat); &#125; if (strchr(options, &#x27;L&#x27;)) treatstackoption(L, L1, &quot;activelines&quot;); if (strchr(options, &#x27;f&#x27;)) treatstackoption(L, L1, &quot;func&quot;); return 1; /* return table */&#125; 看起来似乎很复杂，但实际上就是创建一个表，并不断设置表的一些项，这就是我们调用后此函数后返回的表，而表的内容实际是lua_Debug结构体的内容，它的定义如下： 1234567891011121314struct lua_Debug &#123; int event; const char *name; /* (n) */ const char *namewhat; /* (n) `global&#x27;, `local&#x27;, `field&#x27;, `method&#x27; */ const char *what; /* (S) `Lua&#x27;, `C&#x27;, `main&#x27;, `tail&#x27; */ const char *source; /* (S) */ int currentline; /* (l) */ int nups; /* (u) number of upvalues */ int linedefined; /* (S) */ int lastlinedefined; /* (S) */ char short_src[LUA_IDSIZE]; /* (S) */ /* private part */ int i_ci; /* active function */&#125;; 注意这个结构体主要用于包装数据并传递，虽然如Proto之类的结构体有存储debug信息，但都是分散存储的，需要的时候再取出来就行了。 结尾最后，我想再提一件事，lua虽然有调试机制，但没有异常处理机制，除了最基本的assert外，lua既没有exception也没有try catch，这与C语言有些类似，但有本质的不同，lua只存在编译错误，并不存在运行时错误，一切错误通过返回值的不同来表现，比如之前协程的resume，这主要得益于lua的返回值没有类型限制，C语言的话则与CPU有关，错误状态是保留在某个固定的寄存器里，我们的CPU要是出错停止那不就完蛋，当然我们平常的程序都是运行在用户空间，没必要当心就是了。至于如何处理有些异常，实际与C是类似的，比如文件读取的基本步骤如下： 123456f = io.open(&quot;a.txt&quot;, &quot;r&quot;)if f==nil then print(&quot;文件不存在&quot;) return nilendreturn f:read() 这里就对于文件可能不存在的相关情况做了处理。在实际开发过程中，我比较喜欢的是先加#TODO标签再使用assert直接处理，主要是保持开发过程中的简洁性，属于个人习惯而已，不必在意，反正最后还是要补充回去的。好了，好了，lua终于快接近尾声了，再接再厉吧。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"调试","slug":"调试","permalink":"http://example.com/tags/%E8%B0%83%E8%AF%95/"}]},{"title":"被束缚的知识","slug":"被束缚的知识","date":"2021-12-05T13:58:19.000Z","updated":"2022-10-14T23:47:09.518Z","comments":true,"path":"archives/2021-12-05-被束缚的知识/","link":"","permalink":"http://example.com/archives/2021-12-05-%E8%A2%AB%E6%9D%9F%E7%BC%9A%E7%9A%84%E7%9F%A5%E8%AF%86/","excerpt":"","text":"上大学以后，我发现一个如此奇怪的事实：知识竟然是不自由的。甚至还成为了交易的筹码，看来我应该倍加珍惜开源社区了。7f83b4b3","categories":[],"tags":[]},{"title":"神奇的比特存储","slug":"神奇的比特存储","date":"2021-12-05T00:27:32.000Z","updated":"2022-10-14T23:47:08.239Z","comments":true,"path":"archives/2021-12-05-神奇的比特存储/","link":"","permalink":"http://example.com/archives/2021-12-05-%E7%A5%9E%E5%A5%87%E7%9A%84%E6%AF%94%E7%89%B9%E5%AD%98%E5%82%A8/","excerpt":"","text":"两个算法题号码去查重现在有两批QQ号，每批大约40亿个，每批可能存在重复的数据，但记录着不同的数据，我们有两个iterator，都可以通过iterator.nextuint获得下一个QQ号，数据类型为unsigned int，即每个QQ好最大不超过2^32-1[当然目前我所见过的QQ号，连30亿都没超过]，现在设计算法，使用内存不超过1G，找出两批QQ号公共QQ号的个数？这个问题有许多衍生，但我们选取了最简单的一部分。我也不卖关子，直接说算法了，这题的关键在于QQ号是有序的，同时我们只关心是否有这个QQ号，虽然可以使用bool数组，但在C里它占用一个字节，不能充分利用空间，我们需要的是用bit(一个二进制位)来存储bool，这样才能最大限度的利用空间。同时QQ号是有序的，于是我们可以通过内存地址上的排序来映射相应QQ号的位置。我们举一个简单例子来说明，比如一个char总共有8个二进制位，比如00001010则表示2和4存在，其它不存在。进一步char[2]则有16个二进制位，01000000 00100010则表示2,6,15存在，其它不存在。然后我们需要判断的QQ号的最大值为2^32-1，计算一下可得，需要大概512M内存，因为数组只能传有符号的int，所以我们不推荐使用char数组，而使用unsigned int的数组。我们来写一个函数，用来判断传入的unsigned int是否存在于传入的unsigned int里。 1234567891011121314151617int isInBit(unsigned int* nums, unsigned int num) &#123; //不考虑0 if(num == 0) return 0; //得到商和余数，除数为32 unsigned int location = num &gt;&gt; 5; unsigned int rest = num &amp; 0x1F; //对于rest为0，特殊处理 if(!rest) &#123; location -= 1; rest = 8; &#125; //rest用于位移 rest -= 1; //返回对于bit return (int)(nums[location]&gt;&gt;rest&amp;0x00000001);&#125; 然后我们再写一个存入的函数 1234567891011121314151617int storeInBit(unsigned int* nums, unsigned int num) &#123; //不考虑0 if(num == 0) return 0; //得到商和余数，除数为32 unsigned int location = num &gt;&gt; 5; unsigned int rest = num &amp; 0x1F; //对于rest为0，特殊处理 if(!rest) &#123; location -= 1; rest = 8; &#125; //rest用于位移 rest -= 1; nums[location] |= 1&lt;&lt;rest; return 1;&#125; 当然，我们发现了与之前重复的部分，本应分离出来，还有重复存入的问题，但我们只讲算法，细节就不关注了。最后再写一个删除函数，也使用类似的方法。 1234567891011121314151617int removeInBit(unsigned int* nums, unsigned int num) &#123; //不考虑0 if(num == 0) return 0; //得到商和余数，除数为32 unsigned int location = num &gt;&gt; 5; unsigned int rest = num &amp; 0x1F; //对于rest为0，特殊处理 if(!rest) &#123; location -= 1; rest = 8; &#125; //rest用于位移 rest -= 1; nums[location] &amp;= ~(1&lt;&lt;rest); return 1;&#125; 到此我们的基本内容都完成了，接下来我们来写核心函数吧。 1234567891011121314151617181920212223242526int main() &#123; //拨出512M来存储结果 2^29bit unsigned int res[1&lt;&lt;27]; //缓存数据 unsigned int cache; //个数统计 unsigned int count = 0; //遍历第一批QQ号，并存入res while((cache = iterator1.nextuint) != 0) &#123; storeInBit(res, cache); &#125; //遍历第二批QQ号 while((cache = iterator2.nextuint) != 0) &#123; //如果没有直接跳过 if(isInBit(res, cache)) &#123; continue; &#125; else &#123; //count+1 count += 1; //删除数据，防止重复计算 removeInBit(res, cache); &#125; &#125; //输出结果 printf(&quot;公共QQ号的个数为：%u&quot;, count);&#125; 兔子试毒有1000瓶药水，其中有一瓶是毒药，只要喝了一滴一天后必死，现在要用最合适的兔子和时间试出哪瓶是毒药？这里有两个隐性条件要看出来，就是一只兔子可以同时喝多瓶毒药和一瓶毒药可以被多只兔子尝试。当然我这里给了合适一词，因为最少的兔子是1只兔子试1000天，最少的天数是使用1000只兔子1天内试出结果，使用一一对应的做法，大家都懂。2^10&gt;1000，所以我们只要10只兔子就足够了。我们将药水从0-999编号，并将其转化为二进制，哪个位置上有1就让哪一只兔子喝一滴，如0不会被任何兔子喝，101会被3号和1号兔子喝。一天以后，我们将死去兔子的编号组合成一个二进制数，即是毒药对应的编号。原理其实就是简单的排除法，我们来使用代码实现这个过程。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//生成毒药void randomSet(int* drugs, int num) &#123; //设置种子 srand((unsigned)time(NULL)); //位置从0开始，故末尾不是num int res = rand()%num; //设置毒药位置 drugs[res] = 1;&#125;//兔子试毒算法void testDrug(int* rabbit, int* drugs) &#123; //对药进行遍历，注意药的编号从零开始 for(int i = 0; i &lt; 1000; i++) &#123; //总共10个二进制位 for(int j = 0; j &lt; 10; j++) &#123; //将药喂给兔子 if(i&gt;&gt;j&amp;0x00000001) rabbit[j] |= drugs[i]; &#125; &#125;&#125;int main() &#123; //药水集合 int drugs[1000] = &#123;0&#125;; //随机初始化毒药的位置 randomSet(drugs, sizeof(drugs)/sizeof(drugs[0])); //看看毒药在哪 for(int i=0;i&lt;1000;i++) &#123; if(drugs[i]) &#123; printf(&quot;毒药在%d位置\\n&quot;,i+1); &#125; &#125; //10只兔子是否死亡 int rabbit[10] = &#123;0&#125;; //给兔子喂药 testDrug(rabbit, drugs); //保存结果 int res = 0; printf(&quot;死去的兔子有：&quot;); //根据兔子来看毒药的编号 for(int i = 0; i &lt; 10; i++) &#123; //记录到res res |= rabbit[i]&lt;&lt;i; if(rabbit[i]) printf(&quot;%d号 &quot;, i+1); &#125; printf(&quot;\\n&quot;); printf(&quot;试出毒药的位置在%d&quot;, res+1);&#125; 整体不算复杂，我们不过多说明，重在学会其中的思想。 大整数存储最后我们再来讲讲大整数的存储问题，通过之前的研究我们可以很容易地知道，我们可以通过bit来存储序数。比如每个int可以存储上限为2^32-1的整数，int[2]存储2^32的方式就可以是int[1]=1,int[0]=0。在java里的BigInteger采用的就是上述方式，它使用int[]来存储大整数，数组的上限是private static final int MAX_MAG_LENGTH = Integer.MAX_VALUE / Integer.SIZE + 1; // (1 &lt;&lt; 26)总共才64M，虽然看起来不是很大，但实际上，我们一般通过String来初始化BigInteger，如果每秒输入一个字符，也要输2年多才能输满，这是你可能会告诉我使用pow函数来产生大的BigInteger。其实为什么设这个上限我也不太明白，可能因为它是运行在java虚拟机上，需要对内存稍做管理吧，其实数组可以传入的最大值应该是int即2^31-1，不过也可以通过链表进行实现，这样就可以无限申请内存了，这实际上是python内部大整数的实现方式。这是你可能会稍微疑惑为什么不使用long数组，这大概是java的倔强，它的加减乘除运算都是在java虚拟机层实现的，为了保证加法的进位不丢失，每次运算前它会使用final static long LONG_MASK = 0xffffffffL;先对一块int进行数据类型转化，再通过long的运算得到结果，最后分别取出进位继续运算，取一段加法稍微看看。 12345while (yIndex &gt; 0) &#123; sum = (x[--xIndex] &amp; LONG_MASK) + (y[--yIndex] &amp; LONG_MASK) + (sum &gt;&gt;&gt; 32); result[xIndex] = (int)sum; &#125; sum是一个long用来缓存中间结果，x和y是两个加数，result用来存储最后的结果。说到java，我们还要提一下android的java api，谷歌是我十分佩服的公司，安卓的javaapi虽然与java的许多部分都基本一致，但实现的方式却大有不同，比如这个BigInteger，首先它并不是在类似java虚拟机的delvik虚拟机上运行，而是通过jni来运行在native层的相关代码。从安卓在java层源码，我们可以看到BigInteger还有两个相关类，分别是BigInt和NativeBN，NativeBN用来申明Native方法，加减乘除幂等都在这申明，实现的话是在native层，BigInt则是真正处理BigInteger相关事务的类，比如构造函数初始化数据等，BigInteger则是为了保留java接口，本质是使用BigInt实现相同于java的功能，当然安卓SDK只保留了BigInteger的使用，所有用起来与java基本没有区别就是了。最后或许要讲讲python，但实际上已经没什么好说的了，python3之前有对大整数和小整数进行分类存储，可能一定程度有提高效率，但python3则一律存储为大整数的方式，底层实现类似于bit存储的思想，但是因为python的原始解释器是C系列的语言，就可以直接操作内存，因此可以不受数组申明长度的限制，实现真正意义上的无限大整数，不过物理空间的限制和时间的限制已经超出软件的范畴了，不是我们应该考虑的。这次我对大整数的实现，并没有带读者直接去读源码，有了之前lua的经验，我发现这样的意义，实际是不大的。其实，一旦我们可以理解其中的思想的话，读源码实际上就是水到渠成的，读源码的最大障碍就是不能理解，为什么要什么这个变量？为什么要如此回调？等。“授人以鱼不如授人以渔”，所以这次我先从某种思想的使用先讲清它的基本内容，再稍微提了一下，其它源码是如何使用这种思想又有哪些不同的地方。这实际是一种引导式的阅读，理解思想的读者其实读不读源码已经不重要了，读源码的目的则从学习方法变成了验证方法。就到这里吧，明天也该开始把lua的坑给填了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"内存","slug":"内存","permalink":"http://example.com/tags/%E5%86%85%E5%AD%98/"},{"name":"二进制","slug":"二进制","permalink":"http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"}]},{"title":"我编程的痛点","slug":"我编程的痛点","date":"2021-12-04T15:24:31.000Z","updated":"2022-10-14T23:47:08.049Z","comments":true,"path":"archives/2021-12-04-我编程的痛点/","link":"","permalink":"http://example.com/archives/2021-12-04-%E6%88%91%E7%BC%96%E7%A8%8B%E7%9A%84%E7%97%9B%E7%82%B9/","excerpt":"","text":"我编程中最害怕的无非就两件事：版本问题和不完整的官方文档。","categories":[],"tags":[]},{"title":"比起哲学，我更爱数学","slug":"比起哲学，我更爱数学","date":"2021-12-03T04:56:50.000Z","updated":"2022-10-14T23:47:08.085Z","comments":true,"path":"archives/2021-12-03-比起哲学，我更爱数学/","link":"","permalink":"http://example.com/archives/2021-12-03-%E6%AF%94%E8%B5%B7%E5%93%B2%E5%AD%A6%EF%BC%8C%E6%88%91%E6%9B%B4%E7%88%B1%E6%95%B0%E5%AD%A6/","excerpt":"","text":"今天闲着无聊，听了听马原的课。在讲真理与谬误的对立和统一，说什么真理和谬误在一定条件下可以相互转化之类的，还问我们怎么理解，在日常生活中有些什么实例。知道我首先想到了什么吗？是哥德尔不完备定理，我不想详细的述说它，这是数学家的工作，它大概讲了这样两个事实，包含某些公理的一致逻辑系统是不完备的和在此系统内不完备性还不可自证。我可以不知道什么是真理，什么是谬误，本身就模糊的东西，就是用来感受的，但我知道什么是真命题和假命题。我不理解真理与谬误的对立和统一，但我知道满足非真即假的逻辑系统里有可能存在不可判断真假的命题。我不知道真理与谬误在什么条件下可以相互转化，但我知道在不同公理系统下的定理是不一样的。为什么我要说这些？其实我想表达的是，与别人争论大道理的非必要性，当然说服与政治需求是另外一回事。其实每个人都知道争论真假的非必要性，注意这里我没说辩论，因为辩论的主要目的是让评委更偏袒自己，但人却总有说服对方的冲动。虽然我们都有中立的判断，但终究需要选择。就跟有时，我们可以述说大段大段关于是否扶老人的话题，但最后在现实里还是得做出是否扶老人的选择，这就是表态。马原有几个有趣的地方，一个是强调实践的重要性，另一个是强调矛盾的普遍性，最后一个是否定之否定。把所有都串起来说明了这样一个事实，我自己会有缺陷，并且我自己应该在实践中不断改进。就和说“我不是真理”一样的矛盾，让自己变得不可判定，从而使自己近乎没有“错误”。当然我并没有说他们不好，只是在明理上，数学对我的帮助更大，模糊的东西实在是不适合让人通透。近代哲学发展了什么，我不是很清楚，但我知道黑格尔和马克思等人之后的哲学，在对于科学研究上帮助甚少，比如存在主义，它们更多的专注于对人自身的研究了，用模糊研究模糊，这才是正道。事实上，数学也有让我难受的地方，比如概率论，但难受的不是其本身，而是对题目描述的模糊性，比如著名题目“在半径为1的圆内随机取一条弦，其长度超过√3的概率是多少？”，题目不会透露等可能性假设，而需要自己加上去，就导致了题目的多解。我并非不爱哲理，甚至我深爱着文学，但是要我选择出第一的话，那绝对是数学了。这里的数学是一个很广泛的概念，包括那些交叉学科。有人觉得数学充满各种框框条条，十分死板，或许说对了一半，数学的自由在于创造与发现。虽然我们不一定能创造出有用的东西，但数学确实有许多的框架来帮助我们创造与发现。到底还想说些什么呢？大概没有了吧。","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"文学","slug":"文学","permalink":"http://example.com/tags/%E6%96%87%E5%AD%A6/"},{"name":"哲学","slug":"哲学","permalink":"http://example.com/tags/%E5%93%B2%E5%AD%A6/"}]},{"title":"大整数优势","slug":"大整数优势","date":"2021-12-01T12:45:15.000Z","updated":"2022-10-14T23:47:07.730Z","comments":true,"path":"archives/2021-12-01-大整数优势/","link":"","permalink":"http://example.com/archives/2021-12-01-%E5%A4%A7%E6%95%B4%E6%95%B0%E4%BC%98%E5%8A%BF/","excerpt":"","text":"可恶，这项功能让我越来越喜欢python了。 虽说如java也有BigInteger的实现，但该怎么说呢…","categories":[],"tags":[]},{"title":"加油","slug":"加油","date":"2021-11-30T14:45:11.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2021-11-30-加油/","link":"","permalink":"http://example.com/archives/2021-11-30-%E5%8A%A0%E6%B2%B9/","excerpt":"","text":"突然发现lua的内容好多，看来一个月是结束不了了。所以我决定干脆穿插写点其它东西吧。","categories":[],"tags":[]},{"title":"lua通读之GC机制","slug":"lua通读之GC机制","date":"2021-11-23T11:33:40.000Z","updated":"2022-10-14T23:47:06.798Z","comments":true,"path":"archives/2021-11-23-lua通读之GC机制/","link":"","permalink":"http://example.com/archives/2021-11-23-lua%E9%80%9A%E8%AF%BB%E4%B9%8BGC%E6%9C%BA%E5%88%B6/","excerpt":"","text":"垃圾回收概述需求如果我们只是写一个如“Hello World”这般简单的程序话，垃圾回收本身就不是我们该考虑的问题，实际上，我们的程序是运行在操作系统上，当程序运行结束后，操作系统会自动回收所有程序使用的内存，也就是说，不是一直长时间运行的程序没有考虑垃圾回收的必要。同时，除了C和C++以外几乎所有语言都有垃圾回收机制，我们需要注意的是这里的垃圾回收本质指的是自动内存管理机制。C/C++有相应的内存管理接口，但需要手动。而其它大部分语言没有提供内存管理接口，都是自动管理，就是我们通常所说的拥有垃圾回收机制。虽然我们可以使用更多拥有良好GC机制的语言进行高效编程，但C/C++可以说是所有高级语言的老祖宗了，大部分语言的解释器都依赖与C/C++实现，其实C才比较正确，C++提供面向对象的特性，同时提供了析构函数用于自动回收对象，注意是对象，对象里的数据则通过编写析构函数来回收。 学习GC原理不论我们学习多少语言，会发现它们都提供了与C/C++交互的机制，或载入C/C++库的机制，比如java的jni，目的都说是提高效率。总之，我们终会使用C/C++，所以了解一些垃圾回收的方式还是有必要的。 lua的基本API在学习源码之前，我们先来稍微体会一下lua脚本里面GC的使用，我们使用collectgarbage这一个函数即可。collectgarbage(&quot;collect&quot;)进行一次手动垃圾回收，collectgarbage(&quot;stop&quot;)停止自动垃圾回收，collectgarbage(&quot;restart&quot;)重启垃圾回收器，collectgarbage(&quot;count&quot;)返回Lua使用的总内存，至于后面的指令，我们得稍微了解一下lua的垃圾回收机制了，根据官方文档lua采用的是incremental mark-and-sweep collector(渐进式标记-清除回收器)，我们需要分开来看。 标记-清除算法标记：即标记不需要回收的对象。有两个部分，一是从根节点遍历可到达对象并标记，二是去除用户手动置空对象的标记，在lua里标记的颜色较多，我们等下说。清除：即清除没有标记的对象并清除标记，最后还能选择的加一个收尾函数进行些可能需要的处理。 渐进式lua的垃圾回收器，有两个控制参数mul和pause。对于每次标记-清除的程度不同，依据内存分配的多少来决定多大程度，它的参数是mul，而每次标记-清除属于step，众多的step组成一次collect，每次collect的间隔为pause。pause和mul的单位为100。这些有点抽象我们将源码的时候再更详细的去了解。到这里，我们就知道接下来的几个函数的意义了，collectgarbage(&quot;step&quot;,n)执行n次step，collectgarbage(&quot;setpause&quot;,n)设置回收器的pause为n/100，collectgarbage(&quot;setstepmul&quot;,n)设置回收器的mul为n/100。为了深入理解，我们还是来看看lua垃圾回收的源码吧。 源码分析C语言在源码解读前，我们先稍微提一下C语言中有哪些对象是需要回收的。C语言需要回收的是堆内存，而栈内存会在函数结束后自动回收。其实就是通过calloc和malloc分配的内存，主要用的多的是后者，而对于在函数内的int i=0之类的内存则会在函数结束后回收。其实还有全局变量，但所谓的垃圾指的一般是我们没有访问到这块内存的指针，同时它属于动态内存可能有不断扩大的风险，对于全局变量内存一般是固定的没有管理的必要性。 内存分布一个进程的基本内存有四部分，代码区，全局变量区，栈区和堆区。我们发现这与lua虚拟机惊人的相似，只不过多了一个堆区。实际上，在操作系统上运行的程序，也相当于在系统这个虚拟机上运行的，几乎所有虚拟机都一个样，没什么好说的。我们主要看堆区的内存，这才是需要管理的部分。在lua占用堆内存的是lightuserdate和GCObject，但我见到的都是GCObject，GCObject是一个联合体： 12345678910union GCObject &#123; GCheader gch; union TString ts; union Udata u; union Closure cl; struct Table h; struct Proto p; struct UpVal uv; struct lua_State th; /* thread */&#125;; 也就是说lua将所有堆内存的数据都抽象为一个GCObject来管理，具体的内容如上。global_State并没有包含进去，从它的结构体申明也可以发现它没有CommonHeader。由之前的分析也可以知道，这块内存是挂载到主协程上管理的。 垃圾回收器在各种头文件里，我们并没有发现垃圾回收器的结构体，那它的状态pause和mul保存在哪里呢，我们只能去collectgarbage函数在C里的表现来探究了。 123456789101112131415161718192021222324static int luaB_collectgarbage (lua_State *L) &#123; static const char *const opts[] = &#123;&quot;stop&quot;, &quot;restart&quot;, &quot;collect&quot;, &quot;count&quot;, &quot;step&quot;, &quot;setpause&quot;, &quot;setstepmul&quot;, NULL&#125;; static const int optsnum[] = &#123;LUA_GCSTOP, LUA_GCRESTART, LUA_GCCOLLECT, LUA_GCCOUNT, LUA_GCSTEP, LUA_GCSETPAUSE, LUA_GCSETSTEPMUL&#125;; int o = luaL_checkoption(L, 1, &quot;collect&quot;, opts); int ex = luaL_optint(L, 2, 0); int res = lua_gc(L, optsnum[o], ex); switch (optsnum[o]) &#123; case LUA_GCCOUNT: &#123; int b = lua_gc(L, LUA_GCCOUNTB, 0); lua_pushnumber(L, res + ((lua_Number)b/1024)); return 1; &#125; case LUA_GCSTEP: &#123; lua_pushboolean(L, res); return 1; &#125; default: &#123; lua_pushnumber(L, res); return 1; &#125; &#125;&#125; 容易看出核心语句是int res = lua_gc(L, optsnum[o], ex);，optsum是垃圾回收的指令，ex是额外的参数，res是返回值。最后的switch则根据指令的不同将不同的结果入栈。我们注意到获取使用内存时，有两部分—LUA_GCCOUNT和LUA_GCCOUNTB，后面我们会看到它们的区别。 lapi.c123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657LUA_API int lua_gc (lua_State *L, int what, int data) &#123; int res = 0; global_State *g; lua_lock(L); g = G(L); switch (what) &#123; case LUA_GCSTOP: &#123; g-&gt;GCthreshold = MAX_LUMEM; break; &#125; case LUA_GCRESTART: &#123; g-&gt;GCthreshold = g-&gt;totalbytes; break; &#125; case LUA_GCCOLLECT: &#123; luaC_fullgc(L); break; &#125; case LUA_GCCOUNT: &#123; /* GC values are expressed in Kbytes: #bytes/2^10 */ res = cast_int(g-&gt;totalbytes &gt;&gt; 10); break; &#125; case LUA_GCCOUNTB: &#123; res = cast_int(g-&gt;totalbytes &amp; 0x3ff); break; &#125; case LUA_GCSTEP: &#123; lu_mem a = (cast(lu_mem, data) &lt;&lt; 10); if (a &lt;= g-&gt;totalbytes) g-&gt;GCthreshold = g-&gt;totalbytes - a; else g-&gt;GCthreshold = 0; while (g-&gt;GCthreshold &lt;= g-&gt;totalbytes) &#123; luaC_step(L); if (g-&gt;gcstate == GCSpause) &#123; /* end of cycle? */ res = 1; /* signal it */ break; &#125; &#125; break; &#125; case LUA_GCSETPAUSE: &#123; res = g-&gt;gcpause; g-&gt;gcpause = data; break; &#125; case LUA_GCSETSTEPMUL: &#123; res = g-&gt;gcstepmul; g-&gt;gcstepmul = data; break; &#125; default: res = -1; /* invalid option */ &#125; lua_unlock(L); return res;&#125; 我们从这里可以看到不少东西，比如pause和mul是存储在全局状态机里，连使用的内存也存在里面，而LUA_GCCOUNT和LUA_GCCOUNTB只是为了把内存的kb和byte区分处理，在全局状态机里存储内存的单位是byte而输出则是kbyte。实际上连垃圾回收器的状态也存储在全局状态机上，我们通过g-&gt;GCthreshold改变垃圾回收器的运行状态，注意这和状态不同，g-&gt;gcstate是gc运行过程中的状态，标志当前回收处于哪个阶段，有以下这些类型 12345#define GCSpause 0#define GCSpropagate 1#define GCSsweepstring 2#define GCSsweep 3#define GCSfinalize 4 对于collect则会执行一次fullgc，不过我们还是先看一下step的执行。首先对于GCthreshold得讲一下，由之前的代码可知GCthreshold等于MAX_LUMEM时表示回收器停止，这个MAX_LUMEM是unsignedlong的最大值，应该基本达不到这么大的内存，而GCthreshold等于totalbytes表示垃圾回收器在正常执行。好了回到我们的step，首先将步数data扩大1024倍，之前说过回收与内存有关，接下来就是与总内存比较，过多则GCthreshold直接清零，否则在GCthreshold内去除相应大小，luaC_step(L);实现清理的方法，结果是使得GCthreshold超过totalbytes，实际上我们是通过减少totalbytes达到这一步的，另一个if判断垃圾回收器是否pause，不是太重要。我们来看看luaC_step(L)的源码 1234567891011121314151617181920212223void luaC_step (lua_State *L) &#123; global_State *g = G(L); l_mem lim = (GCSTEPSIZE/100) * g-&gt;gcstepmul; if (lim == 0) lim = (MAX_LUMEM-1)/2; /* no limit */ g-&gt;gcdept += g-&gt;totalbytes - g-&gt;GCthreshold; do &#123; lim -= singlestep(L); if (g-&gt;gcstate == GCSpause) break; &#125; while (lim &gt; 0); if (g-&gt;gcstate != GCSpause) &#123; if (g-&gt;gcdept &lt; GCSTEPSIZE) g-&gt;GCthreshold = g-&gt;totalbytes + GCSTEPSIZE; /* - lim/g-&gt;gcstepmul;*/ else &#123; g-&gt;gcdept -= GCSTEPSIZE; g-&gt;GCthreshold = g-&gt;totalbytes; &#125; &#125; else &#123; setthreshold(g); &#125;&#125; 先由mul参数计算lim，0表示没有限制。接着由totalbytes和GCthreshold的差，确定计划回收多少内存，注意这里只是一个step，gcdept还残留着之前的数据。singlestep才是最终的回收函数，它会根据此时全局状态机上挂的各种参数来回收相应内存，返回值是回收了具体多少内存，这里有关pause的判定，与之前类似，这里的目的是将lim降为非正数，接下来就是一些收尾内容，调整相关参数。在此之前，我们来看一看luaC_fullgc与此的差别 123456789101112131415161718192021222324void luaC_fullgc (lua_State *L) &#123; global_State *g = G(L); if (g-&gt;gcstate &lt;= GCSpropagate) &#123; /* reset sweep marks to sweep all elements (returning them to white) */ g-&gt;sweepstrgc = 0; g-&gt;sweepgc = &amp;g-&gt;rootgc; /* reset other collector lists */ g-&gt;gray = NULL; g-&gt;grayagain = NULL; g-&gt;weak = NULL; g-&gt;gcstate = GCSsweepstring; &#125; lua_assert(g-&gt;gcstate != GCSpause &amp;&amp; g-&gt;gcstate != GCSpropagate); /* finish any pending sweep phase */ while (g-&gt;gcstate != GCSfinalize) &#123; lua_assert(g-&gt;gcstate == GCSsweepstring || g-&gt;gcstate == GCSsweep); singlestep(L); &#125; markroot(L); while (g-&gt;gcstate != GCSpause) &#123; singlestep(L); &#125; setthreshold(g);&#125; 第一步用于清除状态，准备开始FullGC，对于lua_assert没什么，要你自己去加。接下来不断执行singlestep(L);直到GCSfinalize状态，注意这里只是为了结束之前未完成的清理。接下来markroot(L)开始标记，while则依赖singlestep(L);执行清除操作，直到GCSpause表示一个周期结束。最后，我们还要看一下luaC_checkGC(L)这是一个lua虚拟机内容改变时经常调用的函数，如字符串入栈。它是一个宏，定义如下 1234#define luaC_checkGC(L) &#123; \\ condhardstacktests(luaD_reallocstack(L, L-&gt;stacksize - EXTRA_STACK - 1)); \\ if (G(L)-&gt;totalbytes &gt;= G(L)-&gt;GCthreshold) \\ luaC_step(L); &#125; 里面的luaC_step()我们已经见过了，表示执行一次step，至此我们已经大概明白自动垃圾回收是怎么回事了，在lua里并非有一个专门的线程来垃圾回收，而是在有些lua操作的时候，通过调用垃圾回收函数来实现的。 markroot函数在看回收函数前，我们有必要先来看看lua是如何标记元素的 123456789101112static void markroot (lua_State *L) &#123; global_State *g = G(L); g-&gt;gray = NULL; g-&gt;grayagain = NULL; g-&gt;weak = NULL; markobject(g, g-&gt;mainthread); /* make global table be traversed before main stack */ markvalue(g, gt(g-&gt;mainthread)); markvalue(g, registry(L)); markmt(g); g-&gt;gcstate = GCSpropagate;&#125; 先获取全局状态机，然后清除所有标记，然后mark*()则是进行标记的核心函数，总共有四个部分，我们一一来看。 markobject函数这是一个宏，注意我们传入了主虚拟机L为t 12#define markobject(g,t) &#123; if (iswhite(obj2gco(t))) \\ reallymarkobject(g, obj2gco(t)); &#125; iswhite可以先不管，我们看reallymarkobject的内容，注意这里使用obj2gco进行类型转化，等价于cast。 lgc.c1234567891011121314151617181920212223242526272829303132333435363738394041424344static void reallymarkobject (global_State *g, GCObject *o) &#123; lua_assert(iswhite(o) &amp;&amp; !isdead(g, o)); white2gray(o); switch (o-&gt;gch.tt) &#123; case LUA_TSTRING: &#123; return; &#125; case LUA_TUSERDATA: &#123; Table *mt = gco2u(o)-&gt;metatable; gray2black(o); /* udata are never gray */ if (mt) markobject(g, mt); markobject(g, gco2u(o)-&gt;env); return; &#125; case LUA_TUPVAL: &#123; UpVal *uv = gco2uv(o); markvalue(g, uv-&gt;v); if (uv-&gt;v == &amp;uv-&gt;u.value) /* closed? */ gray2black(o); /* open upvalues are never black */ return; &#125; case LUA_TFUNCTION: &#123; gco2cl(o)-&gt;c.gclist = g-&gt;gray; g-&gt;gray = o; break; &#125; case LUA_TTABLE: &#123; gco2h(o)-&gt;gclist = g-&gt;gray; g-&gt;gray = o; break; &#125; case LUA_TTHREAD: &#123; gco2th(o)-&gt;gclist = g-&gt;gray; g-&gt;gray = o; break; &#125; case LUA_TPROTO: &#123; gco2p(o)-&gt;gclist = g-&gt;gray; g-&gt;gray = o; break; &#125; default: lua_assert(0); &#125;&#125; 在开始解读前，我们先说两个东西。不知道你是否还记得在GCObject联合体的申明里面有一个GCheader的部分，它的内容其实就是封装CommonHeader的一个结构体，没错就是每个可回收对象的共有开头，不知道你有没有发觉出什么？其实这里是一项非常有趣的技术，这里运用了联合体内存共享的机制，GCheader和具体对象的CommonHeader共享同一块内存，我们访问GCObject的gch就可以访问到具体对象CommonHeader里的内容了，因此我们就能将可回收对象转化为GCObject进行统一处理了，的确值得好好学习。接下来再对CommonHeader里的marked稍加说明，它的类型是lu_byte，实际上就是unsigned char，不过只要记住它是个8位二进制数就行了，也就是说它可以标记8个状态，有下面这些 123456789#define WHITE0BIT 0#define WHITE1BIT 1#define BLACKBIT 2#define FINALIZEDBIT 3#define KEYWEAKBIT 3#define VALUEWEAKBIT 4#define FIXEDBIT 5#define SFIXEDBIT 6#define WHITEBITS bit2mask(WHITE0BIT, WHITE1BIT) lua里面用到的就只要7位，bit2mask函数是一个宏用于将后面两个标志结合到一起，实现比较简单，对于每一个标志可以通过1&lt;&lt;“相应数字”来得到标志位，然后再使用“|”按位与运算即可得到最后的标志位。标志位的具体意思，稍微等等，我们只要先记住SFIXEDBIT只有主协程才有就行了。好了回到我们的函数，white2gray(o)给o标记上WHITE0BIT和WHITE1BIT，即WHITEBITS，接下来判断o的类型，虽然我们入口传入的是lua主协程，但这个函数是广泛适用的，所以需要判断。对于字符串并没有做标记，这就是为什么状态里有sweep和sweepstring了。如果是userdata，将metatable部分标黑后，将它的两部分分别再进行标记，一个典型的递归。对于upval，使用markvalue标记它的值，因为具体无法确定，只知道它是TValue，但本质也是调用markobject，接下来判断是否为自身，如果是则将其标黑，则主要防止不断上传导致无限循环一直都无法标记。接下来几种数据类型内部也会有许多可回收对象，故将其的gclist挂到全局状态机的gray上，方式与之前TString处理Hash冲突的方式相同。 markvalue函数和markmt函数这两个函数本身没什么好说的，也是通过调用reallymarkobject函数实现的 12#define markvalue(g,o) &#123; checkconsistency(o); \\ if (iscollectable(o) &amp;&amp; iswhite(gcvalue(o))) reallymarkobject(g,gcvalue(o)); &#125; 参数gt(g-&gt;mainthread)表示lua虚拟机的所有全局表，registry(L)则是全局表_G，它是挂载在全局状态机上面的。对于主协程没有太大区别，但我们还有协程，所以挂在虚拟机上和全局状态机上是不同的。 12345static void markmt (global_State *g) &#123; int i; for (i=0; i&lt;NUM_TAGS; i++) if (g-&gt;mt[i]) markobject(g, g-&gt;mt[i]);&#125; 这个函数则是用于标记全局状态机的元表。后两部分加起来可以发现与对userdate的处理是类似的，全局表与一般表的区别是它挂载的位置不同。由以上分析可以知道，我们标记主要有两大成分，一是主协程上的gclist和全局表，二是全局状态机上的全局表和元表。 singlestep函数通过之前的分析可以知道此函数用于执行一次step，但这个step与collectgarbage(“step”)有些不太一样。 lgc.c12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152static l_mem singlestep (lua_State *L) &#123; global_State *g = G(L); /*lua_checkmemory(L);*/ switch (g-&gt;gcstate) &#123; case GCSpause: &#123; markroot(L); /* start a new collection */ return 0; &#125; case GCSpropagate: &#123; if (g-&gt;gray) return propagatemark(g); else &#123; /* no more `gray&#x27; objects */ atomic(L); /* finish mark phase */ return 0; &#125; &#125; case GCSsweepstring: &#123; lu_mem old = g-&gt;totalbytes; sweepwholelist(L, &amp;g-&gt;strt.hash[g-&gt;sweepstrgc++]); if (g-&gt;sweepstrgc &gt;= g-&gt;strt.size) /* nothing more to sweep? */ g-&gt;gcstate = GCSsweep; /* end sweep-string phase */ lua_assert(old &gt;= g-&gt;totalbytes); g-&gt;estimate -= old - g-&gt;totalbytes; return GCSWEEPCOST; &#125; case GCSsweep: &#123; lu_mem old = g-&gt;totalbytes; g-&gt;sweepgc = sweeplist(L, g-&gt;sweepgc, GCSWEEPMAX); if (*g-&gt;sweepgc == NULL) &#123; /* nothing more to sweep? */ checkSizes(L); g-&gt;gcstate = GCSfinalize; /* end sweep phase */ &#125; lua_assert(old &gt;= g-&gt;totalbytes); g-&gt;estimate -= old - g-&gt;totalbytes; return GCSWEEPMAX*GCSWEEPCOST; &#125; case GCSfinalize: &#123; if (g-&gt;tmudata) &#123; GCTM(L); if (g-&gt;estimate &gt; GCFINALIZECOST) g-&gt;estimate -= GCFINALIZECOST; return GCFINALIZECOST; &#125; else &#123; g-&gt;gcstate = GCSpause; /* end collection */ g-&gt;gcdept = 0; return 0; &#125; &#125; default: lua_assert(0); return 0; &#125;&#125; 先判断处于回收的哪个阶段，如果是pause阶段，则标记根节点。注意我们只标记了根节点，而“标记-回收算法”还需要将可到达元素标记，由之前分析可知，我们执行markroot后，回收将进入propagate状态，意思即为增殖。如果处于propagate状态，观察全局状态机的grey是否有值，有则执行propagatemark进行增殖标记，否则结束执行atomic结束标记过程，执行atomic后会进入sweepstring阶段，等下我们会分析的。如果回收器处于sweepstring阶段，则使用sweepwholelist进行真正的回收操作，它每次会在全局状态机的字符串表strt上移动一次，然后计算清理前后的内存差，并令全局状态机的estimate减去相应内存，当然这并不重要。最后如果strt遍历结束，则进入sweep阶段。对于sweep阶段与上一个类似，只不过遍历的是全局状态机的sweepgc，sweepgc是包含所有可回收对象的表的指针(也可以称为数组)，这是什么意思？在lua里所有回收对象类似于树林的存储方式，所有根节点组成全局状态机里的rootgc，而处于同一深度的元素通过next互相联系，它们组成一个链表用于我们进行每次sweeplist，并返回下一个sweeplist，达到最深以后进入finalize阶段。如果处于finalize阶段，则通过GCTM清理全局状态机的userdata，tmudata是所有userdata的链表，此表遍历结束则进入pause。至此singlestep方法结束。对于接下来各种函数再具体分析无聊且没太大意义，这里我们总结一下。lua总共有三种颜色标记，可以通过is*看它们的定义 123#define iswhite(x) test2bits((x)-&gt;gch.marked, WHITE0BIT, WHITE1BIT)#define isblack(x) testbit((x)-&gt;gch.marked, BLACKBIT)#define isgray(x) (!isblack(x) &amp;&amp; !iswhite(x)) 任何对象初始均为白色标记，在markobject通过white2gray标灰，灰表示所有有引用的对象，在propagatemark我们则通过gray2black标黑，黑表示强引用，所以在markobject里可以直接将userdata和upval标黑，它一定不会被回收，propagatemark里面还通过调用traversestack来实现遍历其它节点。在propagatemark主要判断table,function,thread和proto，其中有标回灰色的倾向，主要针对弱引用，其出现在表和协程的结构里面，主要是在C里表现为存在GCObject的指针，注意function和proto没有此倾向，其内部数据依赖于自身的栈和固有的常量表，执行完就可以回收，不存在弱引用现象。sweepwholelist本质是调用sweeplist并输入最大数，sweeplist遍历传入的链表，清除白色标记(等于没标记)的实体，还有一个遍历的上限。 源码总结我们前面大部分都专注于“标记-回收”部分，而对于gclist，sweepgc等的构建过程，我们没有过多的解读，主要这并非垃圾回收的主要部分，实在不行的话，其实直接将所有GCObject放入一个链表里都可以，但lua的gc过程所要求的结构并非这样，也就是说gc过程决定对象的存储结构，读了gc过程自然也好猜出构建的过程。 结尾到这里，我们已经对lua的整个垃圾回收机制有了一个大体的认识，不过我们还是需要时刻谨记我们读源码的目的是什么？更好的利用和学习有参考意义的算法，而对于一些细枝末节是我们需要在实战中不断注意提升的，至于自己也能想到的东西一遍过就足矣了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"内存","slug":"内存","permalink":"http://example.com/tags/%E5%86%85%E5%AD%98/"}]},{"title":"框架时间问题","slug":"框架时间问题","date":"2021-11-23T11:28:42.000Z","updated":"2022-10-14T23:47:08.078Z","comments":true,"path":"archives/2021-11-23-框架时间问题/","link":"","permalink":"http://example.com/archives/2021-11-23-%E6%A1%86%E6%9E%B6%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/","excerpt":"","text":"今天又修复了这个博客框架的时间显示问题，乱改框架导致的问题果然还是挺多的。","categories":[],"tags":[]},{"title":"lua通读之协程","slug":"lua通读之协程","date":"2021-11-17T00:33:29.000Z","updated":"2022-10-14T23:47:06.819Z","comments":true,"path":"archives/2021-11-17-lua通读之协程/","link":"","permalink":"http://example.com/archives/2021-11-17-lua%E9%80%9A%E8%AF%BB%E4%B9%8B%E5%8D%8F%E7%A8%8B/","excerpt":"","text":"协程的基本用法前言协程是lua十分有趣的一部分，它并非多线程，而是单线程，用法有点goto，但有本质区别。但我们需要注意这属于脚本动态语言，静态语言没有，也没有需要这种功能的必要。 含义协程是一段代码的封装，一般通过一个“线程”将代码包装起来，其特点是可以中途挂起(yield)和恢复(resume)。不过在lua的线程与一般语言的线程不太一样。 协程状态对于一个协程有四种状态，‘running’协程正在运行，‘suspended’协程处于挂起状态，‘normal’协程处于唤起另一个协程的状态中，‘dead’协程运行完毕。由‘normal’我们就可以知道，lua程序运行时，只能有一个协程处于‘running’状态，由‘dead’我们可以知道，一个协程只能运行一次。 lua里的使用在lua里，协程的主要库函数有三个coroutine.create(f)，coroutine.yield (···)和coroutine.resume (co [, val1, ···])。 coroutine.create用于创建一个协程，传入一个函数用于封装代码，其返回值是一个协程引用，使用type的输出是thread。 coroutine.yield(…)与coroutine.resume (co , ···)这两个函数交替使用互相呼应，‘coroutine.resume (co , …)’用于唤起co协程，属于在一个协程里唤起另一个协程，值得注意的是我们的lua程序也是一个协程，称为主协程。…用于向协程传参，如果协程没有运行，则作为协程封装函数的参数。然后‘coroutine.yield(…)’用于挂起当前正在运行定位协程，参数用来作为唤起此协程的resume的返回值的后部分，resume的第一个返回值是bool类型，用来说明协程是否运行正常。第二次使用resume的参数则将作为yield的返回值。如果协程已经dead则直接返回false和报错信息。 官方案例main.lua12345678910111213141516function foo (a) print(&quot;foo&quot;, a) return coroutine.yield(2*a)endco = coroutine.create(function (a,b) print(&quot;co-body&quot;, a, b) local r = foo(a+1) print(&quot;co-body&quot;, r) local r, s = coroutine.yield(a+b, a-b) print(&quot;co-body&quot;, r, s) return b, &quot;end&quot;end)print(&quot;main&quot;, coroutine.resume(co, 1, 10))print(&quot;main&quot;, coroutine.resume(co, &quot;r&quot;))print(&quot;main&quot;, coroutine.resume(co, &quot;x&quot;, &quot;y&quot;))print(&quot;main&quot;, coroutine.resume(co, &quot;x&quot;, &quot;y&quot;)) 12345678co-body 1 10foo 2main true 4co-body rmain true 11 -9co-body x ymain true 10 endmain false cannot resume dead coroutine 这一个例子已经把协程的运行过程说透了。 其它coroutine.running()返回正在运行的协程，如果是主协程则返回nil，也就是说明了主协程的特殊性。coroutine.status(co)返回协程co的运行状态，如之前所说的四种情况。coroutine.wrap(f)在coroutine.create(f)基础上，将协程封装为函数，调用此函数相当于调用coroutine.resume。协程的基本用法其实挺简单的，我们主要去分析源码。 协程的源码解读有关协程的函数我们主要分析三个，它们是在lbaselib.c里的luaB_cocreate，luaB_coresume和luaB_yield，他们分别对应了coroutine.create，coroutine.resume和coroutine.yield。在此之前我们先说明一下，协程在C源码里的本质数据结构其实是lua_State，我们之前一直把它叫做lua虚拟机的东西，其实在lua_State申明上面也写了per thread&#39; state，不过两者的创建是有区别的，我们分别来看看。 lua_newstate创建主协程(lua虚拟机)我们之前虽然一直使用的是lua_open，但实际调用的都是此函数。 12345678//lua.h#define lua_open() luaL_newstate()//lauxlib.cLUALIB_API lua_State *luaL_newstate (void) &#123; lua_State *L = lua_newstate(l_alloc, NULL); if (L) lua_atpanic(L, &amp;panic); return L;&#125; l_alloc是一个用于分配内存的函数，有关内存管理是C的必修课，不多讲。lua_atpanic用于给虚拟机挂上一个报错函数，主要在C方面，看源码的话，就输出一句*unprotected call*，属于debug这个大坑。 lstate.c123456789101112131415161718192021222324252627282930313233343536373839404142434445464748LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) &#123; int i; lua_State *L; global_State *g; void *l = (*f)(ud, NULL, 0, state_size(LG)); if (l == NULL) return NULL; L = tostate(l); g = &amp;((LG *)L)-&gt;g; L-&gt;next = NULL; L-&gt;tt = LUA_TTHREAD; g-&gt;currentwhite = bit2mask(WHITE0BIT, FIXEDBIT); L-&gt;marked = luaC_white(g); set2bits(L-&gt;marked, FIXEDBIT, SFIXEDBIT); preinit_state(L, g); g-&gt;frealloc = f; g-&gt;ud = ud; g-&gt;mainthread = L; g-&gt;uvhead.u.l.prev = &amp;g-&gt;uvhead; g-&gt;uvhead.u.l.next = &amp;g-&gt;uvhead; g-&gt;GCthreshold = 0; /* mark it as unfinished state */ g-&gt;strt.size = 0; g-&gt;strt.nuse = 0; g-&gt;strt.hash = NULL; setnilvalue(registry(L)); luaZ_initbuffer(L, &amp;g-&gt;buff); g-&gt;panic = NULL; g-&gt;gcstate = GCSpause; g-&gt;rootgc = obj2gco(L); g-&gt;sweepstrgc = 0; g-&gt;sweepgc = &amp;g-&gt;rootgc; g-&gt;gray = NULL; g-&gt;grayagain = NULL; g-&gt;weak = NULL; g-&gt;tmudata = NULL; g-&gt;totalbytes = sizeof(LG); g-&gt;gcpause = LUAI_GCPAUSE; g-&gt;gcstepmul = LUAI_GCMUL; g-&gt;gcdept = 0; for (i=0; i&lt;NUM_TAGS; i++) g-&gt;mt[i] = NULL; if (luaD_rawrunprotected(L, f_luaopen, NULL) != 0) &#123; /* memory allocation error: free partial state */ close_state(L); L = NULL; &#125; else luai_userstateopen(L); return L;&#125; 虽然长，但核心就几部分，L是lua虚拟机，g是挂在L上的全局状态机，l是为L和g共同分配的内存。L = tostate(l);g = &amp;((LG *)L)-&gt;g;将内存分配给L和g。L-&gt;tt = LUA_TTHREAD;说明了我们的虚拟机是一个协程对象。preinit_state初始化L，包括将g挂到L上也在这里进行。g-&gt;frealloc = f;内存处理挂到了g上面，g-&gt;mainthread = L;g上还存储了我们的主协程。其它都不是很重要，不过lua放了许多空接口，比如luai_userstateopen，NUM_TAGS之类的，可见lua的野心还是挺大的，都在试图变成一个可高度扩展的语言。 luaB_cocreate创建协程12345678static int luaB_cocreate (lua_State *L) &#123; lua_State *NL = lua_newthread(L); luaL_argcheck(L, lua_isfunction(L, 1) &amp;&amp; !lua_iscfunction(L, 1), 1, &quot;Lua function expected&quot;); lua_pushvalue(L, 1); /* move function to top */ lua_xmove(L, NL, 1); /* move function from L to NL */ return 1;&#125; 首先创建一个协程NL，其次检查参数是否为函数，lua为了扩展还是挺辛苦的，执行lua_pushvalue后实际没什么变化，我们传参准确，不准确的话之前就会被测出来，再移动一遍没太多意义。记住我们之前所说，0处是我们调用函数的指针，最后将函数从L转移到NL。实际上，还有将NL放入栈顶，其实它将这放在了lua_newthread里，我们继续看。 1234567891011LUA_API lua_State *lua_newthread (lua_State *L) &#123; lua_State *L1; lua_lock(L); luaC_checkGC(L); L1 = luaE_newthread(L); setthvalue(L, L-&gt;top, L1); api_incr_top(L); lua_unlock(L); luai_userstatethread(L, L1); return L1;&#125; luaE_newthread真正用于创建协程，setthvalue(L, L-&gt;top, L1);api_incr_top(L);将我们的协程入栈。我们来看看创建协程与一般的主协程有什么区别。 12345678910111213lua_State *luaE_newthread (lua_State *L) &#123; lua_State *L1 = tostate(luaM_malloc(L, state_size(lua_State))); luaC_link(L, obj2gco(L1), LUA_TTHREAD); preinit_state(L1, G(L)); stack_init(L1, L); /* init stack */ setobj2n(L, gt(L1), gt(L)); /* share table of globals */ L1-&gt;hookmask = L-&gt;hookmask; L1-&gt;basehookcount = L-&gt;basehookcount; L1-&gt;hook = L-&gt;hook; resethookcount(L1); lua_assert(iswhite(obj2gco(L1))); return L1;&#125; tostate直接开始分配内存了，但我们从state_size(lua_State)可以看到没有分配全局状态机的内存，也就是说一般协程没有全局状态机。然后它通过luaC_link将此协程纳入了主协程的全局状态机的垃圾回收对象里面。stack_init(L1, L);用来初始化我们的协程栈，L主要是用来初始化L1调用栈的，有关此我们马上也该讲讲了。setobj2n让L1与主协程共享全局表，也就是主协程里的全局变量和函数可以在协程里使用。至此我们已经可以看出协程与主协程的区别了，如没有全局状态机，与主协程共享全局变量表等。 CallInfo这里我们要穿插将一下这个在lua虚拟机里俗称调用栈的东西。它的主要结构如下： 123456789101112131415161718/*** informations about a call*/typedef struct CallInfo &#123; StkId base; /* base for this function */ StkId func; /* function index in the stack */ StkId top; /* top for this function */ const Instruction *savedpc; int nresults; /* expected number of results from this function */ int tailcalls; /* number of tail calls lost under this entry */&#125; CallInfo;struct lua_State &#123; *** CallInfo *ci; /* call info for current function */ CallInfo *end_ci; /* points after end of ci array*/ CallInfo *base_ci; /* array of CallInfo&#x27;s */ ***&#125;; 讲解看官方注解，我们主要看调用栈改变的时候和如何改变。其实顾名思义，改变主要源于调用luaD_call的lua_precall()函数，好久以前的坑，今天我们来看看。 ldo.c1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465int luaD_precall (lua_State *L, StkId func, int nresults) &#123; LClosure *cl; ptrdiff_t funcr; if (!ttisfunction(func)) /* `func&#x27; is not a function? */ func = tryfuncTM(L, func); /* check the `function&#x27; tag method */ funcr = savestack(L, func); cl = &amp;clvalue(func)-&gt;l; L-&gt;ci-&gt;savedpc = L-&gt;savedpc; if (!cl-&gt;isC) &#123; /* Lua function? prepare its call */ CallInfo *ci; StkId st, base; Proto *p = cl-&gt;p; luaD_checkstack(L, p-&gt;maxstacksize); func = restorestack(L, funcr); if (!p-&gt;is_vararg) &#123; /* no varargs? */ base = func + 1; if (L-&gt;top &gt; base + p-&gt;numparams) L-&gt;top = base + p-&gt;numparams; &#125; else &#123; /* vararg function */ int nargs = cast_int(L-&gt;top - func) - 1; base = adjust_varargs(L, p, nargs); func = restorestack(L, funcr); /* previous call may change the stack */ &#125; ci = inc_ci(L); /* now `enter&#x27; new function */ ci-&gt;func = func; L-&gt;base = ci-&gt;base = base; ci-&gt;top = L-&gt;base + p-&gt;maxstacksize; lua_assert(ci-&gt;top &lt;= L-&gt;stack_last); L-&gt;savedpc = p-&gt;code; /* starting point */ ci-&gt;tailcalls = 0; ci-&gt;nresults = nresults; for (st = L-&gt;top; st &lt; ci-&gt;top; st++) setnilvalue(st); L-&gt;top = ci-&gt;top; if (L-&gt;hookmask &amp; LUA_MASKCALL) &#123; L-&gt;savedpc++; /* hooks assume &#x27;pc&#x27; is already incremented */ luaD_callhook(L, LUA_HOOKCALL, -1); L-&gt;savedpc--; /* correct &#x27;pc&#x27; */ &#125; return PCRLUA; &#125; else &#123; /* if is a C function, call it */ CallInfo *ci; int n; luaD_checkstack(L, LUA_MINSTACK); /* ensure minimum stack size */ ci = inc_ci(L); /* now `enter&#x27; new function */ ci-&gt;func = restorestack(L, funcr); L-&gt;base = ci-&gt;base = ci-&gt;func + 1; ci-&gt;top = L-&gt;top + LUA_MINSTACK; lua_assert(ci-&gt;top &lt;= L-&gt;stack_last); ci-&gt;nresults = nresults; if (L-&gt;hookmask &amp; LUA_MASKCALL) luaD_callhook(L, LUA_HOOKCALL, -1); lua_unlock(L); n = (*curr_func(L)-&gt;c.f)(L); /* do the actual call */ lua_lock(L); if (n &lt; 0) /* yielding? */ return PCRYIELD; else &#123; luaD_poscall(L, L-&gt;top - n); return PCRC; &#125; &#125;&#125; 函数挺长的，我们看主要部分。cl存储函数闭包，funcr记录函数在栈上的位置。savepc是lua虚拟机当前指令的指针，L-&gt;ci-&gt;savedpc = L-&gt;savedpc;就是将当前CallInfo的指令存储为虚拟机当前的指令，这样记录了当前函数运行到了哪里，方便回来继续执行。接下来的if用于区别是lua闭包还是c闭包，先看上一个。首先创建一个CallInfo，也就是说每次call的时候都会产生一个CallInfo用于记录信息。st用于缓存StkId，base最后会存为lua虚拟机的base，p存储当前函数的Proto。restorestack与之前的funcr相呼应，估计是防止func的指针不小心用着给用丢了。如果没有可变参数则，base指向func+1位置，top指向base+参数个数位置，以前讲过，我们回忆一下，如果ind&gt;0返回bade+(ind-1)，如果..&lt;ind&lt;0返回top+ind，如果ind=0返回当前函数。如果有可变参数的话，先存储总参数个数，我们在调用有可变参数的函数时，对此特性是不知的，所以会将所有参数入栈，lua_call处理时也将此作为参数处理，所以要依据此函数是否有可变参数再决定是否执行if (L-&gt;top &gt; base + p-&gt;numparams) L-&gt;top = base + p-&gt;numparams;来清除多余的参数，adjust_varargs这个函数挺离谱的，它把非可变参数拷贝到栈上，返回的base就是旧top，可变参数就在base下面。我们可以看一下OP_VARAGE的执行代码： 123456789101112131415161718192021case OP_VARARG: &#123; int b = GETARG_B(i) - 1; int j; CallInfo *ci = L-&gt;ci; int n = cast_int(ci-&gt;base - ci-&gt;func) - cl-&gt;p-&gt;numparams - 1; if (b == LUA_MULTRET) &#123; Protect(luaD_checkstack(L, n)); ra = RA(i); /* previous call may change the stack */ b = n; L-&gt;top = ra + n; &#125; for (j = 0; j &lt; b; j++) &#123; if (j &lt; n) &#123; setobjs2s(L, ra + j, ci-&gt;base - n + j); &#125; else &#123; setnilvalue(ra + j); &#125; &#125; continue; &#125; 取出操作数b，注意减了一，取出当前的CallInfo，接下来就是计算可变参数个数n了，base-func是所有参数个数加一(函数不做参数)，然后减去固定参数加一，结果就是可变参数个数。如果b等于LUA_MULTRET即-1，则b=n即取出所有可变参数，接下来的for就是取出操作了。我们回到原来的函数，ci = inc_ci(L);修改虚拟机当前的ci，ci的func指向当前函数，ci的base和L的base都为我们之前申明的新base，ci的top指向当前函数可到的最大值。L-&gt;savedpc = p-&gt;code;开始改变lua虚拟机指令了，原来的指令已经存到了原来的CallInfo里，然后存储返回值个数和tailcalls，这里的tailcalls是尾调用，在函数执行时才能获得值。后面不重要，最后返回PCRLUA。下面是调用C闭包函数，大致差不多，而且它对可变参数熟视无睹，其实C函数本来就没这概念。n = (*curr_func(L)-&gt;c.f)(L);执行函数，n则是返回值的个数，这个我们以前写过，其实还可以返回一个负数来表示yield的返回，一般我们也不会在自己的C函数里写协程就是了。luaD_poscall(L, L-&gt;top - n);则用来回复运行状态，包括CallInfo改回，savepc的改变等。在lua闭包里，其实也有，不过是在上一级函数的luaV_execute(L, 1);里执行到return系列字节码的时候。看来CallInfo也不是什么神奇的东西，只是存储函数的信息的结构体。 luaB_coresume运行协程有的时候，弄清结构以后，读源码真的不难。 12345678910111213141516static int luaB_coresume (lua_State *L) &#123; lua_State *co = lua_tothread(L, 1); int r; luaL_argcheck(L, co, 1, &quot;coroutine expected&quot;); r = auxresume(L, co, lua_gettop(L) - 1); if (r &lt; 0) &#123; lua_pushboolean(L, 0); lua_insert(L, -2); return 2; /* return false + error message */ &#125; else &#123; lua_pushboolean(L, 1); lua_insert(L, -(r + 1)); return r + 1; /* return true + `resume&#x27; returns */ &#125;&#125; lua_State *co = lua_tothread(L, 1);取出第一个协程参数，auxresume是执行的主体，r是yield传的参数个数，错误则返回一个负数，后面的栈操作，用于注入信息，我们看这个关键函数。 lbaselib.c1234567891011121314151617181920212223static int auxresume (lua_State *L, lua_State *co, int narg) &#123; int status = costatus(L, co); if (!lua_checkstack(co, narg)) luaL_error(L, &quot;too many arguments to resume&quot;); if (status != CO_SUS) &#123; lua_pushfstring(L, &quot;cannot resume %s coroutine&quot;, statnames[status]); return -1; /* error flag */ &#125; lua_xmove(L, co, narg); lua_setlevel(L, co); status = lua_resume(co, narg); if (status == 0 || status == LUA_YIELD) &#123; int nres = lua_gettop(co); if (!lua_checkstack(L, nres + 1)) luaL_error(L, &quot;too many results to resume&quot;); lua_xmove(co, L, nres); /* move yielded values */ return nres; &#125; else &#123; lua_xmove(co, L, 1); /* move error message */ return -1; /* error flag */ &#125;&#125; costatus(L, co);返回co协程的状态，实现方式挺有趣的，注意协程处于初始化也属于suspended状态。后面检测参数是否超额和协程是否为suspended状态，只有suspended才能resume。lua_xmove(L, co, narg);用于两个协程间移动narg个参数。lua_resume(co, narg);是真正用来实现的函数，它与yield一样的，都提供了CAPI，我们搞嵌入开发时也能用的。有没有觉得lua比我们小心好多倍，一个函数套这么多皮，有点离谱哦。返回的是lua_State的状态，虽然协程是用lua_State实现的，但两者并不等价，之前创建的时候就说过了，lua_State状态如下： 123456/* thread status; 0 is OK */#define LUA_YIELD 1#define LUA_ERRRUN 2#define LUA_ERRSYNTAX 3#define LUA_ERRMEM 4#define LUA_ERRERR 5 0表示正常，1表示挂起，其它用于表示各种错误，错误为什么分这么多，当然是为了便于调试了，以后再说。lua_resume返回0和yield，此函数正常执行，并通过lua_xmove将返回值移动。对于lua_resume的内容，就算不看都可以猜个大概了，就是两台虚拟机互相呼叫传参而已。 luaB_yield挂起协程这个简单得离谱 123static int luaB_yield (lua_State *L) &#123; return lua_yield(L, lua_gettop(L));&#125; 为了防止说我水段落，我就继续看看lua_yield的具体内容。 ldo.c12345678910LUA_API int lua_yield (lua_State *L, int nresults) &#123; luai_userstateyield(L, nresults); lua_lock(L); if (L-&gt;nCcalls &gt; L-&gt;baseCcalls) luaG_runerror(L, &quot;attempt to yield across metamethod/C-call boundary&quot;); L-&gt;base = L-&gt;top - nresults; /* protect stack slots below */ L-&gt;status = LUA_YIELD; lua_unlock(L); return -1;&#125; luai_userstateyield又是一个空函数，lua还真有趣。if用来报错，跳过。L-&gt;base = L-&gt;top - nresults;移动base准备接受resume的参数了，L-&gt;status = LUA_YIELD;修改协程为挂起状态，return -1;还记得之前的luaD_precall吗，里面不就有一个检测是否yield的语句嘛。看来yield的实现也就如此了。 字符串的实现字符串为何如此重要，你可能觉得在c里不就是一个char*或char[]吗，其实gcc编译器隐藏了字符串在汇编下的表现，lua的实现类似于此，字符串的存储大有学问，准确来说，可变内存的对象处理都是不易的，cpu可没有智慧来看出字符串的长度，我们来看看lua如何存储字符串的。 lua_pushlstring函数这是向栈压入string的核心方法，其它都基于此函数。 1234567LUA_API void lua_pushlstring (lua_State *L, const char *s, size_t len) &#123; lua_lock(L); luaC_checkGC(L); setsvalue2s(L, L-&gt;top, luaS_newlstr(L, s, len)); api_incr_top(L); lua_unlock(L);&#125; 看了这么多lua源码的你，应该一眼就发现了luaS_newlstr()就是创建字符串的核心函数了。我们来深入了解一下它。 lstring.c12345678910111213141516171819TString *luaS_newlstr (lua_State *L, const char *str, size_t l) &#123; GCObject *o; unsigned int h = cast(unsigned int, l); /* seed */ size_t step = (l&gt;&gt;5)+1; /* if string is too long, don&#x27;t hash all its chars */ size_t l1; for (l1=l; l1&gt;=step; l1-=step) /* compute hash */ h = h ^ ((h&lt;&lt;5)+(h&gt;&gt;2)+cast(unsigned char, str[l1-1])); for (o = G(L)-&gt;strt.hash[lmod(h, G(L)-&gt;strt.size)]; o != NULL; o = o-&gt;gch.next) &#123; TString *ts = rawgco2ts(o); if (ts-&gt;tsv.len == l &amp;&amp; (memcmp(str, getstr(ts), l) == 0)) &#123; /* string may be dead */ if (isdead(G(L), o)) changewhite(o); return ts; &#125; &#125; return newlstr(L, str, l, h); /* not found */&#125; 返回值为TString，这就是lua用来存字符串的C结构体了。GCObject *o;创建可回收对象o。 12345unsigned int h = cast(unsigned int, l); /* seed */ size_t step = (l&gt;&gt;5)+1; /* if string is too long, don&#x27;t hash all its chars */ size_t l1; for (l1=l; l1&gt;=step; l1-=step) /* compute hash */ h = h ^ ((h&lt;&lt;5)+(h&gt;&gt;2)+cast(unsigned char, str[l1-1])); 这一段用于计算字符串的Hash值，最终将Hash值存入h。for (o = G(L)-&gt;strt.hash[lmod(h, G(L)-&gt;strt.size)]; o != NULL;o = o-&gt;gch.next)比较复杂，我们分解来看。G(L)-&gt;strt是全局状态机中用于存储字符串的stringtable(字符串表)，str.hash[]即用来取出相应字符串(GCObject类型)。strt.size是字符串表的容量，lmod则用于对容量取模，保证数据在stringtable内的基本操作了。结合o != NULL，我们可以知道，如果hash位置非空当然话，我们取出o-&gt;gch.next，还非空则继续next。最终我们要取出空位置来存储数据。我们看看gch.next是什么东东。 1234567891011121314#define CommonHeader GCObject *next; lu_byte tt; lu_byte markedtypedef struct GCheader &#123; CommonHeader;&#125; GCheader;union GCObject &#123; GCheader gch; union TString ts; union Udata u; union Closure cl; struct Table h; struct Proto p; struct UpVal uv; struct lua_State th; /* thread */&#125;; 仔细看看，其实就是每个基本的TString都会存一个空的GCObject指针，这其实是用于解决Hash冲突的基本方法—单向链表。TString *ts = rawgco2ts(o);将这块内存地址转化为TString类型，ts-&gt;tsv.len == l和memcmp(str, getstr(ts), l)则是比较内存大小，看是否能存此数据，通过则进行GC标记并返回对象指针。否则执行newlstr(L, str, l, h)来创建，具体如何，我们继续看。 123456789101112131415161718192021222324static TString *newlstr (lua_State *L, const char *str, size_t l, unsigned int h) &#123; TString *ts; stringtable *tb; if (l+1 &gt; (MAX_SIZET - sizeof(TString))/sizeof(char)) luaM_toobig(L); ts = cast(TString *, luaM_malloc(L, (l+1)*sizeof(char)+sizeof(TString))); ts-&gt;tsv.len = l; ts-&gt;tsv.hash = h; ts-&gt;tsv.marked = luaC_white(G(L)); ts-&gt;tsv.tt = LUA_TSTRING; ts-&gt;tsv.reserved = 0; memcpy(ts+1, str, l*sizeof(char)); ((char *)(ts+1))[l] = &#x27;\\0&#x27;; /* ending 0 */ tb = &amp;G(L)-&gt;strt; h = lmod(h, tb-&gt;size); ts-&gt;tsv.next = tb-&gt;hash[h]; /* chain new entry */ tb-&gt;hash[h] = obj2gco(ts); tb-&gt;nuse++; if (tb-&gt;nuse &gt; cast(lu_int32, tb-&gt;size) &amp;&amp; tb-&gt;size &lt;= MAX_INT/2) luaS_resize(L, tb-&gt;size*2); /* too crowded */ return ts;&#125; 创建指针ts和tb，然后判断字符串长度是否过长，也就是lua字符串还有长度限制，实际就是size_t的大小，不同系统有些差异。继续看吧，luaM_malloc分配内存，大小是实际数据+用于封装的TString结构体，l+1是因为要存储\\\\0表示字符串结束，ts+1则表示跳过TString所占的内存。然后一系列初始化，memcpy(ts+1, str, l*sizeof(char));((char *)(ts+1))[l] = &#39;\\0&#39;; /* ending 0 */进行字符串数据的拷贝。然后 12345tb = &amp;G(L)-&gt;strt;h = lmod(h, tb-&gt;size);ts-&gt;tsv.next = tb-&gt;hash[h]; /* chain new entry */tb-&gt;hash[h] = obj2gco(ts);tb-&gt;nuse++; 则是将字符串放入全局状态机的stringtable。放入方式是更改相同Hash入口的TString，主要比较快，改改指针就行，放入末尾的话，还要遍历过去，不太方便。最后则是看nuse(个数)是否超过size(容量)，超过则进行扩容，都是常规操作了。 结尾到这里其实就没什么重要的东西了。我们可以看到，lua中string的存储结构是TString加具体内容，原来我以为它在TString存了指向数据的指针，但并没有这样，可能是为了加快访问的速度吧。 表的实现最后再来看看，我们几乎万能的表吧。表除了创建还有各种操作，我们逐个来解读。table比较特别，不能从C数据直接得到，所以我们从创建表的函数开始。 lua_createtable函数至于#define lua_newtable(L) lua_createtable(L, 0, 0)不讲也罢。 1234567LUA_API void lua_createtable (lua_State *L, int narray, int nrec) &#123; lua_lock(L); luaC_checkGC(L); sethvalue(L, L-&gt;top, luaH_new(L, narray, nrec)); api_incr_top(L); lua_unlock(L);&#125; 入栈操作，主要函数还是luaH_new(L, narray, nrec)，来深入探究一下吧： ltable.c1234567891011121314Table *luaH_new (lua_State *L, int narray, int nhash) &#123; Table *t = luaM_new(L, Table); luaC_link(L, obj2gco(t), LUA_TTABLE); t-&gt;metatable = NULL; t-&gt;flags = cast_byte(~0); /* temporary values (kept only if some malloc fails) */ t-&gt;array = NULL; t-&gt;sizearray = 0; t-&gt;lsizenode = 0; t-&gt;node = cast(Node *, dummynode); setarrayvector(L, t, narray); setnodevector(L, t, nhash); return t;&#125; Table *t = luaM_new(L, Table);直接为Table分配内存并保存首地址，luaC_link()则将Table纳入回收对象。然后一系列的初值设定，node用于存储k-v形式的值，array用于存储顺序值，最后设置array和hash各部分的大小，基本都是置为lua里的nil类型，注意这与C里面的NULL是有区别的。实际上，如果看过字节码就会知道，创建表一般还要配OP_SETLIST来初始化array元素和OP_SETTABLE来初始化hash元素，我们来看看字节码吧： 12345678910111213141516171819202122case OP_SETLIST: &#123; int n = GETARG_B(i); int c = GETARG_C(i); int last; Table *h; if (n == 0) &#123; n = cast_int(L-&gt;top - ra) - 1; L-&gt;top = L-&gt;ci-&gt;top; &#125; if (c == 0) c = cast_int(*pc++); runtime_check(L, ttistable(ra)); h = hvalue(ra); last = ((c-1)*LFIELDS_PER_FLUSH) + n; if (last &gt; h-&gt;sizearray) /* needs more space? */ luaH_resizearray(L, h, last); /* pre-alloc it at once */ for (; n &gt; 0; n--) &#123; TValue *val = ra+n; setobj2t(L, luaH_setnum(L, h, last--), val); luaC_barriert(L, h, val); &#125; continue; &#125; 和 1234case OP_SETTABLE: &#123; Protect(luaV_settable(L, ra, RKB(i), RKC(i))); continue; &#125; 后一个比较简单，主要还是因为泛用性高，所有我们看前一个。ra是表在栈上的索引，n是要加入的元素个数，c的话好像用处不大，目前我见到的都是1，h用于存储要写入数据的表的指针。如果n=0，则准备将ra上的元素都写入表。h = hvalue(ra);取出我们之前创建的表，last似乎和表原来是否有初值有关c也是一样，但这个字节码，都是在空表之后，只能说这是程序员的严谨吧，虽然不太可能发生，但还是要检测，也就是last是扩充后表array部分的大小，不够则luaH_resizearray进行扩容。接下来就是for循环将栈上的值通过luaH_setnum来一个个写入表，从后往前写，这样可以顺便清理一下栈。 元素获取由上部分，我们可以知道，往array里添元素的核心函数是luaH_setnum，我们来看看它： 12345678910TValue *luaH_setnum (lua_State *L, Table *t, int key) &#123; const TValue *p = luaH_getnum(t, key); if (p != luaO_nilobject) return cast(TValue *, p); else &#123; TValue k; setnvalue(&amp;k, cast_num(key)); return newkey(L, t, &amp;k); &#125;&#125; 参数好理解，t是表，key是array的索引，看到这我们可以合理猜想array的长度不能超过int的最大值。返回TValue的指针，这其实是一个获得表对应位置指针的函数，修改实际在之前的函数setobj2t里完成的。第一步判断对应位置是否有值，没有则先创建key，是TValue类型中的number，接着通过newkey创建此key对应值的TValue，并返回。这样来看在lua里对表的索引不论array还是hash都是一样的，事实上，看过字节码的伙伴都知道，表索引使用的字节码其实都是OP_GETTABLE，我们来一看究竟吧，从字节码直接可以知道关键函数是luaV_gettable，它的源码如下： lvm.c123456789101112131415161718192021222324void luaV_gettable (lua_State *L, const TValue *t, TValue *key, StkId val) &#123; int loop; for (loop = 0; loop &lt; MAXTAGLOOP; loop++) &#123; const TValue *tm; if (ttistable(t)) &#123; /* `t&#x27; is a table? */ Table *h = hvalue(t); const TValue *res = luaH_get(h, key); /* do a primitive get */ if (!ttisnil(res) || /* result is no nil? */ (tm = fasttm(L, h-&gt;metatable, TM_INDEX)) == NULL) &#123; /* or no TM? */ setobj2s(L, val, res); return; &#125; /* else will try the tag method */ &#125; else if (ttisnil(tm = luaT_gettmbyobj(L, t, TM_INDEX))) luaG_typeerror(L, t, &quot;index&quot;); if (ttisfunction(tm)) &#123; callTMres(L, val, tm, t, key); return; &#125; t = tm; /* else repeat with `tm&#x27; */ &#125; luaG_runerror(L, &quot;loop in gettable&quot;);&#125; 参数好理解，最后一个是索引后的TValue存放在栈上的相对位置。这个函数好复杂，似乎有好多功能，但这是笔者不太理解的，只知道索引的关键部分在if(ttistable(t)) &#123;**&#125;里面，似乎也只会用到这部分。内容简单明了，通过luaH_get获得TValue，没有问题则将表放入栈后，然后直接结束函数。更详细的索引也挺无聊的，根据TValue的类型不同，再分别调用不同的函数。 表结构体我们没有看将表的移除的源码，对于array我们一般没有移除操作，实际上表是通过table库实现移除操作的，而移除操作实际是将值置为nil，实在没什么看点。我们稍微看看表的结构体吧。 lobject.h1234567891011typedef struct Table &#123; CommonHeader; lu_byte flags; /* 1&lt;&lt;p means tagmethod(p) is not present */ lu_byte lsizenode; /* log2 of size of `node&#x27; array */ struct Table *metatable; TValue *array; /* array part */ Node *node; Node *lastfree; /* any free position is before this position */ GCObject *gclist; int sizearray; /* size of `array&#x27; array */&#125; Table; 对于一份源码，读了大部分框架以后，再去细读还是挺索然无味的，因为我们大致都能预测该存储些什么了，而一些基础操作和我们平常写的也不会有太大区别。node和array分别存储hash和array部分的内容。lsizenode和sizearray存储相应部分的大小，metatable是元表信息，Node是由TKey和TValue组成的结构体。 结尾说实话，最后两部分还是挺失望的，本以为应该会有些有趣的思想在里面，但仔细一读，发现也就不过如此，但已经写了不少，就直接附上算了，对协程的理解才是这篇文章的主要部分。“大部分程序员都是做苦力的。”我似乎也属于这一梯度，我也是时候想要突破了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"程序设计","slug":"程序设计","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"框架排序","slug":"框架排序","date":"2021-11-15T10:35:39.000Z","updated":"2022-10-14T23:47:08.078Z","comments":true,"path":"archives/2021-11-15-框架排序/","link":"","permalink":"http://example.com/archives/2021-11-15-%E6%A1%86%E6%9E%B6%E6%8E%92%E5%BA%8F/","excerpt":"","text":"终于把文章和动态的排序问题解决了。","categories":[],"tags":[]},{"title":"时代的变迁","slug":"时代的变迁","date":"2021-11-11T09:21:31.000Z","updated":"2022-10-14T23:47:08.078Z","comments":true,"path":"archives/2021-11-11-时代的变迁/","link":"","permalink":"http://example.com/archives/2021-11-11-%E6%97%B6%E4%BB%A3%E7%9A%84%E5%8F%98%E8%BF%81/","excerpt":"","text":"当我认识你的时候，你却处于辉煌的末期，几年过后的如今你已是一个全新的面貌了。dbae03b7","categories":[],"tags":[]},{"title":"lua通读之lua源码分析","slug":"lua通读之lua源码分析","date":"2021-11-09T23:47:31.000Z","updated":"2022-10-14T23:47:06.798Z","comments":true,"path":"archives/2021-11-10-lua通读之lua源码分析/","link":"","permalink":"http://example.com/archives/2021-11-10-lua%E9%80%9A%E8%AF%BB%E4%B9%8Blua%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"前言终于来到我盼望已久的源码阅读了，但我又开始思考一个我经常问的问题，源码该怎么读？是否要全读一遍呢？比如我们的lua是一个类编译器，有必要去读大家都学过的词法分析和句法分析部分吗？读源码要从入口函数main开始吗？读源码更重要的是读出思想，如果不懂得几种程序的设计模式没有摆脱以往的思想，你会发现java源码，怎么也读不懂，甚至会觉得莫名其妙。实际上理解设计模式的好处，就能体会更加高效的编程，这才是我们学习的目的。读源码，我们首先应该去读程序所定义的数据结构，在C语言里是struct，而java等面向对象的语言里就是class。在如今模块化的编程时代，我们大部分都有一直面向对象的编程思想，在我看来这是一种优秀的数据组织形式，它将大部分的实体与相应操作全都封装了，对于先整体后局部读源码有许多便利之处。多说无益，我们直接开始lua的源码之旅吧。 lua解释器我们先来看看官方程序是如何利用lua虚拟机实现解释器的。 main函数lua的入口函数长这样 lua.c123456789101112131415int main (int argc, char **argv) &#123; int status; struct Smain s; lua_State *L = lua_open(); /* create state */ if (L == NULL) &#123; l_message(argv[0], &quot;cannot create state: not enough memory&quot;); return EXIT_FAILURE; &#125; s.argc = argc; s.argv = argv; status = lua_cpcall(L, &amp;pmain, &amp;s); report(L, status); lua_close(L); return (status || s.status) ? EXIT_FAILURE : EXIT_SUCCESS;&#125; int status;声明一个用来存储返回状态的变量，0表示一切正常，都是C的基本内容了。为什么我可以看出来？看最后一句return (status || s.status) ? EXIT_FAILURE : EXIT_SUCCESS;，0也表示false，这是我们发现了另一个结构体struct Smain s;，它的定义在上面几行： lua.c12345struct Smain &#123; int argc; char **argv; int status;&#125;; 意思也很明显，用来存储参数和返回状态，不知你有没有一个疑问，为什么会有两个status，实际上，这属于调试范畴的东西，我们使用的lua也是一门程序设计语言，当然也有报错的时候，但程序内部会对于lua的错误会存入debug部分，也就是说两个状态分别对应C的运行状态与lua的运行状态，现在少将点，对于Debug的技术，我想另外写一篇文章，所以以后我们跳过debug了哦。lua_State *L = lua_open();创建一个虚拟机，我们搞嵌入开发的时候再熟悉不过了。这里我们要注意一点，我们的读的是lua程序的源码(就是指lua.c这个文件)，而不是lua这门语言的源码，就比如Smain这个在lua.c里定义的结构体，我们搞嵌入开发实际上是用不了的。我们阅读源码遵循先整体后局部的思想，目的是减少读我们不需要的源码，提高阅读效率，应该理解哦。 1234if (L == NULL) &#123; l_message(argv[0], &quot;cannot create state: not enough memory&quot;); return EXIT_FAILURE; &#125; 虚拟机创建失败，则报内存不够的错误，值得注意在C里面并没有try和catch进行专业的错误捕捉，一切基本通过返回值是否为NULL或-1来判断。至于创建虚拟机可能出现的问题是lua源码的事，我们等下再说。l_message()是封装在这个文件的报错处理函数，不是太重要。 12s.argc = argc;s.argv = argv; 将参数传递给Smain，lua_close(L);关闭虚拟机，这些没什么好说的，我们重点关注中间两句话，这应该是核心部分。 12status = lua_cpcall(L, &amp;pmain, &amp;s);report(L, status); lua_cpcall()是封装在lua里的函数，参数会作为一个lightuserdata(实际上就是一个void*，可以随意使用，具体转型要自己写，你自己传的东西还不知道吗)放入栈顶，然后调用pmain函数，调用也是使用lua虚拟机来运行，与lua_call一样调用C的函数，不过可以只在pmain依赖栈来运行，所以你做不了什么返回值操作，只有lua系统的返回值。而report(L, status);则是一个用于打印报错信息的函数，属于Debug部分。 pmain函数我们来看pmain的实现： lua.c1234567891011121314151617181920212223242526272829303132333435static int pmain (lua_State *L) &#123; struct Smain *s = (struct Smain *)lua_touserdata(L, 1); char **argv = s-&gt;argv; int script; int has_i = 0, has_v = 0, has_e = 0; globalL = L; if (argv[0] &amp;&amp; argv[0][0]) progname = argv[0]; lua_gc(L, LUA_GCSTOP, 0); /* stop collector during initialization */ luaL_openlibs(L); /* open libraries */ lua_gc(L, LUA_GCRESTART, 0); s-&gt;status = handle_luainit(L); if (s-&gt;status != 0) return 0; script = collectargs(argv, &amp;has_i, &amp;has_v, &amp;has_e); if (script &lt; 0) &#123; /* invalid args? */ print_usage(); s-&gt;status = 1; return 0; &#125; if (has_v) print_version(); s-&gt;status = runargs(L, argv, (script &gt; 0) ? script : s-&gt;argc); if (s-&gt;status != 0) return 0; if (script) s-&gt;status = handle_script(L, argv, script); if (s-&gt;status != 0) return 0; if (has_i) dotty(L); else if (script == 0 &amp;&amp; !has_e &amp;&amp; !has_v) &#123; if (lua_stdin_is_tty()) &#123; print_version(); dotty(L); &#125; else dofile(L, NULL); /* executes stdin as a file */ &#125; return 0;&#125; 12struct Smain *s = (struct Smain *)lua_touserdata(L, 1);char **argv = s-&gt;argv; 从栈顶取出由userdata封装的参数，对于lightuserdata与userdata的区别，其实如果从C语言本身来看都是*void指针，实际上这和垃圾回收有关，我们来看一下lua的数据类型TValue是怎么定义的(lobject.h)： 12345678910111213141516/*** Union of all Lua values*/typedef union &#123; GCObject *gc; void *p; lua_Number n; int b;&#125; Value;/*** Tagged Values*/#define TValuefields Value value; int tttypedef struct lua_TValue &#123; TValuefields;&#125; TValue; tt用来标识类别，value存储具体数据。在Value里，我们看到两种指针类型GCObject和void，实际上分别对于了userdata和lightuserdata也就是说，后者不纳入lua的垃圾回收器，需要用户自己进行内存回收，而且lua的API只又lua_pushlightuserdata，也就是说你自己在C里创建的东西自己去管理吧。这里还要讲的是数据在lu虚拟机里的索引，我们看到这里它不像我们一样使用-1来索引栈顶数据，而使用了1，这时我们可能会好奇0是什么，为了理解我们随便取一个索引函数看一下源码(lua_tonumber() in lapi.c)： 123456789101112131415161718192021222324252627282930313233343536static TValue *index2adr (lua_State *L, int idx) &#123; if (idx &gt; 0) &#123; TValue *o = L-&gt;base + (idx - 1); api_check(L, idx &lt;= L-&gt;ci-&gt;top - L-&gt;base); if (o &gt;= L-&gt;top) return cast(TValue *, luaO_nilobject); else return o; &#125; else if (idx &gt; LUA_REGISTRYINDEX) &#123; api_check(L, idx != 0 &amp;&amp; -idx &lt;= L-&gt;top - L-&gt;base); return L-&gt;top + idx; &#125; else switch (idx) &#123; /* pseudo-indices */ case LUA_REGISTRYINDEX: return registry(L); case LUA_ENVIRONINDEX: &#123; Closure *func = curr_func(L); sethvalue(L, &amp;L-&gt;env, func-&gt;c.env); return &amp;L-&gt;env; &#125; case LUA_GLOBALSINDEX: return gt(L); default: &#123; Closure *func = curr_func(L); idx = LUA_GLOBALSINDEX - idx; return (idx &lt;= func-&gt;c.nupvalues) ? &amp;func-&gt;c.upvalue[idx-1] : cast(TValue *, luaO_nilobject); &#125; &#125;&#125;LUA_API lua_Number lua_tonumber (lua_State *L, int idx) &#123; TValue n; const TValue *o = index2adr(L, idx); if (tonumber(o, &amp;n)) return nvalue(o); else return 0;&#125; index2adr()是最终提供索引结果的函数，并且返回相应的TValue。如果idx&gt;0则返回base+(idx-1)处的值，如果idx&gt;LUA_REGISTRYINDEX则返回top+indx，剩下的我们基本没用，因为在lua.h里我们可以看到#define LUA_REGISTRYINDEX (-10000)，也就是说，0返回top,-1返回top-1,1返回base+1，这里我们涉及了lua虚拟机的两个指针top和base，而且top并非指向最上面的元素，而是指向NULL，还记得我们之前用过的lua_gettop()吗？(lapi.c)： 1234#define cast_int(i) cast(int, (i))LUA_API int lua_gettop (lua_State *L) &#123; return cast_int(L-&gt;top - L-&gt;base);&#125; 这里我们要讲一下base指针了，实际上这存在与函数调用的时候，我们知道lua调用函数的时候都会先将函数入栈，再入参数，实际上调用lua_pcall或lua_call的时候，lua系统会将base指针重新定位为这个函数，所以base+i就会是第i个参数，如果你干过反编译的话，就会发现每一个函数闭包好像都有一个小的虚拟栈，实际上都是lua虚拟机的一部分，base指针以上就是这个小虚拟机，有没有觉得这是一种挺有趣的思想。 1234int script;int has_i = 0, has_v = 0, has_e = 0;globalL = L;if (argv[0] &amp;&amp; argv[0][0]) progname = argv[0]; 前两组变量用来存储lua程序的参数解析结果，lua实际还有好几种用法比如lua -v显示版本信息，lua -i启动交互解释器，等同于lua。这不是我们关注的重点。globalL和progname用来存储程序使用的lua虚拟机和程序名，定义在程序前面： 12static lua_State *globalL = NULL;static const char *progname = LUA_PROGNAME; 接下来是，向虚拟机导入库函数，涉及一些gc操作，主要为了导入后，让库函数不要在回收的对象里。collectargs()用来匹配参数，选项存储到has_i , has_v, has_e里面，返回脚本文件名(非’-‘开头)在参数组里的索引。if{}用来判断是否有脚本参数，否则打印使用信息。如果有has_v则打印版本信息。runargs()针对参数，执行相应操作如-e -l等。if (s-&gt;status != 0) return 0;用来检验运行是否正常，属于”常规操作”了。handle_script(L, argv, script);是我们处理lua脚本的主要文件了，后面几句是用来进入交互环境的，核心是dotty(L);函数。 handle_script函数我们先往上看前一个： lua.c12345678910111213141516static int handle_script (lua_State *L, char **argv, int n) &#123; int status; const char *fname; int narg = getargs(L, argv, n); /* collect arguments */ lua_setglobal(L, &quot;arg&quot;); fname = argv[n]; if (strcmp(fname, &quot;-&quot;) == 0 &amp;&amp; strcmp(argv[n-1], &quot;--&quot;) != 0) fname = NULL; /* stdin */ status = luaL_loadfile(L, fname); lua_insert(L, -(narg+1)); if (status == 0) status = docall(L, narg, 0); else lua_pop(L, narg); return report(L, status);&#125; int status;const char *fname;存储状态和脚本文件名，直接过。getargs(L, argv, n);lua_setglobal(L, &quot;arg&quot;);主要用来将参数放入lua虚拟机的全局变量arg，getargs返回参数的个数。这里指的是对于lua脚本而言的参数，对于lua程序而言就是脚本名后面的参数。官方也已经给出了说明： $ lua -la b.lua t1 t2 the table is like this: arg = { [-2] = “lua”, [-1] = “-la”, [0] = “b.lua”, [1] = “t1”, [2] = “t2” } 接下来的句子是用来检测的，一般都会通过，但还是以防万一。luaL_loadfile(L, fname);载入脚本，在栈顶产生一个函数闭包来封装脚本。lua_insert(L, -(narg+1));将栈顶函数下移narg+1，这里有点忘说了，在执行getargs(L, argv, n);后，此时栈已经多了narg个参数和一个包含参数的表，执行lua_setglobal(L, &quot;arg&quot;);后栈上实际上还有narg个参数在上面，此时函数与参数在栈上的位置实际反了，所以要执行lua_insert来纠正，其实本身没有必要因为在lua脚本里我们又不能直接调用虚拟机上的参数。后面比较简单了，如果status正常则直接docall()执行代码，否则弹出函数和参数，通过report()报错。我们来看看docall()： 12345678910111213static int docall (lua_State *L, int narg, int clear) &#123; int status; int base = lua_gettop(L) - narg; /* function index */ lua_pushcfunction(L, traceback); /* push traceback function */ lua_insert(L, base); /* put it under chunk and args */ signal(SIGINT, laction); status = lua_pcall(L, narg, (clear ? 0 : LUA_MULTRET), base); signal(SIGINT, SIG_DFL); lua_remove(L, base); /* remove traceback function */ /* force a complete garbage collection in case of errors */ if (status != 0) lua_gc(L, LUA_GCCOLLECT, 0); return status;&#125; 仔细一看，它写得还挺专业的。先记录status和base的位置，推入traceback函数并移入底部(base处)，这个主要用于在lua脚本里来进行debug报错，跳过，我以后专门来讲。然后监听中断信号，的确考虑挺多的。lua_pcall()执行函数。然后就是各种恢复操作了——移除中断，移除traceback，进行垃圾回收。看得我自己都忏愧了，自己用惯了那些自带垃圾回收的语言，写C的时候都没考虑过这么多，不过操作系统实际上也会进行管理，不用过于担心就是了。 dotty函数这是用来处理交互环境时的函数，代码如下： lua.c123456789101112131415161718192021static void dotty (lua_State *L) &#123; int status; const char *oldprogname = progname; progname = NULL; while ((status = loadline(L)) != -1) &#123; if (status == 0) status = docall(L, 0, 0); report(L, status); if (status == 0 &amp;&amp; lua_gettop(L) &gt; 0) &#123; /* any result to print? */ lua_getglobal(L, &quot;print&quot;); lua_insert(L, 1); if (lua_pcall(L, lua_gettop(L)-1, 0, 0) != 0) l_message(progname, lua_pushfstring(L, &quot;error calling &quot; LUA_QL(&quot;print&quot;) &quot; (%s)&quot;, lua_tostring(L, -1))); &#125; &#125; lua_settop(L, 0); /* clear stack */ fputs(&quot;\\n&quot;, stdout); fflush(stdout); progname = oldprogname;&#125; 前后都是比较常规的操作，重点在while循环里面。首先会执行loadline(L)，这个函数其实挺复杂的，等下我们再说吧，总之最后在栈顶会产生一个无参数的函数，而下面还存储了需要打印信息(后面解释)。然后调用docall()执行这个函数，然后打印需要打印的信息，这是交互环境特有的一个特性，主要用来监听变量信息。比如你之前有一个全局变量a，在交互环境内就可以直接输入a，就可以打印a的值了，其实等同于代码print(a)，但更加方便了。接下来我们看看loadline()： 123456789101112131415161718static int loadline (lua_State *L) &#123; int status; lua_settop(L, 0); if (!pushline(L, 1)) return -1; /* no input */ for (;;) &#123; /* repeat until gets a complete line */ status = luaL_loadbuffer(L, lua_tostring(L, 1), lua_strlen(L, 1), &quot;=stdin&quot;); if (!incomplete(L, status)) break; /* cannot try to add lines? */ if (!pushline(L, 0)) /* no more input? */ return -1; lua_pushliteral(L, &quot;\\n&quot;); /* add a new line... */ lua_insert(L, -2); /* ...between the two lines */ lua_concat(L, 3); /* join them */ &#125; lua_saveline(L, 1); lua_remove(L, 1); /* remove line */ return status;&#125; lua_settop(L, 0);依据base指针移动top指针位置，都是防止出问题的措施，跳过。pushline()用于将用户输入的一行数据压入虚拟机栈，有0和1两个参数，因为C没有bool类型，所以以整数代替，1表示非函数内输入。这里需要讲一下，lua交互环境的运行状态了，它有两种情况，在命令行的表现是以&gt;或&gt;&gt;开头，&gt;开头属于可以直接执行的状态，输入一行执行一行，此时参数为1，&gt;&gt;一般在输入function后进入，此时你基本可以任意输入，直到输入end结尾，当然还有出现内部函数的情况，此时参数为0。感觉把后面的都说了，我们继续看吧。接下来是一个for循环，直到输入一行，这里的一行是个抽象意，处于&gt;状态回车后就是一行，而&gt;&gt;状态需要整个函数闭包输入结束才行。luaL_loadbuffer()载入栈顶的数据，incomplete()根据返回状态，判断是否结束。这就是我之前说的。如果输入的一句话合格的话，就会直接break调，否则开始pushline()处于&gt;&gt;状态的代码，后面部分就是将新读取的字符串拼接了。这里实际上有几个问题没有解决，就是luaL_loadbuffer()对错误返回的结果问题，这个先留到后面，到时候我们会深入分析lua_load函数，最后两句用处不大，直接跳过。这是我们要注意一下，栈顶存在的字符串最后都会被luaL_loadbuffer()掉，也就是说，此函数最后的结果如我们之前所说，是一个函数。 lua编译器接下来我们将目光投向lua的编译器，但我么需要注意lua并不能编译为操作系统的可执行文件，而是lua虚拟机的字节码文件。 main函数luac.c123456789101112131415int main(int argc, char* argv[])&#123; lua_State* L; struct Smain s; int i=doargs(argc,argv); argc-=i; argv+=i; if (argc&lt;=0) usage(&quot;no input files given&quot;); L=lua_open(); if (L==NULL) fatal(&quot;not enough memory for state&quot;); s.argc=argc; s.argv=argv; if (lua_cpcall(L,pmain,&amp;s)!=0) fatal(lua_tostring(L,-1)); lua_close(L); return EXIT_SUCCESS;&#125; 我们发现大部分代码类似于lua解释器。doargs()用来进行参数匹配，同时对于可执行参数就直接执行了，如-v，不过有些信息就直接写入了全局变量。 12345678#define PROGNAME &quot;luac&quot; /* default program name */#define OUTPUT PROGNAME &quot;.out&quot; /* default output file */static int listing=0; /* list bytecodes? */static int dumping=1; /* dump bytecodes? */static int stripping=0; /* strip debug information? */static char Output[]=&#123; OUTPUT &#125;; /* default output file name */static const char* output=Output; /* actual output file name */static const char* progname=PROGNAME; /* actual program name */ 返回值是脚本的位置。fatal()类似于之前的report()，用于调试。argc-=i; argv+=i;用来充新定位参数起始位置为脚本位置。流程与lua解释器差不多，我们转向pmain函数。 pmain函数luac.c123456789101112131415161718192021222324252627static int pmain(lua_State* L)&#123; struct Smain* s = (struct Smain*)lua_touserdata(L, 1); int argc=s-&gt;argc; char** argv=s-&gt;argv; const Proto* f; int i; if (!lua_checkstack(L,argc)) fatal(&quot;too many input files&quot;); for (i=0; i&lt;argc; i++) &#123; const char* filename=IS(&quot;-&quot;) ? NULL : argv[i]; if (luaL_loadfile(L,filename)!=0) fatal(lua_tostring(L,-1)); &#125; f=combine(L,argc); if (listing) luaU_print(f,listing&gt;1); if (dumping) &#123; FILE* D= (output==NULL) ? stdout : fopen(output,&quot;wb&quot;); if (D==NULL) cannot(&quot;open&quot;); lua_lock(L); luaU_dump(L,f,writer,D,stripping); lua_unlock(L); if (ferror(D)) cannot(&quot;write&quot;); if (fclose(D)) cannot(&quot;close&quot;); &#125; return 0;&#125; 前三句好说，下一句我们见到了一个新的数据类型Proto，这个我们或许要深入了解一下了。不过在此之前我们先读完全部内容吧，其实影响不会太大。lua_checkstack()见多了，用来保证还能继续往栈里写数据。接下来对所有合格参数都执行一遍luaL_loadfile()，可见luac还可以批量编译，而且还会打包为一个文件，此时lua虚拟机栈上已经有相应数量的函数了。combine()有点复杂，还涉及字节码，我们先放一放，总之它将我们栈上的函数打包为了一个Proto。listing用于打印字节码信息，对应-l参数，dumping默认开启，用于输出字节码文件，可以使用-p取消。里面一个重要的函数是luaU_dump(L,f,writer,D,stripping);，它将proto文件f打包到输出流writer上去，stripping表示是否有调试信息，默认不包含。 Proto结构体想必你已经听过许多遍，lua执行过程是先将lua编译为字节码，再在虚拟机上执行。实际上，我们之前学过的用CAPI去操作虚拟机，实际上，这些操作有一个对应的集合，就是字节码。在执行lua_load后，虚拟机会将脚本封装为一个函数，这个函数即包含了脚本编译后的字节码，我们留到以后说，而Proto则是函数的超集，或者说栈上TValue的最后结果是Proto，实际上这里有比较复杂的指向关系，我们先跳过，我们去看一看Proto吧： luac.c1234567891011121314151617181920212223242526/*** Function Prototypes*/typedef struct Proto &#123; CommonHeader; TValue *k; /* constants used by the function */ Instruction *code; struct Proto **p; /* functions defined inside the function */ int *lineinfo; /* map from opcodes to source lines */ struct LocVar *locvars; /* information about local variables */ TString **upvalues; /* upvalue names */ TString *source; int sizeupvalues; int sizek; /* size of `k&#x27; */ int sizecode; int sizelineinfo; int sizep; /* size of `p&#x27; */ int sizelocvars; int linedefined; int lastlinedefined; GCObject *gclist; lu_byte nups; /* number of upvalues */ lu_byte numparams; lu_byte is_vararg; lu_byte maxstacksize;&#125; Proto; CommonHeader;和gclist与垃圾回收相关，我们下次专门讲。*k存储函数里的常量，*code存储函数内的指令，**p是函数内的函数数组，lua函数套函数应该不少见。*lineinfo存储源码行号，*source存储源码，主要用于debug。*locvars存储本地变量，就是有local申明的变量，注意这里存储的只是相关信息，如名称，它的值实际存在lua虚拟机里，等我们熟悉字节码操作后，就能更深理解存储机制了。*upvalues存储上下文变量，主要存在于多重函数嵌套里面。一个函数的upvalue指的是，它之前级函数的local函数，这里已经有许多涉及字节码的理念了，先放放。int sizeupvalues;int sizek;/* size of k */int sizecode;int sizelineinfo;int sizep;/* size of p */int sizelocvars;存储各个变量的大小，注意不是个数，linedefined和lastlinedefined;是函数的始末行号，用于调试。后面分别是upval个数，参数个数，是否有可变参数，栈最高用到多少。实际上，把Proto当成一个函数也没有问题。 luaU_dump函数int luaU_dump (lua_State* L, const Proto* f, lua_Writer w, void* data, int strip)这个和lua_load类似，具体内容等我讲luac反编译再说。data提供输出流，w提供输出的具体函数，f就是需要打包的内容，strip表示是否打包调试信息。 字节码为了更加深入了解lua的函数和，lua代码究竟如何在虚拟机上运行的，我们就必需深入了解一下字节码了。 字节码大全虽然没有必要但还是讲一下，lua的所有字节码和它们是如何影响lua虚拟机的运行的。操作码有两部分组成，操作和操作数。对于操作数有三种情况，一是虚拟栈索引(记为v)，另一种是函数里里的常数表索引(记为c)，最后就是布尔数(只要0和1，记为b)，在lua里所有立即数据和名称都会计入函数的常量表，如local a = 3里的a和3。 关于索引的问题每一个函数，都会有base指针的移动，在字节码里是从0开始索引，不过还有一点，就是如果有参数的话，就会占用相应参数个位置。 赋值操作以后我在后面标一个符号，表示索引的种类。OP_MOVE(A v, B v) A=B，OP_LOADK(A v, B c) A=B，OP_LOADBOOL(A v, B b, C b) A=B,if(C) pc++，这个指令看似复杂，但实际就是进行布尔赋值或运算的时候会用到，pc就是程序计数器，pc++即跳过下一条指令。自己用对lua的and or语句编译一下，就能发现其中的奥秘。OP_LOADNIL(A v, B nil) A=nil，这个比较特别，B基本都是0。 表相关接下来会有几个需要的表，upval表和global表。OP_GETUPVAL(A v, B c) A=upval[B]，OP_SETUPVAL(A v, B c) upval[B] = A，OP_GETGLOBAL(A v, B c) A=global[B]，OP_SETGLOBAL(A v, B c) global[B]=A，OP_GETTABLE(A v, B v, C c) A=B[C]，OP_SETTABLE(A v, B c, C v) A[B]=C，OP_NEWTABLE(A v, B c, C c)创建一个表，array大小为B，hash大小为C，后面一般紧跟相应数量的OP_LOAD*和OP_SETTABLE来填数据，最后OP_SETLIST(A v, B c, C c),B和C同上，有时opcode是联合使用的，取决于编译器load_*的内部实现。OP_SELF(A v, B v, C c)，在lua传输self表时特有的一个函数，注意的是这个表在表里是独立存在的，self的变量与表里的变量是不同的，self类似于表私有的变量。 运算OP_ADD(A v, B v, C v) A=B+C，OP_SUB(A v, B v, C v) A=B-C，OP_MUL(A v, B v, C v) A=B*C，OP_DIV(A v, B v, C v) A=B/C，OP_MOD(A v, B v, C v) A=B%C，OP_POW(A v, B v, C v) A=B^C，OP_UNM(A v, B v) A= -B，OP_NOT(A v, B v) A= not B，OP_LEN(A v, B v) A=#B，OP_CONCAT(A v, B v, C v) A= B..C，我们发现所有的运算都在栈上运算，就如我之前所说，在lua里所有的变量值要么存储在栈上，要么在全局表里面。而函数闭包，只存储变量的名称，或立即数据，因为它是需要静态存储到文件里的，lua其实还有优化编译，如对于a = 2+5，lua会直接存储a和7而不是a,2和5。 结构控制OP_JMP(0, B) pc+=B，这里还要讲一下pc指向的是将要执行的指令，一般指向下一条，在这里B是具体整数，一般是正数。OP_EQ(A b, B v, C v) if((B==C)~=A)then pc++，这里实际通过A分开了==和!=，下面同理，OP_LT(A b, B v, C v) if((B&lt;C)~=A)then pc++，OP_LE(A b, B v, C v) if((B&lt;=C)~=A)then pc++，有关lua代码如何转化为字节码，有些什么巧妙之处，我还在反编译那里讲。OP_TEST(A v, B b) if not(A==B)then pc++，OP_TESTSET(A v, B v, C b) if(B==C)then A=B else pc++，这个主要用在复杂的逻辑表达式里。OP_FORLOOP(A v, B) A+=v(A+2)用于for循环，一般会在栈上产生三个值，一个是我们常用的索引，最后一个步长，v(A+2)表示相对A位置加2处的值，B用于指示跳转，一般是负数表示回退。OP_FORPREP(A v, B) A-=v(A+2),pc+=B与OP_TFORLOOP(A v, C) v(A+3),…,v(A+2+C)=A(v(A+1),v(A+2))一般配合使用来遍历表，C表示返回值个数，一般为3，用过pairs和ipairs吧。对于while和repeat，只要jmp和比较其实就能实现了。 函数OP_CALL(A v, B, C) v(A),…v(A+C-2)=A(v(A+1),…v(A+B-1)),B-1和C-1分别是参数和返回值个数，与lua_call使用差不多，但有一个减一操作，即2表示一个参数，有些用处，但现在就当是规定吧。OP_TAILCALL(A v, B, C) return A(v(A+1),…v(A+B-1))类似上一个，用于函数的快速返回。OP_RETURN(A v, B) return v(A+1),…v(A+B-1)标准的函数返回方式。OP_CLOSE(A v) 清除栈上&gt;=A的所有值，OP_CLOSURE(A v,B)取出函数内的闭包到栈上，B是索引，还记得Proto内的Proto，闭包就存在里面。OP_VARARG(A v, B) v(A),…v(A+B-1)=…用来取出B个函数的可变参数到栈上。 字节码总结至此，我们浏览了所有的字节码，只是为了有个大概的印象，实际还是得结合具体的编译结果来看，一般成块出现的，我们可以使用指令luac -l [字节码文件]来查看。对于字节码，我们需要记住，所有要操作的数据都要先入栈，返回值也存在栈上，其实这也就方便了我们通过CAPI来实现C语言与lua的数据交互，当然还可以通过全局变量表。同时我们也看到了，函数Proto并没有存具体的数据，除了那些即时产生的量，而是存储了变量名等变量的特征，我们要清楚，函数是静态存储动态执行的，所以变量的具体值不在函数里也是理所应当的。 函数前面讲了函数的一个重要组成部分Instruction *code即字节码，是时候该从新正视一下函数了，函数属于TValue里Value的GCObject。我们来看一下这条定义链。 123456789101112131415161718192021222324252627282930313233343536373839404142434445//lobject.h/*** Union of all Lua values*/typedef union &#123; GCObject *gc; void *p; lua_Number n; int b;&#125; Value;/*** Closures*/#define ClosureHeader \\ CommonHeader; lu_byte isC; lu_byte nupvalues; GCObject *gclist; \\ struct Table *envtypedef struct CClosure &#123; ClosureHeader; lua_CFunction f; TValue upvalue[1];&#125; CClosure;typedef struct LClosure &#123; ClosureHeader; struct Proto *p; UpVal *upvals[1];&#125; LClosure;typedef union Closure &#123; CClosure c; LClosure l;&#125; Closure;//lstate.h/*** Union of all collectable objects*/union GCObject &#123; GCheader gch; union TString ts; union Udata u; union Closure cl; struct Table h; struct Proto p; struct UpVal uv; struct lua_State th; /* thread */&#125;; 我们看到有Closure和Proto两个，我们使用lua_call一般针对的是Closure，而Proto出现在这里是因为它也是要回收的对象。实际上对于函数有两种，一个是C闭包，还有一个是lua闭包，它们都可以作为函数供lua_call来调用，所以闭包了一个Closure作为统一对象。Proto则是LClosure(lua闭包函数)的主要部分。lua_CFunction f;的申明在lua.h里，格式如下typedef int (*lua_CFunction) (lua_State *L);。垃圾回收还是老话，以后再讲。 combine函数在前面，我们提到了一个combine(L, int)函数，用来将栈上的函数返回为为一个Proto，我们看看它： luac.c123456789101112131415161718192021222324252627static const Proto* combine(lua_State* L, int n)&#123; if (n==1) return toproto(L,-1); else &#123; int i,pc; Proto* f=luaF_newproto(L); setptvalue2s(L,L-&gt;top,f); incr_top(L); f-&gt;source=luaS_newliteral(L,&quot;=(&quot; PROGNAME &quot;)&quot;); f-&gt;maxstacksize=1; pc=2*n+1; f-&gt;code=luaM_newvector(L,pc,Instruction); f-&gt;sizecode=pc; f-&gt;p=luaM_newvector(L,n,Proto*); f-&gt;sizep=n; pc=0; for (i=0; i&lt;n; i++) &#123; f-&gt;p[i]=toproto(L,i-n-1); f-&gt;code[pc++]=CREATE_ABx(OP_CLOSURE,0,i); f-&gt;code[pc++]=CREATE_ABC(OP_CALL,0,1,1); &#125; f-&gt;code[pc++]=CREATE_ABC(OP_RETURN,0,1,0); return f; &#125;&#125; 如果只有一个函数，则直接返回toproto(L,-1);，这个的定义链如下： 123456//luac.h#define toproto(L,i) (clvalue(L-&gt;top+(i))-&gt;l.p)//lua.h#define check_exp(c,e) (e)#define ttisfunction(o) (ttype(o) == LUA_TFUNCTION)#define clvalue(o) check_exp(ttisfunction(o), &amp;(o)-&gt;value.gc-&gt;cl) 转化一下就是toproto(L,-1) := &amp;(L-&gt;top-1)-&gt;value.gc-&gt;cl-&gt;l.p，取出TValue的value(Value)的gc(GCObject)的cl(Closure)的l(LClosure)的p(Proto)，的确是一个复杂的过程，但这也是为了统一处理。对于函数大于1的情况也可以看一看，其实就是将每个函数执行的代码，再封装到一个Proto里面。Proto* f=luaF_newproto(L);创建一个Proto。setptvalue2s(L,L-&gt;top,f); incr_top(L);虽然复杂，但其实就是将Proto封装为TValue并放入栈顶的操作。f-&gt;source=luaS_newliteral(L,&quot;=(&quot; PROGNAME &quot;)&quot;);和f-&gt;maxstacksize=1;用于给Proto补充信息，栈只要1格内存来存Closure就足够了。pc=2*n+1;标识需要的字节码个数，一个文件两个，最后加一个return，f-&gt;code=luaM_newvector(L,pc,Instruction);创建Instruction的数组，f-&gt;sizecode=pc;最后记录到Proto里面。f-&gt;p=luaM_newvector(L,n,Proto*);创建存储每个文件Proto的数组，f-&gt;sizep=n;记录子Proto的个数(Proto可以包含数个子Proto)，pc=0;计数器归位，准备记录字节码。 12345678for (i=0; i&lt;n; i++) &#123; f-&gt;p[i]=toproto(L,i-n-1); f-&gt;code[pc++]=CREATE_ABx(OP_CLOSURE,0,i); f-&gt;code[pc++]=CREATE_ABC(OP_CALL,0,1,1); &#125; f-&gt;code[pc++]=CREATE_ABC(OP_RETURN,0,1,0); return f; 记录字节码，并将构造的Proto返回。我们可以看到，所谓编译多个文件就是将每个文件都执行一遍。 lua_call函数接下来就是要讲讲，我们最重要的执行函数了，也是我们虚拟机运行的核心，对于每一个Proto里面的字节码，执行的主体就是我们的lua_call函数了。 12345678910LUA_API void lua_call (lua_State *L, int nargs, int nresults) &#123; StkId func; lua_lock(L); api_checknelems(L, nargs+1); checkresults(L, nargs, nresults); func = L-&gt;top - (nargs+1); luaD_call(L, func, nresults); adjustresults(L, nresults); lua_unlock(L);&#125; lua_lock(L);和lua_unlock(L);顾名思义就是用来锁住L，防止操作还没结束就被其它线程改变，但其实在lua里并没有实现此方法，而是定义宏来提供接口，只把lua当一次性脚本的话，不用过于关注。其实如果遇到如api_checknelems，checkresults和adjustresults之类的函数，都可以不用在意，与lua_lock()类似，不改源码的话，基本没什么用。func = L-&gt;top - (nargs+1);把函数取出来，luaD_call(L, func, nresults);才是真正来执行的函数。 ldo.c123456789101112void luaD_call (lua_State *L, StkId func, int nResults) &#123; if (++L-&gt;nCcalls &gt;= LUAI_MAXCCALLS) &#123; if (L-&gt;nCcalls == LUAI_MAXCCALLS) luaG_runerror(L, &quot;C stack overflow&quot;); else if (L-&gt;nCcalls &gt;= (LUAI_MAXCCALLS + (LUAI_MAXCCALLS&gt;&gt;3))) luaD_throw(L, LUA_ERRERR); /* error while handing stack error */ &#125; if (luaD_precall(L, func, nResults) == PCRLUA) /* is a Lua function? */ luaV_execute(L, 1); /* call it */ L-&gt;nCcalls--; luaC_checkGC(L);&#125; if (++L-&gt;nCcalls &gt;= LUAI_MAXCCALLS) &#123;主要用于检测当前嵌套函数调用个数有没有超标，少用递归的话基本不会出问题。luaD_precall(L, func, nResults)预调用，如果func是C闭包的话就直接执行并返回PCRC，如果是lua闭包就做好运行准备，比如修改虚拟机的CallInfo，调整base指针之类的，这些是编程细节，不是我们学习的重点，最后会返回PCRLUA，然后接着执行luaV_execute(L, 1)，这个函数是执行字节码的真正函数，实现的话就是一个个去比对然后执行，没什么看头。luaD_precall其实还会返回一个与协程相关的PCRYIELD。L-&gt;nCcalls--;函数嵌套减一，luaC_checkGC(L);垃圾回收操作。至于lua_pcall它最终也是通过luaD_call实现调用，只不过增加了保护措施，防止程序中断，而lua_cpcall则与lua_pcall有类似的实现方式，最终仍是回到luaD_call，就不过多赘述了。 后记至此lua源码的大致框架和核心部分已经叙述完了，但其实还没有结束，比如Debug，GC机制，协程的实现等都没有讲到。任何源码都是庞大的，其实我们没必要面面俱到，而应先了解其基本框架，再去了解我们想知道的部分就足够了。不要忘了，我们读源码不是要折磨自己，而是想学习优秀的范式。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"源码","slug":"源码","permalink":"http://example.com/tags/%E6%BA%90%E7%A0%81/"}]},{"title":"lua通读之lua的基本使用","slug":"lua通读之lua的基础内容","date":"2021-11-08T02:06:59.000Z","updated":"2022-10-14T23:47:06.798Z","comments":true,"path":"archives/2021-11-08-lua通读之lua的基础内容/","link":"","permalink":"http://example.com/archives/2021-11-08-lua%E9%80%9A%E8%AF%BB%E4%B9%8Blua%E7%9A%84%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/","excerpt":"","text":"前言lua是我最喜欢的脚本语言，没有之一。主要还是它轻巧，并包含了程序设计最基本的内容，而且基本没有多余的扩展库，也致使了它强大的扩展性。虽然我最早接触lua是学习cocos2dx游戏引擎的时候，但我却对它终身难望。不过如今的时代，lua或许已经无法满足如今快速开发的时代需求了，cocos2dx的原生版本也因无法高效地开发3A大作而永远定格在了4.0。但想起以前使用lua的日子，我决定写下这个系列，以此纪念当初研究技术的时光。 基本的开发环境Ubuntu20.04，Android7.1.1+Termux，lua5.1 关于使用lua5.1的说明： 首先5.1是lua的一次大变革版本，其次许多扩展都基于此版本，最后后来版本的变化不大。 lua的基本内容下载lua5.1.5源码，然后直接make编译，我们可以得到一下核心文件： 123456#lua的头文件，用于嵌入开发lua.h lauxlib.h lualib.h luaconfig.h#lua运行的基本动态库liblua51.so#lua的主程序lua luac lua用于直接解释lua脚本，luac用于将lua脚本编译为在lua虚拟机上的字节码文件。关于下部分以后讲，我们先专注于lua的基本内容。 lua的基本使用一些废话如果讲一门语言的使用，从变量的基本使用讲到控制语句，再讲一些如面向对象，反射等的使用的话，我认为这是在讲程序设计而非一门语言，这些都是任何语言都具备的基本内容，无非是写法的不同罢了。你跟我讲lua没有switch语句，不能var++运算，C语言没有面向对象，C++没有反射机制，还有go那”奇怪”的变量声明，python的强制缩进，object-C的奇特风格语句。后面写的有点离谱了，但事实上，各种语言的一些特性其实记住就行了，在我看来这算不算学习。我们通过lua来讲讲，学习一门语言的核心是什么。 数据的存在形式引入我最早学习的语言是java，可能是教程不行，我一直不知道对于数组使用=传递的是引用，因为它们和int,String之类的似乎没什么区别——可以直接声明出来，因为String基本用于存储不变的字符串，基本不会遇到问题。所以导致了可以运行，但结果怎么也不对的bug，这才是最让人奔溃的事情。如今很多的人崇尚面向对象，讨厌指针，大多都是被那种为了教育而编制的离谱而脱离实际的指针题目给吓怕了，比如C++的模板和运算符的重载，真的有使用的必要吗？说实话，除了写起来简便，它基本没有意义。不过将typedef和#define用于版本兼容还是有必要的。 正文本来应该从源码角度来说明数据类型，不过为了多写几篇，就算了。在编程里面，产生数据有两种方式，一种是立即数据，一种是变量存储的数据。这可以直接从两种代码直接理解： 12345#立即数据 &quot;Hello World&quot;print(&quot;Hello World&quot;)#由变量a存储的数据a = &quot;Hello World&quot;print(a) 或许你的感觉不太深，但如果是这样的python代码可能就有些感觉了： 1&#x27; &#x27;.join([&#x27;Hello&#x27;, &#x27;World&#x27;]) 在这里‘ ’就返回了一个string的对象。不论是立即数据还是变量存储的数据，我们需要关注的是它的返回和在程序中的存在形式。数据的存在形式只有两种，一是基本数据类型，二是引用数据类型，或者固定大小与可变大小，或者非指针数据与指针数据。比较特别的是string，不过是在其它语言里面，在c系列里，我们应该理解string的长度也是不可变的。对于lua，nil、布尔和字符串类型都比较简单，就直接跳过了，我们先说一下lua的数字类型。在此之前，不知有没有人把浮点数就认为是小数的，其实我以前也有这个错误的认识，但事实上，浮点数等同于用科学计数法表示的数，可以是大整数也可以是小数，lua的数字本质是double类型，可以在lua的源码里面看出来，lua有自己的一套数字管理体系，但数字大到一定程度会自动用科学计数法表示为浮点数，比如下面的代码: 12345a = 9999999999999999999999999999999999999999999999999while(true) do a = a + 1 print(a)end 的输出结果一直都是1e+49。对于数据的管理是很重要的，理解机制更加重要，计算机的本质是对数据的处理，如果数据的存储方式不理解的话，就会有许多数据处理的问题。比如在C或Java里面使用int写个大整数的话，还可能出现负数，这其实才是学习一门语言需要真正地关注点，说起这个python可以处理无限大整数确实是有点意思。感觉接下来说函数闭包和表就有点索然无味了，他两本质都是指针型变量，一个指向函数，一个指向表格数据，也就是说它俩传递的都是引用。函数指针与C语言类似，可以在变量间传递，唯一奇特的就是，这种数据有两种返回方式，一种不加括号返回函数本身，一种加括号返回函数内部return的返回值，如果深入源码，理解Proto的话，可能会知道更多，不过还是留到以后吧。对于表格，我们需要知道的是其内部有两种存储类型，一种是Hash，另一种是Array，这也对应了两种索引方式，使用string类型的key或者数字。在lua里取出表项的个数的特殊符#，但使用的时候要注意它只能返回Array部分的长度，如下代码： 12tab = &#123;1, 2, k=1, b=2&#125;print(#tab) 返回的结果是2。 插曲看到这，你或许觉得我说的都没有用处，而且没有学到任何实际的东西。但就如我之前所说，只要学过程序设计，接下来无非就是记住不同的表达，并实践而且熟练罢了。真正痛苦的bug不是无法运行，而是因为理解不深而导致结果与想象不同的bug。而数据存储正占了其中的一大部分，只有理解数据的机制才能防止数据的失真和被优化，在不同语言之中一般都是不同的，这才是我们学习语言该学的东西。 变量的作用域看下面这段代码: 123456function fun1() a = 1enda = 2fun1()print(a) 发现结果是1。一般代码当然不会这么写，但一旦多起来就会自己搞混了，这里只是举一个例子。与javascript和python这些语言不同，lua默认的作用域是全局，必需声明local 才能局限在函数内。我以前使用cocos2dlua时也因为这个吃了不少亏，才记住了它。我又想说从源码角度理解，算了不要再说了，到时候内容比重就不对了。 输入与返回lua有种通过函数来封装数据类型的方式，看如下代码: 12345678910add = (function () local num = 1 local add = function() num = nun + 1 print(num) end return add end)()add()add() 打印结果是2,3。怎么样没有晕吧，其实就是通过函数封装了一个变量。外面的add其实是function内部的add通过return返回的结果。其实如果理解lua的数据类型(我之前说的那几种)，同时理解程序每段返回什么其实理解起来并不能。这里就是定义了一个函数并执行，然后将返回值传给add。我只能说只可意会不可言传。到此我基本将lua一些比较核心的有关数据的注意点都讲到了。有句话我很喜欢“程序=数据结构+算法”，正确认识数据在程序中的样子，是发挥出我们构建优质数据结构的基础，而这有是我们设计算法的起点。虽然我也不想当一个“面向API”的程序员，但熟悉一门语言提供的本地api至少可以让你少走弯路。 lua的本地api没有print()，你的编程就难以开始，所以了解本地api是认识一门语言基本架构的基础。lua提供了两类api，一种不带前缀如print()，另一种带前缀如math.floor()，以后我们分别称为基本函数和库函数。事实上使用type(math)就可以发现后一种实际上是一个表。点一般不能作为标识符，当然还有像R语言那样的特例。这里我想说一下lua的一个用法，通过表来构建面向对象。 面向对象面向对象是一种数据存储的方式，封装、继承、多态是其本质。有许多第三方库封装了lua面向对象的特性，但实际上抓住面向对象的本质，自己也是可以构建的。lua通过表构建的面向对象，不能提供多重的数据保护方式(private,protected,public)，实际上这并非很重要，要知道面向对象的语言也是基于面向过程开发的，其目的大概只是为了便于开发，但在大部分的教学里都被神话，属实有点不能理解。以下是一个简单的例子，不过多赘述，顶多注意一下lua语法糖的特性： 123456789101112131415161718192021local Person = &#123; age=0, getAge=function(self) return self.age end&#125;function Person.init(self, name) self.name = nameendPerson.getName = function(self) return self.nameendfunction Person:grow() self.age = self.age + 1endPerson.init(Person, &quot;老王&quot;)print(Person:getName())print(Person.getAge(Person))Person:grow()Person.grow(Person)print(Person:getAge()) self的作用主要是指向表的变量，因为在表里的函数访问不到同在表内的变量，所以传一个self指针来指向表，你可以回想一下python的面向对象大概也就是这么一回事。 lua本地的全局变量_VERSION是一个存储当前lua版本的字符串，如我的就是“Lua 5.1”。_G用来存储全局变量的表，所有没有local声明的变量都存在这里，实际上如官方所说没有动的必要，使用_G[&quot;print&quot;]()与使用print()是一样的。 lua的本地函数元表getmetatable(object)、setmetatable(table,metatable)、rawequal(v1,v2)、rawget(table,index)、rawset(table, index,value)这一系列函数，用来改变表的各种行为，类似于C++的重载，没有必要的话，不推荐使用，使用表封装为对象，用函数代替重载，比较好些。 函数环境getfenv([f])、setfenv(f,table)之前说过全局变量有张表_G,而调用print等同于调用_G[&quot;print&quot;]，这些函数就是来改变_G，个人认为通过require分类，比较有用，这个如同元表感觉是没什么大用的东西，事实上也基本没用过，而且后面的版本已经删掉了。 垃圾回收collectgarbage([opt[,arg]])实际上对于api看官方文档才是正道，它又全面又详细，比我解说几百遍都好。总之就是你不用关注这个，交给系统就行了，除非你需要如jvm一样需要调优。 调试assert(v[,message])、error(message[, level])类似print不过可以中断程序，输出错误轨迹，但使用库debug可以得到更多信息，所以看个人爱好吧。对于debug库看文档吧。 脚本载入与执行dofile([filename])、load(func [, chunkname])、loadfile([filename])、loadstring (string[,chunkname])这些基本都是动态解释语言才有的特性，比如javascript的eval()，至于为什么你自己去想想编译原理吧。 遍历表格ipairs(t)、pairs(t)，前一个用来遍历Array部分，后一个用来遍历Hash部分，lua这种共存确实挺神奇的。还有一个next(table[,index])，基本没用过。 包管理module (name[,···])、require(modname)。这部分还是挺重要的，不过lua一般不做大型项目，除了在cocos2dlua里，基本就没有用过。这可以类比java的package或者C++系列的namespace，又或者python的import。因为语言特性的不同，这些其实都有一定差异。相关配置可以使用package库里的函数。 函数调用pcall(f,arg1,···)、xpcall(f,err)，lua动态语言的体现之一，前后相似，区别在于报错调试。基本没用过。 其它这些都是lua脚本内常用的函数。print(···)输出到stdout，学习的起点。type(v)类别输出，变量类型可变，需求很大。tonumber(e[,base])、tostring(e)类别转化，百用不腻。select(index,···)参数检验，命令行必备。unpack(list[,i[,j]])表的快捷拆解，数据的福音。都是比喻，不要在意了。 io库io.*获得对象，通过file:*调用相关函数，通过源码可以知道，相对路径是lua解释器的位置，这值得注意。 math库math.*提供各项数学运算，数据处理必备，不多言。 os库os.*提供系统信息，调用系统命令，总之就是很有用。 string库和table库分别提供字符串与表的处理，用处多大不用我明说。 coroutine库提供协程操做，这个其实很好理解。将一段代码封装在一个协程里，并提供暂停和回复的操作，用C语言里的goto也能实现，不必要的话还是不用比较好，用队列配合nio的单线程操作效果会更好。 lua的嵌入开发我认为接下来的内容才是重点，也是lua广泛应用的领域，不过大部分依赖的是luajit，两者区别我以后会从源码给出区别。两种的虚拟机基本差不多，所以讲lua原来的虚拟机有助于以后的理解。 概念首先我们先来理解一下，lua的嵌入开发是什么意思。我们先明确一点，我们的lua程序只有lua解释器自己一个进程，lua的虚拟机其实是这个进程里的一段数据。 其它部分用来存储解释过程产生的其它数据。所以我们重点关注的是lua的虚拟机，有助于我们开发的部分。所谓lua的嵌入开发主要有两部分，一是从lua脚本中调用C中的函数，另一个是从C中调用lua的函数。对于虚拟机的改造，这属于源码部分，我们以后再讲，我们现阶段的主要目的是将官方文档部分都说一遍。 需要的文件在lua的全部编译文件里，我们并不需要lua和luac两个文件，我们需要的就4个头文件和1个动态库文件。我们希望自己写一个C语言进程，这个进程来调用lua脚本满足C的一些需求。 lua与C交互原理在开发前，我们要清楚lua与C交互的过程是怎么样的。 lua虚拟机核心部分我们将从开放的C API来展开我们理应关注的部分。大部分C API的第一个参数都是lua虚拟机的指针，这与C没有面向对象的特性有关，也也是为什么要关注lua虚拟机的原因。lua虚拟机有两个重要部分——TValue组成的栈和一个全局状态机，前者用来存储lua中的各种变量和调用信息，后者用来存储全局信息。TValue由标识类别的int和具体存储数据的联合体组成，也就是说TValue就是lua数据在C源码的具体形式。当然对于数据栈我们持有相应的指针。 C与lua虚拟机的交互这样可能过于抽象了点，我们来具体实现一个简单的功能来体会一下虚拟机的用法。(我们不会涉及lua脚本，虚拟机的使用本身是C语言的事)，我们的目的是在C中实现调用lua中的print并输出“Hello world”，先上源码：(注：我的lua已经安装到系统了，头文件和库都在系统相应位置，所以可以直接调用，不过为了照顾大家，我就从源码来组织文件) main.c1234567891011121314151617#include &lt;stdio.h&gt;#include &quot;lua.h&quot;#include &quot;lualib.h&quot;#include &quot;lauxlib.h&quot;#include &quot;luaconf.h&quot;int main(int argc, char** argv) &#123; lua_State* L = lua_open(); luaL_openlibs(L); lua_getfield(L, LUA_GLOBALSINDEX, &quot;print&quot;); lua_pushstring(L, &quot;Hello World&quot;); lua_call(L, 1, 0); lua_close(L);&#125; 操作看下面命令行。 我们一句句来看，来理解一下lua在C里的运行方式。 12lua_State* L = lua_open();luaL_openlibs(L); 创建一个虚拟机，并导入lua库，我们要使用lua的print，所以第二步是必须的。 1lua_getfield(L, LUA_GLOBALSINDEX, &quot;print&quot;); 从全局表LUA_GLOBALSINDEX处获取print对应的TValue并放入栈顶。lua_getglobal(L, &quot;print&quot;);也可以达到同样的效果。 1lua_pushstring(L, &quot;Hello World&quot;); 将字符串“Hello World”推入栈顶。 1lua_call(L, 1, 0); 调用函数一个参数，零个返回值。这样大致就能了解虚拟机的基本运算机制了，先将要调用的函数入栈，再压入参数，调用函数将返回值入栈到函数位置。这样C语言与lua虚拟的交互大致就能理解了，那么lua脚本又是一个怎样的存在呢？ lua与lua虚拟机我们将从int lua_load (lua_State *L,lua_Reader reader,void *data,const char *chunkname);这个函数分析lua是怎么进入虚拟机的。事实上，官方的lua程序是通过int luaL_dofile (lua_State *L, const char *filename);这个封装过的函数实现的，但文档下面也说了，它是这样实现的 (luaL_loadfile(L, filename) || lua_pcall(L, 0, LUA_MULTRET, 0))。我们先来解读参数，第一个跳过，第二个要传入官方指定的一种固定格式的函数Lua_Reader，具体是这样的typedef const char * (*lua_Reader) (lua_State *L, void *data, size_t *size);data是之前调用lua_load里传入的data如果读取文件的话，可以使用文件描述符,size指针用来返回读取了多少数据。等下我给出个简单的例子。load的第三个参数用来表述数据源，但实际上返回结果是通过Lua_Reader的函数，最后一个参数传入名称，跟官方文档lua_load最后会在栈顶产生一个function指针，它的名字就是最后一个参数。一般函数入栈后名字意义不大，主要用于运行是调试定位，我们以后再讲。至此我们已经可以近似实现dofile的功能，代码如下： main.c123456789101112131415161718192021222324252627282930313233343536373839#include &lt;stdio.h&gt;#include &quot;lua.h&quot;#include &quot;lualib.h&quot;#include &quot;lauxlib.h&quot;#include &quot;luaconf.h&quot;//先依据文档写一个lua_Readerstatic const char* getFile(lua_State* L, void* data, size_t* size) &#123; //取出描述符 FILE* f = (FILE*) data; //是否读完 if(feof(f)) return NULL; //定义一个缓存区 char* buff[LUAL_BUFFERSIZE]; //读取文件，记录读取的大小 *size = fread(buff, 1, sizeof(buff), f); //返回读取内容 return (*size &gt; 0) ? buff : NULL;&#125;int main(int argc, char** argv) &#123; //基本操作 lua_State* L = lua_open(); luaL_openlibs(L); //打开文件 FILE* f = fopen(&quot;main.lua&quot;, &quot;r&quot;); //载入文件到lua虚拟机 lua_load(L, getFile, f, &quot;test&quot;); //看看状态信息 printf(&quot;栈的大小:%d\\n&quot;, lua_gettop(L)); printf(&quot;栈顶的数据类型:%s\\n&quot;, luaL_typename(L, -1)); //调用栈顶的函数 lua_call(L, 0, 0); fclose(f); lua_close(L);&#125; main.lua1print(&quot;Hello World&quot;) 结果如下： 全局状态机对于栈说的差不多了，我们还要讲虚拟机一个比较重要的部分。之前我们讲过lua有一个全局变量_G,这个变量存储了所有的库函数和全局变量(事实上还有_G[&quot;_G&quot;]=_G)。在C语言内，我们就可以通过lua_getglobal(key)来获取这个变量相应key对应的值。不过官方给了这个#define lua_getglobal(L,s) lua_getfield(L, LUA_GLOBALSINDEX, s),而lua_getfield()基本不用，就不管了,使用lua_getglobal(L,s)基本可以获得所有的东西了。一个例子就可以带过了： main.c1234567891011121314151617181920#include &lt;stdio.h&gt;#include &quot;lua.h&quot;#include &quot;lualib.h&quot;#include &quot;lauxlib.h&quot;#include &quot;luaconf.h&quot;int main(int argc, char** argv) &#123; //基本操作 lua_State* L = lua_open(); luaL_dofile(L, &quot;data.lua&quot;); printf(&quot;data.lua的返回值=%d\\n&quot;, lua_tointeger(L, -1)); lua_getfield(L, LUA_GLOBALSINDEX, &quot;a&quot;); printf(&quot;a的值=%d\\n&quot;, lua_tointeger(L, -1)); lua_getglobal(L, &quot;b&quot;); printf(&quot;b的值=%s\\n&quot;, lua_tostring(L, -1)); lua_close(L);&#125; data.lua123a = 12b = &quot;Hello World&quot;return 4 不过还要说一下，C如何往全局状态机写入数据，实际上理解原理以后也是挺简单的，直接给一个例子吧： main.c1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &quot;lua.h&quot;#include &quot;lualib.h&quot;#include &quot;lauxlib.h&quot;#include &quot;luaconf.h&quot;//我们实现一个简单的加法//函数固有格式static int myadd(lua_State* L) &#123; //取出两个参数 double num1 = lua_tonumber(L, -1); double num2 = lua_tonumber(L, -2); //把两个参数弹出 lua_pop(L, 2); //相加后推入结果 lua_pushnumber(L, num1+num2); //返回返回值的个数 return 1;&#125;int main(int argc, char** argv) &#123; lua_State* L = lua_open(); luaL_openlibs(L); //值得注意的是对lua虚拟机所有数据要先入栈 lua_pushstring(L, &quot;Hello World&quot;); //先全局添加变量 lua_setglobal(L, &quot;str&quot;); //向全局添加函数，值得注意函数有固定格式 //lua调用时会将参数放入栈顶 //C则将返回值放入栈 lua_register(L, &quot;add&quot;, myadd); luaL_dofile(L, &quot;valid.lua&quot;); lua_close(L);&#125; valid.lua12print(str)print(add(1, 2)) 例子是最好的老师，多写多尝试就不会太难。 总结至此，我们差不多说完了lua和C与虚拟机的基本交互了。我们通过lua_load函数将描述符对应的lua代码打包为一个函数并推入lua虚拟机栈。C则通过对虚拟机栈的操做实现代码的执行。实际上，C语言执行的代码属于lua字节码，在执行lua_load的时候已经将文件编译成了C下可执行的字节码，这个留到以后讲吧。 结尾到此，我觉得对lua的整体框架已经讲得差不多了，更多的还是得看官方文档，比如lauxlib.h封装了一些便于对虚拟机操作的函数，都值得好好去用以用。就如开始所说，我们虽然不能不学API，但我们不能面向API编程，而应从API去理解运作机理，这样才能更好的使用API。写了这么久，也该结束了。","categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"}],"tags":[{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"程序设计","slug":"程序设计","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"计划","slug":"计划","date":"2021-11-06T11:18:59.000Z","updated":"2022-10-14T23:47:09.518Z","comments":true,"path":"archives/2021-11-06-计划/","link":"","permalink":"http://example.com/archives/2021-11-06-%E8%AE%A1%E5%88%92/","excerpt":"","text":"接下来的计划，大概就是一边学习新东西，一边总结以前所学，并总结成文章。预告一波，接下来的我要讲lua这门似乎淘汰的脚本语言。预计时间一个月完结，不算太长，毕竟好事多磨嘛。","categories":[],"tags":[]},{"title":"无能为力","slug":"无能为力","date":"2021-11-05T08:57:47.000Z","updated":"2022-10-14T23:47:08.078Z","comments":true,"path":"archives/2021-11-05-无能为力/","link":"","permalink":"http://example.com/archives/2021-11-05-%E6%97%A0%E8%83%BD%E4%B8%BA%E5%8A%9B/","excerpt":"","text":"深网真就如同人心一般难以捉摸啊。fbfe5ce1","categories":[],"tags":[]},{"title":"我的前方是什么？","slug":"前路","date":"2021-11-04T12:29:41.000Z","updated":"2022-10-14T23:47:06.919Z","comments":true,"path":"archives/2021-11-04-前路/","link":"","permalink":"http://example.com/archives/2021-11-04-%E5%89%8D%E8%B7%AF/","excerpt":"","text":"最近做了一次通识课的作业，不知为何深有感触，感觉做为第一篇文章在合适不过了，先把文章放出来： 不是自诩，我确实读了不少书。但忘了多少，又留了多少，连我自己也不能确定。有时自己或许就是抱着提高自己文学素养的崇高目的，但到头来却是打发无聊的读书时间。在中学的教室里，桌上当然只能放书了。所以我不懂什么就是鉴赏，该如何鉴赏。最近几天我知道了一部叫《当代英雄》的小说，知道了一个叫毕巧林的人。或许我理解与原作者表达的不同，但有一句话确实触动到我了。“我肯定负有崇高的使命，因为我感觉到心灵里充满了使不完的力量，但我不知道这使命是什么。”抛开文章历史背景与文章结构，毕竟我们不是做鉴赏的嘛，而我想说的是感悟。学校里总有一些类似就业指导中心的人会打电话来问你，有一些问题比较引起我的注意。“你为什么选这个学校？”“你为什么选这个专业？”“你对这个学校(专业)了解吗？”虽然心里很想说这还需要理由吗？但还是可以假假的扯一大堆，属时有些奇怪。但其实这些都还好，让我觉得难回答的是，“你以后想干什么？”其是考研，就业之类的都可以说。但我只想说不清楚，有时他们还会问了不了解现状和前景，我说不清楚。综合考虑的话，他们会说我迷茫。这时或许就能在毕巧林上找到自己的影子了，我也相信自己拥有崇高的使命，我也确时读了许多书，但我始终不知道自己的目标是什么，什么都可以去学学。我或许也是一个《宿命论者》，相信随着时间的推移，自己始终走在前往目标的路上。比起不断地做计划，再不断地修改，不断的为未来发愁，不如去相信那个不存在的目标，不断地挥霍那使不玩的力量。以前有人问过我的梦想是什么？肯定不能承认没有，于是就说“追求无法实现的目标”。意思其实就是————干起来就完事了，失败了大不了重开。废话说太多了，接下来才是实在的。我到底干了什么，又得到了什么。我有崇高的使命，有使不完的力量，但我的使命是什么？难到是继空虚无聊后的无所作为吗？你有否注意到视频有一个快进的按钮。到大学期末的时候，我才逐渐注意到了它。它有一个显著的作用，加速看视频。看似没什么，就和我无法理解为什么有些人那么喜欢跳过op和ed一样。有很多人大量的学习任务一般都留到期末，但课本“又臭又长”，短期实在是看不下去，于是选择去看视频。确实有些简短的视频，但终究是少数。快进的作用这不就来了吗？我作为学生，所谓的努力也就只有学习了，为了崇高的使命而学习。但讽刺的是，几天后你或许记住的只是那么几个关键词。比如，我上学期学过的《微观经济学》，印象只剩下————研究单个个体，有各种用来描述的函数，然后没了。这其实与努力的过程也有很大关系，比如读小说的时候，我会十分习惯地跳过景物、外貌之类描写。又或者是看课本的时候，主要看黑体加粗和头尾的文字。我们的目的是先整体后局部，确实挺理想的。但实际确实不知自己要做什么而导致的急切罢了。我想去怪作者他们写得又臭又长，想认真读感觉都是废话，但稍微快点却又跟不上节奏了，可是能把复杂的道理讲得清晰又简单也是十分困难的。感慨似乎有些脱节了，但也该结束了。 上面的文章已经把我大部分想法都表达完了，我一直都认为自己华而不实，似乎知道很多东西，可以说出许多似乎很高大上的话，但事实又如何，大概和你们差不多。“除了自己的一无所知，我什么也不懂”这句话是对我自己一个比较合适的形容。我建立博客的目的，其实就是想让自己去尝试表达。无论是感触，还是自己所学，还有实践自己所学吧。当然还有一点就是，在无人的自由之地放飞自我。好了，旅途开始了…","categories":[{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"}],"tags":[{"name":"心情","slug":"心情","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85/"},{"name":"文学","slug":"文学","permalink":"http://example.com/tags/%E6%96%87%E5%AD%A6/"}]},{"title":"这里是一切的起点","slug":"start","date":"2021-11-03T14:32:43.000Z","updated":"2022-10-14T23:47:06.838Z","comments":true,"path":"archives/2021-11-03-start/","link":"","permalink":"http://example.com/archives/2021-11-03-start/","excerpt":"","text":"折腾了几天，终于完成了。本博客以简洁为主，所以就以黑白色调为主。有些地方不太完美，一方面是技术力不太够，另一方面是审美就这样。用什么搭建的底下写的清清楚楚，我也不想改。至于这里用来干嘛，随便啦，反正搜索引擎基本找不到，我在这里想说啥就说啥。就这样吧，祝贺今天博客的顺利搭建。","categories":[],"tags":[]}],"categories":[{"name":"计算机","slug":"计算机","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"},{"name":"感悟","slug":"感悟","permalink":"http://example.com/categories/%E6%84%9F%E6%82%9F/"},{"name":"理学","slug":"理学","permalink":"http://example.com/categories/%E7%90%86%E5%AD%A6/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"整理","slug":"整理","permalink":"http://example.com/tags/%E6%95%B4%E7%90%86/"},{"name":"素养","slug":"素养","permalink":"http://example.com/tags/%E7%B4%A0%E5%85%BB/"},{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"合集","slug":"合集","permalink":"http://example.com/tags/%E5%90%88%E9%9B%86/"},{"name":"未知","slug":"未知","permalink":"http://example.com/tags/%E6%9C%AA%E7%9F%A5/"},{"name":"理解","slug":"理解","permalink":"http://example.com/tags/%E7%90%86%E8%A7%A3/"},{"name":"故事","slug":"故事","permalink":"http://example.com/tags/%E6%95%85%E4%BA%8B/"},{"name":"短文","slug":"短文","permalink":"http://example.com/tags/%E7%9F%AD%E6%96%87/"},{"name":"galgame","slug":"galgame","permalink":"http://example.com/tags/galgame/"},{"name":"逆向","slug":"逆向","permalink":"http://example.com/tags/%E9%80%86%E5%90%91/"},{"name":"难题","slug":"难题","permalink":"http://example.com/tags/%E9%9A%BE%E9%A2%98/"},{"name":"猜想","slug":"猜想","permalink":"http://example.com/tags/%E7%8C%9C%E6%83%B3/"},{"name":"数学","slug":"数学","permalink":"http://example.com/tags/%E6%95%B0%E5%AD%A6/"},{"name":"定理","slug":"定理","permalink":"http://example.com/tags/%E5%AE%9A%E7%90%86/"},{"name":"完美","slug":"完美","permalink":"http://example.com/tags/%E5%AE%8C%E7%BE%8E/"},{"name":"余生","slug":"余生","permalink":"http://example.com/tags/%E4%BD%99%E7%94%9F/"},{"name":"翻译","slug":"翻译","permalink":"http://example.com/tags/%E7%BF%BB%E8%AF%91/"},{"name":"体会","slug":"体会","permalink":"http://example.com/tags/%E4%BD%93%E4%BC%9A/"},{"name":"感受","slug":"感受","permalink":"http://example.com/tags/%E6%84%9F%E5%8F%97/"},{"name":"尝鲜","slug":"尝鲜","permalink":"http://example.com/tags/%E5%B0%9D%E9%B2%9C/"},{"name":"竞赛","slug":"竞赛","permalink":"http://example.com/tags/%E7%AB%9E%E8%B5%9B/"},{"name":"Web","slug":"Web","permalink":"http://example.com/tags/Web/"},{"name":"爬虫","slug":"爬虫","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"应用","slug":"应用","permalink":"http://example.com/tags/%E5%BA%94%E7%94%A8/"},{"name":"存在","slug":"存在","permalink":"http://example.com/tags/%E5%AD%98%E5%9C%A8/"},{"name":"写实","slug":"写实","permalink":"http://example.com/tags/%E5%86%99%E5%AE%9E/"},{"name":"安全","slug":"安全","permalink":"http://example.com/tags/%E5%AE%89%E5%85%A8/"},{"name":"网络","slug":"网络","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C/"},{"name":"建模","slug":"建模","permalink":"http://example.com/tags/%E5%BB%BA%E6%A8%A1/"},{"name":"引擎","slug":"引擎","permalink":"http://example.com/tags/%E5%BC%95%E6%93%8E/"},{"name":"破解","slug":"破解","permalink":"http://example.com/tags/%E7%A0%B4%E8%A7%A3/"},{"name":"逼近","slug":"逼近","permalink":"http://example.com/tags/%E9%80%BC%E8%BF%91/"},{"name":"游戏","slug":"游戏","permalink":"http://example.com/tags/%E6%B8%B8%E6%88%8F/"},{"name":"无理数","slug":"无理数","permalink":"http://example.com/tags/%E6%97%A0%E7%90%86%E6%95%B0/"},{"name":"完备性","slug":"完备性","permalink":"http://example.com/tags/%E5%AE%8C%E5%A4%87%E6%80%A7/"},{"name":"工具","slug":"工具","permalink":"http://example.com/tags/%E5%B7%A5%E5%85%B7/"},{"name":"方程","slug":"方程","permalink":"http://example.com/tags/%E6%96%B9%E7%A8%8B/"},{"name":"编程手记","slug":"编程手记","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B%E6%89%8B%E8%AE%B0/"},{"name":"渲染","slug":"渲染","permalink":"http://example.com/tags/%E6%B8%B2%E6%9F%93/"},{"name":"文集","slug":"文集","permalink":"http://example.com/tags/%E6%96%87%E9%9B%86/"},{"name":"代数","slug":"代数","permalink":"http://example.com/tags/%E4%BB%A3%E6%95%B0/"},{"name":"几何","slug":"几何","permalink":"http://example.com/tags/%E5%87%A0%E4%BD%95/"},{"name":"心情","slug":"心情","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85/"},{"name":"心态","slug":"心态","permalink":"http://example.com/tags/%E5%BF%83%E6%80%81/"},{"name":"尺规作图","slug":"尺规作图","permalink":"http://example.com/tags/%E5%B0%BA%E8%A7%84%E4%BD%9C%E5%9B%BE/"},{"name":"调试","slug":"调试","permalink":"http://example.com/tags/%E8%B0%83%E8%AF%95/"},{"name":"代理","slug":"代理","permalink":"http://example.com/tags/%E4%BB%A3%E7%90%86/"},{"name":"VPN","slug":"VPN","permalink":"http://example.com/tags/VPN/"},{"name":"文论","slug":"文论","permalink":"http://example.com/tags/%E6%96%87%E8%AE%BA/"},{"name":"软件","slug":"软件","permalink":"http://example.com/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"终端","slug":"终端","permalink":"http://example.com/tags/%E7%BB%88%E7%AB%AF/"},{"name":"编码","slug":"编码","permalink":"http://example.com/tags/%E7%BC%96%E7%A0%81/"},{"name":"信息","slug":"信息","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF/"},{"name":"漏洞","slug":"漏洞","permalink":"http://example.com/tags/%E6%BC%8F%E6%B4%9E/"},{"name":"lua","slug":"lua","permalink":"http://example.com/tags/lua/"},{"name":"库","slug":"库","permalink":"http://example.com/tags/%E5%BA%93/"},{"name":"内存","slug":"内存","permalink":"http://example.com/tags/%E5%86%85%E5%AD%98/"},{"name":"二进制","slug":"二进制","permalink":"http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"文学","slug":"文学","permalink":"http://example.com/tags/%E6%96%87%E5%AD%A6/"},{"name":"哲学","slug":"哲学","permalink":"http://example.com/tags/%E5%93%B2%E5%AD%A6/"},{"name":"程序设计","slug":"程序设计","permalink":"http://example.com/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"},{"name":"源码","slug":"源码","permalink":"http://example.com/tags/%E6%BA%90%E7%A0%81/"}]}